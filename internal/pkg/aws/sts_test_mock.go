// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sts"
	"github.com/aws/aws-sdk-go/service/sts/stsiface"
	"sync"
)

// Ensure, that STSAPIMock does implement stsiface.STSAPI.
// If this is not the case, regenerate this file with moq.
var _ stsiface.STSAPI = &STSAPIMock{}

// STSAPIMock is a mock implementation of stsiface.STSAPI.
//
//	func TestSomethingThatUsesSTSAPI(t *testing.T) {
//
//		// make and configure a mocked stsiface.STSAPI
//		mockedSTSAPI := &STSAPIMock{
//			AssumeRoleFunc: func(assumeRoleInput *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
//				panic("mock out the AssumeRole method")
//			},
//			AssumeRoleRequestFunc: func(assumeRoleInput *sts.AssumeRoleInput) (*request.Request, *sts.AssumeRoleOutput) {
//				panic("mock out the AssumeRoleRequest method")
//			},
//			AssumeRoleWithContextFunc: func(contextMoqParam context.Context, assumeRoleInput *sts.AssumeRoleInput, options ...request.Option) (*sts.AssumeRoleOutput, error) {
//				panic("mock out the AssumeRoleWithContext method")
//			},
//			AssumeRoleWithSAMLFunc: func(assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error) {
//				panic("mock out the AssumeRoleWithSAML method")
//			},
//			AssumeRoleWithSAMLRequestFunc: func(assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput) (*request.Request, *sts.AssumeRoleWithSAMLOutput) {
//				panic("mock out the AssumeRoleWithSAMLRequest method")
//			},
//			AssumeRoleWithSAMLWithContextFunc: func(contextMoqParam context.Context, assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput, options ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error) {
//				panic("mock out the AssumeRoleWithSAMLWithContext method")
//			},
//			AssumeRoleWithWebIdentityFunc: func(assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error) {
//				panic("mock out the AssumeRoleWithWebIdentity method")
//			},
//			AssumeRoleWithWebIdentityRequestFunc: func(assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput) (*request.Request, *sts.AssumeRoleWithWebIdentityOutput) {
//				panic("mock out the AssumeRoleWithWebIdentityRequest method")
//			},
//			AssumeRoleWithWebIdentityWithContextFunc: func(contextMoqParam context.Context, assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput, options ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error) {
//				panic("mock out the AssumeRoleWithWebIdentityWithContext method")
//			},
//			DecodeAuthorizationMessageFunc: func(decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error) {
//				panic("mock out the DecodeAuthorizationMessage method")
//			},
//			DecodeAuthorizationMessageRequestFunc: func(decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput) (*request.Request, *sts.DecodeAuthorizationMessageOutput) {
//				panic("mock out the DecodeAuthorizationMessageRequest method")
//			},
//			DecodeAuthorizationMessageWithContextFunc: func(contextMoqParam context.Context, decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput, options ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error) {
//				panic("mock out the DecodeAuthorizationMessageWithContext method")
//			},
//			GetAccessKeyInfoFunc: func(getAccessKeyInfoInput *sts.GetAccessKeyInfoInput) (*sts.GetAccessKeyInfoOutput, error) {
//				panic("mock out the GetAccessKeyInfo method")
//			},
//			GetAccessKeyInfoRequestFunc: func(getAccessKeyInfoInput *sts.GetAccessKeyInfoInput) (*request.Request, *sts.GetAccessKeyInfoOutput) {
//				panic("mock out the GetAccessKeyInfoRequest method")
//			},
//			GetAccessKeyInfoWithContextFunc: func(contextMoqParam context.Context, getAccessKeyInfoInput *sts.GetAccessKeyInfoInput, options ...request.Option) (*sts.GetAccessKeyInfoOutput, error) {
//				panic("mock out the GetAccessKeyInfoWithContext method")
//			},
//			GetCallerIdentityFunc: func(getCallerIdentityInput *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
//				panic("mock out the GetCallerIdentity method")
//			},
//			GetCallerIdentityRequestFunc: func(getCallerIdentityInput *sts.GetCallerIdentityInput) (*request.Request, *sts.GetCallerIdentityOutput) {
//				panic("mock out the GetCallerIdentityRequest method")
//			},
//			GetCallerIdentityWithContextFunc: func(contextMoqParam context.Context, getCallerIdentityInput *sts.GetCallerIdentityInput, options ...request.Option) (*sts.GetCallerIdentityOutput, error) {
//				panic("mock out the GetCallerIdentityWithContext method")
//			},
//			GetFederationTokenFunc: func(getFederationTokenInput *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error) {
//				panic("mock out the GetFederationToken method")
//			},
//			GetFederationTokenRequestFunc: func(getFederationTokenInput *sts.GetFederationTokenInput) (*request.Request, *sts.GetFederationTokenOutput) {
//				panic("mock out the GetFederationTokenRequest method")
//			},
//			GetFederationTokenWithContextFunc: func(contextMoqParam context.Context, getFederationTokenInput *sts.GetFederationTokenInput, options ...request.Option) (*sts.GetFederationTokenOutput, error) {
//				panic("mock out the GetFederationTokenWithContext method")
//			},
//			GetSessionTokenFunc: func(getSessionTokenInput *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error) {
//				panic("mock out the GetSessionToken method")
//			},
//			GetSessionTokenRequestFunc: func(getSessionTokenInput *sts.GetSessionTokenInput) (*request.Request, *sts.GetSessionTokenOutput) {
//				panic("mock out the GetSessionTokenRequest method")
//			},
//			GetSessionTokenWithContextFunc: func(contextMoqParam context.Context, getSessionTokenInput *sts.GetSessionTokenInput, options ...request.Option) (*sts.GetSessionTokenOutput, error) {
//				panic("mock out the GetSessionTokenWithContext method")
//			},
//		}
//
//		// use mockedSTSAPI in code that requires stsiface.STSAPI
//		// and then make assertions.
//
//	}
type STSAPIMock struct {
	// AssumeRoleFunc mocks the AssumeRole method.
	AssumeRoleFunc func(assumeRoleInput *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error)

	// AssumeRoleRequestFunc mocks the AssumeRoleRequest method.
	AssumeRoleRequestFunc func(assumeRoleInput *sts.AssumeRoleInput) (*request.Request, *sts.AssumeRoleOutput)

	// AssumeRoleWithContextFunc mocks the AssumeRoleWithContext method.
	AssumeRoleWithContextFunc func(contextMoqParam context.Context, assumeRoleInput *sts.AssumeRoleInput, options ...request.Option) (*sts.AssumeRoleOutput, error)

	// AssumeRoleWithSAMLFunc mocks the AssumeRoleWithSAML method.
	AssumeRoleWithSAMLFunc func(assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error)

	// AssumeRoleWithSAMLRequestFunc mocks the AssumeRoleWithSAMLRequest method.
	AssumeRoleWithSAMLRequestFunc func(assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput) (*request.Request, *sts.AssumeRoleWithSAMLOutput)

	// AssumeRoleWithSAMLWithContextFunc mocks the AssumeRoleWithSAMLWithContext method.
	AssumeRoleWithSAMLWithContextFunc func(contextMoqParam context.Context, assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput, options ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error)

	// AssumeRoleWithWebIdentityFunc mocks the AssumeRoleWithWebIdentity method.
	AssumeRoleWithWebIdentityFunc func(assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error)

	// AssumeRoleWithWebIdentityRequestFunc mocks the AssumeRoleWithWebIdentityRequest method.
	AssumeRoleWithWebIdentityRequestFunc func(assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput) (*request.Request, *sts.AssumeRoleWithWebIdentityOutput)

	// AssumeRoleWithWebIdentityWithContextFunc mocks the AssumeRoleWithWebIdentityWithContext method.
	AssumeRoleWithWebIdentityWithContextFunc func(contextMoqParam context.Context, assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput, options ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error)

	// DecodeAuthorizationMessageFunc mocks the DecodeAuthorizationMessage method.
	DecodeAuthorizationMessageFunc func(decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error)

	// DecodeAuthorizationMessageRequestFunc mocks the DecodeAuthorizationMessageRequest method.
	DecodeAuthorizationMessageRequestFunc func(decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput) (*request.Request, *sts.DecodeAuthorizationMessageOutput)

	// DecodeAuthorizationMessageWithContextFunc mocks the DecodeAuthorizationMessageWithContext method.
	DecodeAuthorizationMessageWithContextFunc func(contextMoqParam context.Context, decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput, options ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error)

	// GetAccessKeyInfoFunc mocks the GetAccessKeyInfo method.
	GetAccessKeyInfoFunc func(getAccessKeyInfoInput *sts.GetAccessKeyInfoInput) (*sts.GetAccessKeyInfoOutput, error)

	// GetAccessKeyInfoRequestFunc mocks the GetAccessKeyInfoRequest method.
	GetAccessKeyInfoRequestFunc func(getAccessKeyInfoInput *sts.GetAccessKeyInfoInput) (*request.Request, *sts.GetAccessKeyInfoOutput)

	// GetAccessKeyInfoWithContextFunc mocks the GetAccessKeyInfoWithContext method.
	GetAccessKeyInfoWithContextFunc func(contextMoqParam context.Context, getAccessKeyInfoInput *sts.GetAccessKeyInfoInput, options ...request.Option) (*sts.GetAccessKeyInfoOutput, error)

	// GetCallerIdentityFunc mocks the GetCallerIdentity method.
	GetCallerIdentityFunc func(getCallerIdentityInput *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error)

	// GetCallerIdentityRequestFunc mocks the GetCallerIdentityRequest method.
	GetCallerIdentityRequestFunc func(getCallerIdentityInput *sts.GetCallerIdentityInput) (*request.Request, *sts.GetCallerIdentityOutput)

	// GetCallerIdentityWithContextFunc mocks the GetCallerIdentityWithContext method.
	GetCallerIdentityWithContextFunc func(contextMoqParam context.Context, getCallerIdentityInput *sts.GetCallerIdentityInput, options ...request.Option) (*sts.GetCallerIdentityOutput, error)

	// GetFederationTokenFunc mocks the GetFederationToken method.
	GetFederationTokenFunc func(getFederationTokenInput *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error)

	// GetFederationTokenRequestFunc mocks the GetFederationTokenRequest method.
	GetFederationTokenRequestFunc func(getFederationTokenInput *sts.GetFederationTokenInput) (*request.Request, *sts.GetFederationTokenOutput)

	// GetFederationTokenWithContextFunc mocks the GetFederationTokenWithContext method.
	GetFederationTokenWithContextFunc func(contextMoqParam context.Context, getFederationTokenInput *sts.GetFederationTokenInput, options ...request.Option) (*sts.GetFederationTokenOutput, error)

	// GetSessionTokenFunc mocks the GetSessionToken method.
	GetSessionTokenFunc func(getSessionTokenInput *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error)

	// GetSessionTokenRequestFunc mocks the GetSessionTokenRequest method.
	GetSessionTokenRequestFunc func(getSessionTokenInput *sts.GetSessionTokenInput) (*request.Request, *sts.GetSessionTokenOutput)

	// GetSessionTokenWithContextFunc mocks the GetSessionTokenWithContext method.
	GetSessionTokenWithContextFunc func(contextMoqParam context.Context, getSessionTokenInput *sts.GetSessionTokenInput, options ...request.Option) (*sts.GetSessionTokenOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AssumeRole holds details about calls to the AssumeRole method.
		AssumeRole []struct {
			// AssumeRoleInput is the assumeRoleInput argument value.
			AssumeRoleInput *sts.AssumeRoleInput
		}
		// AssumeRoleRequest holds details about calls to the AssumeRoleRequest method.
		AssumeRoleRequest []struct {
			// AssumeRoleInput is the assumeRoleInput argument value.
			AssumeRoleInput *sts.AssumeRoleInput
		}
		// AssumeRoleWithContext holds details about calls to the AssumeRoleWithContext method.
		AssumeRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AssumeRoleInput is the assumeRoleInput argument value.
			AssumeRoleInput *sts.AssumeRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AssumeRoleWithSAML holds details about calls to the AssumeRoleWithSAML method.
		AssumeRoleWithSAML []struct {
			// AssumeRoleWithSAMLInput is the assumeRoleWithSAMLInput argument value.
			AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
		}
		// AssumeRoleWithSAMLRequest holds details about calls to the AssumeRoleWithSAMLRequest method.
		AssumeRoleWithSAMLRequest []struct {
			// AssumeRoleWithSAMLInput is the assumeRoleWithSAMLInput argument value.
			AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
		}
		// AssumeRoleWithSAMLWithContext holds details about calls to the AssumeRoleWithSAMLWithContext method.
		AssumeRoleWithSAMLWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AssumeRoleWithSAMLInput is the assumeRoleWithSAMLInput argument value.
			AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AssumeRoleWithWebIdentity holds details about calls to the AssumeRoleWithWebIdentity method.
		AssumeRoleWithWebIdentity []struct {
			// AssumeRoleWithWebIdentityInput is the assumeRoleWithWebIdentityInput argument value.
			AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
		}
		// AssumeRoleWithWebIdentityRequest holds details about calls to the AssumeRoleWithWebIdentityRequest method.
		AssumeRoleWithWebIdentityRequest []struct {
			// AssumeRoleWithWebIdentityInput is the assumeRoleWithWebIdentityInput argument value.
			AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
		}
		// AssumeRoleWithWebIdentityWithContext holds details about calls to the AssumeRoleWithWebIdentityWithContext method.
		AssumeRoleWithWebIdentityWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AssumeRoleWithWebIdentityInput is the assumeRoleWithWebIdentityInput argument value.
			AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DecodeAuthorizationMessage holds details about calls to the DecodeAuthorizationMessage method.
		DecodeAuthorizationMessage []struct {
			// DecodeAuthorizationMessageInput is the decodeAuthorizationMessageInput argument value.
			DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
		}
		// DecodeAuthorizationMessageRequest holds details about calls to the DecodeAuthorizationMessageRequest method.
		DecodeAuthorizationMessageRequest []struct {
			// DecodeAuthorizationMessageInput is the decodeAuthorizationMessageInput argument value.
			DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
		}
		// DecodeAuthorizationMessageWithContext holds details about calls to the DecodeAuthorizationMessageWithContext method.
		DecodeAuthorizationMessageWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DecodeAuthorizationMessageInput is the decodeAuthorizationMessageInput argument value.
			DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetAccessKeyInfo holds details about calls to the GetAccessKeyInfo method.
		GetAccessKeyInfo []struct {
			// GetAccessKeyInfoInput is the getAccessKeyInfoInput argument value.
			GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
		}
		// GetAccessKeyInfoRequest holds details about calls to the GetAccessKeyInfoRequest method.
		GetAccessKeyInfoRequest []struct {
			// GetAccessKeyInfoInput is the getAccessKeyInfoInput argument value.
			GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
		}
		// GetAccessKeyInfoWithContext holds details about calls to the GetAccessKeyInfoWithContext method.
		GetAccessKeyInfoWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAccessKeyInfoInput is the getAccessKeyInfoInput argument value.
			GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetCallerIdentity holds details about calls to the GetCallerIdentity method.
		GetCallerIdentity []struct {
			// GetCallerIdentityInput is the getCallerIdentityInput argument value.
			GetCallerIdentityInput *sts.GetCallerIdentityInput
		}
		// GetCallerIdentityRequest holds details about calls to the GetCallerIdentityRequest method.
		GetCallerIdentityRequest []struct {
			// GetCallerIdentityInput is the getCallerIdentityInput argument value.
			GetCallerIdentityInput *sts.GetCallerIdentityInput
		}
		// GetCallerIdentityWithContext holds details about calls to the GetCallerIdentityWithContext method.
		GetCallerIdentityWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetCallerIdentityInput is the getCallerIdentityInput argument value.
			GetCallerIdentityInput *sts.GetCallerIdentityInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetFederationToken holds details about calls to the GetFederationToken method.
		GetFederationToken []struct {
			// GetFederationTokenInput is the getFederationTokenInput argument value.
			GetFederationTokenInput *sts.GetFederationTokenInput
		}
		// GetFederationTokenRequest holds details about calls to the GetFederationTokenRequest method.
		GetFederationTokenRequest []struct {
			// GetFederationTokenInput is the getFederationTokenInput argument value.
			GetFederationTokenInput *sts.GetFederationTokenInput
		}
		// GetFederationTokenWithContext holds details about calls to the GetFederationTokenWithContext method.
		GetFederationTokenWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetFederationTokenInput is the getFederationTokenInput argument value.
			GetFederationTokenInput *sts.GetFederationTokenInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetSessionToken holds details about calls to the GetSessionToken method.
		GetSessionToken []struct {
			// GetSessionTokenInput is the getSessionTokenInput argument value.
			GetSessionTokenInput *sts.GetSessionTokenInput
		}
		// GetSessionTokenRequest holds details about calls to the GetSessionTokenRequest method.
		GetSessionTokenRequest []struct {
			// GetSessionTokenInput is the getSessionTokenInput argument value.
			GetSessionTokenInput *sts.GetSessionTokenInput
		}
		// GetSessionTokenWithContext holds details about calls to the GetSessionTokenWithContext method.
		GetSessionTokenWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetSessionTokenInput is the getSessionTokenInput argument value.
			GetSessionTokenInput *sts.GetSessionTokenInput
			// Options is the options argument value.
			Options []request.Option
		}
	}
	lockAssumeRole                            sync.RWMutex
	lockAssumeRoleRequest                     sync.RWMutex
	lockAssumeRoleWithContext                 sync.RWMutex
	lockAssumeRoleWithSAML                    sync.RWMutex
	lockAssumeRoleWithSAMLRequest             sync.RWMutex
	lockAssumeRoleWithSAMLWithContext         sync.RWMutex
	lockAssumeRoleWithWebIdentity             sync.RWMutex
	lockAssumeRoleWithWebIdentityRequest      sync.RWMutex
	lockAssumeRoleWithWebIdentityWithContext  sync.RWMutex
	lockDecodeAuthorizationMessage            sync.RWMutex
	lockDecodeAuthorizationMessageRequest     sync.RWMutex
	lockDecodeAuthorizationMessageWithContext sync.RWMutex
	lockGetAccessKeyInfo                      sync.RWMutex
	lockGetAccessKeyInfoRequest               sync.RWMutex
	lockGetAccessKeyInfoWithContext           sync.RWMutex
	lockGetCallerIdentity                     sync.RWMutex
	lockGetCallerIdentityRequest              sync.RWMutex
	lockGetCallerIdentityWithContext          sync.RWMutex
	lockGetFederationToken                    sync.RWMutex
	lockGetFederationTokenRequest             sync.RWMutex
	lockGetFederationTokenWithContext         sync.RWMutex
	lockGetSessionToken                       sync.RWMutex
	lockGetSessionTokenRequest                sync.RWMutex
	lockGetSessionTokenWithContext            sync.RWMutex
}

// AssumeRole calls AssumeRoleFunc.
func (mock *STSAPIMock) AssumeRole(assumeRoleInput *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
	if mock.AssumeRoleFunc == nil {
		panic("STSAPIMock.AssumeRoleFunc: method is nil but STSAPI.AssumeRole was just called")
	}
	callInfo := struct {
		AssumeRoleInput *sts.AssumeRoleInput
	}{
		AssumeRoleInput: assumeRoleInput,
	}
	mock.lockAssumeRole.Lock()
	mock.calls.AssumeRole = append(mock.calls.AssumeRole, callInfo)
	mock.lockAssumeRole.Unlock()
	return mock.AssumeRoleFunc(assumeRoleInput)
}

// AssumeRoleCalls gets all the calls that were made to AssumeRole.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleCalls())
func (mock *STSAPIMock) AssumeRoleCalls() []struct {
	AssumeRoleInput *sts.AssumeRoleInput
} {
	var calls []struct {
		AssumeRoleInput *sts.AssumeRoleInput
	}
	mock.lockAssumeRole.RLock()
	calls = mock.calls.AssumeRole
	mock.lockAssumeRole.RUnlock()
	return calls
}

// AssumeRoleRequest calls AssumeRoleRequestFunc.
func (mock *STSAPIMock) AssumeRoleRequest(assumeRoleInput *sts.AssumeRoleInput) (*request.Request, *sts.AssumeRoleOutput) {
	if mock.AssumeRoleRequestFunc == nil {
		panic("STSAPIMock.AssumeRoleRequestFunc: method is nil but STSAPI.AssumeRoleRequest was just called")
	}
	callInfo := struct {
		AssumeRoleInput *sts.AssumeRoleInput
	}{
		AssumeRoleInput: assumeRoleInput,
	}
	mock.lockAssumeRoleRequest.Lock()
	mock.calls.AssumeRoleRequest = append(mock.calls.AssumeRoleRequest, callInfo)
	mock.lockAssumeRoleRequest.Unlock()
	return mock.AssumeRoleRequestFunc(assumeRoleInput)
}

// AssumeRoleRequestCalls gets all the calls that were made to AssumeRoleRequest.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleRequestCalls())
func (mock *STSAPIMock) AssumeRoleRequestCalls() []struct {
	AssumeRoleInput *sts.AssumeRoleInput
} {
	var calls []struct {
		AssumeRoleInput *sts.AssumeRoleInput
	}
	mock.lockAssumeRoleRequest.RLock()
	calls = mock.calls.AssumeRoleRequest
	mock.lockAssumeRoleRequest.RUnlock()
	return calls
}

// AssumeRoleWithContext calls AssumeRoleWithContextFunc.
func (mock *STSAPIMock) AssumeRoleWithContext(contextMoqParam context.Context, assumeRoleInput *sts.AssumeRoleInput, options ...request.Option) (*sts.AssumeRoleOutput, error) {
	if mock.AssumeRoleWithContextFunc == nil {
		panic("STSAPIMock.AssumeRoleWithContextFunc: method is nil but STSAPI.AssumeRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AssumeRoleInput *sts.AssumeRoleInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		AssumeRoleInput: assumeRoleInput,
		Options:         options,
	}
	mock.lockAssumeRoleWithContext.Lock()
	mock.calls.AssumeRoleWithContext = append(mock.calls.AssumeRoleWithContext, callInfo)
	mock.lockAssumeRoleWithContext.Unlock()
	return mock.AssumeRoleWithContextFunc(contextMoqParam, assumeRoleInput, options...)
}

// AssumeRoleWithContextCalls gets all the calls that were made to AssumeRoleWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleWithContextCalls())
func (mock *STSAPIMock) AssumeRoleWithContextCalls() []struct {
	ContextMoqParam context.Context
	AssumeRoleInput *sts.AssumeRoleInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		AssumeRoleInput *sts.AssumeRoleInput
		Options         []request.Option
	}
	mock.lockAssumeRoleWithContext.RLock()
	calls = mock.calls.AssumeRoleWithContext
	mock.lockAssumeRoleWithContext.RUnlock()
	return calls
}

// AssumeRoleWithSAML calls AssumeRoleWithSAMLFunc.
func (mock *STSAPIMock) AssumeRoleWithSAML(assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error) {
	if mock.AssumeRoleWithSAMLFunc == nil {
		panic("STSAPIMock.AssumeRoleWithSAMLFunc: method is nil but STSAPI.AssumeRoleWithSAML was just called")
	}
	callInfo := struct {
		AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
	}{
		AssumeRoleWithSAMLInput: assumeRoleWithSAMLInput,
	}
	mock.lockAssumeRoleWithSAML.Lock()
	mock.calls.AssumeRoleWithSAML = append(mock.calls.AssumeRoleWithSAML, callInfo)
	mock.lockAssumeRoleWithSAML.Unlock()
	return mock.AssumeRoleWithSAMLFunc(assumeRoleWithSAMLInput)
}

// AssumeRoleWithSAMLCalls gets all the calls that were made to AssumeRoleWithSAML.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleWithSAMLCalls())
func (mock *STSAPIMock) AssumeRoleWithSAMLCalls() []struct {
	AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
} {
	var calls []struct {
		AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
	}
	mock.lockAssumeRoleWithSAML.RLock()
	calls = mock.calls.AssumeRoleWithSAML
	mock.lockAssumeRoleWithSAML.RUnlock()
	return calls
}

// AssumeRoleWithSAMLRequest calls AssumeRoleWithSAMLRequestFunc.
func (mock *STSAPIMock) AssumeRoleWithSAMLRequest(assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput) (*request.Request, *sts.AssumeRoleWithSAMLOutput) {
	if mock.AssumeRoleWithSAMLRequestFunc == nil {
		panic("STSAPIMock.AssumeRoleWithSAMLRequestFunc: method is nil but STSAPI.AssumeRoleWithSAMLRequest was just called")
	}
	callInfo := struct {
		AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
	}{
		AssumeRoleWithSAMLInput: assumeRoleWithSAMLInput,
	}
	mock.lockAssumeRoleWithSAMLRequest.Lock()
	mock.calls.AssumeRoleWithSAMLRequest = append(mock.calls.AssumeRoleWithSAMLRequest, callInfo)
	mock.lockAssumeRoleWithSAMLRequest.Unlock()
	return mock.AssumeRoleWithSAMLRequestFunc(assumeRoleWithSAMLInput)
}

// AssumeRoleWithSAMLRequestCalls gets all the calls that were made to AssumeRoleWithSAMLRequest.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleWithSAMLRequestCalls())
func (mock *STSAPIMock) AssumeRoleWithSAMLRequestCalls() []struct {
	AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
} {
	var calls []struct {
		AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
	}
	mock.lockAssumeRoleWithSAMLRequest.RLock()
	calls = mock.calls.AssumeRoleWithSAMLRequest
	mock.lockAssumeRoleWithSAMLRequest.RUnlock()
	return calls
}

// AssumeRoleWithSAMLWithContext calls AssumeRoleWithSAMLWithContextFunc.
func (mock *STSAPIMock) AssumeRoleWithSAMLWithContext(contextMoqParam context.Context, assumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput, options ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error) {
	if mock.AssumeRoleWithSAMLWithContextFunc == nil {
		panic("STSAPIMock.AssumeRoleWithSAMLWithContextFunc: method is nil but STSAPI.AssumeRoleWithSAMLWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		AssumeRoleWithSAMLInput: assumeRoleWithSAMLInput,
		Options:                 options,
	}
	mock.lockAssumeRoleWithSAMLWithContext.Lock()
	mock.calls.AssumeRoleWithSAMLWithContext = append(mock.calls.AssumeRoleWithSAMLWithContext, callInfo)
	mock.lockAssumeRoleWithSAMLWithContext.Unlock()
	return mock.AssumeRoleWithSAMLWithContextFunc(contextMoqParam, assumeRoleWithSAMLInput, options...)
}

// AssumeRoleWithSAMLWithContextCalls gets all the calls that were made to AssumeRoleWithSAMLWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleWithSAMLWithContextCalls())
func (mock *STSAPIMock) AssumeRoleWithSAMLWithContextCalls() []struct {
	ContextMoqParam         context.Context
	AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		AssumeRoleWithSAMLInput *sts.AssumeRoleWithSAMLInput
		Options                 []request.Option
	}
	mock.lockAssumeRoleWithSAMLWithContext.RLock()
	calls = mock.calls.AssumeRoleWithSAMLWithContext
	mock.lockAssumeRoleWithSAMLWithContext.RUnlock()
	return calls
}

// AssumeRoleWithWebIdentity calls AssumeRoleWithWebIdentityFunc.
func (mock *STSAPIMock) AssumeRoleWithWebIdentity(assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	if mock.AssumeRoleWithWebIdentityFunc == nil {
		panic("STSAPIMock.AssumeRoleWithWebIdentityFunc: method is nil but STSAPI.AssumeRoleWithWebIdentity was just called")
	}
	callInfo := struct {
		AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
	}{
		AssumeRoleWithWebIdentityInput: assumeRoleWithWebIdentityInput,
	}
	mock.lockAssumeRoleWithWebIdentity.Lock()
	mock.calls.AssumeRoleWithWebIdentity = append(mock.calls.AssumeRoleWithWebIdentity, callInfo)
	mock.lockAssumeRoleWithWebIdentity.Unlock()
	return mock.AssumeRoleWithWebIdentityFunc(assumeRoleWithWebIdentityInput)
}

// AssumeRoleWithWebIdentityCalls gets all the calls that were made to AssumeRoleWithWebIdentity.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleWithWebIdentityCalls())
func (mock *STSAPIMock) AssumeRoleWithWebIdentityCalls() []struct {
	AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
} {
	var calls []struct {
		AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
	}
	mock.lockAssumeRoleWithWebIdentity.RLock()
	calls = mock.calls.AssumeRoleWithWebIdentity
	mock.lockAssumeRoleWithWebIdentity.RUnlock()
	return calls
}

// AssumeRoleWithWebIdentityRequest calls AssumeRoleWithWebIdentityRequestFunc.
func (mock *STSAPIMock) AssumeRoleWithWebIdentityRequest(assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput) (*request.Request, *sts.AssumeRoleWithWebIdentityOutput) {
	if mock.AssumeRoleWithWebIdentityRequestFunc == nil {
		panic("STSAPIMock.AssumeRoleWithWebIdentityRequestFunc: method is nil but STSAPI.AssumeRoleWithWebIdentityRequest was just called")
	}
	callInfo := struct {
		AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
	}{
		AssumeRoleWithWebIdentityInput: assumeRoleWithWebIdentityInput,
	}
	mock.lockAssumeRoleWithWebIdentityRequest.Lock()
	mock.calls.AssumeRoleWithWebIdentityRequest = append(mock.calls.AssumeRoleWithWebIdentityRequest, callInfo)
	mock.lockAssumeRoleWithWebIdentityRequest.Unlock()
	return mock.AssumeRoleWithWebIdentityRequestFunc(assumeRoleWithWebIdentityInput)
}

// AssumeRoleWithWebIdentityRequestCalls gets all the calls that were made to AssumeRoleWithWebIdentityRequest.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleWithWebIdentityRequestCalls())
func (mock *STSAPIMock) AssumeRoleWithWebIdentityRequestCalls() []struct {
	AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
} {
	var calls []struct {
		AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
	}
	mock.lockAssumeRoleWithWebIdentityRequest.RLock()
	calls = mock.calls.AssumeRoleWithWebIdentityRequest
	mock.lockAssumeRoleWithWebIdentityRequest.RUnlock()
	return calls
}

// AssumeRoleWithWebIdentityWithContext calls AssumeRoleWithWebIdentityWithContextFunc.
func (mock *STSAPIMock) AssumeRoleWithWebIdentityWithContext(contextMoqParam context.Context, assumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput, options ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	if mock.AssumeRoleWithWebIdentityWithContextFunc == nil {
		panic("STSAPIMock.AssumeRoleWithWebIdentityWithContextFunc: method is nil but STSAPI.AssumeRoleWithWebIdentityWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		AssumeRoleWithWebIdentityInput: assumeRoleWithWebIdentityInput,
		Options:                        options,
	}
	mock.lockAssumeRoleWithWebIdentityWithContext.Lock()
	mock.calls.AssumeRoleWithWebIdentityWithContext = append(mock.calls.AssumeRoleWithWebIdentityWithContext, callInfo)
	mock.lockAssumeRoleWithWebIdentityWithContext.Unlock()
	return mock.AssumeRoleWithWebIdentityWithContextFunc(contextMoqParam, assumeRoleWithWebIdentityInput, options...)
}

// AssumeRoleWithWebIdentityWithContextCalls gets all the calls that were made to AssumeRoleWithWebIdentityWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.AssumeRoleWithWebIdentityWithContextCalls())
func (mock *STSAPIMock) AssumeRoleWithWebIdentityWithContextCalls() []struct {
	ContextMoqParam                context.Context
	AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		AssumeRoleWithWebIdentityInput *sts.AssumeRoleWithWebIdentityInput
		Options                        []request.Option
	}
	mock.lockAssumeRoleWithWebIdentityWithContext.RLock()
	calls = mock.calls.AssumeRoleWithWebIdentityWithContext
	mock.lockAssumeRoleWithWebIdentityWithContext.RUnlock()
	return calls
}

// DecodeAuthorizationMessage calls DecodeAuthorizationMessageFunc.
func (mock *STSAPIMock) DecodeAuthorizationMessage(decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error) {
	if mock.DecodeAuthorizationMessageFunc == nil {
		panic("STSAPIMock.DecodeAuthorizationMessageFunc: method is nil but STSAPI.DecodeAuthorizationMessage was just called")
	}
	callInfo := struct {
		DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
	}{
		DecodeAuthorizationMessageInput: decodeAuthorizationMessageInput,
	}
	mock.lockDecodeAuthorizationMessage.Lock()
	mock.calls.DecodeAuthorizationMessage = append(mock.calls.DecodeAuthorizationMessage, callInfo)
	mock.lockDecodeAuthorizationMessage.Unlock()
	return mock.DecodeAuthorizationMessageFunc(decodeAuthorizationMessageInput)
}

// DecodeAuthorizationMessageCalls gets all the calls that were made to DecodeAuthorizationMessage.
// Check the length with:
//
//	len(mockedSTSAPI.DecodeAuthorizationMessageCalls())
func (mock *STSAPIMock) DecodeAuthorizationMessageCalls() []struct {
	DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
} {
	var calls []struct {
		DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
	}
	mock.lockDecodeAuthorizationMessage.RLock()
	calls = mock.calls.DecodeAuthorizationMessage
	mock.lockDecodeAuthorizationMessage.RUnlock()
	return calls
}

// DecodeAuthorizationMessageRequest calls DecodeAuthorizationMessageRequestFunc.
func (mock *STSAPIMock) DecodeAuthorizationMessageRequest(decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput) (*request.Request, *sts.DecodeAuthorizationMessageOutput) {
	if mock.DecodeAuthorizationMessageRequestFunc == nil {
		panic("STSAPIMock.DecodeAuthorizationMessageRequestFunc: method is nil but STSAPI.DecodeAuthorizationMessageRequest was just called")
	}
	callInfo := struct {
		DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
	}{
		DecodeAuthorizationMessageInput: decodeAuthorizationMessageInput,
	}
	mock.lockDecodeAuthorizationMessageRequest.Lock()
	mock.calls.DecodeAuthorizationMessageRequest = append(mock.calls.DecodeAuthorizationMessageRequest, callInfo)
	mock.lockDecodeAuthorizationMessageRequest.Unlock()
	return mock.DecodeAuthorizationMessageRequestFunc(decodeAuthorizationMessageInput)
}

// DecodeAuthorizationMessageRequestCalls gets all the calls that were made to DecodeAuthorizationMessageRequest.
// Check the length with:
//
//	len(mockedSTSAPI.DecodeAuthorizationMessageRequestCalls())
func (mock *STSAPIMock) DecodeAuthorizationMessageRequestCalls() []struct {
	DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
} {
	var calls []struct {
		DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
	}
	mock.lockDecodeAuthorizationMessageRequest.RLock()
	calls = mock.calls.DecodeAuthorizationMessageRequest
	mock.lockDecodeAuthorizationMessageRequest.RUnlock()
	return calls
}

// DecodeAuthorizationMessageWithContext calls DecodeAuthorizationMessageWithContextFunc.
func (mock *STSAPIMock) DecodeAuthorizationMessageWithContext(contextMoqParam context.Context, decodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput, options ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error) {
	if mock.DecodeAuthorizationMessageWithContextFunc == nil {
		panic("STSAPIMock.DecodeAuthorizationMessageWithContextFunc: method is nil but STSAPI.DecodeAuthorizationMessageWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DecodeAuthorizationMessageInput: decodeAuthorizationMessageInput,
		Options:                         options,
	}
	mock.lockDecodeAuthorizationMessageWithContext.Lock()
	mock.calls.DecodeAuthorizationMessageWithContext = append(mock.calls.DecodeAuthorizationMessageWithContext, callInfo)
	mock.lockDecodeAuthorizationMessageWithContext.Unlock()
	return mock.DecodeAuthorizationMessageWithContextFunc(contextMoqParam, decodeAuthorizationMessageInput, options...)
}

// DecodeAuthorizationMessageWithContextCalls gets all the calls that were made to DecodeAuthorizationMessageWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.DecodeAuthorizationMessageWithContextCalls())
func (mock *STSAPIMock) DecodeAuthorizationMessageWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DecodeAuthorizationMessageInput *sts.DecodeAuthorizationMessageInput
		Options                         []request.Option
	}
	mock.lockDecodeAuthorizationMessageWithContext.RLock()
	calls = mock.calls.DecodeAuthorizationMessageWithContext
	mock.lockDecodeAuthorizationMessageWithContext.RUnlock()
	return calls
}

// GetAccessKeyInfo calls GetAccessKeyInfoFunc.
func (mock *STSAPIMock) GetAccessKeyInfo(getAccessKeyInfoInput *sts.GetAccessKeyInfoInput) (*sts.GetAccessKeyInfoOutput, error) {
	if mock.GetAccessKeyInfoFunc == nil {
		panic("STSAPIMock.GetAccessKeyInfoFunc: method is nil but STSAPI.GetAccessKeyInfo was just called")
	}
	callInfo := struct {
		GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
	}{
		GetAccessKeyInfoInput: getAccessKeyInfoInput,
	}
	mock.lockGetAccessKeyInfo.Lock()
	mock.calls.GetAccessKeyInfo = append(mock.calls.GetAccessKeyInfo, callInfo)
	mock.lockGetAccessKeyInfo.Unlock()
	return mock.GetAccessKeyInfoFunc(getAccessKeyInfoInput)
}

// GetAccessKeyInfoCalls gets all the calls that were made to GetAccessKeyInfo.
// Check the length with:
//
//	len(mockedSTSAPI.GetAccessKeyInfoCalls())
func (mock *STSAPIMock) GetAccessKeyInfoCalls() []struct {
	GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
} {
	var calls []struct {
		GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
	}
	mock.lockGetAccessKeyInfo.RLock()
	calls = mock.calls.GetAccessKeyInfo
	mock.lockGetAccessKeyInfo.RUnlock()
	return calls
}

// GetAccessKeyInfoRequest calls GetAccessKeyInfoRequestFunc.
func (mock *STSAPIMock) GetAccessKeyInfoRequest(getAccessKeyInfoInput *sts.GetAccessKeyInfoInput) (*request.Request, *sts.GetAccessKeyInfoOutput) {
	if mock.GetAccessKeyInfoRequestFunc == nil {
		panic("STSAPIMock.GetAccessKeyInfoRequestFunc: method is nil but STSAPI.GetAccessKeyInfoRequest was just called")
	}
	callInfo := struct {
		GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
	}{
		GetAccessKeyInfoInput: getAccessKeyInfoInput,
	}
	mock.lockGetAccessKeyInfoRequest.Lock()
	mock.calls.GetAccessKeyInfoRequest = append(mock.calls.GetAccessKeyInfoRequest, callInfo)
	mock.lockGetAccessKeyInfoRequest.Unlock()
	return mock.GetAccessKeyInfoRequestFunc(getAccessKeyInfoInput)
}

// GetAccessKeyInfoRequestCalls gets all the calls that were made to GetAccessKeyInfoRequest.
// Check the length with:
//
//	len(mockedSTSAPI.GetAccessKeyInfoRequestCalls())
func (mock *STSAPIMock) GetAccessKeyInfoRequestCalls() []struct {
	GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
} {
	var calls []struct {
		GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
	}
	mock.lockGetAccessKeyInfoRequest.RLock()
	calls = mock.calls.GetAccessKeyInfoRequest
	mock.lockGetAccessKeyInfoRequest.RUnlock()
	return calls
}

// GetAccessKeyInfoWithContext calls GetAccessKeyInfoWithContextFunc.
func (mock *STSAPIMock) GetAccessKeyInfoWithContext(contextMoqParam context.Context, getAccessKeyInfoInput *sts.GetAccessKeyInfoInput, options ...request.Option) (*sts.GetAccessKeyInfoOutput, error) {
	if mock.GetAccessKeyInfoWithContextFunc == nil {
		panic("STSAPIMock.GetAccessKeyInfoWithContextFunc: method is nil but STSAPI.GetAccessKeyInfoWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		GetAccessKeyInfoInput: getAccessKeyInfoInput,
		Options:               options,
	}
	mock.lockGetAccessKeyInfoWithContext.Lock()
	mock.calls.GetAccessKeyInfoWithContext = append(mock.calls.GetAccessKeyInfoWithContext, callInfo)
	mock.lockGetAccessKeyInfoWithContext.Unlock()
	return mock.GetAccessKeyInfoWithContextFunc(contextMoqParam, getAccessKeyInfoInput, options...)
}

// GetAccessKeyInfoWithContextCalls gets all the calls that were made to GetAccessKeyInfoWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.GetAccessKeyInfoWithContextCalls())
func (mock *STSAPIMock) GetAccessKeyInfoWithContextCalls() []struct {
	ContextMoqParam       context.Context
	GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetAccessKeyInfoInput *sts.GetAccessKeyInfoInput
		Options               []request.Option
	}
	mock.lockGetAccessKeyInfoWithContext.RLock()
	calls = mock.calls.GetAccessKeyInfoWithContext
	mock.lockGetAccessKeyInfoWithContext.RUnlock()
	return calls
}

// GetCallerIdentity calls GetCallerIdentityFunc.
func (mock *STSAPIMock) GetCallerIdentity(getCallerIdentityInput *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
	if mock.GetCallerIdentityFunc == nil {
		panic("STSAPIMock.GetCallerIdentityFunc: method is nil but STSAPI.GetCallerIdentity was just called")
	}
	callInfo := struct {
		GetCallerIdentityInput *sts.GetCallerIdentityInput
	}{
		GetCallerIdentityInput: getCallerIdentityInput,
	}
	mock.lockGetCallerIdentity.Lock()
	mock.calls.GetCallerIdentity = append(mock.calls.GetCallerIdentity, callInfo)
	mock.lockGetCallerIdentity.Unlock()
	return mock.GetCallerIdentityFunc(getCallerIdentityInput)
}

// GetCallerIdentityCalls gets all the calls that were made to GetCallerIdentity.
// Check the length with:
//
//	len(mockedSTSAPI.GetCallerIdentityCalls())
func (mock *STSAPIMock) GetCallerIdentityCalls() []struct {
	GetCallerIdentityInput *sts.GetCallerIdentityInput
} {
	var calls []struct {
		GetCallerIdentityInput *sts.GetCallerIdentityInput
	}
	mock.lockGetCallerIdentity.RLock()
	calls = mock.calls.GetCallerIdentity
	mock.lockGetCallerIdentity.RUnlock()
	return calls
}

// GetCallerIdentityRequest calls GetCallerIdentityRequestFunc.
func (mock *STSAPIMock) GetCallerIdentityRequest(getCallerIdentityInput *sts.GetCallerIdentityInput) (*request.Request, *sts.GetCallerIdentityOutput) {
	if mock.GetCallerIdentityRequestFunc == nil {
		panic("STSAPIMock.GetCallerIdentityRequestFunc: method is nil but STSAPI.GetCallerIdentityRequest was just called")
	}
	callInfo := struct {
		GetCallerIdentityInput *sts.GetCallerIdentityInput
	}{
		GetCallerIdentityInput: getCallerIdentityInput,
	}
	mock.lockGetCallerIdentityRequest.Lock()
	mock.calls.GetCallerIdentityRequest = append(mock.calls.GetCallerIdentityRequest, callInfo)
	mock.lockGetCallerIdentityRequest.Unlock()
	return mock.GetCallerIdentityRequestFunc(getCallerIdentityInput)
}

// GetCallerIdentityRequestCalls gets all the calls that were made to GetCallerIdentityRequest.
// Check the length with:
//
//	len(mockedSTSAPI.GetCallerIdentityRequestCalls())
func (mock *STSAPIMock) GetCallerIdentityRequestCalls() []struct {
	GetCallerIdentityInput *sts.GetCallerIdentityInput
} {
	var calls []struct {
		GetCallerIdentityInput *sts.GetCallerIdentityInput
	}
	mock.lockGetCallerIdentityRequest.RLock()
	calls = mock.calls.GetCallerIdentityRequest
	mock.lockGetCallerIdentityRequest.RUnlock()
	return calls
}

// GetCallerIdentityWithContext calls GetCallerIdentityWithContextFunc.
func (mock *STSAPIMock) GetCallerIdentityWithContext(contextMoqParam context.Context, getCallerIdentityInput *sts.GetCallerIdentityInput, options ...request.Option) (*sts.GetCallerIdentityOutput, error) {
	if mock.GetCallerIdentityWithContextFunc == nil {
		panic("STSAPIMock.GetCallerIdentityWithContextFunc: method is nil but STSAPI.GetCallerIdentityWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		GetCallerIdentityInput *sts.GetCallerIdentityInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		GetCallerIdentityInput: getCallerIdentityInput,
		Options:                options,
	}
	mock.lockGetCallerIdentityWithContext.Lock()
	mock.calls.GetCallerIdentityWithContext = append(mock.calls.GetCallerIdentityWithContext, callInfo)
	mock.lockGetCallerIdentityWithContext.Unlock()
	return mock.GetCallerIdentityWithContextFunc(contextMoqParam, getCallerIdentityInput, options...)
}

// GetCallerIdentityWithContextCalls gets all the calls that were made to GetCallerIdentityWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.GetCallerIdentityWithContextCalls())
func (mock *STSAPIMock) GetCallerIdentityWithContextCalls() []struct {
	ContextMoqParam        context.Context
	GetCallerIdentityInput *sts.GetCallerIdentityInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		GetCallerIdentityInput *sts.GetCallerIdentityInput
		Options                []request.Option
	}
	mock.lockGetCallerIdentityWithContext.RLock()
	calls = mock.calls.GetCallerIdentityWithContext
	mock.lockGetCallerIdentityWithContext.RUnlock()
	return calls
}

// GetFederationToken calls GetFederationTokenFunc.
func (mock *STSAPIMock) GetFederationToken(getFederationTokenInput *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error) {
	if mock.GetFederationTokenFunc == nil {
		panic("STSAPIMock.GetFederationTokenFunc: method is nil but STSAPI.GetFederationToken was just called")
	}
	callInfo := struct {
		GetFederationTokenInput *sts.GetFederationTokenInput
	}{
		GetFederationTokenInput: getFederationTokenInput,
	}
	mock.lockGetFederationToken.Lock()
	mock.calls.GetFederationToken = append(mock.calls.GetFederationToken, callInfo)
	mock.lockGetFederationToken.Unlock()
	return mock.GetFederationTokenFunc(getFederationTokenInput)
}

// GetFederationTokenCalls gets all the calls that were made to GetFederationToken.
// Check the length with:
//
//	len(mockedSTSAPI.GetFederationTokenCalls())
func (mock *STSAPIMock) GetFederationTokenCalls() []struct {
	GetFederationTokenInput *sts.GetFederationTokenInput
} {
	var calls []struct {
		GetFederationTokenInput *sts.GetFederationTokenInput
	}
	mock.lockGetFederationToken.RLock()
	calls = mock.calls.GetFederationToken
	mock.lockGetFederationToken.RUnlock()
	return calls
}

// GetFederationTokenRequest calls GetFederationTokenRequestFunc.
func (mock *STSAPIMock) GetFederationTokenRequest(getFederationTokenInput *sts.GetFederationTokenInput) (*request.Request, *sts.GetFederationTokenOutput) {
	if mock.GetFederationTokenRequestFunc == nil {
		panic("STSAPIMock.GetFederationTokenRequestFunc: method is nil but STSAPI.GetFederationTokenRequest was just called")
	}
	callInfo := struct {
		GetFederationTokenInput *sts.GetFederationTokenInput
	}{
		GetFederationTokenInput: getFederationTokenInput,
	}
	mock.lockGetFederationTokenRequest.Lock()
	mock.calls.GetFederationTokenRequest = append(mock.calls.GetFederationTokenRequest, callInfo)
	mock.lockGetFederationTokenRequest.Unlock()
	return mock.GetFederationTokenRequestFunc(getFederationTokenInput)
}

// GetFederationTokenRequestCalls gets all the calls that were made to GetFederationTokenRequest.
// Check the length with:
//
//	len(mockedSTSAPI.GetFederationTokenRequestCalls())
func (mock *STSAPIMock) GetFederationTokenRequestCalls() []struct {
	GetFederationTokenInput *sts.GetFederationTokenInput
} {
	var calls []struct {
		GetFederationTokenInput *sts.GetFederationTokenInput
	}
	mock.lockGetFederationTokenRequest.RLock()
	calls = mock.calls.GetFederationTokenRequest
	mock.lockGetFederationTokenRequest.RUnlock()
	return calls
}

// GetFederationTokenWithContext calls GetFederationTokenWithContextFunc.
func (mock *STSAPIMock) GetFederationTokenWithContext(contextMoqParam context.Context, getFederationTokenInput *sts.GetFederationTokenInput, options ...request.Option) (*sts.GetFederationTokenOutput, error) {
	if mock.GetFederationTokenWithContextFunc == nil {
		panic("STSAPIMock.GetFederationTokenWithContextFunc: method is nil but STSAPI.GetFederationTokenWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		GetFederationTokenInput *sts.GetFederationTokenInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		GetFederationTokenInput: getFederationTokenInput,
		Options:                 options,
	}
	mock.lockGetFederationTokenWithContext.Lock()
	mock.calls.GetFederationTokenWithContext = append(mock.calls.GetFederationTokenWithContext, callInfo)
	mock.lockGetFederationTokenWithContext.Unlock()
	return mock.GetFederationTokenWithContextFunc(contextMoqParam, getFederationTokenInput, options...)
}

// GetFederationTokenWithContextCalls gets all the calls that were made to GetFederationTokenWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.GetFederationTokenWithContextCalls())
func (mock *STSAPIMock) GetFederationTokenWithContextCalls() []struct {
	ContextMoqParam         context.Context
	GetFederationTokenInput *sts.GetFederationTokenInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		GetFederationTokenInput *sts.GetFederationTokenInput
		Options                 []request.Option
	}
	mock.lockGetFederationTokenWithContext.RLock()
	calls = mock.calls.GetFederationTokenWithContext
	mock.lockGetFederationTokenWithContext.RUnlock()
	return calls
}

// GetSessionToken calls GetSessionTokenFunc.
func (mock *STSAPIMock) GetSessionToken(getSessionTokenInput *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error) {
	if mock.GetSessionTokenFunc == nil {
		panic("STSAPIMock.GetSessionTokenFunc: method is nil but STSAPI.GetSessionToken was just called")
	}
	callInfo := struct {
		GetSessionTokenInput *sts.GetSessionTokenInput
	}{
		GetSessionTokenInput: getSessionTokenInput,
	}
	mock.lockGetSessionToken.Lock()
	mock.calls.GetSessionToken = append(mock.calls.GetSessionToken, callInfo)
	mock.lockGetSessionToken.Unlock()
	return mock.GetSessionTokenFunc(getSessionTokenInput)
}

// GetSessionTokenCalls gets all the calls that were made to GetSessionToken.
// Check the length with:
//
//	len(mockedSTSAPI.GetSessionTokenCalls())
func (mock *STSAPIMock) GetSessionTokenCalls() []struct {
	GetSessionTokenInput *sts.GetSessionTokenInput
} {
	var calls []struct {
		GetSessionTokenInput *sts.GetSessionTokenInput
	}
	mock.lockGetSessionToken.RLock()
	calls = mock.calls.GetSessionToken
	mock.lockGetSessionToken.RUnlock()
	return calls
}

// GetSessionTokenRequest calls GetSessionTokenRequestFunc.
func (mock *STSAPIMock) GetSessionTokenRequest(getSessionTokenInput *sts.GetSessionTokenInput) (*request.Request, *sts.GetSessionTokenOutput) {
	if mock.GetSessionTokenRequestFunc == nil {
		panic("STSAPIMock.GetSessionTokenRequestFunc: method is nil but STSAPI.GetSessionTokenRequest was just called")
	}
	callInfo := struct {
		GetSessionTokenInput *sts.GetSessionTokenInput
	}{
		GetSessionTokenInput: getSessionTokenInput,
	}
	mock.lockGetSessionTokenRequest.Lock()
	mock.calls.GetSessionTokenRequest = append(mock.calls.GetSessionTokenRequest, callInfo)
	mock.lockGetSessionTokenRequest.Unlock()
	return mock.GetSessionTokenRequestFunc(getSessionTokenInput)
}

// GetSessionTokenRequestCalls gets all the calls that were made to GetSessionTokenRequest.
// Check the length with:
//
//	len(mockedSTSAPI.GetSessionTokenRequestCalls())
func (mock *STSAPIMock) GetSessionTokenRequestCalls() []struct {
	GetSessionTokenInput *sts.GetSessionTokenInput
} {
	var calls []struct {
		GetSessionTokenInput *sts.GetSessionTokenInput
	}
	mock.lockGetSessionTokenRequest.RLock()
	calls = mock.calls.GetSessionTokenRequest
	mock.lockGetSessionTokenRequest.RUnlock()
	return calls
}

// GetSessionTokenWithContext calls GetSessionTokenWithContextFunc.
func (mock *STSAPIMock) GetSessionTokenWithContext(contextMoqParam context.Context, getSessionTokenInput *sts.GetSessionTokenInput, options ...request.Option) (*sts.GetSessionTokenOutput, error) {
	if mock.GetSessionTokenWithContextFunc == nil {
		panic("STSAPIMock.GetSessionTokenWithContextFunc: method is nil but STSAPI.GetSessionTokenWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetSessionTokenInput *sts.GetSessionTokenInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		GetSessionTokenInput: getSessionTokenInput,
		Options:              options,
	}
	mock.lockGetSessionTokenWithContext.Lock()
	mock.calls.GetSessionTokenWithContext = append(mock.calls.GetSessionTokenWithContext, callInfo)
	mock.lockGetSessionTokenWithContext.Unlock()
	return mock.GetSessionTokenWithContextFunc(contextMoqParam, getSessionTokenInput, options...)
}

// GetSessionTokenWithContextCalls gets all the calls that were made to GetSessionTokenWithContext.
// Check the length with:
//
//	len(mockedSTSAPI.GetSessionTokenWithContextCalls())
func (mock *STSAPIMock) GetSessionTokenWithContextCalls() []struct {
	ContextMoqParam      context.Context
	GetSessionTokenInput *sts.GetSessionTokenInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetSessionTokenInput *sts.GetSessionTokenInput
		Options              []request.Option
	}
	mock.lockGetSessionTokenWithContext.RLock()
	calls = mock.calls.GetSessionTokenWithContext
	mock.lockGetSessionTokenWithContext.RUnlock()
	return calls
}
