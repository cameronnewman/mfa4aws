// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package iammock

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iam"
	"github.com/aws/aws-sdk-go/service/iam/iamiface"
)

var (
	lockIAMAPIMockAddClientIDToOpenIDConnectProvider                   sync.RWMutex
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderRequest            sync.RWMutex
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderWithContext        sync.RWMutex
	lockIAMAPIMockAddRoleToInstanceProfile                             sync.RWMutex
	lockIAMAPIMockAddRoleToInstanceProfileRequest                      sync.RWMutex
	lockIAMAPIMockAddRoleToInstanceProfileWithContext                  sync.RWMutex
	lockIAMAPIMockAddUserToGroup                                       sync.RWMutex
	lockIAMAPIMockAddUserToGroupRequest                                sync.RWMutex
	lockIAMAPIMockAddUserToGroupWithContext                            sync.RWMutex
	lockIAMAPIMockAttachGroupPolicy                                    sync.RWMutex
	lockIAMAPIMockAttachGroupPolicyRequest                             sync.RWMutex
	lockIAMAPIMockAttachGroupPolicyWithContext                         sync.RWMutex
	lockIAMAPIMockAttachRolePolicy                                     sync.RWMutex
	lockIAMAPIMockAttachRolePolicyRequest                              sync.RWMutex
	lockIAMAPIMockAttachRolePolicyWithContext                          sync.RWMutex
	lockIAMAPIMockAttachUserPolicy                                     sync.RWMutex
	lockIAMAPIMockAttachUserPolicyRequest                              sync.RWMutex
	lockIAMAPIMockAttachUserPolicyWithContext                          sync.RWMutex
	lockIAMAPIMockChangePassword                                       sync.RWMutex
	lockIAMAPIMockChangePasswordRequest                                sync.RWMutex
	lockIAMAPIMockChangePasswordWithContext                            sync.RWMutex
	lockIAMAPIMockCreateAccessKey                                      sync.RWMutex
	lockIAMAPIMockCreateAccessKeyRequest                               sync.RWMutex
	lockIAMAPIMockCreateAccessKeyWithContext                           sync.RWMutex
	lockIAMAPIMockCreateAccountAlias                                   sync.RWMutex
	lockIAMAPIMockCreateAccountAliasRequest                            sync.RWMutex
	lockIAMAPIMockCreateAccountAliasWithContext                        sync.RWMutex
	lockIAMAPIMockCreateGroup                                          sync.RWMutex
	lockIAMAPIMockCreateGroupRequest                                   sync.RWMutex
	lockIAMAPIMockCreateGroupWithContext                               sync.RWMutex
	lockIAMAPIMockCreateInstanceProfile                                sync.RWMutex
	lockIAMAPIMockCreateInstanceProfileRequest                         sync.RWMutex
	lockIAMAPIMockCreateInstanceProfileWithContext                     sync.RWMutex
	lockIAMAPIMockCreateLoginProfile                                   sync.RWMutex
	lockIAMAPIMockCreateLoginProfileRequest                            sync.RWMutex
	lockIAMAPIMockCreateLoginProfileWithContext                        sync.RWMutex
	lockIAMAPIMockCreateOpenIDConnectProvider                          sync.RWMutex
	lockIAMAPIMockCreateOpenIDConnectProviderRequest                   sync.RWMutex
	lockIAMAPIMockCreateOpenIDConnectProviderWithContext               sync.RWMutex
	lockIAMAPIMockCreatePolicy                                         sync.RWMutex
	lockIAMAPIMockCreatePolicyRequest                                  sync.RWMutex
	lockIAMAPIMockCreatePolicyVersion                                  sync.RWMutex
	lockIAMAPIMockCreatePolicyVersionRequest                           sync.RWMutex
	lockIAMAPIMockCreatePolicyVersionWithContext                       sync.RWMutex
	lockIAMAPIMockCreatePolicyWithContext                              sync.RWMutex
	lockIAMAPIMockCreateRole                                           sync.RWMutex
	lockIAMAPIMockCreateRoleRequest                                    sync.RWMutex
	lockIAMAPIMockCreateRoleWithContext                                sync.RWMutex
	lockIAMAPIMockCreateSAMLProvider                                   sync.RWMutex
	lockIAMAPIMockCreateSAMLProviderRequest                            sync.RWMutex
	lockIAMAPIMockCreateSAMLProviderWithContext                        sync.RWMutex
	lockIAMAPIMockCreateServiceLinkedRole                              sync.RWMutex
	lockIAMAPIMockCreateServiceLinkedRoleRequest                       sync.RWMutex
	lockIAMAPIMockCreateServiceLinkedRoleWithContext                   sync.RWMutex
	lockIAMAPIMockCreateServiceSpecificCredential                      sync.RWMutex
	lockIAMAPIMockCreateServiceSpecificCredentialRequest               sync.RWMutex
	lockIAMAPIMockCreateServiceSpecificCredentialWithContext           sync.RWMutex
	lockIAMAPIMockCreateUser                                           sync.RWMutex
	lockIAMAPIMockCreateUserRequest                                    sync.RWMutex
	lockIAMAPIMockCreateUserWithContext                                sync.RWMutex
	lockIAMAPIMockCreateVirtualMFADevice                               sync.RWMutex
	lockIAMAPIMockCreateVirtualMFADeviceRequest                        sync.RWMutex
	lockIAMAPIMockCreateVirtualMFADeviceWithContext                    sync.RWMutex
	lockIAMAPIMockDeactivateMFADevice                                  sync.RWMutex
	lockIAMAPIMockDeactivateMFADeviceRequest                           sync.RWMutex
	lockIAMAPIMockDeactivateMFADeviceWithContext                       sync.RWMutex
	lockIAMAPIMockDeleteAccessKey                                      sync.RWMutex
	lockIAMAPIMockDeleteAccessKeyRequest                               sync.RWMutex
	lockIAMAPIMockDeleteAccessKeyWithContext                           sync.RWMutex
	lockIAMAPIMockDeleteAccountAlias                                   sync.RWMutex
	lockIAMAPIMockDeleteAccountAliasRequest                            sync.RWMutex
	lockIAMAPIMockDeleteAccountAliasWithContext                        sync.RWMutex
	lockIAMAPIMockDeleteAccountPasswordPolicy                          sync.RWMutex
	lockIAMAPIMockDeleteAccountPasswordPolicyRequest                   sync.RWMutex
	lockIAMAPIMockDeleteAccountPasswordPolicyWithContext               sync.RWMutex
	lockIAMAPIMockDeleteGroup                                          sync.RWMutex
	lockIAMAPIMockDeleteGroupPolicy                                    sync.RWMutex
	lockIAMAPIMockDeleteGroupPolicyRequest                             sync.RWMutex
	lockIAMAPIMockDeleteGroupPolicyWithContext                         sync.RWMutex
	lockIAMAPIMockDeleteGroupRequest                                   sync.RWMutex
	lockIAMAPIMockDeleteGroupWithContext                               sync.RWMutex
	lockIAMAPIMockDeleteInstanceProfile                                sync.RWMutex
	lockIAMAPIMockDeleteInstanceProfileRequest                         sync.RWMutex
	lockIAMAPIMockDeleteInstanceProfileWithContext                     sync.RWMutex
	lockIAMAPIMockDeleteLoginProfile                                   sync.RWMutex
	lockIAMAPIMockDeleteLoginProfileRequest                            sync.RWMutex
	lockIAMAPIMockDeleteLoginProfileWithContext                        sync.RWMutex
	lockIAMAPIMockDeleteOpenIDConnectProvider                          sync.RWMutex
	lockIAMAPIMockDeleteOpenIDConnectProviderRequest                   sync.RWMutex
	lockIAMAPIMockDeleteOpenIDConnectProviderWithContext               sync.RWMutex
	lockIAMAPIMockDeletePolicy                                         sync.RWMutex
	lockIAMAPIMockDeletePolicyRequest                                  sync.RWMutex
	lockIAMAPIMockDeletePolicyVersion                                  sync.RWMutex
	lockIAMAPIMockDeletePolicyVersionRequest                           sync.RWMutex
	lockIAMAPIMockDeletePolicyVersionWithContext                       sync.RWMutex
	lockIAMAPIMockDeletePolicyWithContext                              sync.RWMutex
	lockIAMAPIMockDeleteRole                                           sync.RWMutex
	lockIAMAPIMockDeleteRolePermissionsBoundary                        sync.RWMutex
	lockIAMAPIMockDeleteRolePermissionsBoundaryRequest                 sync.RWMutex
	lockIAMAPIMockDeleteRolePermissionsBoundaryWithContext             sync.RWMutex
	lockIAMAPIMockDeleteRolePolicy                                     sync.RWMutex
	lockIAMAPIMockDeleteRolePolicyRequest                              sync.RWMutex
	lockIAMAPIMockDeleteRolePolicyWithContext                          sync.RWMutex
	lockIAMAPIMockDeleteRoleRequest                                    sync.RWMutex
	lockIAMAPIMockDeleteRoleWithContext                                sync.RWMutex
	lockIAMAPIMockDeleteSAMLProvider                                   sync.RWMutex
	lockIAMAPIMockDeleteSAMLProviderRequest                            sync.RWMutex
	lockIAMAPIMockDeleteSAMLProviderWithContext                        sync.RWMutex
	lockIAMAPIMockDeleteSSHPublicKey                                   sync.RWMutex
	lockIAMAPIMockDeleteSSHPublicKeyRequest                            sync.RWMutex
	lockIAMAPIMockDeleteSSHPublicKeyWithContext                        sync.RWMutex
	lockIAMAPIMockDeleteServerCertificate                              sync.RWMutex
	lockIAMAPIMockDeleteServerCertificateRequest                       sync.RWMutex
	lockIAMAPIMockDeleteServerCertificateWithContext                   sync.RWMutex
	lockIAMAPIMockDeleteServiceLinkedRole                              sync.RWMutex
	lockIAMAPIMockDeleteServiceLinkedRoleRequest                       sync.RWMutex
	lockIAMAPIMockDeleteServiceLinkedRoleWithContext                   sync.RWMutex
	lockIAMAPIMockDeleteServiceSpecificCredential                      sync.RWMutex
	lockIAMAPIMockDeleteServiceSpecificCredentialRequest               sync.RWMutex
	lockIAMAPIMockDeleteServiceSpecificCredentialWithContext           sync.RWMutex
	lockIAMAPIMockDeleteSigningCertificate                             sync.RWMutex
	lockIAMAPIMockDeleteSigningCertificateRequest                      sync.RWMutex
	lockIAMAPIMockDeleteSigningCertificateWithContext                  sync.RWMutex
	lockIAMAPIMockDeleteUser                                           sync.RWMutex
	lockIAMAPIMockDeleteUserPermissionsBoundary                        sync.RWMutex
	lockIAMAPIMockDeleteUserPermissionsBoundaryRequest                 sync.RWMutex
	lockIAMAPIMockDeleteUserPermissionsBoundaryWithContext             sync.RWMutex
	lockIAMAPIMockDeleteUserPolicy                                     sync.RWMutex
	lockIAMAPIMockDeleteUserPolicyRequest                              sync.RWMutex
	lockIAMAPIMockDeleteUserPolicyWithContext                          sync.RWMutex
	lockIAMAPIMockDeleteUserRequest                                    sync.RWMutex
	lockIAMAPIMockDeleteUserWithContext                                sync.RWMutex
	lockIAMAPIMockDeleteVirtualMFADevice                               sync.RWMutex
	lockIAMAPIMockDeleteVirtualMFADeviceRequest                        sync.RWMutex
	lockIAMAPIMockDeleteVirtualMFADeviceWithContext                    sync.RWMutex
	lockIAMAPIMockDetachGroupPolicy                                    sync.RWMutex
	lockIAMAPIMockDetachGroupPolicyRequest                             sync.RWMutex
	lockIAMAPIMockDetachGroupPolicyWithContext                         sync.RWMutex
	lockIAMAPIMockDetachRolePolicy                                     sync.RWMutex
	lockIAMAPIMockDetachRolePolicyRequest                              sync.RWMutex
	lockIAMAPIMockDetachRolePolicyWithContext                          sync.RWMutex
	lockIAMAPIMockDetachUserPolicy                                     sync.RWMutex
	lockIAMAPIMockDetachUserPolicyRequest                              sync.RWMutex
	lockIAMAPIMockDetachUserPolicyWithContext                          sync.RWMutex
	lockIAMAPIMockEnableMFADevice                                      sync.RWMutex
	lockIAMAPIMockEnableMFADeviceRequest                               sync.RWMutex
	lockIAMAPIMockEnableMFADeviceWithContext                           sync.RWMutex
	lockIAMAPIMockGenerateCredentialReport                             sync.RWMutex
	lockIAMAPIMockGenerateCredentialReportRequest                      sync.RWMutex
	lockIAMAPIMockGenerateCredentialReportWithContext                  sync.RWMutex
	lockIAMAPIMockGenerateOrganizationsAccessReport                    sync.RWMutex
	lockIAMAPIMockGenerateOrganizationsAccessReportRequest             sync.RWMutex
	lockIAMAPIMockGenerateOrganizationsAccessReportWithContext         sync.RWMutex
	lockIAMAPIMockGenerateServiceLastAccessedDetails                   sync.RWMutex
	lockIAMAPIMockGenerateServiceLastAccessedDetailsRequest            sync.RWMutex
	lockIAMAPIMockGenerateServiceLastAccessedDetailsWithContext        sync.RWMutex
	lockIAMAPIMockGetAccessKeyLastUsed                                 sync.RWMutex
	lockIAMAPIMockGetAccessKeyLastUsedRequest                          sync.RWMutex
	lockIAMAPIMockGetAccessKeyLastUsedWithContext                      sync.RWMutex
	lockIAMAPIMockGetAccountAuthorizationDetails                       sync.RWMutex
	lockIAMAPIMockGetAccountAuthorizationDetailsPages                  sync.RWMutex
	lockIAMAPIMockGetAccountAuthorizationDetailsPagesWithContext       sync.RWMutex
	lockIAMAPIMockGetAccountAuthorizationDetailsRequest                sync.RWMutex
	lockIAMAPIMockGetAccountAuthorizationDetailsWithContext            sync.RWMutex
	lockIAMAPIMockGetAccountPasswordPolicy                             sync.RWMutex
	lockIAMAPIMockGetAccountPasswordPolicyRequest                      sync.RWMutex
	lockIAMAPIMockGetAccountPasswordPolicyWithContext                  sync.RWMutex
	lockIAMAPIMockGetAccountSummary                                    sync.RWMutex
	lockIAMAPIMockGetAccountSummaryRequest                             sync.RWMutex
	lockIAMAPIMockGetAccountSummaryWithContext                         sync.RWMutex
	lockIAMAPIMockGetContextKeysForCustomPolicy                        sync.RWMutex
	lockIAMAPIMockGetContextKeysForCustomPolicyRequest                 sync.RWMutex
	lockIAMAPIMockGetContextKeysForCustomPolicyWithContext             sync.RWMutex
	lockIAMAPIMockGetContextKeysForPrincipalPolicy                     sync.RWMutex
	lockIAMAPIMockGetContextKeysForPrincipalPolicyRequest              sync.RWMutex
	lockIAMAPIMockGetContextKeysForPrincipalPolicyWithContext          sync.RWMutex
	lockIAMAPIMockGetCredentialReport                                  sync.RWMutex
	lockIAMAPIMockGetCredentialReportRequest                           sync.RWMutex
	lockIAMAPIMockGetCredentialReportWithContext                       sync.RWMutex
	lockIAMAPIMockGetGroup                                             sync.RWMutex
	lockIAMAPIMockGetGroupPages                                        sync.RWMutex
	lockIAMAPIMockGetGroupPagesWithContext                             sync.RWMutex
	lockIAMAPIMockGetGroupPolicy                                       sync.RWMutex
	lockIAMAPIMockGetGroupPolicyRequest                                sync.RWMutex
	lockIAMAPIMockGetGroupPolicyWithContext                            sync.RWMutex
	lockIAMAPIMockGetGroupRequest                                      sync.RWMutex
	lockIAMAPIMockGetGroupWithContext                                  sync.RWMutex
	lockIAMAPIMockGetInstanceProfile                                   sync.RWMutex
	lockIAMAPIMockGetInstanceProfileRequest                            sync.RWMutex
	lockIAMAPIMockGetInstanceProfileWithContext                        sync.RWMutex
	lockIAMAPIMockGetLoginProfile                                      sync.RWMutex
	lockIAMAPIMockGetLoginProfileRequest                               sync.RWMutex
	lockIAMAPIMockGetLoginProfileWithContext                           sync.RWMutex
	lockIAMAPIMockGetOpenIDConnectProvider                             sync.RWMutex
	lockIAMAPIMockGetOpenIDConnectProviderRequest                      sync.RWMutex
	lockIAMAPIMockGetOpenIDConnectProviderWithContext                  sync.RWMutex
	lockIAMAPIMockGetOrganizationsAccessReport                         sync.RWMutex
	lockIAMAPIMockGetOrganizationsAccessReportRequest                  sync.RWMutex
	lockIAMAPIMockGetOrganizationsAccessReportWithContext              sync.RWMutex
	lockIAMAPIMockGetPolicy                                            sync.RWMutex
	lockIAMAPIMockGetPolicyRequest                                     sync.RWMutex
	lockIAMAPIMockGetPolicyVersion                                     sync.RWMutex
	lockIAMAPIMockGetPolicyVersionRequest                              sync.RWMutex
	lockIAMAPIMockGetPolicyVersionWithContext                          sync.RWMutex
	lockIAMAPIMockGetPolicyWithContext                                 sync.RWMutex
	lockIAMAPIMockGetRole                                              sync.RWMutex
	lockIAMAPIMockGetRolePolicy                                        sync.RWMutex
	lockIAMAPIMockGetRolePolicyRequest                                 sync.RWMutex
	lockIAMAPIMockGetRolePolicyWithContext                             sync.RWMutex
	lockIAMAPIMockGetRoleRequest                                       sync.RWMutex
	lockIAMAPIMockGetRoleWithContext                                   sync.RWMutex
	lockIAMAPIMockGetSAMLProvider                                      sync.RWMutex
	lockIAMAPIMockGetSAMLProviderRequest                               sync.RWMutex
	lockIAMAPIMockGetSAMLProviderWithContext                           sync.RWMutex
	lockIAMAPIMockGetSSHPublicKey                                      sync.RWMutex
	lockIAMAPIMockGetSSHPublicKeyRequest                               sync.RWMutex
	lockIAMAPIMockGetSSHPublicKeyWithContext                           sync.RWMutex
	lockIAMAPIMockGetServerCertificate                                 sync.RWMutex
	lockIAMAPIMockGetServerCertificateRequest                          sync.RWMutex
	lockIAMAPIMockGetServerCertificateWithContext                      sync.RWMutex
	lockIAMAPIMockGetServiceLastAccessedDetails                        sync.RWMutex
	lockIAMAPIMockGetServiceLastAccessedDetailsRequest                 sync.RWMutex
	lockIAMAPIMockGetServiceLastAccessedDetailsWithContext             sync.RWMutex
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntities            sync.RWMutex
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesRequest     sync.RWMutex
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesWithContext sync.RWMutex
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatus                   sync.RWMutex
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusRequest            sync.RWMutex
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusWithContext        sync.RWMutex
	lockIAMAPIMockGetUser                                              sync.RWMutex
	lockIAMAPIMockGetUserPolicy                                        sync.RWMutex
	lockIAMAPIMockGetUserPolicyRequest                                 sync.RWMutex
	lockIAMAPIMockGetUserPolicyWithContext                             sync.RWMutex
	lockIAMAPIMockGetUserRequest                                       sync.RWMutex
	lockIAMAPIMockGetUserWithContext                                   sync.RWMutex
	lockIAMAPIMockListAccessKeys                                       sync.RWMutex
	lockIAMAPIMockListAccessKeysPages                                  sync.RWMutex
	lockIAMAPIMockListAccessKeysPagesWithContext                       sync.RWMutex
	lockIAMAPIMockListAccessKeysRequest                                sync.RWMutex
	lockIAMAPIMockListAccessKeysWithContext                            sync.RWMutex
	lockIAMAPIMockListAccountAliases                                   sync.RWMutex
	lockIAMAPIMockListAccountAliasesPages                              sync.RWMutex
	lockIAMAPIMockListAccountAliasesPagesWithContext                   sync.RWMutex
	lockIAMAPIMockListAccountAliasesRequest                            sync.RWMutex
	lockIAMAPIMockListAccountAliasesWithContext                        sync.RWMutex
	lockIAMAPIMockListAttachedGroupPolicies                            sync.RWMutex
	lockIAMAPIMockListAttachedGroupPoliciesPages                       sync.RWMutex
	lockIAMAPIMockListAttachedGroupPoliciesPagesWithContext            sync.RWMutex
	lockIAMAPIMockListAttachedGroupPoliciesRequest                     sync.RWMutex
	lockIAMAPIMockListAttachedGroupPoliciesWithContext                 sync.RWMutex
	lockIAMAPIMockListAttachedRolePolicies                             sync.RWMutex
	lockIAMAPIMockListAttachedRolePoliciesPages                        sync.RWMutex
	lockIAMAPIMockListAttachedRolePoliciesPagesWithContext             sync.RWMutex
	lockIAMAPIMockListAttachedRolePoliciesRequest                      sync.RWMutex
	lockIAMAPIMockListAttachedRolePoliciesWithContext                  sync.RWMutex
	lockIAMAPIMockListAttachedUserPolicies                             sync.RWMutex
	lockIAMAPIMockListAttachedUserPoliciesPages                        sync.RWMutex
	lockIAMAPIMockListAttachedUserPoliciesPagesWithContext             sync.RWMutex
	lockIAMAPIMockListAttachedUserPoliciesRequest                      sync.RWMutex
	lockIAMAPIMockListAttachedUserPoliciesWithContext                  sync.RWMutex
	lockIAMAPIMockListEntitiesForPolicy                                sync.RWMutex
	lockIAMAPIMockListEntitiesForPolicyPages                           sync.RWMutex
	lockIAMAPIMockListEntitiesForPolicyPagesWithContext                sync.RWMutex
	lockIAMAPIMockListEntitiesForPolicyRequest                         sync.RWMutex
	lockIAMAPIMockListEntitiesForPolicyWithContext                     sync.RWMutex
	lockIAMAPIMockListGroupPolicies                                    sync.RWMutex
	lockIAMAPIMockListGroupPoliciesPages                               sync.RWMutex
	lockIAMAPIMockListGroupPoliciesPagesWithContext                    sync.RWMutex
	lockIAMAPIMockListGroupPoliciesRequest                             sync.RWMutex
	lockIAMAPIMockListGroupPoliciesWithContext                         sync.RWMutex
	lockIAMAPIMockListGroups                                           sync.RWMutex
	lockIAMAPIMockListGroupsForUser                                    sync.RWMutex
	lockIAMAPIMockListGroupsForUserPages                               sync.RWMutex
	lockIAMAPIMockListGroupsForUserPagesWithContext                    sync.RWMutex
	lockIAMAPIMockListGroupsForUserRequest                             sync.RWMutex
	lockIAMAPIMockListGroupsForUserWithContext                         sync.RWMutex
	lockIAMAPIMockListGroupsPages                                      sync.RWMutex
	lockIAMAPIMockListGroupsPagesWithContext                           sync.RWMutex
	lockIAMAPIMockListGroupsRequest                                    sync.RWMutex
	lockIAMAPIMockListGroupsWithContext                                sync.RWMutex
	lockIAMAPIMockListInstanceProfiles                                 sync.RWMutex
	lockIAMAPIMockListInstanceProfilesForRole                          sync.RWMutex
	lockIAMAPIMockListInstanceProfilesForRolePages                     sync.RWMutex
	lockIAMAPIMockListInstanceProfilesForRolePagesWithContext          sync.RWMutex
	lockIAMAPIMockListInstanceProfilesForRoleRequest                   sync.RWMutex
	lockIAMAPIMockListInstanceProfilesForRoleWithContext               sync.RWMutex
	lockIAMAPIMockListInstanceProfilesPages                            sync.RWMutex
	lockIAMAPIMockListInstanceProfilesPagesWithContext                 sync.RWMutex
	lockIAMAPIMockListInstanceProfilesRequest                          sync.RWMutex
	lockIAMAPIMockListInstanceProfilesWithContext                      sync.RWMutex
	lockIAMAPIMockListMFADevices                                       sync.RWMutex
	lockIAMAPIMockListMFADevicesPages                                  sync.RWMutex
	lockIAMAPIMockListMFADevicesPagesWithContext                       sync.RWMutex
	lockIAMAPIMockListMFADevicesRequest                                sync.RWMutex
	lockIAMAPIMockListMFADevicesWithContext                            sync.RWMutex
	lockIAMAPIMockListOpenIDConnectProviders                           sync.RWMutex
	lockIAMAPIMockListOpenIDConnectProvidersRequest                    sync.RWMutex
	lockIAMAPIMockListOpenIDConnectProvidersWithContext                sync.RWMutex
	lockIAMAPIMockListPolicies                                         sync.RWMutex
	lockIAMAPIMockListPoliciesGrantingServiceAccess                    sync.RWMutex
	lockIAMAPIMockListPoliciesGrantingServiceAccessRequest             sync.RWMutex
	lockIAMAPIMockListPoliciesGrantingServiceAccessWithContext         sync.RWMutex
	lockIAMAPIMockListPoliciesPages                                    sync.RWMutex
	lockIAMAPIMockListPoliciesPagesWithContext                         sync.RWMutex
	lockIAMAPIMockListPoliciesRequest                                  sync.RWMutex
	lockIAMAPIMockListPoliciesWithContext                              sync.RWMutex
	lockIAMAPIMockListPolicyVersions                                   sync.RWMutex
	lockIAMAPIMockListPolicyVersionsPages                              sync.RWMutex
	lockIAMAPIMockListPolicyVersionsPagesWithContext                   sync.RWMutex
	lockIAMAPIMockListPolicyVersionsRequest                            sync.RWMutex
	lockIAMAPIMockListPolicyVersionsWithContext                        sync.RWMutex
	lockIAMAPIMockListRolePolicies                                     sync.RWMutex
	lockIAMAPIMockListRolePoliciesPages                                sync.RWMutex
	lockIAMAPIMockListRolePoliciesPagesWithContext                     sync.RWMutex
	lockIAMAPIMockListRolePoliciesRequest                              sync.RWMutex
	lockIAMAPIMockListRolePoliciesWithContext                          sync.RWMutex
	lockIAMAPIMockListRoleTags                                         sync.RWMutex
	lockIAMAPIMockListRoleTagsRequest                                  sync.RWMutex
	lockIAMAPIMockListRoleTagsWithContext                              sync.RWMutex
	lockIAMAPIMockListRoles                                            sync.RWMutex
	lockIAMAPIMockListRolesPages                                       sync.RWMutex
	lockIAMAPIMockListRolesPagesWithContext                            sync.RWMutex
	lockIAMAPIMockListRolesRequest                                     sync.RWMutex
	lockIAMAPIMockListRolesWithContext                                 sync.RWMutex
	lockIAMAPIMockListSAMLProviders                                    sync.RWMutex
	lockIAMAPIMockListSAMLProvidersRequest                             sync.RWMutex
	lockIAMAPIMockListSAMLProvidersWithContext                         sync.RWMutex
	lockIAMAPIMockListSSHPublicKeys                                    sync.RWMutex
	lockIAMAPIMockListSSHPublicKeysPages                               sync.RWMutex
	lockIAMAPIMockListSSHPublicKeysPagesWithContext                    sync.RWMutex
	lockIAMAPIMockListSSHPublicKeysRequest                             sync.RWMutex
	lockIAMAPIMockListSSHPublicKeysWithContext                         sync.RWMutex
	lockIAMAPIMockListServerCertificates                               sync.RWMutex
	lockIAMAPIMockListServerCertificatesPages                          sync.RWMutex
	lockIAMAPIMockListServerCertificatesPagesWithContext               sync.RWMutex
	lockIAMAPIMockListServerCertificatesRequest                        sync.RWMutex
	lockIAMAPIMockListServerCertificatesWithContext                    sync.RWMutex
	lockIAMAPIMockListServiceSpecificCredentials                       sync.RWMutex
	lockIAMAPIMockListServiceSpecificCredentialsRequest                sync.RWMutex
	lockIAMAPIMockListServiceSpecificCredentialsWithContext            sync.RWMutex
	lockIAMAPIMockListSigningCertificates                              sync.RWMutex
	lockIAMAPIMockListSigningCertificatesPages                         sync.RWMutex
	lockIAMAPIMockListSigningCertificatesPagesWithContext              sync.RWMutex
	lockIAMAPIMockListSigningCertificatesRequest                       sync.RWMutex
	lockIAMAPIMockListSigningCertificatesWithContext                   sync.RWMutex
	lockIAMAPIMockListUserPolicies                                     sync.RWMutex
	lockIAMAPIMockListUserPoliciesPages                                sync.RWMutex
	lockIAMAPIMockListUserPoliciesPagesWithContext                     sync.RWMutex
	lockIAMAPIMockListUserPoliciesRequest                              sync.RWMutex
	lockIAMAPIMockListUserPoliciesWithContext                          sync.RWMutex
	lockIAMAPIMockListUserTags                                         sync.RWMutex
	lockIAMAPIMockListUserTagsRequest                                  sync.RWMutex
	lockIAMAPIMockListUserTagsWithContext                              sync.RWMutex
	lockIAMAPIMockListUsers                                            sync.RWMutex
	lockIAMAPIMockListUsersPages                                       sync.RWMutex
	lockIAMAPIMockListUsersPagesWithContext                            sync.RWMutex
	lockIAMAPIMockListUsersRequest                                     sync.RWMutex
	lockIAMAPIMockListUsersWithContext                                 sync.RWMutex
	lockIAMAPIMockListVirtualMFADevices                                sync.RWMutex
	lockIAMAPIMockListVirtualMFADevicesPages                           sync.RWMutex
	lockIAMAPIMockListVirtualMFADevicesPagesWithContext                sync.RWMutex
	lockIAMAPIMockListVirtualMFADevicesRequest                         sync.RWMutex
	lockIAMAPIMockListVirtualMFADevicesWithContext                     sync.RWMutex
	lockIAMAPIMockPutGroupPolicy                                       sync.RWMutex
	lockIAMAPIMockPutGroupPolicyRequest                                sync.RWMutex
	lockIAMAPIMockPutGroupPolicyWithContext                            sync.RWMutex
	lockIAMAPIMockPutRolePermissionsBoundary                           sync.RWMutex
	lockIAMAPIMockPutRolePermissionsBoundaryRequest                    sync.RWMutex
	lockIAMAPIMockPutRolePermissionsBoundaryWithContext                sync.RWMutex
	lockIAMAPIMockPutRolePolicy                                        sync.RWMutex
	lockIAMAPIMockPutRolePolicyRequest                                 sync.RWMutex
	lockIAMAPIMockPutRolePolicyWithContext                             sync.RWMutex
	lockIAMAPIMockPutUserPermissionsBoundary                           sync.RWMutex
	lockIAMAPIMockPutUserPermissionsBoundaryRequest                    sync.RWMutex
	lockIAMAPIMockPutUserPermissionsBoundaryWithContext                sync.RWMutex
	lockIAMAPIMockPutUserPolicy                                        sync.RWMutex
	lockIAMAPIMockPutUserPolicyRequest                                 sync.RWMutex
	lockIAMAPIMockPutUserPolicyWithContext                             sync.RWMutex
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProvider              sync.RWMutex
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderRequest       sync.RWMutex
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderWithContext   sync.RWMutex
	lockIAMAPIMockRemoveRoleFromInstanceProfile                        sync.RWMutex
	lockIAMAPIMockRemoveRoleFromInstanceProfileRequest                 sync.RWMutex
	lockIAMAPIMockRemoveRoleFromInstanceProfileWithContext             sync.RWMutex
	lockIAMAPIMockRemoveUserFromGroup                                  sync.RWMutex
	lockIAMAPIMockRemoveUserFromGroupRequest                           sync.RWMutex
	lockIAMAPIMockRemoveUserFromGroupWithContext                       sync.RWMutex
	lockIAMAPIMockResetServiceSpecificCredential                       sync.RWMutex
	lockIAMAPIMockResetServiceSpecificCredentialRequest                sync.RWMutex
	lockIAMAPIMockResetServiceSpecificCredentialWithContext            sync.RWMutex
	lockIAMAPIMockResyncMFADevice                                      sync.RWMutex
	lockIAMAPIMockResyncMFADeviceRequest                               sync.RWMutex
	lockIAMAPIMockResyncMFADeviceWithContext                           sync.RWMutex
	lockIAMAPIMockSetDefaultPolicyVersion                              sync.RWMutex
	lockIAMAPIMockSetDefaultPolicyVersionRequest                       sync.RWMutex
	lockIAMAPIMockSetDefaultPolicyVersionWithContext                   sync.RWMutex
	lockIAMAPIMockSetSecurityTokenServicePreferences                   sync.RWMutex
	lockIAMAPIMockSetSecurityTokenServicePreferencesRequest            sync.RWMutex
	lockIAMAPIMockSetSecurityTokenServicePreferencesWithContext        sync.RWMutex
	lockIAMAPIMockSimulateCustomPolicy                                 sync.RWMutex
	lockIAMAPIMockSimulateCustomPolicyPages                            sync.RWMutex
	lockIAMAPIMockSimulateCustomPolicyPagesWithContext                 sync.RWMutex
	lockIAMAPIMockSimulateCustomPolicyRequest                          sync.RWMutex
	lockIAMAPIMockSimulateCustomPolicyWithContext                      sync.RWMutex
	lockIAMAPIMockSimulatePrincipalPolicy                              sync.RWMutex
	lockIAMAPIMockSimulatePrincipalPolicyPages                         sync.RWMutex
	lockIAMAPIMockSimulatePrincipalPolicyPagesWithContext              sync.RWMutex
	lockIAMAPIMockSimulatePrincipalPolicyRequest                       sync.RWMutex
	lockIAMAPIMockSimulatePrincipalPolicyWithContext                   sync.RWMutex
	lockIAMAPIMockTagRole                                              sync.RWMutex
	lockIAMAPIMockTagRoleRequest                                       sync.RWMutex
	lockIAMAPIMockTagRoleWithContext                                   sync.RWMutex
	lockIAMAPIMockTagUser                                              sync.RWMutex
	lockIAMAPIMockTagUserRequest                                       sync.RWMutex
	lockIAMAPIMockTagUserWithContext                                   sync.RWMutex
	lockIAMAPIMockUntagRole                                            sync.RWMutex
	lockIAMAPIMockUntagRoleRequest                                     sync.RWMutex
	lockIAMAPIMockUntagRoleWithContext                                 sync.RWMutex
	lockIAMAPIMockUntagUser                                            sync.RWMutex
	lockIAMAPIMockUntagUserRequest                                     sync.RWMutex
	lockIAMAPIMockUntagUserWithContext                                 sync.RWMutex
	lockIAMAPIMockUpdateAccessKey                                      sync.RWMutex
	lockIAMAPIMockUpdateAccessKeyRequest                               sync.RWMutex
	lockIAMAPIMockUpdateAccessKeyWithContext                           sync.RWMutex
	lockIAMAPIMockUpdateAccountPasswordPolicy                          sync.RWMutex
	lockIAMAPIMockUpdateAccountPasswordPolicyRequest                   sync.RWMutex
	lockIAMAPIMockUpdateAccountPasswordPolicyWithContext               sync.RWMutex
	lockIAMAPIMockUpdateAssumeRolePolicy                               sync.RWMutex
	lockIAMAPIMockUpdateAssumeRolePolicyRequest                        sync.RWMutex
	lockIAMAPIMockUpdateAssumeRolePolicyWithContext                    sync.RWMutex
	lockIAMAPIMockUpdateGroup                                          sync.RWMutex
	lockIAMAPIMockUpdateGroupRequest                                   sync.RWMutex
	lockIAMAPIMockUpdateGroupWithContext                               sync.RWMutex
	lockIAMAPIMockUpdateLoginProfile                                   sync.RWMutex
	lockIAMAPIMockUpdateLoginProfileRequest                            sync.RWMutex
	lockIAMAPIMockUpdateLoginProfileWithContext                        sync.RWMutex
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprint                sync.RWMutex
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintRequest         sync.RWMutex
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintWithContext     sync.RWMutex
	lockIAMAPIMockUpdateRole                                           sync.RWMutex
	lockIAMAPIMockUpdateRoleDescription                                sync.RWMutex
	lockIAMAPIMockUpdateRoleDescriptionRequest                         sync.RWMutex
	lockIAMAPIMockUpdateRoleDescriptionWithContext                     sync.RWMutex
	lockIAMAPIMockUpdateRoleRequest                                    sync.RWMutex
	lockIAMAPIMockUpdateRoleWithContext                                sync.RWMutex
	lockIAMAPIMockUpdateSAMLProvider                                   sync.RWMutex
	lockIAMAPIMockUpdateSAMLProviderRequest                            sync.RWMutex
	lockIAMAPIMockUpdateSAMLProviderWithContext                        sync.RWMutex
	lockIAMAPIMockUpdateSSHPublicKey                                   sync.RWMutex
	lockIAMAPIMockUpdateSSHPublicKeyRequest                            sync.RWMutex
	lockIAMAPIMockUpdateSSHPublicKeyWithContext                        sync.RWMutex
	lockIAMAPIMockUpdateServerCertificate                              sync.RWMutex
	lockIAMAPIMockUpdateServerCertificateRequest                       sync.RWMutex
	lockIAMAPIMockUpdateServerCertificateWithContext                   sync.RWMutex
	lockIAMAPIMockUpdateServiceSpecificCredential                      sync.RWMutex
	lockIAMAPIMockUpdateServiceSpecificCredentialRequest               sync.RWMutex
	lockIAMAPIMockUpdateServiceSpecificCredentialWithContext           sync.RWMutex
	lockIAMAPIMockUpdateSigningCertificate                             sync.RWMutex
	lockIAMAPIMockUpdateSigningCertificateRequest                      sync.RWMutex
	lockIAMAPIMockUpdateSigningCertificateWithContext                  sync.RWMutex
	lockIAMAPIMockUpdateUser                                           sync.RWMutex
	lockIAMAPIMockUpdateUserRequest                                    sync.RWMutex
	lockIAMAPIMockUpdateUserWithContext                                sync.RWMutex
	lockIAMAPIMockUploadSSHPublicKey                                   sync.RWMutex
	lockIAMAPIMockUploadSSHPublicKeyRequest                            sync.RWMutex
	lockIAMAPIMockUploadSSHPublicKeyWithContext                        sync.RWMutex
	lockIAMAPIMockUploadServerCertificate                              sync.RWMutex
	lockIAMAPIMockUploadServerCertificateRequest                       sync.RWMutex
	lockIAMAPIMockUploadServerCertificateWithContext                   sync.RWMutex
	lockIAMAPIMockUploadSigningCertificate                             sync.RWMutex
	lockIAMAPIMockUploadSigningCertificateRequest                      sync.RWMutex
	lockIAMAPIMockUploadSigningCertificateWithContext                  sync.RWMutex
	lockIAMAPIMockWaitUntilInstanceProfileExists                       sync.RWMutex
	lockIAMAPIMockWaitUntilInstanceProfileExistsWithContext            sync.RWMutex
	lockIAMAPIMockWaitUntilPolicyExists                                sync.RWMutex
	lockIAMAPIMockWaitUntilPolicyExistsWithContext                     sync.RWMutex
	lockIAMAPIMockWaitUntilRoleExists                                  sync.RWMutex
	lockIAMAPIMockWaitUntilRoleExistsWithContext                       sync.RWMutex
	lockIAMAPIMockWaitUntilUserExists                                  sync.RWMutex
	lockIAMAPIMockWaitUntilUserExistsWithContext                       sync.RWMutex
)

// Ensure, that IAMAPIMock does implement IAMAPI.
// If this is not the case, regenerate this file with moq.
var _ iamiface.IAMAPI = &IAMAPIMock{}

// IAMAPIMock is a mock implementation of IAMAPI.
//
//     func TestSomethingThatUsesIAMAPI(t *testing.T) {
//
//         // make and configure a mocked IAMAPI
//         mockedIAMAPI := &IAMAPIMock{
//             AddClientIDToOpenIDConnectProviderFunc: func(in1 *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the AddClientIDToOpenIDConnectProvider method")
//             },
//             AddClientIDToOpenIDConnectProviderRequestFunc: func(in1 *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput) {
// 	               panic("mock out the AddClientIDToOpenIDConnectProviderRequest method")
//             },
//             AddClientIDToOpenIDConnectProviderWithContextFunc: func(in1 context.Context, in2 *iam.AddClientIDToOpenIDConnectProviderInput, in3 ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the AddClientIDToOpenIDConnectProviderWithContext method")
//             },
//             AddRoleToInstanceProfileFunc: func(in1 *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
// 	               panic("mock out the AddRoleToInstanceProfile method")
//             },
//             AddRoleToInstanceProfileRequestFunc: func(in1 *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput) {
// 	               panic("mock out the AddRoleToInstanceProfileRequest method")
//             },
//             AddRoleToInstanceProfileWithContextFunc: func(in1 context.Context, in2 *iam.AddRoleToInstanceProfileInput, in3 ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
// 	               panic("mock out the AddRoleToInstanceProfileWithContext method")
//             },
//             AddUserToGroupFunc: func(in1 *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
// 	               panic("mock out the AddUserToGroup method")
//             },
//             AddUserToGroupRequestFunc: func(in1 *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput) {
// 	               panic("mock out the AddUserToGroupRequest method")
//             },
//             AddUserToGroupWithContextFunc: func(in1 context.Context, in2 *iam.AddUserToGroupInput, in3 ...request.Option) (*iam.AddUserToGroupOutput, error) {
// 	               panic("mock out the AddUserToGroupWithContext method")
//             },
//             AttachGroupPolicyFunc: func(in1 *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
// 	               panic("mock out the AttachGroupPolicy method")
//             },
//             AttachGroupPolicyRequestFunc: func(in1 *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput) {
// 	               panic("mock out the AttachGroupPolicyRequest method")
//             },
//             AttachGroupPolicyWithContextFunc: func(in1 context.Context, in2 *iam.AttachGroupPolicyInput, in3 ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
// 	               panic("mock out the AttachGroupPolicyWithContext method")
//             },
//             AttachRolePolicyFunc: func(in1 *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
// 	               panic("mock out the AttachRolePolicy method")
//             },
//             AttachRolePolicyRequestFunc: func(in1 *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput) {
// 	               panic("mock out the AttachRolePolicyRequest method")
//             },
//             AttachRolePolicyWithContextFunc: func(in1 context.Context, in2 *iam.AttachRolePolicyInput, in3 ...request.Option) (*iam.AttachRolePolicyOutput, error) {
// 	               panic("mock out the AttachRolePolicyWithContext method")
//             },
//             AttachUserPolicyFunc: func(in1 *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
// 	               panic("mock out the AttachUserPolicy method")
//             },
//             AttachUserPolicyRequestFunc: func(in1 *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput) {
// 	               panic("mock out the AttachUserPolicyRequest method")
//             },
//             AttachUserPolicyWithContextFunc: func(in1 context.Context, in2 *iam.AttachUserPolicyInput, in3 ...request.Option) (*iam.AttachUserPolicyOutput, error) {
// 	               panic("mock out the AttachUserPolicyWithContext method")
//             },
//             ChangePasswordFunc: func(in1 *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
// 	               panic("mock out the ChangePassword method")
//             },
//             ChangePasswordRequestFunc: func(in1 *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput) {
// 	               panic("mock out the ChangePasswordRequest method")
//             },
//             ChangePasswordWithContextFunc: func(in1 context.Context, in2 *iam.ChangePasswordInput, in3 ...request.Option) (*iam.ChangePasswordOutput, error) {
// 	               panic("mock out the ChangePasswordWithContext method")
//             },
//             CreateAccessKeyFunc: func(in1 *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
// 	               panic("mock out the CreateAccessKey method")
//             },
//             CreateAccessKeyRequestFunc: func(in1 *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput) {
// 	               panic("mock out the CreateAccessKeyRequest method")
//             },
//             CreateAccessKeyWithContextFunc: func(in1 context.Context, in2 *iam.CreateAccessKeyInput, in3 ...request.Option) (*iam.CreateAccessKeyOutput, error) {
// 	               panic("mock out the CreateAccessKeyWithContext method")
//             },
//             CreateAccountAliasFunc: func(in1 *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
// 	               panic("mock out the CreateAccountAlias method")
//             },
//             CreateAccountAliasRequestFunc: func(in1 *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput) {
// 	               panic("mock out the CreateAccountAliasRequest method")
//             },
//             CreateAccountAliasWithContextFunc: func(in1 context.Context, in2 *iam.CreateAccountAliasInput, in3 ...request.Option) (*iam.CreateAccountAliasOutput, error) {
// 	               panic("mock out the CreateAccountAliasWithContext method")
//             },
//             CreateGroupFunc: func(in1 *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
// 	               panic("mock out the CreateGroup method")
//             },
//             CreateGroupRequestFunc: func(in1 *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput) {
// 	               panic("mock out the CreateGroupRequest method")
//             },
//             CreateGroupWithContextFunc: func(in1 context.Context, in2 *iam.CreateGroupInput, in3 ...request.Option) (*iam.CreateGroupOutput, error) {
// 	               panic("mock out the CreateGroupWithContext method")
//             },
//             CreateInstanceProfileFunc: func(in1 *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
// 	               panic("mock out the CreateInstanceProfile method")
//             },
//             CreateInstanceProfileRequestFunc: func(in1 *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput) {
// 	               panic("mock out the CreateInstanceProfileRequest method")
//             },
//             CreateInstanceProfileWithContextFunc: func(in1 context.Context, in2 *iam.CreateInstanceProfileInput, in3 ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
// 	               panic("mock out the CreateInstanceProfileWithContext method")
//             },
//             CreateLoginProfileFunc: func(in1 *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
// 	               panic("mock out the CreateLoginProfile method")
//             },
//             CreateLoginProfileRequestFunc: func(in1 *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput) {
// 	               panic("mock out the CreateLoginProfileRequest method")
//             },
//             CreateLoginProfileWithContextFunc: func(in1 context.Context, in2 *iam.CreateLoginProfileInput, in3 ...request.Option) (*iam.CreateLoginProfileOutput, error) {
// 	               panic("mock out the CreateLoginProfileWithContext method")
//             },
//             CreateOpenIDConnectProviderFunc: func(in1 *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the CreateOpenIDConnectProvider method")
//             },
//             CreateOpenIDConnectProviderRequestFunc: func(in1 *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput) {
// 	               panic("mock out the CreateOpenIDConnectProviderRequest method")
//             },
//             CreateOpenIDConnectProviderWithContextFunc: func(in1 context.Context, in2 *iam.CreateOpenIDConnectProviderInput, in3 ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the CreateOpenIDConnectProviderWithContext method")
//             },
//             CreatePolicyFunc: func(in1 *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
// 	               panic("mock out the CreatePolicy method")
//             },
//             CreatePolicyRequestFunc: func(in1 *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput) {
// 	               panic("mock out the CreatePolicyRequest method")
//             },
//             CreatePolicyVersionFunc: func(in1 *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
// 	               panic("mock out the CreatePolicyVersion method")
//             },
//             CreatePolicyVersionRequestFunc: func(in1 *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput) {
// 	               panic("mock out the CreatePolicyVersionRequest method")
//             },
//             CreatePolicyVersionWithContextFunc: func(in1 context.Context, in2 *iam.CreatePolicyVersionInput, in3 ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
// 	               panic("mock out the CreatePolicyVersionWithContext method")
//             },
//             CreatePolicyWithContextFunc: func(in1 context.Context, in2 *iam.CreatePolicyInput, in3 ...request.Option) (*iam.CreatePolicyOutput, error) {
// 	               panic("mock out the CreatePolicyWithContext method")
//             },
//             CreateRoleFunc: func(in1 *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
// 	               panic("mock out the CreateRole method")
//             },
//             CreateRoleRequestFunc: func(in1 *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput) {
// 	               panic("mock out the CreateRoleRequest method")
//             },
//             CreateRoleWithContextFunc: func(in1 context.Context, in2 *iam.CreateRoleInput, in3 ...request.Option) (*iam.CreateRoleOutput, error) {
// 	               panic("mock out the CreateRoleWithContext method")
//             },
//             CreateSAMLProviderFunc: func(in1 *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
// 	               panic("mock out the CreateSAMLProvider method")
//             },
//             CreateSAMLProviderRequestFunc: func(in1 *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput) {
// 	               panic("mock out the CreateSAMLProviderRequest method")
//             },
//             CreateSAMLProviderWithContextFunc: func(in1 context.Context, in2 *iam.CreateSAMLProviderInput, in3 ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
// 	               panic("mock out the CreateSAMLProviderWithContext method")
//             },
//             CreateServiceLinkedRoleFunc: func(in1 *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
// 	               panic("mock out the CreateServiceLinkedRole method")
//             },
//             CreateServiceLinkedRoleRequestFunc: func(in1 *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput) {
// 	               panic("mock out the CreateServiceLinkedRoleRequest method")
//             },
//             CreateServiceLinkedRoleWithContextFunc: func(in1 context.Context, in2 *iam.CreateServiceLinkedRoleInput, in3 ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
// 	               panic("mock out the CreateServiceLinkedRoleWithContext method")
//             },
//             CreateServiceSpecificCredentialFunc: func(in1 *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the CreateServiceSpecificCredential method")
//             },
//             CreateServiceSpecificCredentialRequestFunc: func(in1 *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput) {
// 	               panic("mock out the CreateServiceSpecificCredentialRequest method")
//             },
//             CreateServiceSpecificCredentialWithContextFunc: func(in1 context.Context, in2 *iam.CreateServiceSpecificCredentialInput, in3 ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the CreateServiceSpecificCredentialWithContext method")
//             },
//             CreateUserFunc: func(in1 *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
// 	               panic("mock out the CreateUser method")
//             },
//             CreateUserRequestFunc: func(in1 *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput) {
// 	               panic("mock out the CreateUserRequest method")
//             },
//             CreateUserWithContextFunc: func(in1 context.Context, in2 *iam.CreateUserInput, in3 ...request.Option) (*iam.CreateUserOutput, error) {
// 	               panic("mock out the CreateUserWithContext method")
//             },
//             CreateVirtualMFADeviceFunc: func(in1 *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
// 	               panic("mock out the CreateVirtualMFADevice method")
//             },
//             CreateVirtualMFADeviceRequestFunc: func(in1 *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput) {
// 	               panic("mock out the CreateVirtualMFADeviceRequest method")
//             },
//             CreateVirtualMFADeviceWithContextFunc: func(in1 context.Context, in2 *iam.CreateVirtualMFADeviceInput, in3 ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
// 	               panic("mock out the CreateVirtualMFADeviceWithContext method")
//             },
//             DeactivateMFADeviceFunc: func(in1 *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
// 	               panic("mock out the DeactivateMFADevice method")
//             },
//             DeactivateMFADeviceRequestFunc: func(in1 *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput) {
// 	               panic("mock out the DeactivateMFADeviceRequest method")
//             },
//             DeactivateMFADeviceWithContextFunc: func(in1 context.Context, in2 *iam.DeactivateMFADeviceInput, in3 ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
// 	               panic("mock out the DeactivateMFADeviceWithContext method")
//             },
//             DeleteAccessKeyFunc: func(in1 *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
// 	               panic("mock out the DeleteAccessKey method")
//             },
//             DeleteAccessKeyRequestFunc: func(in1 *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput) {
// 	               panic("mock out the DeleteAccessKeyRequest method")
//             },
//             DeleteAccessKeyWithContextFunc: func(in1 context.Context, in2 *iam.DeleteAccessKeyInput, in3 ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
// 	               panic("mock out the DeleteAccessKeyWithContext method")
//             },
//             DeleteAccountAliasFunc: func(in1 *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
// 	               panic("mock out the DeleteAccountAlias method")
//             },
//             DeleteAccountAliasRequestFunc: func(in1 *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput) {
// 	               panic("mock out the DeleteAccountAliasRequest method")
//             },
//             DeleteAccountAliasWithContextFunc: func(in1 context.Context, in2 *iam.DeleteAccountAliasInput, in3 ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
// 	               panic("mock out the DeleteAccountAliasWithContext method")
//             },
//             DeleteAccountPasswordPolicyFunc: func(in1 *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
// 	               panic("mock out the DeleteAccountPasswordPolicy method")
//             },
//             DeleteAccountPasswordPolicyRequestFunc: func(in1 *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput) {
// 	               panic("mock out the DeleteAccountPasswordPolicyRequest method")
//             },
//             DeleteAccountPasswordPolicyWithContextFunc: func(in1 context.Context, in2 *iam.DeleteAccountPasswordPolicyInput, in3 ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
// 	               panic("mock out the DeleteAccountPasswordPolicyWithContext method")
//             },
//             DeleteGroupFunc: func(in1 *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
// 	               panic("mock out the DeleteGroup method")
//             },
//             DeleteGroupPolicyFunc: func(in1 *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
// 	               panic("mock out the DeleteGroupPolicy method")
//             },
//             DeleteGroupPolicyRequestFunc: func(in1 *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput) {
// 	               panic("mock out the DeleteGroupPolicyRequest method")
//             },
//             DeleteGroupPolicyWithContextFunc: func(in1 context.Context, in2 *iam.DeleteGroupPolicyInput, in3 ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
// 	               panic("mock out the DeleteGroupPolicyWithContext method")
//             },
//             DeleteGroupRequestFunc: func(in1 *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput) {
// 	               panic("mock out the DeleteGroupRequest method")
//             },
//             DeleteGroupWithContextFunc: func(in1 context.Context, in2 *iam.DeleteGroupInput, in3 ...request.Option) (*iam.DeleteGroupOutput, error) {
// 	               panic("mock out the DeleteGroupWithContext method")
//             },
//             DeleteInstanceProfileFunc: func(in1 *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
// 	               panic("mock out the DeleteInstanceProfile method")
//             },
//             DeleteInstanceProfileRequestFunc: func(in1 *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput) {
// 	               panic("mock out the DeleteInstanceProfileRequest method")
//             },
//             DeleteInstanceProfileWithContextFunc: func(in1 context.Context, in2 *iam.DeleteInstanceProfileInput, in3 ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
// 	               panic("mock out the DeleteInstanceProfileWithContext method")
//             },
//             DeleteLoginProfileFunc: func(in1 *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
// 	               panic("mock out the DeleteLoginProfile method")
//             },
//             DeleteLoginProfileRequestFunc: func(in1 *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput) {
// 	               panic("mock out the DeleteLoginProfileRequest method")
//             },
//             DeleteLoginProfileWithContextFunc: func(in1 context.Context, in2 *iam.DeleteLoginProfileInput, in3 ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
// 	               panic("mock out the DeleteLoginProfileWithContext method")
//             },
//             DeleteOpenIDConnectProviderFunc: func(in1 *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the DeleteOpenIDConnectProvider method")
//             },
//             DeleteOpenIDConnectProviderRequestFunc: func(in1 *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput) {
// 	               panic("mock out the DeleteOpenIDConnectProviderRequest method")
//             },
//             DeleteOpenIDConnectProviderWithContextFunc: func(in1 context.Context, in2 *iam.DeleteOpenIDConnectProviderInput, in3 ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the DeleteOpenIDConnectProviderWithContext method")
//             },
//             DeletePolicyFunc: func(in1 *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
// 	               panic("mock out the DeletePolicy method")
//             },
//             DeletePolicyRequestFunc: func(in1 *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput) {
// 	               panic("mock out the DeletePolicyRequest method")
//             },
//             DeletePolicyVersionFunc: func(in1 *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
// 	               panic("mock out the DeletePolicyVersion method")
//             },
//             DeletePolicyVersionRequestFunc: func(in1 *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput) {
// 	               panic("mock out the DeletePolicyVersionRequest method")
//             },
//             DeletePolicyVersionWithContextFunc: func(in1 context.Context, in2 *iam.DeletePolicyVersionInput, in3 ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
// 	               panic("mock out the DeletePolicyVersionWithContext method")
//             },
//             DeletePolicyWithContextFunc: func(in1 context.Context, in2 *iam.DeletePolicyInput, in3 ...request.Option) (*iam.DeletePolicyOutput, error) {
// 	               panic("mock out the DeletePolicyWithContext method")
//             },
//             DeleteRoleFunc: func(in1 *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
// 	               panic("mock out the DeleteRole method")
//             },
//             DeleteRolePermissionsBoundaryFunc: func(in1 *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
// 	               panic("mock out the DeleteRolePermissionsBoundary method")
//             },
//             DeleteRolePermissionsBoundaryRequestFunc: func(in1 *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput) {
// 	               panic("mock out the DeleteRolePermissionsBoundaryRequest method")
//             },
//             DeleteRolePermissionsBoundaryWithContextFunc: func(in1 context.Context, in2 *iam.DeleteRolePermissionsBoundaryInput, in3 ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
// 	               panic("mock out the DeleteRolePermissionsBoundaryWithContext method")
//             },
//             DeleteRolePolicyFunc: func(in1 *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
// 	               panic("mock out the DeleteRolePolicy method")
//             },
//             DeleteRolePolicyRequestFunc: func(in1 *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput) {
// 	               panic("mock out the DeleteRolePolicyRequest method")
//             },
//             DeleteRolePolicyWithContextFunc: func(in1 context.Context, in2 *iam.DeleteRolePolicyInput, in3 ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
// 	               panic("mock out the DeleteRolePolicyWithContext method")
//             },
//             DeleteRoleRequestFunc: func(in1 *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput) {
// 	               panic("mock out the DeleteRoleRequest method")
//             },
//             DeleteRoleWithContextFunc: func(in1 context.Context, in2 *iam.DeleteRoleInput, in3 ...request.Option) (*iam.DeleteRoleOutput, error) {
// 	               panic("mock out the DeleteRoleWithContext method")
//             },
//             DeleteSAMLProviderFunc: func(in1 *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
// 	               panic("mock out the DeleteSAMLProvider method")
//             },
//             DeleteSAMLProviderRequestFunc: func(in1 *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput) {
// 	               panic("mock out the DeleteSAMLProviderRequest method")
//             },
//             DeleteSAMLProviderWithContextFunc: func(in1 context.Context, in2 *iam.DeleteSAMLProviderInput, in3 ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
// 	               panic("mock out the DeleteSAMLProviderWithContext method")
//             },
//             DeleteSSHPublicKeyFunc: func(in1 *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
// 	               panic("mock out the DeleteSSHPublicKey method")
//             },
//             DeleteSSHPublicKeyRequestFunc: func(in1 *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput) {
// 	               panic("mock out the DeleteSSHPublicKeyRequest method")
//             },
//             DeleteSSHPublicKeyWithContextFunc: func(in1 context.Context, in2 *iam.DeleteSSHPublicKeyInput, in3 ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
// 	               panic("mock out the DeleteSSHPublicKeyWithContext method")
//             },
//             DeleteServerCertificateFunc: func(in1 *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
// 	               panic("mock out the DeleteServerCertificate method")
//             },
//             DeleteServerCertificateRequestFunc: func(in1 *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput) {
// 	               panic("mock out the DeleteServerCertificateRequest method")
//             },
//             DeleteServerCertificateWithContextFunc: func(in1 context.Context, in2 *iam.DeleteServerCertificateInput, in3 ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
// 	               panic("mock out the DeleteServerCertificateWithContext method")
//             },
//             DeleteServiceLinkedRoleFunc: func(in1 *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
// 	               panic("mock out the DeleteServiceLinkedRole method")
//             },
//             DeleteServiceLinkedRoleRequestFunc: func(in1 *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput) {
// 	               panic("mock out the DeleteServiceLinkedRoleRequest method")
//             },
//             DeleteServiceLinkedRoleWithContextFunc: func(in1 context.Context, in2 *iam.DeleteServiceLinkedRoleInput, in3 ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
// 	               panic("mock out the DeleteServiceLinkedRoleWithContext method")
//             },
//             DeleteServiceSpecificCredentialFunc: func(in1 *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the DeleteServiceSpecificCredential method")
//             },
//             DeleteServiceSpecificCredentialRequestFunc: func(in1 *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput) {
// 	               panic("mock out the DeleteServiceSpecificCredentialRequest method")
//             },
//             DeleteServiceSpecificCredentialWithContextFunc: func(in1 context.Context, in2 *iam.DeleteServiceSpecificCredentialInput, in3 ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the DeleteServiceSpecificCredentialWithContext method")
//             },
//             DeleteSigningCertificateFunc: func(in1 *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
// 	               panic("mock out the DeleteSigningCertificate method")
//             },
//             DeleteSigningCertificateRequestFunc: func(in1 *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput) {
// 	               panic("mock out the DeleteSigningCertificateRequest method")
//             },
//             DeleteSigningCertificateWithContextFunc: func(in1 context.Context, in2 *iam.DeleteSigningCertificateInput, in3 ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
// 	               panic("mock out the DeleteSigningCertificateWithContext method")
//             },
//             DeleteUserFunc: func(in1 *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
// 	               panic("mock out the DeleteUser method")
//             },
//             DeleteUserPermissionsBoundaryFunc: func(in1 *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
// 	               panic("mock out the DeleteUserPermissionsBoundary method")
//             },
//             DeleteUserPermissionsBoundaryRequestFunc: func(in1 *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput) {
// 	               panic("mock out the DeleteUserPermissionsBoundaryRequest method")
//             },
//             DeleteUserPermissionsBoundaryWithContextFunc: func(in1 context.Context, in2 *iam.DeleteUserPermissionsBoundaryInput, in3 ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
// 	               panic("mock out the DeleteUserPermissionsBoundaryWithContext method")
//             },
//             DeleteUserPolicyFunc: func(in1 *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
// 	               panic("mock out the DeleteUserPolicy method")
//             },
//             DeleteUserPolicyRequestFunc: func(in1 *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput) {
// 	               panic("mock out the DeleteUserPolicyRequest method")
//             },
//             DeleteUserPolicyWithContextFunc: func(in1 context.Context, in2 *iam.DeleteUserPolicyInput, in3 ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
// 	               panic("mock out the DeleteUserPolicyWithContext method")
//             },
//             DeleteUserRequestFunc: func(in1 *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput) {
// 	               panic("mock out the DeleteUserRequest method")
//             },
//             DeleteUserWithContextFunc: func(in1 context.Context, in2 *iam.DeleteUserInput, in3 ...request.Option) (*iam.DeleteUserOutput, error) {
// 	               panic("mock out the DeleteUserWithContext method")
//             },
//             DeleteVirtualMFADeviceFunc: func(in1 *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
// 	               panic("mock out the DeleteVirtualMFADevice method")
//             },
//             DeleteVirtualMFADeviceRequestFunc: func(in1 *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput) {
// 	               panic("mock out the DeleteVirtualMFADeviceRequest method")
//             },
//             DeleteVirtualMFADeviceWithContextFunc: func(in1 context.Context, in2 *iam.DeleteVirtualMFADeviceInput, in3 ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
// 	               panic("mock out the DeleteVirtualMFADeviceWithContext method")
//             },
//             DetachGroupPolicyFunc: func(in1 *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
// 	               panic("mock out the DetachGroupPolicy method")
//             },
//             DetachGroupPolicyRequestFunc: func(in1 *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput) {
// 	               panic("mock out the DetachGroupPolicyRequest method")
//             },
//             DetachGroupPolicyWithContextFunc: func(in1 context.Context, in2 *iam.DetachGroupPolicyInput, in3 ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
// 	               panic("mock out the DetachGroupPolicyWithContext method")
//             },
//             DetachRolePolicyFunc: func(in1 *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
// 	               panic("mock out the DetachRolePolicy method")
//             },
//             DetachRolePolicyRequestFunc: func(in1 *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput) {
// 	               panic("mock out the DetachRolePolicyRequest method")
//             },
//             DetachRolePolicyWithContextFunc: func(in1 context.Context, in2 *iam.DetachRolePolicyInput, in3 ...request.Option) (*iam.DetachRolePolicyOutput, error) {
// 	               panic("mock out the DetachRolePolicyWithContext method")
//             },
//             DetachUserPolicyFunc: func(in1 *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
// 	               panic("mock out the DetachUserPolicy method")
//             },
//             DetachUserPolicyRequestFunc: func(in1 *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput) {
// 	               panic("mock out the DetachUserPolicyRequest method")
//             },
//             DetachUserPolicyWithContextFunc: func(in1 context.Context, in2 *iam.DetachUserPolicyInput, in3 ...request.Option) (*iam.DetachUserPolicyOutput, error) {
// 	               panic("mock out the DetachUserPolicyWithContext method")
//             },
//             EnableMFADeviceFunc: func(in1 *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
// 	               panic("mock out the EnableMFADevice method")
//             },
//             EnableMFADeviceRequestFunc: func(in1 *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput) {
// 	               panic("mock out the EnableMFADeviceRequest method")
//             },
//             EnableMFADeviceWithContextFunc: func(in1 context.Context, in2 *iam.EnableMFADeviceInput, in3 ...request.Option) (*iam.EnableMFADeviceOutput, error) {
// 	               panic("mock out the EnableMFADeviceWithContext method")
//             },
//             GenerateCredentialReportFunc: func(in1 *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
// 	               panic("mock out the GenerateCredentialReport method")
//             },
//             GenerateCredentialReportRequestFunc: func(in1 *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput) {
// 	               panic("mock out the GenerateCredentialReportRequest method")
//             },
//             GenerateCredentialReportWithContextFunc: func(in1 context.Context, in2 *iam.GenerateCredentialReportInput, in3 ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
// 	               panic("mock out the GenerateCredentialReportWithContext method")
//             },
//             GenerateOrganizationsAccessReportFunc: func(in1 *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
// 	               panic("mock out the GenerateOrganizationsAccessReport method")
//             },
//             GenerateOrganizationsAccessReportRequestFunc: func(in1 *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput) {
// 	               panic("mock out the GenerateOrganizationsAccessReportRequest method")
//             },
//             GenerateOrganizationsAccessReportWithContextFunc: func(in1 context.Context, in2 *iam.GenerateOrganizationsAccessReportInput, in3 ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {
// 	               panic("mock out the GenerateOrganizationsAccessReportWithContext method")
//             },
//             GenerateServiceLastAccessedDetailsFunc: func(in1 *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
// 	               panic("mock out the GenerateServiceLastAccessedDetails method")
//             },
//             GenerateServiceLastAccessedDetailsRequestFunc: func(in1 *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput) {
// 	               panic("mock out the GenerateServiceLastAccessedDetailsRequest method")
//             },
//             GenerateServiceLastAccessedDetailsWithContextFunc: func(in1 context.Context, in2 *iam.GenerateServiceLastAccessedDetailsInput, in3 ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
// 	               panic("mock out the GenerateServiceLastAccessedDetailsWithContext method")
//             },
//             GetAccessKeyLastUsedFunc: func(in1 *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
// 	               panic("mock out the GetAccessKeyLastUsed method")
//             },
//             GetAccessKeyLastUsedRequestFunc: func(in1 *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput) {
// 	               panic("mock out the GetAccessKeyLastUsedRequest method")
//             },
//             GetAccessKeyLastUsedWithContextFunc: func(in1 context.Context, in2 *iam.GetAccessKeyLastUsedInput, in3 ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
// 	               panic("mock out the GetAccessKeyLastUsedWithContext method")
//             },
//             GetAccountAuthorizationDetailsFunc: func(in1 *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
// 	               panic("mock out the GetAccountAuthorizationDetails method")
//             },
//             GetAccountAuthorizationDetailsPagesFunc: func(in1 *iam.GetAccountAuthorizationDetailsInput, in2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
// 	               panic("mock out the GetAccountAuthorizationDetailsPages method")
//             },
//             GetAccountAuthorizationDetailsPagesWithContextFunc: func(in1 context.Context, in2 *iam.GetAccountAuthorizationDetailsInput, in3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the GetAccountAuthorizationDetailsPagesWithContext method")
//             },
//             GetAccountAuthorizationDetailsRequestFunc: func(in1 *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput) {
// 	               panic("mock out the GetAccountAuthorizationDetailsRequest method")
//             },
//             GetAccountAuthorizationDetailsWithContextFunc: func(in1 context.Context, in2 *iam.GetAccountAuthorizationDetailsInput, in3 ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
// 	               panic("mock out the GetAccountAuthorizationDetailsWithContext method")
//             },
//             GetAccountPasswordPolicyFunc: func(in1 *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
// 	               panic("mock out the GetAccountPasswordPolicy method")
//             },
//             GetAccountPasswordPolicyRequestFunc: func(in1 *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput) {
// 	               panic("mock out the GetAccountPasswordPolicyRequest method")
//             },
//             GetAccountPasswordPolicyWithContextFunc: func(in1 context.Context, in2 *iam.GetAccountPasswordPolicyInput, in3 ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
// 	               panic("mock out the GetAccountPasswordPolicyWithContext method")
//             },
//             GetAccountSummaryFunc: func(in1 *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
// 	               panic("mock out the GetAccountSummary method")
//             },
//             GetAccountSummaryRequestFunc: func(in1 *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput) {
// 	               panic("mock out the GetAccountSummaryRequest method")
//             },
//             GetAccountSummaryWithContextFunc: func(in1 context.Context, in2 *iam.GetAccountSummaryInput, in3 ...request.Option) (*iam.GetAccountSummaryOutput, error) {
// 	               panic("mock out the GetAccountSummaryWithContext method")
//             },
//             GetContextKeysForCustomPolicyFunc: func(in1 *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
// 	               panic("mock out the GetContextKeysForCustomPolicy method")
//             },
//             GetContextKeysForCustomPolicyRequestFunc: func(in1 *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
// 	               panic("mock out the GetContextKeysForCustomPolicyRequest method")
//             },
//             GetContextKeysForCustomPolicyWithContextFunc: func(in1 context.Context, in2 *iam.GetContextKeysForCustomPolicyInput, in3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
// 	               panic("mock out the GetContextKeysForCustomPolicyWithContext method")
//             },
//             GetContextKeysForPrincipalPolicyFunc: func(in1 *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
// 	               panic("mock out the GetContextKeysForPrincipalPolicy method")
//             },
//             GetContextKeysForPrincipalPolicyRequestFunc: func(in1 *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
// 	               panic("mock out the GetContextKeysForPrincipalPolicyRequest method")
//             },
//             GetContextKeysForPrincipalPolicyWithContextFunc: func(in1 context.Context, in2 *iam.GetContextKeysForPrincipalPolicyInput, in3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
// 	               panic("mock out the GetContextKeysForPrincipalPolicyWithContext method")
//             },
//             GetCredentialReportFunc: func(in1 *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
// 	               panic("mock out the GetCredentialReport method")
//             },
//             GetCredentialReportRequestFunc: func(in1 *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput) {
// 	               panic("mock out the GetCredentialReportRequest method")
//             },
//             GetCredentialReportWithContextFunc: func(in1 context.Context, in2 *iam.GetCredentialReportInput, in3 ...request.Option) (*iam.GetCredentialReportOutput, error) {
// 	               panic("mock out the GetCredentialReportWithContext method")
//             },
//             GetGroupFunc: func(in1 *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
// 	               panic("mock out the GetGroup method")
//             },
//             GetGroupPagesFunc: func(in1 *iam.GetGroupInput, in2 func(*iam.GetGroupOutput, bool) bool) error {
// 	               panic("mock out the GetGroupPages method")
//             },
//             GetGroupPagesWithContextFunc: func(in1 context.Context, in2 *iam.GetGroupInput, in3 func(*iam.GetGroupOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the GetGroupPagesWithContext method")
//             },
//             GetGroupPolicyFunc: func(in1 *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
// 	               panic("mock out the GetGroupPolicy method")
//             },
//             GetGroupPolicyRequestFunc: func(in1 *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput) {
// 	               panic("mock out the GetGroupPolicyRequest method")
//             },
//             GetGroupPolicyWithContextFunc: func(in1 context.Context, in2 *iam.GetGroupPolicyInput, in3 ...request.Option) (*iam.GetGroupPolicyOutput, error) {
// 	               panic("mock out the GetGroupPolicyWithContext method")
//             },
//             GetGroupRequestFunc: func(in1 *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput) {
// 	               panic("mock out the GetGroupRequest method")
//             },
//             GetGroupWithContextFunc: func(in1 context.Context, in2 *iam.GetGroupInput, in3 ...request.Option) (*iam.GetGroupOutput, error) {
// 	               panic("mock out the GetGroupWithContext method")
//             },
//             GetInstanceProfileFunc: func(in1 *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
// 	               panic("mock out the GetInstanceProfile method")
//             },
//             GetInstanceProfileRequestFunc: func(in1 *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput) {
// 	               panic("mock out the GetInstanceProfileRequest method")
//             },
//             GetInstanceProfileWithContextFunc: func(in1 context.Context, in2 *iam.GetInstanceProfileInput, in3 ...request.Option) (*iam.GetInstanceProfileOutput, error) {
// 	               panic("mock out the GetInstanceProfileWithContext method")
//             },
//             GetLoginProfileFunc: func(in1 *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
// 	               panic("mock out the GetLoginProfile method")
//             },
//             GetLoginProfileRequestFunc: func(in1 *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput) {
// 	               panic("mock out the GetLoginProfileRequest method")
//             },
//             GetLoginProfileWithContextFunc: func(in1 context.Context, in2 *iam.GetLoginProfileInput, in3 ...request.Option) (*iam.GetLoginProfileOutput, error) {
// 	               panic("mock out the GetLoginProfileWithContext method")
//             },
//             GetOpenIDConnectProviderFunc: func(in1 *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the GetOpenIDConnectProvider method")
//             },
//             GetOpenIDConnectProviderRequestFunc: func(in1 *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput) {
// 	               panic("mock out the GetOpenIDConnectProviderRequest method")
//             },
//             GetOpenIDConnectProviderWithContextFunc: func(in1 context.Context, in2 *iam.GetOpenIDConnectProviderInput, in3 ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the GetOpenIDConnectProviderWithContext method")
//             },
//             GetOrganizationsAccessReportFunc: func(in1 *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
// 	               panic("mock out the GetOrganizationsAccessReport method")
//             },
//             GetOrganizationsAccessReportRequestFunc: func(in1 *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput) {
// 	               panic("mock out the GetOrganizationsAccessReportRequest method")
//             },
//             GetOrganizationsAccessReportWithContextFunc: func(in1 context.Context, in2 *iam.GetOrganizationsAccessReportInput, in3 ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {
// 	               panic("mock out the GetOrganizationsAccessReportWithContext method")
//             },
//             GetPolicyFunc: func(in1 *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
// 	               panic("mock out the GetPolicy method")
//             },
//             GetPolicyRequestFunc: func(in1 *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput) {
// 	               panic("mock out the GetPolicyRequest method")
//             },
//             GetPolicyVersionFunc: func(in1 *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
// 	               panic("mock out the GetPolicyVersion method")
//             },
//             GetPolicyVersionRequestFunc: func(in1 *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput) {
// 	               panic("mock out the GetPolicyVersionRequest method")
//             },
//             GetPolicyVersionWithContextFunc: func(in1 context.Context, in2 *iam.GetPolicyVersionInput, in3 ...request.Option) (*iam.GetPolicyVersionOutput, error) {
// 	               panic("mock out the GetPolicyVersionWithContext method")
//             },
//             GetPolicyWithContextFunc: func(in1 context.Context, in2 *iam.GetPolicyInput, in3 ...request.Option) (*iam.GetPolicyOutput, error) {
// 	               panic("mock out the GetPolicyWithContext method")
//             },
//             GetRoleFunc: func(in1 *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
// 	               panic("mock out the GetRole method")
//             },
//             GetRolePolicyFunc: func(in1 *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
// 	               panic("mock out the GetRolePolicy method")
//             },
//             GetRolePolicyRequestFunc: func(in1 *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput) {
// 	               panic("mock out the GetRolePolicyRequest method")
//             },
//             GetRolePolicyWithContextFunc: func(in1 context.Context, in2 *iam.GetRolePolicyInput, in3 ...request.Option) (*iam.GetRolePolicyOutput, error) {
// 	               panic("mock out the GetRolePolicyWithContext method")
//             },
//             GetRoleRequestFunc: func(in1 *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput) {
// 	               panic("mock out the GetRoleRequest method")
//             },
//             GetRoleWithContextFunc: func(in1 context.Context, in2 *iam.GetRoleInput, in3 ...request.Option) (*iam.GetRoleOutput, error) {
// 	               panic("mock out the GetRoleWithContext method")
//             },
//             GetSAMLProviderFunc: func(in1 *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
// 	               panic("mock out the GetSAMLProvider method")
//             },
//             GetSAMLProviderRequestFunc: func(in1 *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput) {
// 	               panic("mock out the GetSAMLProviderRequest method")
//             },
//             GetSAMLProviderWithContextFunc: func(in1 context.Context, in2 *iam.GetSAMLProviderInput, in3 ...request.Option) (*iam.GetSAMLProviderOutput, error) {
// 	               panic("mock out the GetSAMLProviderWithContext method")
//             },
//             GetSSHPublicKeyFunc: func(in1 *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
// 	               panic("mock out the GetSSHPublicKey method")
//             },
//             GetSSHPublicKeyRequestFunc: func(in1 *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput) {
// 	               panic("mock out the GetSSHPublicKeyRequest method")
//             },
//             GetSSHPublicKeyWithContextFunc: func(in1 context.Context, in2 *iam.GetSSHPublicKeyInput, in3 ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
// 	               panic("mock out the GetSSHPublicKeyWithContext method")
//             },
//             GetServerCertificateFunc: func(in1 *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
// 	               panic("mock out the GetServerCertificate method")
//             },
//             GetServerCertificateRequestFunc: func(in1 *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput) {
// 	               panic("mock out the GetServerCertificateRequest method")
//             },
//             GetServerCertificateWithContextFunc: func(in1 context.Context, in2 *iam.GetServerCertificateInput, in3 ...request.Option) (*iam.GetServerCertificateOutput, error) {
// 	               panic("mock out the GetServerCertificateWithContext method")
//             },
//             GetServiceLastAccessedDetailsFunc: func(in1 *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
// 	               panic("mock out the GetServiceLastAccessedDetails method")
//             },
//             GetServiceLastAccessedDetailsRequestFunc: func(in1 *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput) {
// 	               panic("mock out the GetServiceLastAccessedDetailsRequest method")
//             },
//             GetServiceLastAccessedDetailsWithContextFunc: func(in1 context.Context, in2 *iam.GetServiceLastAccessedDetailsInput, in3 ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {
// 	               panic("mock out the GetServiceLastAccessedDetailsWithContext method")
//             },
//             GetServiceLastAccessedDetailsWithEntitiesFunc: func(in1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
// 	               panic("mock out the GetServiceLastAccessedDetailsWithEntities method")
//             },
//             GetServiceLastAccessedDetailsWithEntitiesRequestFunc: func(in1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
// 	               panic("mock out the GetServiceLastAccessedDetailsWithEntitiesRequest method")
//             },
//             GetServiceLastAccessedDetailsWithEntitiesWithContextFunc: func(in1 context.Context, in2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput, in3 ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
// 	               panic("mock out the GetServiceLastAccessedDetailsWithEntitiesWithContext method")
//             },
//             GetServiceLinkedRoleDeletionStatusFunc: func(in1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
// 	               panic("mock out the GetServiceLinkedRoleDeletionStatus method")
//             },
//             GetServiceLinkedRoleDeletionStatusRequestFunc: func(in1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput) {
// 	               panic("mock out the GetServiceLinkedRoleDeletionStatusRequest method")
//             },
//             GetServiceLinkedRoleDeletionStatusWithContextFunc: func(in1 context.Context, in2 *iam.GetServiceLinkedRoleDeletionStatusInput, in3 ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
// 	               panic("mock out the GetServiceLinkedRoleDeletionStatusWithContext method")
//             },
//             GetUserFunc: func(in1 *iam.GetUserInput) (*iam.GetUserOutput, error) {
// 	               panic("mock out the GetUser method")
//             },
//             GetUserPolicyFunc: func(in1 *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
// 	               panic("mock out the GetUserPolicy method")
//             },
//             GetUserPolicyRequestFunc: func(in1 *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput) {
// 	               panic("mock out the GetUserPolicyRequest method")
//             },
//             GetUserPolicyWithContextFunc: func(in1 context.Context, in2 *iam.GetUserPolicyInput, in3 ...request.Option) (*iam.GetUserPolicyOutput, error) {
// 	               panic("mock out the GetUserPolicyWithContext method")
//             },
//             GetUserRequestFunc: func(in1 *iam.GetUserInput) (*request.Request, *iam.GetUserOutput) {
// 	               panic("mock out the GetUserRequest method")
//             },
//             GetUserWithContextFunc: func(in1 context.Context, in2 *iam.GetUserInput, in3 ...request.Option) (*iam.GetUserOutput, error) {
// 	               panic("mock out the GetUserWithContext method")
//             },
//             ListAccessKeysFunc: func(in1 *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
// 	               panic("mock out the ListAccessKeys method")
//             },
//             ListAccessKeysPagesFunc: func(in1 *iam.ListAccessKeysInput, in2 func(*iam.ListAccessKeysOutput, bool) bool) error {
// 	               panic("mock out the ListAccessKeysPages method")
//             },
//             ListAccessKeysPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListAccessKeysInput, in3 func(*iam.ListAccessKeysOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListAccessKeysPagesWithContext method")
//             },
//             ListAccessKeysRequestFunc: func(in1 *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput) {
// 	               panic("mock out the ListAccessKeysRequest method")
//             },
//             ListAccessKeysWithContextFunc: func(in1 context.Context, in2 *iam.ListAccessKeysInput, in3 ...request.Option) (*iam.ListAccessKeysOutput, error) {
// 	               panic("mock out the ListAccessKeysWithContext method")
//             },
//             ListAccountAliasesFunc: func(in1 *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
// 	               panic("mock out the ListAccountAliases method")
//             },
//             ListAccountAliasesPagesFunc: func(in1 *iam.ListAccountAliasesInput, in2 func(*iam.ListAccountAliasesOutput, bool) bool) error {
// 	               panic("mock out the ListAccountAliasesPages method")
//             },
//             ListAccountAliasesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListAccountAliasesInput, in3 func(*iam.ListAccountAliasesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListAccountAliasesPagesWithContext method")
//             },
//             ListAccountAliasesRequestFunc: func(in1 *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput) {
// 	               panic("mock out the ListAccountAliasesRequest method")
//             },
//             ListAccountAliasesWithContextFunc: func(in1 context.Context, in2 *iam.ListAccountAliasesInput, in3 ...request.Option) (*iam.ListAccountAliasesOutput, error) {
// 	               panic("mock out the ListAccountAliasesWithContext method")
//             },
//             ListAttachedGroupPoliciesFunc: func(in1 *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
// 	               panic("mock out the ListAttachedGroupPolicies method")
//             },
//             ListAttachedGroupPoliciesPagesFunc: func(in1 *iam.ListAttachedGroupPoliciesInput, in2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
// 	               panic("mock out the ListAttachedGroupPoliciesPages method")
//             },
//             ListAttachedGroupPoliciesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListAttachedGroupPoliciesInput, in3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListAttachedGroupPoliciesPagesWithContext method")
//             },
//             ListAttachedGroupPoliciesRequestFunc: func(in1 *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput) {
// 	               panic("mock out the ListAttachedGroupPoliciesRequest method")
//             },
//             ListAttachedGroupPoliciesWithContextFunc: func(in1 context.Context, in2 *iam.ListAttachedGroupPoliciesInput, in3 ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
// 	               panic("mock out the ListAttachedGroupPoliciesWithContext method")
//             },
//             ListAttachedRolePoliciesFunc: func(in1 *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
// 	               panic("mock out the ListAttachedRolePolicies method")
//             },
//             ListAttachedRolePoliciesPagesFunc: func(in1 *iam.ListAttachedRolePoliciesInput, in2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
// 	               panic("mock out the ListAttachedRolePoliciesPages method")
//             },
//             ListAttachedRolePoliciesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListAttachedRolePoliciesInput, in3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListAttachedRolePoliciesPagesWithContext method")
//             },
//             ListAttachedRolePoliciesRequestFunc: func(in1 *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput) {
// 	               panic("mock out the ListAttachedRolePoliciesRequest method")
//             },
//             ListAttachedRolePoliciesWithContextFunc: func(in1 context.Context, in2 *iam.ListAttachedRolePoliciesInput, in3 ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
// 	               panic("mock out the ListAttachedRolePoliciesWithContext method")
//             },
//             ListAttachedUserPoliciesFunc: func(in1 *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
// 	               panic("mock out the ListAttachedUserPolicies method")
//             },
//             ListAttachedUserPoliciesPagesFunc: func(in1 *iam.ListAttachedUserPoliciesInput, in2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
// 	               panic("mock out the ListAttachedUserPoliciesPages method")
//             },
//             ListAttachedUserPoliciesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListAttachedUserPoliciesInput, in3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListAttachedUserPoliciesPagesWithContext method")
//             },
//             ListAttachedUserPoliciesRequestFunc: func(in1 *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput) {
// 	               panic("mock out the ListAttachedUserPoliciesRequest method")
//             },
//             ListAttachedUserPoliciesWithContextFunc: func(in1 context.Context, in2 *iam.ListAttachedUserPoliciesInput, in3 ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
// 	               panic("mock out the ListAttachedUserPoliciesWithContext method")
//             },
//             ListEntitiesForPolicyFunc: func(in1 *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
// 	               panic("mock out the ListEntitiesForPolicy method")
//             },
//             ListEntitiesForPolicyPagesFunc: func(in1 *iam.ListEntitiesForPolicyInput, in2 func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
// 	               panic("mock out the ListEntitiesForPolicyPages method")
//             },
//             ListEntitiesForPolicyPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListEntitiesForPolicyInput, in3 func(*iam.ListEntitiesForPolicyOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListEntitiesForPolicyPagesWithContext method")
//             },
//             ListEntitiesForPolicyRequestFunc: func(in1 *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput) {
// 	               panic("mock out the ListEntitiesForPolicyRequest method")
//             },
//             ListEntitiesForPolicyWithContextFunc: func(in1 context.Context, in2 *iam.ListEntitiesForPolicyInput, in3 ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
// 	               panic("mock out the ListEntitiesForPolicyWithContext method")
//             },
//             ListGroupPoliciesFunc: func(in1 *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
// 	               panic("mock out the ListGroupPolicies method")
//             },
//             ListGroupPoliciesPagesFunc: func(in1 *iam.ListGroupPoliciesInput, in2 func(*iam.ListGroupPoliciesOutput, bool) bool) error {
// 	               panic("mock out the ListGroupPoliciesPages method")
//             },
//             ListGroupPoliciesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListGroupPoliciesInput, in3 func(*iam.ListGroupPoliciesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListGroupPoliciesPagesWithContext method")
//             },
//             ListGroupPoliciesRequestFunc: func(in1 *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput) {
// 	               panic("mock out the ListGroupPoliciesRequest method")
//             },
//             ListGroupPoliciesWithContextFunc: func(in1 context.Context, in2 *iam.ListGroupPoliciesInput, in3 ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
// 	               panic("mock out the ListGroupPoliciesWithContext method")
//             },
//             ListGroupsFunc: func(in1 *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
// 	               panic("mock out the ListGroups method")
//             },
//             ListGroupsForUserFunc: func(in1 *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
// 	               panic("mock out the ListGroupsForUser method")
//             },
//             ListGroupsForUserPagesFunc: func(in1 *iam.ListGroupsForUserInput, in2 func(*iam.ListGroupsForUserOutput, bool) bool) error {
// 	               panic("mock out the ListGroupsForUserPages method")
//             },
//             ListGroupsForUserPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListGroupsForUserInput, in3 func(*iam.ListGroupsForUserOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListGroupsForUserPagesWithContext method")
//             },
//             ListGroupsForUserRequestFunc: func(in1 *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput) {
// 	               panic("mock out the ListGroupsForUserRequest method")
//             },
//             ListGroupsForUserWithContextFunc: func(in1 context.Context, in2 *iam.ListGroupsForUserInput, in3 ...request.Option) (*iam.ListGroupsForUserOutput, error) {
// 	               panic("mock out the ListGroupsForUserWithContext method")
//             },
//             ListGroupsPagesFunc: func(in1 *iam.ListGroupsInput, in2 func(*iam.ListGroupsOutput, bool) bool) error {
// 	               panic("mock out the ListGroupsPages method")
//             },
//             ListGroupsPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListGroupsInput, in3 func(*iam.ListGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListGroupsPagesWithContext method")
//             },
//             ListGroupsRequestFunc: func(in1 *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput) {
// 	               panic("mock out the ListGroupsRequest method")
//             },
//             ListGroupsWithContextFunc: func(in1 context.Context, in2 *iam.ListGroupsInput, in3 ...request.Option) (*iam.ListGroupsOutput, error) {
// 	               panic("mock out the ListGroupsWithContext method")
//             },
//             ListInstanceProfilesFunc: func(in1 *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
// 	               panic("mock out the ListInstanceProfiles method")
//             },
//             ListInstanceProfilesForRoleFunc: func(in1 *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
// 	               panic("mock out the ListInstanceProfilesForRole method")
//             },
//             ListInstanceProfilesForRolePagesFunc: func(in1 *iam.ListInstanceProfilesForRoleInput, in2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
// 	               panic("mock out the ListInstanceProfilesForRolePages method")
//             },
//             ListInstanceProfilesForRolePagesWithContextFunc: func(in1 context.Context, in2 *iam.ListInstanceProfilesForRoleInput, in3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListInstanceProfilesForRolePagesWithContext method")
//             },
//             ListInstanceProfilesForRoleRequestFunc: func(in1 *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput) {
// 	               panic("mock out the ListInstanceProfilesForRoleRequest method")
//             },
//             ListInstanceProfilesForRoleWithContextFunc: func(in1 context.Context, in2 *iam.ListInstanceProfilesForRoleInput, in3 ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
// 	               panic("mock out the ListInstanceProfilesForRoleWithContext method")
//             },
//             ListInstanceProfilesPagesFunc: func(in1 *iam.ListInstanceProfilesInput, in2 func(*iam.ListInstanceProfilesOutput, bool) bool) error {
// 	               panic("mock out the ListInstanceProfilesPages method")
//             },
//             ListInstanceProfilesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListInstanceProfilesInput, in3 func(*iam.ListInstanceProfilesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListInstanceProfilesPagesWithContext method")
//             },
//             ListInstanceProfilesRequestFunc: func(in1 *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput) {
// 	               panic("mock out the ListInstanceProfilesRequest method")
//             },
//             ListInstanceProfilesWithContextFunc: func(in1 context.Context, in2 *iam.ListInstanceProfilesInput, in3 ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
// 	               panic("mock out the ListInstanceProfilesWithContext method")
//             },
//             ListMFADevicesFunc: func(in1 *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
// 	               panic("mock out the ListMFADevices method")
//             },
//             ListMFADevicesPagesFunc: func(in1 *iam.ListMFADevicesInput, in2 func(*iam.ListMFADevicesOutput, bool) bool) error {
// 	               panic("mock out the ListMFADevicesPages method")
//             },
//             ListMFADevicesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListMFADevicesInput, in3 func(*iam.ListMFADevicesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListMFADevicesPagesWithContext method")
//             },
//             ListMFADevicesRequestFunc: func(in1 *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput) {
// 	               panic("mock out the ListMFADevicesRequest method")
//             },
//             ListMFADevicesWithContextFunc: func(in1 context.Context, in2 *iam.ListMFADevicesInput, in3 ...request.Option) (*iam.ListMFADevicesOutput, error) {
// 	               panic("mock out the ListMFADevicesWithContext method")
//             },
//             ListOpenIDConnectProvidersFunc: func(in1 *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
// 	               panic("mock out the ListOpenIDConnectProviders method")
//             },
//             ListOpenIDConnectProvidersRequestFunc: func(in1 *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput) {
// 	               panic("mock out the ListOpenIDConnectProvidersRequest method")
//             },
//             ListOpenIDConnectProvidersWithContextFunc: func(in1 context.Context, in2 *iam.ListOpenIDConnectProvidersInput, in3 ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
// 	               panic("mock out the ListOpenIDConnectProvidersWithContext method")
//             },
//             ListPoliciesFunc: func(in1 *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
// 	               panic("mock out the ListPolicies method")
//             },
//             ListPoliciesGrantingServiceAccessFunc: func(in1 *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
// 	               panic("mock out the ListPoliciesGrantingServiceAccess method")
//             },
//             ListPoliciesGrantingServiceAccessRequestFunc: func(in1 *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput) {
// 	               panic("mock out the ListPoliciesGrantingServiceAccessRequest method")
//             },
//             ListPoliciesGrantingServiceAccessWithContextFunc: func(in1 context.Context, in2 *iam.ListPoliciesGrantingServiceAccessInput, in3 ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
// 	               panic("mock out the ListPoliciesGrantingServiceAccessWithContext method")
//             },
//             ListPoliciesPagesFunc: func(in1 *iam.ListPoliciesInput, in2 func(*iam.ListPoliciesOutput, bool) bool) error {
// 	               panic("mock out the ListPoliciesPages method")
//             },
//             ListPoliciesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListPoliciesInput, in3 func(*iam.ListPoliciesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListPoliciesPagesWithContext method")
//             },
//             ListPoliciesRequestFunc: func(in1 *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput) {
// 	               panic("mock out the ListPoliciesRequest method")
//             },
//             ListPoliciesWithContextFunc: func(in1 context.Context, in2 *iam.ListPoliciesInput, in3 ...request.Option) (*iam.ListPoliciesOutput, error) {
// 	               panic("mock out the ListPoliciesWithContext method")
//             },
//             ListPolicyVersionsFunc: func(in1 *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
// 	               panic("mock out the ListPolicyVersions method")
//             },
//             ListPolicyVersionsPagesFunc: func(in1 *iam.ListPolicyVersionsInput, in2 func(*iam.ListPolicyVersionsOutput, bool) bool) error {
// 	               panic("mock out the ListPolicyVersionsPages method")
//             },
//             ListPolicyVersionsPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListPolicyVersionsInput, in3 func(*iam.ListPolicyVersionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListPolicyVersionsPagesWithContext method")
//             },
//             ListPolicyVersionsRequestFunc: func(in1 *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput) {
// 	               panic("mock out the ListPolicyVersionsRequest method")
//             },
//             ListPolicyVersionsWithContextFunc: func(in1 context.Context, in2 *iam.ListPolicyVersionsInput, in3 ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
// 	               panic("mock out the ListPolicyVersionsWithContext method")
//             },
//             ListRolePoliciesFunc: func(in1 *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
// 	               panic("mock out the ListRolePolicies method")
//             },
//             ListRolePoliciesPagesFunc: func(in1 *iam.ListRolePoliciesInput, in2 func(*iam.ListRolePoliciesOutput, bool) bool) error {
// 	               panic("mock out the ListRolePoliciesPages method")
//             },
//             ListRolePoliciesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListRolePoliciesInput, in3 func(*iam.ListRolePoliciesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListRolePoliciesPagesWithContext method")
//             },
//             ListRolePoliciesRequestFunc: func(in1 *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput) {
// 	               panic("mock out the ListRolePoliciesRequest method")
//             },
//             ListRolePoliciesWithContextFunc: func(in1 context.Context, in2 *iam.ListRolePoliciesInput, in3 ...request.Option) (*iam.ListRolePoliciesOutput, error) {
// 	               panic("mock out the ListRolePoliciesWithContext method")
//             },
//             ListRoleTagsFunc: func(in1 *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
// 	               panic("mock out the ListRoleTags method")
//             },
//             ListRoleTagsRequestFunc: func(in1 *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput) {
// 	               panic("mock out the ListRoleTagsRequest method")
//             },
//             ListRoleTagsWithContextFunc: func(in1 context.Context, in2 *iam.ListRoleTagsInput, in3 ...request.Option) (*iam.ListRoleTagsOutput, error) {
// 	               panic("mock out the ListRoleTagsWithContext method")
//             },
//             ListRolesFunc: func(in1 *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
// 	               panic("mock out the ListRoles method")
//             },
//             ListRolesPagesFunc: func(in1 *iam.ListRolesInput, in2 func(*iam.ListRolesOutput, bool) bool) error {
// 	               panic("mock out the ListRolesPages method")
//             },
//             ListRolesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListRolesInput, in3 func(*iam.ListRolesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListRolesPagesWithContext method")
//             },
//             ListRolesRequestFunc: func(in1 *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput) {
// 	               panic("mock out the ListRolesRequest method")
//             },
//             ListRolesWithContextFunc: func(in1 context.Context, in2 *iam.ListRolesInput, in3 ...request.Option) (*iam.ListRolesOutput, error) {
// 	               panic("mock out the ListRolesWithContext method")
//             },
//             ListSAMLProvidersFunc: func(in1 *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
// 	               panic("mock out the ListSAMLProviders method")
//             },
//             ListSAMLProvidersRequestFunc: func(in1 *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput) {
// 	               panic("mock out the ListSAMLProvidersRequest method")
//             },
//             ListSAMLProvidersWithContextFunc: func(in1 context.Context, in2 *iam.ListSAMLProvidersInput, in3 ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
// 	               panic("mock out the ListSAMLProvidersWithContext method")
//             },
//             ListSSHPublicKeysFunc: func(in1 *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
// 	               panic("mock out the ListSSHPublicKeys method")
//             },
//             ListSSHPublicKeysPagesFunc: func(in1 *iam.ListSSHPublicKeysInput, in2 func(*iam.ListSSHPublicKeysOutput, bool) bool) error {
// 	               panic("mock out the ListSSHPublicKeysPages method")
//             },
//             ListSSHPublicKeysPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListSSHPublicKeysInput, in3 func(*iam.ListSSHPublicKeysOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListSSHPublicKeysPagesWithContext method")
//             },
//             ListSSHPublicKeysRequestFunc: func(in1 *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput) {
// 	               panic("mock out the ListSSHPublicKeysRequest method")
//             },
//             ListSSHPublicKeysWithContextFunc: func(in1 context.Context, in2 *iam.ListSSHPublicKeysInput, in3 ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
// 	               panic("mock out the ListSSHPublicKeysWithContext method")
//             },
//             ListServerCertificatesFunc: func(in1 *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
// 	               panic("mock out the ListServerCertificates method")
//             },
//             ListServerCertificatesPagesFunc: func(in1 *iam.ListServerCertificatesInput, in2 func(*iam.ListServerCertificatesOutput, bool) bool) error {
// 	               panic("mock out the ListServerCertificatesPages method")
//             },
//             ListServerCertificatesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListServerCertificatesInput, in3 func(*iam.ListServerCertificatesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListServerCertificatesPagesWithContext method")
//             },
//             ListServerCertificatesRequestFunc: func(in1 *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput) {
// 	               panic("mock out the ListServerCertificatesRequest method")
//             },
//             ListServerCertificatesWithContextFunc: func(in1 context.Context, in2 *iam.ListServerCertificatesInput, in3 ...request.Option) (*iam.ListServerCertificatesOutput, error) {
// 	               panic("mock out the ListServerCertificatesWithContext method")
//             },
//             ListServiceSpecificCredentialsFunc: func(in1 *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
// 	               panic("mock out the ListServiceSpecificCredentials method")
//             },
//             ListServiceSpecificCredentialsRequestFunc: func(in1 *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput) {
// 	               panic("mock out the ListServiceSpecificCredentialsRequest method")
//             },
//             ListServiceSpecificCredentialsWithContextFunc: func(in1 context.Context, in2 *iam.ListServiceSpecificCredentialsInput, in3 ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
// 	               panic("mock out the ListServiceSpecificCredentialsWithContext method")
//             },
//             ListSigningCertificatesFunc: func(in1 *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
// 	               panic("mock out the ListSigningCertificates method")
//             },
//             ListSigningCertificatesPagesFunc: func(in1 *iam.ListSigningCertificatesInput, in2 func(*iam.ListSigningCertificatesOutput, bool) bool) error {
// 	               panic("mock out the ListSigningCertificatesPages method")
//             },
//             ListSigningCertificatesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListSigningCertificatesInput, in3 func(*iam.ListSigningCertificatesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListSigningCertificatesPagesWithContext method")
//             },
//             ListSigningCertificatesRequestFunc: func(in1 *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput) {
// 	               panic("mock out the ListSigningCertificatesRequest method")
//             },
//             ListSigningCertificatesWithContextFunc: func(in1 context.Context, in2 *iam.ListSigningCertificatesInput, in3 ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
// 	               panic("mock out the ListSigningCertificatesWithContext method")
//             },
//             ListUserPoliciesFunc: func(in1 *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
// 	               panic("mock out the ListUserPolicies method")
//             },
//             ListUserPoliciesPagesFunc: func(in1 *iam.ListUserPoliciesInput, in2 func(*iam.ListUserPoliciesOutput, bool) bool) error {
// 	               panic("mock out the ListUserPoliciesPages method")
//             },
//             ListUserPoliciesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListUserPoliciesInput, in3 func(*iam.ListUserPoliciesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListUserPoliciesPagesWithContext method")
//             },
//             ListUserPoliciesRequestFunc: func(in1 *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput) {
// 	               panic("mock out the ListUserPoliciesRequest method")
//             },
//             ListUserPoliciesWithContextFunc: func(in1 context.Context, in2 *iam.ListUserPoliciesInput, in3 ...request.Option) (*iam.ListUserPoliciesOutput, error) {
// 	               panic("mock out the ListUserPoliciesWithContext method")
//             },
//             ListUserTagsFunc: func(in1 *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
// 	               panic("mock out the ListUserTags method")
//             },
//             ListUserTagsRequestFunc: func(in1 *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput) {
// 	               panic("mock out the ListUserTagsRequest method")
//             },
//             ListUserTagsWithContextFunc: func(in1 context.Context, in2 *iam.ListUserTagsInput, in3 ...request.Option) (*iam.ListUserTagsOutput, error) {
// 	               panic("mock out the ListUserTagsWithContext method")
//             },
//             ListUsersFunc: func(in1 *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
// 	               panic("mock out the ListUsers method")
//             },
//             ListUsersPagesFunc: func(in1 *iam.ListUsersInput, in2 func(*iam.ListUsersOutput, bool) bool) error {
// 	               panic("mock out the ListUsersPages method")
//             },
//             ListUsersPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListUsersInput, in3 func(*iam.ListUsersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListUsersPagesWithContext method")
//             },
//             ListUsersRequestFunc: func(in1 *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput) {
// 	               panic("mock out the ListUsersRequest method")
//             },
//             ListUsersWithContextFunc: func(in1 context.Context, in2 *iam.ListUsersInput, in3 ...request.Option) (*iam.ListUsersOutput, error) {
// 	               panic("mock out the ListUsersWithContext method")
//             },
//             ListVirtualMFADevicesFunc: func(in1 *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
// 	               panic("mock out the ListVirtualMFADevices method")
//             },
//             ListVirtualMFADevicesPagesFunc: func(in1 *iam.ListVirtualMFADevicesInput, in2 func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
// 	               panic("mock out the ListVirtualMFADevicesPages method")
//             },
//             ListVirtualMFADevicesPagesWithContextFunc: func(in1 context.Context, in2 *iam.ListVirtualMFADevicesInput, in3 func(*iam.ListVirtualMFADevicesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListVirtualMFADevicesPagesWithContext method")
//             },
//             ListVirtualMFADevicesRequestFunc: func(in1 *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput) {
// 	               panic("mock out the ListVirtualMFADevicesRequest method")
//             },
//             ListVirtualMFADevicesWithContextFunc: func(in1 context.Context, in2 *iam.ListVirtualMFADevicesInput, in3 ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
// 	               panic("mock out the ListVirtualMFADevicesWithContext method")
//             },
//             PutGroupPolicyFunc: func(in1 *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
// 	               panic("mock out the PutGroupPolicy method")
//             },
//             PutGroupPolicyRequestFunc: func(in1 *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput) {
// 	               panic("mock out the PutGroupPolicyRequest method")
//             },
//             PutGroupPolicyWithContextFunc: func(in1 context.Context, in2 *iam.PutGroupPolicyInput, in3 ...request.Option) (*iam.PutGroupPolicyOutput, error) {
// 	               panic("mock out the PutGroupPolicyWithContext method")
//             },
//             PutRolePermissionsBoundaryFunc: func(in1 *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
// 	               panic("mock out the PutRolePermissionsBoundary method")
//             },
//             PutRolePermissionsBoundaryRequestFunc: func(in1 *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput) {
// 	               panic("mock out the PutRolePermissionsBoundaryRequest method")
//             },
//             PutRolePermissionsBoundaryWithContextFunc: func(in1 context.Context, in2 *iam.PutRolePermissionsBoundaryInput, in3 ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {
// 	               panic("mock out the PutRolePermissionsBoundaryWithContext method")
//             },
//             PutRolePolicyFunc: func(in1 *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
// 	               panic("mock out the PutRolePolicy method")
//             },
//             PutRolePolicyRequestFunc: func(in1 *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput) {
// 	               panic("mock out the PutRolePolicyRequest method")
//             },
//             PutRolePolicyWithContextFunc: func(in1 context.Context, in2 *iam.PutRolePolicyInput, in3 ...request.Option) (*iam.PutRolePolicyOutput, error) {
// 	               panic("mock out the PutRolePolicyWithContext method")
//             },
//             PutUserPermissionsBoundaryFunc: func(in1 *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
// 	               panic("mock out the PutUserPermissionsBoundary method")
//             },
//             PutUserPermissionsBoundaryRequestFunc: func(in1 *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput) {
// 	               panic("mock out the PutUserPermissionsBoundaryRequest method")
//             },
//             PutUserPermissionsBoundaryWithContextFunc: func(in1 context.Context, in2 *iam.PutUserPermissionsBoundaryInput, in3 ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {
// 	               panic("mock out the PutUserPermissionsBoundaryWithContext method")
//             },
//             PutUserPolicyFunc: func(in1 *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
// 	               panic("mock out the PutUserPolicy method")
//             },
//             PutUserPolicyRequestFunc: func(in1 *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput) {
// 	               panic("mock out the PutUserPolicyRequest method")
//             },
//             PutUserPolicyWithContextFunc: func(in1 context.Context, in2 *iam.PutUserPolicyInput, in3 ...request.Option) (*iam.PutUserPolicyOutput, error) {
// 	               panic("mock out the PutUserPolicyWithContext method")
//             },
//             RemoveClientIDFromOpenIDConnectProviderFunc: func(in1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the RemoveClientIDFromOpenIDConnectProvider method")
//             },
//             RemoveClientIDFromOpenIDConnectProviderRequestFunc: func(in1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
// 	               panic("mock out the RemoveClientIDFromOpenIDConnectProviderRequest method")
//             },
//             RemoveClientIDFromOpenIDConnectProviderWithContextFunc: func(in1 context.Context, in2 *iam.RemoveClientIDFromOpenIDConnectProviderInput, in3 ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
// 	               panic("mock out the RemoveClientIDFromOpenIDConnectProviderWithContext method")
//             },
//             RemoveRoleFromInstanceProfileFunc: func(in1 *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
// 	               panic("mock out the RemoveRoleFromInstanceProfile method")
//             },
//             RemoveRoleFromInstanceProfileRequestFunc: func(in1 *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput) {
// 	               panic("mock out the RemoveRoleFromInstanceProfileRequest method")
//             },
//             RemoveRoleFromInstanceProfileWithContextFunc: func(in1 context.Context, in2 *iam.RemoveRoleFromInstanceProfileInput, in3 ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
// 	               panic("mock out the RemoveRoleFromInstanceProfileWithContext method")
//             },
//             RemoveUserFromGroupFunc: func(in1 *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
// 	               panic("mock out the RemoveUserFromGroup method")
//             },
//             RemoveUserFromGroupRequestFunc: func(in1 *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput) {
// 	               panic("mock out the RemoveUserFromGroupRequest method")
//             },
//             RemoveUserFromGroupWithContextFunc: func(in1 context.Context, in2 *iam.RemoveUserFromGroupInput, in3 ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
// 	               panic("mock out the RemoveUserFromGroupWithContext method")
//             },
//             ResetServiceSpecificCredentialFunc: func(in1 *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the ResetServiceSpecificCredential method")
//             },
//             ResetServiceSpecificCredentialRequestFunc: func(in1 *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput) {
// 	               panic("mock out the ResetServiceSpecificCredentialRequest method")
//             },
//             ResetServiceSpecificCredentialWithContextFunc: func(in1 context.Context, in2 *iam.ResetServiceSpecificCredentialInput, in3 ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the ResetServiceSpecificCredentialWithContext method")
//             },
//             ResyncMFADeviceFunc: func(in1 *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
// 	               panic("mock out the ResyncMFADevice method")
//             },
//             ResyncMFADeviceRequestFunc: func(in1 *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput) {
// 	               panic("mock out the ResyncMFADeviceRequest method")
//             },
//             ResyncMFADeviceWithContextFunc: func(in1 context.Context, in2 *iam.ResyncMFADeviceInput, in3 ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
// 	               panic("mock out the ResyncMFADeviceWithContext method")
//             },
//             SetDefaultPolicyVersionFunc: func(in1 *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
// 	               panic("mock out the SetDefaultPolicyVersion method")
//             },
//             SetDefaultPolicyVersionRequestFunc: func(in1 *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput) {
// 	               panic("mock out the SetDefaultPolicyVersionRequest method")
//             },
//             SetDefaultPolicyVersionWithContextFunc: func(in1 context.Context, in2 *iam.SetDefaultPolicyVersionInput, in3 ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
// 	               panic("mock out the SetDefaultPolicyVersionWithContext method")
//             },
//             SetSecurityTokenServicePreferencesFunc: func(in1 *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
// 	               panic("mock out the SetSecurityTokenServicePreferences method")
//             },
//             SetSecurityTokenServicePreferencesRequestFunc: func(in1 *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput) {
// 	               panic("mock out the SetSecurityTokenServicePreferencesRequest method")
//             },
//             SetSecurityTokenServicePreferencesWithContextFunc: func(in1 context.Context, in2 *iam.SetSecurityTokenServicePreferencesInput, in3 ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
// 	               panic("mock out the SetSecurityTokenServicePreferencesWithContext method")
//             },
//             SimulateCustomPolicyFunc: func(in1 *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
// 	               panic("mock out the SimulateCustomPolicy method")
//             },
//             SimulateCustomPolicyPagesFunc: func(in1 *iam.SimulateCustomPolicyInput, in2 func(*iam.SimulatePolicyResponse, bool) bool) error {
// 	               panic("mock out the SimulateCustomPolicyPages method")
//             },
//             SimulateCustomPolicyPagesWithContextFunc: func(in1 context.Context, in2 *iam.SimulateCustomPolicyInput, in3 func(*iam.SimulatePolicyResponse, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the SimulateCustomPolicyPagesWithContext method")
//             },
//             SimulateCustomPolicyRequestFunc: func(in1 *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
// 	               panic("mock out the SimulateCustomPolicyRequest method")
//             },
//             SimulateCustomPolicyWithContextFunc: func(in1 context.Context, in2 *iam.SimulateCustomPolicyInput, in3 ...request.Option) (*iam.SimulatePolicyResponse, error) {
// 	               panic("mock out the SimulateCustomPolicyWithContext method")
//             },
//             SimulatePrincipalPolicyFunc: func(in1 *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
// 	               panic("mock out the SimulatePrincipalPolicy method")
//             },
//             SimulatePrincipalPolicyPagesFunc: func(in1 *iam.SimulatePrincipalPolicyInput, in2 func(*iam.SimulatePolicyResponse, bool) bool) error {
// 	               panic("mock out the SimulatePrincipalPolicyPages method")
//             },
//             SimulatePrincipalPolicyPagesWithContextFunc: func(in1 context.Context, in2 *iam.SimulatePrincipalPolicyInput, in3 func(*iam.SimulatePolicyResponse, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the SimulatePrincipalPolicyPagesWithContext method")
//             },
//             SimulatePrincipalPolicyRequestFunc: func(in1 *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
// 	               panic("mock out the SimulatePrincipalPolicyRequest method")
//             },
//             SimulatePrincipalPolicyWithContextFunc: func(in1 context.Context, in2 *iam.SimulatePrincipalPolicyInput, in3 ...request.Option) (*iam.SimulatePolicyResponse, error) {
// 	               panic("mock out the SimulatePrincipalPolicyWithContext method")
//             },
//             TagRoleFunc: func(in1 *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
// 	               panic("mock out the TagRole method")
//             },
//             TagRoleRequestFunc: func(in1 *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput) {
// 	               panic("mock out the TagRoleRequest method")
//             },
//             TagRoleWithContextFunc: func(in1 context.Context, in2 *iam.TagRoleInput, in3 ...request.Option) (*iam.TagRoleOutput, error) {
// 	               panic("mock out the TagRoleWithContext method")
//             },
//             TagUserFunc: func(in1 *iam.TagUserInput) (*iam.TagUserOutput, error) {
// 	               panic("mock out the TagUser method")
//             },
//             TagUserRequestFunc: func(in1 *iam.TagUserInput) (*request.Request, *iam.TagUserOutput) {
// 	               panic("mock out the TagUserRequest method")
//             },
//             TagUserWithContextFunc: func(in1 context.Context, in2 *iam.TagUserInput, in3 ...request.Option) (*iam.TagUserOutput, error) {
// 	               panic("mock out the TagUserWithContext method")
//             },
//             UntagRoleFunc: func(in1 *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
// 	               panic("mock out the UntagRole method")
//             },
//             UntagRoleRequestFunc: func(in1 *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput) {
// 	               panic("mock out the UntagRoleRequest method")
//             },
//             UntagRoleWithContextFunc: func(in1 context.Context, in2 *iam.UntagRoleInput, in3 ...request.Option) (*iam.UntagRoleOutput, error) {
// 	               panic("mock out the UntagRoleWithContext method")
//             },
//             UntagUserFunc: func(in1 *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
// 	               panic("mock out the UntagUser method")
//             },
//             UntagUserRequestFunc: func(in1 *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput) {
// 	               panic("mock out the UntagUserRequest method")
//             },
//             UntagUserWithContextFunc: func(in1 context.Context, in2 *iam.UntagUserInput, in3 ...request.Option) (*iam.UntagUserOutput, error) {
// 	               panic("mock out the UntagUserWithContext method")
//             },
//             UpdateAccessKeyFunc: func(in1 *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
// 	               panic("mock out the UpdateAccessKey method")
//             },
//             UpdateAccessKeyRequestFunc: func(in1 *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput) {
// 	               panic("mock out the UpdateAccessKeyRequest method")
//             },
//             UpdateAccessKeyWithContextFunc: func(in1 context.Context, in2 *iam.UpdateAccessKeyInput, in3 ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
// 	               panic("mock out the UpdateAccessKeyWithContext method")
//             },
//             UpdateAccountPasswordPolicyFunc: func(in1 *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
// 	               panic("mock out the UpdateAccountPasswordPolicy method")
//             },
//             UpdateAccountPasswordPolicyRequestFunc: func(in1 *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput) {
// 	               panic("mock out the UpdateAccountPasswordPolicyRequest method")
//             },
//             UpdateAccountPasswordPolicyWithContextFunc: func(in1 context.Context, in2 *iam.UpdateAccountPasswordPolicyInput, in3 ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
// 	               panic("mock out the UpdateAccountPasswordPolicyWithContext method")
//             },
//             UpdateAssumeRolePolicyFunc: func(in1 *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
// 	               panic("mock out the UpdateAssumeRolePolicy method")
//             },
//             UpdateAssumeRolePolicyRequestFunc: func(in1 *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput) {
// 	               panic("mock out the UpdateAssumeRolePolicyRequest method")
//             },
//             UpdateAssumeRolePolicyWithContextFunc: func(in1 context.Context, in2 *iam.UpdateAssumeRolePolicyInput, in3 ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
// 	               panic("mock out the UpdateAssumeRolePolicyWithContext method")
//             },
//             UpdateGroupFunc: func(in1 *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
// 	               panic("mock out the UpdateGroup method")
//             },
//             UpdateGroupRequestFunc: func(in1 *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput) {
// 	               panic("mock out the UpdateGroupRequest method")
//             },
//             UpdateGroupWithContextFunc: func(in1 context.Context, in2 *iam.UpdateGroupInput, in3 ...request.Option) (*iam.UpdateGroupOutput, error) {
// 	               panic("mock out the UpdateGroupWithContext method")
//             },
//             UpdateLoginProfileFunc: func(in1 *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
// 	               panic("mock out the UpdateLoginProfile method")
//             },
//             UpdateLoginProfileRequestFunc: func(in1 *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput) {
// 	               panic("mock out the UpdateLoginProfileRequest method")
//             },
//             UpdateLoginProfileWithContextFunc: func(in1 context.Context, in2 *iam.UpdateLoginProfileInput, in3 ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
// 	               panic("mock out the UpdateLoginProfileWithContext method")
//             },
//             UpdateOpenIDConnectProviderThumbprintFunc: func(in1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
// 	               panic("mock out the UpdateOpenIDConnectProviderThumbprint method")
//             },
//             UpdateOpenIDConnectProviderThumbprintRequestFunc: func(in1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
// 	               panic("mock out the UpdateOpenIDConnectProviderThumbprintRequest method")
//             },
//             UpdateOpenIDConnectProviderThumbprintWithContextFunc: func(in1 context.Context, in2 *iam.UpdateOpenIDConnectProviderThumbprintInput, in3 ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
// 	               panic("mock out the UpdateOpenIDConnectProviderThumbprintWithContext method")
//             },
//             UpdateRoleFunc: func(in1 *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
// 	               panic("mock out the UpdateRole method")
//             },
//             UpdateRoleDescriptionFunc: func(in1 *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
// 	               panic("mock out the UpdateRoleDescription method")
//             },
//             UpdateRoleDescriptionRequestFunc: func(in1 *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput) {
// 	               panic("mock out the UpdateRoleDescriptionRequest method")
//             },
//             UpdateRoleDescriptionWithContextFunc: func(in1 context.Context, in2 *iam.UpdateRoleDescriptionInput, in3 ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
// 	               panic("mock out the UpdateRoleDescriptionWithContext method")
//             },
//             UpdateRoleRequestFunc: func(in1 *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput) {
// 	               panic("mock out the UpdateRoleRequest method")
//             },
//             UpdateRoleWithContextFunc: func(in1 context.Context, in2 *iam.UpdateRoleInput, in3 ...request.Option) (*iam.UpdateRoleOutput, error) {
// 	               panic("mock out the UpdateRoleWithContext method")
//             },
//             UpdateSAMLProviderFunc: func(in1 *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
// 	               panic("mock out the UpdateSAMLProvider method")
//             },
//             UpdateSAMLProviderRequestFunc: func(in1 *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput) {
// 	               panic("mock out the UpdateSAMLProviderRequest method")
//             },
//             UpdateSAMLProviderWithContextFunc: func(in1 context.Context, in2 *iam.UpdateSAMLProviderInput, in3 ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
// 	               panic("mock out the UpdateSAMLProviderWithContext method")
//             },
//             UpdateSSHPublicKeyFunc: func(in1 *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
// 	               panic("mock out the UpdateSSHPublicKey method")
//             },
//             UpdateSSHPublicKeyRequestFunc: func(in1 *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput) {
// 	               panic("mock out the UpdateSSHPublicKeyRequest method")
//             },
//             UpdateSSHPublicKeyWithContextFunc: func(in1 context.Context, in2 *iam.UpdateSSHPublicKeyInput, in3 ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
// 	               panic("mock out the UpdateSSHPublicKeyWithContext method")
//             },
//             UpdateServerCertificateFunc: func(in1 *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
// 	               panic("mock out the UpdateServerCertificate method")
//             },
//             UpdateServerCertificateRequestFunc: func(in1 *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput) {
// 	               panic("mock out the UpdateServerCertificateRequest method")
//             },
//             UpdateServerCertificateWithContextFunc: func(in1 context.Context, in2 *iam.UpdateServerCertificateInput, in3 ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
// 	               panic("mock out the UpdateServerCertificateWithContext method")
//             },
//             UpdateServiceSpecificCredentialFunc: func(in1 *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the UpdateServiceSpecificCredential method")
//             },
//             UpdateServiceSpecificCredentialRequestFunc: func(in1 *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput) {
// 	               panic("mock out the UpdateServiceSpecificCredentialRequest method")
//             },
//             UpdateServiceSpecificCredentialWithContextFunc: func(in1 context.Context, in2 *iam.UpdateServiceSpecificCredentialInput, in3 ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
// 	               panic("mock out the UpdateServiceSpecificCredentialWithContext method")
//             },
//             UpdateSigningCertificateFunc: func(in1 *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
// 	               panic("mock out the UpdateSigningCertificate method")
//             },
//             UpdateSigningCertificateRequestFunc: func(in1 *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput) {
// 	               panic("mock out the UpdateSigningCertificateRequest method")
//             },
//             UpdateSigningCertificateWithContextFunc: func(in1 context.Context, in2 *iam.UpdateSigningCertificateInput, in3 ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
// 	               panic("mock out the UpdateSigningCertificateWithContext method")
//             },
//             UpdateUserFunc: func(in1 *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
// 	               panic("mock out the UpdateUser method")
//             },
//             UpdateUserRequestFunc: func(in1 *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput) {
// 	               panic("mock out the UpdateUserRequest method")
//             },
//             UpdateUserWithContextFunc: func(in1 context.Context, in2 *iam.UpdateUserInput, in3 ...request.Option) (*iam.UpdateUserOutput, error) {
// 	               panic("mock out the UpdateUserWithContext method")
//             },
//             UploadSSHPublicKeyFunc: func(in1 *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
// 	               panic("mock out the UploadSSHPublicKey method")
//             },
//             UploadSSHPublicKeyRequestFunc: func(in1 *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput) {
// 	               panic("mock out the UploadSSHPublicKeyRequest method")
//             },
//             UploadSSHPublicKeyWithContextFunc: func(in1 context.Context, in2 *iam.UploadSSHPublicKeyInput, in3 ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
// 	               panic("mock out the UploadSSHPublicKeyWithContext method")
//             },
//             UploadServerCertificateFunc: func(in1 *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
// 	               panic("mock out the UploadServerCertificate method")
//             },
//             UploadServerCertificateRequestFunc: func(in1 *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput) {
// 	               panic("mock out the UploadServerCertificateRequest method")
//             },
//             UploadServerCertificateWithContextFunc: func(in1 context.Context, in2 *iam.UploadServerCertificateInput, in3 ...request.Option) (*iam.UploadServerCertificateOutput, error) {
// 	               panic("mock out the UploadServerCertificateWithContext method")
//             },
//             UploadSigningCertificateFunc: func(in1 *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
// 	               panic("mock out the UploadSigningCertificate method")
//             },
//             UploadSigningCertificateRequestFunc: func(in1 *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput) {
// 	               panic("mock out the UploadSigningCertificateRequest method")
//             },
//             UploadSigningCertificateWithContextFunc: func(in1 context.Context, in2 *iam.UploadSigningCertificateInput, in3 ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
// 	               panic("mock out the UploadSigningCertificateWithContext method")
//             },
//             WaitUntilInstanceProfileExistsFunc: func(in1 *iam.GetInstanceProfileInput) error {
// 	               panic("mock out the WaitUntilInstanceProfileExists method")
//             },
//             WaitUntilInstanceProfileExistsWithContextFunc: func(in1 context.Context, in2 *iam.GetInstanceProfileInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilInstanceProfileExistsWithContext method")
//             },
//             WaitUntilPolicyExistsFunc: func(in1 *iam.GetPolicyInput) error {
// 	               panic("mock out the WaitUntilPolicyExists method")
//             },
//             WaitUntilPolicyExistsWithContextFunc: func(in1 context.Context, in2 *iam.GetPolicyInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilPolicyExistsWithContext method")
//             },
//             WaitUntilRoleExistsFunc: func(in1 *iam.GetRoleInput) error {
// 	               panic("mock out the WaitUntilRoleExists method")
//             },
//             WaitUntilRoleExistsWithContextFunc: func(in1 context.Context, in2 *iam.GetRoleInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilRoleExistsWithContext method")
//             },
//             WaitUntilUserExistsFunc: func(in1 *iam.GetUserInput) error {
// 	               panic("mock out the WaitUntilUserExists method")
//             },
//             WaitUntilUserExistsWithContextFunc: func(in1 context.Context, in2 *iam.GetUserInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilUserExistsWithContext method")
//             },
//         }
//
//         // use mockedIAMAPI in code that requires IAMAPI
//         // and then make assertions.
//
//     }
type IAMAPIMock struct {
	// AddClientIDToOpenIDConnectProviderFunc mocks the AddClientIDToOpenIDConnectProvider method.
	AddClientIDToOpenIDConnectProviderFunc func(in1 *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)

	// AddClientIDToOpenIDConnectProviderRequestFunc mocks the AddClientIDToOpenIDConnectProviderRequest method.
	AddClientIDToOpenIDConnectProviderRequestFunc func(in1 *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput)

	// AddClientIDToOpenIDConnectProviderWithContextFunc mocks the AddClientIDToOpenIDConnectProviderWithContext method.
	AddClientIDToOpenIDConnectProviderWithContextFunc func(in1 context.Context, in2 *iam.AddClientIDToOpenIDConnectProviderInput, in3 ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)

	// AddRoleToInstanceProfileFunc mocks the AddRoleToInstanceProfile method.
	AddRoleToInstanceProfileFunc func(in1 *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)

	// AddRoleToInstanceProfileRequestFunc mocks the AddRoleToInstanceProfileRequest method.
	AddRoleToInstanceProfileRequestFunc func(in1 *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput)

	// AddRoleToInstanceProfileWithContextFunc mocks the AddRoleToInstanceProfileWithContext method.
	AddRoleToInstanceProfileWithContextFunc func(in1 context.Context, in2 *iam.AddRoleToInstanceProfileInput, in3 ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error)

	// AddUserToGroupFunc mocks the AddUserToGroup method.
	AddUserToGroupFunc func(in1 *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)

	// AddUserToGroupRequestFunc mocks the AddUserToGroupRequest method.
	AddUserToGroupRequestFunc func(in1 *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput)

	// AddUserToGroupWithContextFunc mocks the AddUserToGroupWithContext method.
	AddUserToGroupWithContextFunc func(in1 context.Context, in2 *iam.AddUserToGroupInput, in3 ...request.Option) (*iam.AddUserToGroupOutput, error)

	// AttachGroupPolicyFunc mocks the AttachGroupPolicy method.
	AttachGroupPolicyFunc func(in1 *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)

	// AttachGroupPolicyRequestFunc mocks the AttachGroupPolicyRequest method.
	AttachGroupPolicyRequestFunc func(in1 *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput)

	// AttachGroupPolicyWithContextFunc mocks the AttachGroupPolicyWithContext method.
	AttachGroupPolicyWithContextFunc func(in1 context.Context, in2 *iam.AttachGroupPolicyInput, in3 ...request.Option) (*iam.AttachGroupPolicyOutput, error)

	// AttachRolePolicyFunc mocks the AttachRolePolicy method.
	AttachRolePolicyFunc func(in1 *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)

	// AttachRolePolicyRequestFunc mocks the AttachRolePolicyRequest method.
	AttachRolePolicyRequestFunc func(in1 *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput)

	// AttachRolePolicyWithContextFunc mocks the AttachRolePolicyWithContext method.
	AttachRolePolicyWithContextFunc func(in1 context.Context, in2 *iam.AttachRolePolicyInput, in3 ...request.Option) (*iam.AttachRolePolicyOutput, error)

	// AttachUserPolicyFunc mocks the AttachUserPolicy method.
	AttachUserPolicyFunc func(in1 *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)

	// AttachUserPolicyRequestFunc mocks the AttachUserPolicyRequest method.
	AttachUserPolicyRequestFunc func(in1 *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput)

	// AttachUserPolicyWithContextFunc mocks the AttachUserPolicyWithContext method.
	AttachUserPolicyWithContextFunc func(in1 context.Context, in2 *iam.AttachUserPolicyInput, in3 ...request.Option) (*iam.AttachUserPolicyOutput, error)

	// ChangePasswordFunc mocks the ChangePassword method.
	ChangePasswordFunc func(in1 *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)

	// ChangePasswordRequestFunc mocks the ChangePasswordRequest method.
	ChangePasswordRequestFunc func(in1 *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput)

	// ChangePasswordWithContextFunc mocks the ChangePasswordWithContext method.
	ChangePasswordWithContextFunc func(in1 context.Context, in2 *iam.ChangePasswordInput, in3 ...request.Option) (*iam.ChangePasswordOutput, error)

	// CreateAccessKeyFunc mocks the CreateAccessKey method.
	CreateAccessKeyFunc func(in1 *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)

	// CreateAccessKeyRequestFunc mocks the CreateAccessKeyRequest method.
	CreateAccessKeyRequestFunc func(in1 *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput)

	// CreateAccessKeyWithContextFunc mocks the CreateAccessKeyWithContext method.
	CreateAccessKeyWithContextFunc func(in1 context.Context, in2 *iam.CreateAccessKeyInput, in3 ...request.Option) (*iam.CreateAccessKeyOutput, error)

	// CreateAccountAliasFunc mocks the CreateAccountAlias method.
	CreateAccountAliasFunc func(in1 *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)

	// CreateAccountAliasRequestFunc mocks the CreateAccountAliasRequest method.
	CreateAccountAliasRequestFunc func(in1 *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput)

	// CreateAccountAliasWithContextFunc mocks the CreateAccountAliasWithContext method.
	CreateAccountAliasWithContextFunc func(in1 context.Context, in2 *iam.CreateAccountAliasInput, in3 ...request.Option) (*iam.CreateAccountAliasOutput, error)

	// CreateGroupFunc mocks the CreateGroup method.
	CreateGroupFunc func(in1 *iam.CreateGroupInput) (*iam.CreateGroupOutput, error)

	// CreateGroupRequestFunc mocks the CreateGroupRequest method.
	CreateGroupRequestFunc func(in1 *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput)

	// CreateGroupWithContextFunc mocks the CreateGroupWithContext method.
	CreateGroupWithContextFunc func(in1 context.Context, in2 *iam.CreateGroupInput, in3 ...request.Option) (*iam.CreateGroupOutput, error)

	// CreateInstanceProfileFunc mocks the CreateInstanceProfile method.
	CreateInstanceProfileFunc func(in1 *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)

	// CreateInstanceProfileRequestFunc mocks the CreateInstanceProfileRequest method.
	CreateInstanceProfileRequestFunc func(in1 *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput)

	// CreateInstanceProfileWithContextFunc mocks the CreateInstanceProfileWithContext method.
	CreateInstanceProfileWithContextFunc func(in1 context.Context, in2 *iam.CreateInstanceProfileInput, in3 ...request.Option) (*iam.CreateInstanceProfileOutput, error)

	// CreateLoginProfileFunc mocks the CreateLoginProfile method.
	CreateLoginProfileFunc func(in1 *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)

	// CreateLoginProfileRequestFunc mocks the CreateLoginProfileRequest method.
	CreateLoginProfileRequestFunc func(in1 *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput)

	// CreateLoginProfileWithContextFunc mocks the CreateLoginProfileWithContext method.
	CreateLoginProfileWithContextFunc func(in1 context.Context, in2 *iam.CreateLoginProfileInput, in3 ...request.Option) (*iam.CreateLoginProfileOutput, error)

	// CreateOpenIDConnectProviderFunc mocks the CreateOpenIDConnectProvider method.
	CreateOpenIDConnectProviderFunc func(in1 *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)

	// CreateOpenIDConnectProviderRequestFunc mocks the CreateOpenIDConnectProviderRequest method.
	CreateOpenIDConnectProviderRequestFunc func(in1 *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput)

	// CreateOpenIDConnectProviderWithContextFunc mocks the CreateOpenIDConnectProviderWithContext method.
	CreateOpenIDConnectProviderWithContextFunc func(in1 context.Context, in2 *iam.CreateOpenIDConnectProviderInput, in3 ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error)

	// CreatePolicyFunc mocks the CreatePolicy method.
	CreatePolicyFunc func(in1 *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)

	// CreatePolicyRequestFunc mocks the CreatePolicyRequest method.
	CreatePolicyRequestFunc func(in1 *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput)

	// CreatePolicyVersionFunc mocks the CreatePolicyVersion method.
	CreatePolicyVersionFunc func(in1 *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)

	// CreatePolicyVersionRequestFunc mocks the CreatePolicyVersionRequest method.
	CreatePolicyVersionRequestFunc func(in1 *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput)

	// CreatePolicyVersionWithContextFunc mocks the CreatePolicyVersionWithContext method.
	CreatePolicyVersionWithContextFunc func(in1 context.Context, in2 *iam.CreatePolicyVersionInput, in3 ...request.Option) (*iam.CreatePolicyVersionOutput, error)

	// CreatePolicyWithContextFunc mocks the CreatePolicyWithContext method.
	CreatePolicyWithContextFunc func(in1 context.Context, in2 *iam.CreatePolicyInput, in3 ...request.Option) (*iam.CreatePolicyOutput, error)

	// CreateRoleFunc mocks the CreateRole method.
	CreateRoleFunc func(in1 *iam.CreateRoleInput) (*iam.CreateRoleOutput, error)

	// CreateRoleRequestFunc mocks the CreateRoleRequest method.
	CreateRoleRequestFunc func(in1 *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput)

	// CreateRoleWithContextFunc mocks the CreateRoleWithContext method.
	CreateRoleWithContextFunc func(in1 context.Context, in2 *iam.CreateRoleInput, in3 ...request.Option) (*iam.CreateRoleOutput, error)

	// CreateSAMLProviderFunc mocks the CreateSAMLProvider method.
	CreateSAMLProviderFunc func(in1 *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)

	// CreateSAMLProviderRequestFunc mocks the CreateSAMLProviderRequest method.
	CreateSAMLProviderRequestFunc func(in1 *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput)

	// CreateSAMLProviderWithContextFunc mocks the CreateSAMLProviderWithContext method.
	CreateSAMLProviderWithContextFunc func(in1 context.Context, in2 *iam.CreateSAMLProviderInput, in3 ...request.Option) (*iam.CreateSAMLProviderOutput, error)

	// CreateServiceLinkedRoleFunc mocks the CreateServiceLinkedRole method.
	CreateServiceLinkedRoleFunc func(in1 *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)

	// CreateServiceLinkedRoleRequestFunc mocks the CreateServiceLinkedRoleRequest method.
	CreateServiceLinkedRoleRequestFunc func(in1 *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput)

	// CreateServiceLinkedRoleWithContextFunc mocks the CreateServiceLinkedRoleWithContext method.
	CreateServiceLinkedRoleWithContextFunc func(in1 context.Context, in2 *iam.CreateServiceLinkedRoleInput, in3 ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error)

	// CreateServiceSpecificCredentialFunc mocks the CreateServiceSpecificCredential method.
	CreateServiceSpecificCredentialFunc func(in1 *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)

	// CreateServiceSpecificCredentialRequestFunc mocks the CreateServiceSpecificCredentialRequest method.
	CreateServiceSpecificCredentialRequestFunc func(in1 *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput)

	// CreateServiceSpecificCredentialWithContextFunc mocks the CreateServiceSpecificCredentialWithContext method.
	CreateServiceSpecificCredentialWithContextFunc func(in1 context.Context, in2 *iam.CreateServiceSpecificCredentialInput, in3 ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(in1 *iam.CreateUserInput) (*iam.CreateUserOutput, error)

	// CreateUserRequestFunc mocks the CreateUserRequest method.
	CreateUserRequestFunc func(in1 *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput)

	// CreateUserWithContextFunc mocks the CreateUserWithContext method.
	CreateUserWithContextFunc func(in1 context.Context, in2 *iam.CreateUserInput, in3 ...request.Option) (*iam.CreateUserOutput, error)

	// CreateVirtualMFADeviceFunc mocks the CreateVirtualMFADevice method.
	CreateVirtualMFADeviceFunc func(in1 *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)

	// CreateVirtualMFADeviceRequestFunc mocks the CreateVirtualMFADeviceRequest method.
	CreateVirtualMFADeviceRequestFunc func(in1 *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput)

	// CreateVirtualMFADeviceWithContextFunc mocks the CreateVirtualMFADeviceWithContext method.
	CreateVirtualMFADeviceWithContextFunc func(in1 context.Context, in2 *iam.CreateVirtualMFADeviceInput, in3 ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error)

	// DeactivateMFADeviceFunc mocks the DeactivateMFADevice method.
	DeactivateMFADeviceFunc func(in1 *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)

	// DeactivateMFADeviceRequestFunc mocks the DeactivateMFADeviceRequest method.
	DeactivateMFADeviceRequestFunc func(in1 *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput)

	// DeactivateMFADeviceWithContextFunc mocks the DeactivateMFADeviceWithContext method.
	DeactivateMFADeviceWithContextFunc func(in1 context.Context, in2 *iam.DeactivateMFADeviceInput, in3 ...request.Option) (*iam.DeactivateMFADeviceOutput, error)

	// DeleteAccessKeyFunc mocks the DeleteAccessKey method.
	DeleteAccessKeyFunc func(in1 *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)

	// DeleteAccessKeyRequestFunc mocks the DeleteAccessKeyRequest method.
	DeleteAccessKeyRequestFunc func(in1 *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput)

	// DeleteAccessKeyWithContextFunc mocks the DeleteAccessKeyWithContext method.
	DeleteAccessKeyWithContextFunc func(in1 context.Context, in2 *iam.DeleteAccessKeyInput, in3 ...request.Option) (*iam.DeleteAccessKeyOutput, error)

	// DeleteAccountAliasFunc mocks the DeleteAccountAlias method.
	DeleteAccountAliasFunc func(in1 *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)

	// DeleteAccountAliasRequestFunc mocks the DeleteAccountAliasRequest method.
	DeleteAccountAliasRequestFunc func(in1 *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput)

	// DeleteAccountAliasWithContextFunc mocks the DeleteAccountAliasWithContext method.
	DeleteAccountAliasWithContextFunc func(in1 context.Context, in2 *iam.DeleteAccountAliasInput, in3 ...request.Option) (*iam.DeleteAccountAliasOutput, error)

	// DeleteAccountPasswordPolicyFunc mocks the DeleteAccountPasswordPolicy method.
	DeleteAccountPasswordPolicyFunc func(in1 *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)

	// DeleteAccountPasswordPolicyRequestFunc mocks the DeleteAccountPasswordPolicyRequest method.
	DeleteAccountPasswordPolicyRequestFunc func(in1 *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput)

	// DeleteAccountPasswordPolicyWithContextFunc mocks the DeleteAccountPasswordPolicyWithContext method.
	DeleteAccountPasswordPolicyWithContextFunc func(in1 context.Context, in2 *iam.DeleteAccountPasswordPolicyInput, in3 ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error)

	// DeleteGroupFunc mocks the DeleteGroup method.
	DeleteGroupFunc func(in1 *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)

	// DeleteGroupPolicyFunc mocks the DeleteGroupPolicy method.
	DeleteGroupPolicyFunc func(in1 *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)

	// DeleteGroupPolicyRequestFunc mocks the DeleteGroupPolicyRequest method.
	DeleteGroupPolicyRequestFunc func(in1 *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput)

	// DeleteGroupPolicyWithContextFunc mocks the DeleteGroupPolicyWithContext method.
	DeleteGroupPolicyWithContextFunc func(in1 context.Context, in2 *iam.DeleteGroupPolicyInput, in3 ...request.Option) (*iam.DeleteGroupPolicyOutput, error)

	// DeleteGroupRequestFunc mocks the DeleteGroupRequest method.
	DeleteGroupRequestFunc func(in1 *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput)

	// DeleteGroupWithContextFunc mocks the DeleteGroupWithContext method.
	DeleteGroupWithContextFunc func(in1 context.Context, in2 *iam.DeleteGroupInput, in3 ...request.Option) (*iam.DeleteGroupOutput, error)

	// DeleteInstanceProfileFunc mocks the DeleteInstanceProfile method.
	DeleteInstanceProfileFunc func(in1 *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)

	// DeleteInstanceProfileRequestFunc mocks the DeleteInstanceProfileRequest method.
	DeleteInstanceProfileRequestFunc func(in1 *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput)

	// DeleteInstanceProfileWithContextFunc mocks the DeleteInstanceProfileWithContext method.
	DeleteInstanceProfileWithContextFunc func(in1 context.Context, in2 *iam.DeleteInstanceProfileInput, in3 ...request.Option) (*iam.DeleteInstanceProfileOutput, error)

	// DeleteLoginProfileFunc mocks the DeleteLoginProfile method.
	DeleteLoginProfileFunc func(in1 *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)

	// DeleteLoginProfileRequestFunc mocks the DeleteLoginProfileRequest method.
	DeleteLoginProfileRequestFunc func(in1 *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput)

	// DeleteLoginProfileWithContextFunc mocks the DeleteLoginProfileWithContext method.
	DeleteLoginProfileWithContextFunc func(in1 context.Context, in2 *iam.DeleteLoginProfileInput, in3 ...request.Option) (*iam.DeleteLoginProfileOutput, error)

	// DeleteOpenIDConnectProviderFunc mocks the DeleteOpenIDConnectProvider method.
	DeleteOpenIDConnectProviderFunc func(in1 *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)

	// DeleteOpenIDConnectProviderRequestFunc mocks the DeleteOpenIDConnectProviderRequest method.
	DeleteOpenIDConnectProviderRequestFunc func(in1 *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput)

	// DeleteOpenIDConnectProviderWithContextFunc mocks the DeleteOpenIDConnectProviderWithContext method.
	DeleteOpenIDConnectProviderWithContextFunc func(in1 context.Context, in2 *iam.DeleteOpenIDConnectProviderInput, in3 ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error)

	// DeletePolicyFunc mocks the DeletePolicy method.
	DeletePolicyFunc func(in1 *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)

	// DeletePolicyRequestFunc mocks the DeletePolicyRequest method.
	DeletePolicyRequestFunc func(in1 *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput)

	// DeletePolicyVersionFunc mocks the DeletePolicyVersion method.
	DeletePolicyVersionFunc func(in1 *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)

	// DeletePolicyVersionRequestFunc mocks the DeletePolicyVersionRequest method.
	DeletePolicyVersionRequestFunc func(in1 *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput)

	// DeletePolicyVersionWithContextFunc mocks the DeletePolicyVersionWithContext method.
	DeletePolicyVersionWithContextFunc func(in1 context.Context, in2 *iam.DeletePolicyVersionInput, in3 ...request.Option) (*iam.DeletePolicyVersionOutput, error)

	// DeletePolicyWithContextFunc mocks the DeletePolicyWithContext method.
	DeletePolicyWithContextFunc func(in1 context.Context, in2 *iam.DeletePolicyInput, in3 ...request.Option) (*iam.DeletePolicyOutput, error)

	// DeleteRoleFunc mocks the DeleteRole method.
	DeleteRoleFunc func(in1 *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)

	// DeleteRolePermissionsBoundaryFunc mocks the DeleteRolePermissionsBoundary method.
	DeleteRolePermissionsBoundaryFunc func(in1 *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)

	// DeleteRolePermissionsBoundaryRequestFunc mocks the DeleteRolePermissionsBoundaryRequest method.
	DeleteRolePermissionsBoundaryRequestFunc func(in1 *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput)

	// DeleteRolePermissionsBoundaryWithContextFunc mocks the DeleteRolePermissionsBoundaryWithContext method.
	DeleteRolePermissionsBoundaryWithContextFunc func(in1 context.Context, in2 *iam.DeleteRolePermissionsBoundaryInput, in3 ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error)

	// DeleteRolePolicyFunc mocks the DeleteRolePolicy method.
	DeleteRolePolicyFunc func(in1 *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)

	// DeleteRolePolicyRequestFunc mocks the DeleteRolePolicyRequest method.
	DeleteRolePolicyRequestFunc func(in1 *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput)

	// DeleteRolePolicyWithContextFunc mocks the DeleteRolePolicyWithContext method.
	DeleteRolePolicyWithContextFunc func(in1 context.Context, in2 *iam.DeleteRolePolicyInput, in3 ...request.Option) (*iam.DeleteRolePolicyOutput, error)

	// DeleteRoleRequestFunc mocks the DeleteRoleRequest method.
	DeleteRoleRequestFunc func(in1 *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput)

	// DeleteRoleWithContextFunc mocks the DeleteRoleWithContext method.
	DeleteRoleWithContextFunc func(in1 context.Context, in2 *iam.DeleteRoleInput, in3 ...request.Option) (*iam.DeleteRoleOutput, error)

	// DeleteSAMLProviderFunc mocks the DeleteSAMLProvider method.
	DeleteSAMLProviderFunc func(in1 *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)

	// DeleteSAMLProviderRequestFunc mocks the DeleteSAMLProviderRequest method.
	DeleteSAMLProviderRequestFunc func(in1 *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput)

	// DeleteSAMLProviderWithContextFunc mocks the DeleteSAMLProviderWithContext method.
	DeleteSAMLProviderWithContextFunc func(in1 context.Context, in2 *iam.DeleteSAMLProviderInput, in3 ...request.Option) (*iam.DeleteSAMLProviderOutput, error)

	// DeleteSSHPublicKeyFunc mocks the DeleteSSHPublicKey method.
	DeleteSSHPublicKeyFunc func(in1 *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)

	// DeleteSSHPublicKeyRequestFunc mocks the DeleteSSHPublicKeyRequest method.
	DeleteSSHPublicKeyRequestFunc func(in1 *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput)

	// DeleteSSHPublicKeyWithContextFunc mocks the DeleteSSHPublicKeyWithContext method.
	DeleteSSHPublicKeyWithContextFunc func(in1 context.Context, in2 *iam.DeleteSSHPublicKeyInput, in3 ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error)

	// DeleteServerCertificateFunc mocks the DeleteServerCertificate method.
	DeleteServerCertificateFunc func(in1 *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)

	// DeleteServerCertificateRequestFunc mocks the DeleteServerCertificateRequest method.
	DeleteServerCertificateRequestFunc func(in1 *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput)

	// DeleteServerCertificateWithContextFunc mocks the DeleteServerCertificateWithContext method.
	DeleteServerCertificateWithContextFunc func(in1 context.Context, in2 *iam.DeleteServerCertificateInput, in3 ...request.Option) (*iam.DeleteServerCertificateOutput, error)

	// DeleteServiceLinkedRoleFunc mocks the DeleteServiceLinkedRole method.
	DeleteServiceLinkedRoleFunc func(in1 *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)

	// DeleteServiceLinkedRoleRequestFunc mocks the DeleteServiceLinkedRoleRequest method.
	DeleteServiceLinkedRoleRequestFunc func(in1 *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput)

	// DeleteServiceLinkedRoleWithContextFunc mocks the DeleteServiceLinkedRoleWithContext method.
	DeleteServiceLinkedRoleWithContextFunc func(in1 context.Context, in2 *iam.DeleteServiceLinkedRoleInput, in3 ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error)

	// DeleteServiceSpecificCredentialFunc mocks the DeleteServiceSpecificCredential method.
	DeleteServiceSpecificCredentialFunc func(in1 *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)

	// DeleteServiceSpecificCredentialRequestFunc mocks the DeleteServiceSpecificCredentialRequest method.
	DeleteServiceSpecificCredentialRequestFunc func(in1 *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput)

	// DeleteServiceSpecificCredentialWithContextFunc mocks the DeleteServiceSpecificCredentialWithContext method.
	DeleteServiceSpecificCredentialWithContextFunc func(in1 context.Context, in2 *iam.DeleteServiceSpecificCredentialInput, in3 ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error)

	// DeleteSigningCertificateFunc mocks the DeleteSigningCertificate method.
	DeleteSigningCertificateFunc func(in1 *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)

	// DeleteSigningCertificateRequestFunc mocks the DeleteSigningCertificateRequest method.
	DeleteSigningCertificateRequestFunc func(in1 *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput)

	// DeleteSigningCertificateWithContextFunc mocks the DeleteSigningCertificateWithContext method.
	DeleteSigningCertificateWithContextFunc func(in1 context.Context, in2 *iam.DeleteSigningCertificateInput, in3 ...request.Option) (*iam.DeleteSigningCertificateOutput, error)

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(in1 *iam.DeleteUserInput) (*iam.DeleteUserOutput, error)

	// DeleteUserPermissionsBoundaryFunc mocks the DeleteUserPermissionsBoundary method.
	DeleteUserPermissionsBoundaryFunc func(in1 *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)

	// DeleteUserPermissionsBoundaryRequestFunc mocks the DeleteUserPermissionsBoundaryRequest method.
	DeleteUserPermissionsBoundaryRequestFunc func(in1 *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput)

	// DeleteUserPermissionsBoundaryWithContextFunc mocks the DeleteUserPermissionsBoundaryWithContext method.
	DeleteUserPermissionsBoundaryWithContextFunc func(in1 context.Context, in2 *iam.DeleteUserPermissionsBoundaryInput, in3 ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error)

	// DeleteUserPolicyFunc mocks the DeleteUserPolicy method.
	DeleteUserPolicyFunc func(in1 *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)

	// DeleteUserPolicyRequestFunc mocks the DeleteUserPolicyRequest method.
	DeleteUserPolicyRequestFunc func(in1 *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput)

	// DeleteUserPolicyWithContextFunc mocks the DeleteUserPolicyWithContext method.
	DeleteUserPolicyWithContextFunc func(in1 context.Context, in2 *iam.DeleteUserPolicyInput, in3 ...request.Option) (*iam.DeleteUserPolicyOutput, error)

	// DeleteUserRequestFunc mocks the DeleteUserRequest method.
	DeleteUserRequestFunc func(in1 *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput)

	// DeleteUserWithContextFunc mocks the DeleteUserWithContext method.
	DeleteUserWithContextFunc func(in1 context.Context, in2 *iam.DeleteUserInput, in3 ...request.Option) (*iam.DeleteUserOutput, error)

	// DeleteVirtualMFADeviceFunc mocks the DeleteVirtualMFADevice method.
	DeleteVirtualMFADeviceFunc func(in1 *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)

	// DeleteVirtualMFADeviceRequestFunc mocks the DeleteVirtualMFADeviceRequest method.
	DeleteVirtualMFADeviceRequestFunc func(in1 *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput)

	// DeleteVirtualMFADeviceWithContextFunc mocks the DeleteVirtualMFADeviceWithContext method.
	DeleteVirtualMFADeviceWithContextFunc func(in1 context.Context, in2 *iam.DeleteVirtualMFADeviceInput, in3 ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error)

	// DetachGroupPolicyFunc mocks the DetachGroupPolicy method.
	DetachGroupPolicyFunc func(in1 *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)

	// DetachGroupPolicyRequestFunc mocks the DetachGroupPolicyRequest method.
	DetachGroupPolicyRequestFunc func(in1 *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput)

	// DetachGroupPolicyWithContextFunc mocks the DetachGroupPolicyWithContext method.
	DetachGroupPolicyWithContextFunc func(in1 context.Context, in2 *iam.DetachGroupPolicyInput, in3 ...request.Option) (*iam.DetachGroupPolicyOutput, error)

	// DetachRolePolicyFunc mocks the DetachRolePolicy method.
	DetachRolePolicyFunc func(in1 *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)

	// DetachRolePolicyRequestFunc mocks the DetachRolePolicyRequest method.
	DetachRolePolicyRequestFunc func(in1 *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput)

	// DetachRolePolicyWithContextFunc mocks the DetachRolePolicyWithContext method.
	DetachRolePolicyWithContextFunc func(in1 context.Context, in2 *iam.DetachRolePolicyInput, in3 ...request.Option) (*iam.DetachRolePolicyOutput, error)

	// DetachUserPolicyFunc mocks the DetachUserPolicy method.
	DetachUserPolicyFunc func(in1 *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)

	// DetachUserPolicyRequestFunc mocks the DetachUserPolicyRequest method.
	DetachUserPolicyRequestFunc func(in1 *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput)

	// DetachUserPolicyWithContextFunc mocks the DetachUserPolicyWithContext method.
	DetachUserPolicyWithContextFunc func(in1 context.Context, in2 *iam.DetachUserPolicyInput, in3 ...request.Option) (*iam.DetachUserPolicyOutput, error)

	// EnableMFADeviceFunc mocks the EnableMFADevice method.
	EnableMFADeviceFunc func(in1 *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)

	// EnableMFADeviceRequestFunc mocks the EnableMFADeviceRequest method.
	EnableMFADeviceRequestFunc func(in1 *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput)

	// EnableMFADeviceWithContextFunc mocks the EnableMFADeviceWithContext method.
	EnableMFADeviceWithContextFunc func(in1 context.Context, in2 *iam.EnableMFADeviceInput, in3 ...request.Option) (*iam.EnableMFADeviceOutput, error)

	// GenerateCredentialReportFunc mocks the GenerateCredentialReport method.
	GenerateCredentialReportFunc func(in1 *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)

	// GenerateCredentialReportRequestFunc mocks the GenerateCredentialReportRequest method.
	GenerateCredentialReportRequestFunc func(in1 *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput)

	// GenerateCredentialReportWithContextFunc mocks the GenerateCredentialReportWithContext method.
	GenerateCredentialReportWithContextFunc func(in1 context.Context, in2 *iam.GenerateCredentialReportInput, in3 ...request.Option) (*iam.GenerateCredentialReportOutput, error)

	// GenerateOrganizationsAccessReportFunc mocks the GenerateOrganizationsAccessReport method.
	GenerateOrganizationsAccessReportFunc func(in1 *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)

	// GenerateOrganizationsAccessReportRequestFunc mocks the GenerateOrganizationsAccessReportRequest method.
	GenerateOrganizationsAccessReportRequestFunc func(in1 *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput)

	// GenerateOrganizationsAccessReportWithContextFunc mocks the GenerateOrganizationsAccessReportWithContext method.
	GenerateOrganizationsAccessReportWithContextFunc func(in1 context.Context, in2 *iam.GenerateOrganizationsAccessReportInput, in3 ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error)

	// GenerateServiceLastAccessedDetailsFunc mocks the GenerateServiceLastAccessedDetails method.
	GenerateServiceLastAccessedDetailsFunc func(in1 *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)

	// GenerateServiceLastAccessedDetailsRequestFunc mocks the GenerateServiceLastAccessedDetailsRequest method.
	GenerateServiceLastAccessedDetailsRequestFunc func(in1 *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput)

	// GenerateServiceLastAccessedDetailsWithContextFunc mocks the GenerateServiceLastAccessedDetailsWithContext method.
	GenerateServiceLastAccessedDetailsWithContextFunc func(in1 context.Context, in2 *iam.GenerateServiceLastAccessedDetailsInput, in3 ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error)

	// GetAccessKeyLastUsedFunc mocks the GetAccessKeyLastUsed method.
	GetAccessKeyLastUsedFunc func(in1 *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)

	// GetAccessKeyLastUsedRequestFunc mocks the GetAccessKeyLastUsedRequest method.
	GetAccessKeyLastUsedRequestFunc func(in1 *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput)

	// GetAccessKeyLastUsedWithContextFunc mocks the GetAccessKeyLastUsedWithContext method.
	GetAccessKeyLastUsedWithContextFunc func(in1 context.Context, in2 *iam.GetAccessKeyLastUsedInput, in3 ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error)

	// GetAccountAuthorizationDetailsFunc mocks the GetAccountAuthorizationDetails method.
	GetAccountAuthorizationDetailsFunc func(in1 *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)

	// GetAccountAuthorizationDetailsPagesFunc mocks the GetAccountAuthorizationDetailsPages method.
	GetAccountAuthorizationDetailsPagesFunc func(in1 *iam.GetAccountAuthorizationDetailsInput, in2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error

	// GetAccountAuthorizationDetailsPagesWithContextFunc mocks the GetAccountAuthorizationDetailsPagesWithContext method.
	GetAccountAuthorizationDetailsPagesWithContextFunc func(in1 context.Context, in2 *iam.GetAccountAuthorizationDetailsInput, in3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, in4 ...request.Option) error

	// GetAccountAuthorizationDetailsRequestFunc mocks the GetAccountAuthorizationDetailsRequest method.
	GetAccountAuthorizationDetailsRequestFunc func(in1 *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput)

	// GetAccountAuthorizationDetailsWithContextFunc mocks the GetAccountAuthorizationDetailsWithContext method.
	GetAccountAuthorizationDetailsWithContextFunc func(in1 context.Context, in2 *iam.GetAccountAuthorizationDetailsInput, in3 ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error)

	// GetAccountPasswordPolicyFunc mocks the GetAccountPasswordPolicy method.
	GetAccountPasswordPolicyFunc func(in1 *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)

	// GetAccountPasswordPolicyRequestFunc mocks the GetAccountPasswordPolicyRequest method.
	GetAccountPasswordPolicyRequestFunc func(in1 *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput)

	// GetAccountPasswordPolicyWithContextFunc mocks the GetAccountPasswordPolicyWithContext method.
	GetAccountPasswordPolicyWithContextFunc func(in1 context.Context, in2 *iam.GetAccountPasswordPolicyInput, in3 ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error)

	// GetAccountSummaryFunc mocks the GetAccountSummary method.
	GetAccountSummaryFunc func(in1 *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)

	// GetAccountSummaryRequestFunc mocks the GetAccountSummaryRequest method.
	GetAccountSummaryRequestFunc func(in1 *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput)

	// GetAccountSummaryWithContextFunc mocks the GetAccountSummaryWithContext method.
	GetAccountSummaryWithContextFunc func(in1 context.Context, in2 *iam.GetAccountSummaryInput, in3 ...request.Option) (*iam.GetAccountSummaryOutput, error)

	// GetContextKeysForCustomPolicyFunc mocks the GetContextKeysForCustomPolicy method.
	GetContextKeysForCustomPolicyFunc func(in1 *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)

	// GetContextKeysForCustomPolicyRequestFunc mocks the GetContextKeysForCustomPolicyRequest method.
	GetContextKeysForCustomPolicyRequestFunc func(in1 *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)

	// GetContextKeysForCustomPolicyWithContextFunc mocks the GetContextKeysForCustomPolicyWithContext method.
	GetContextKeysForCustomPolicyWithContextFunc func(in1 context.Context, in2 *iam.GetContextKeysForCustomPolicyInput, in3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)

	// GetContextKeysForPrincipalPolicyFunc mocks the GetContextKeysForPrincipalPolicy method.
	GetContextKeysForPrincipalPolicyFunc func(in1 *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)

	// GetContextKeysForPrincipalPolicyRequestFunc mocks the GetContextKeysForPrincipalPolicyRequest method.
	GetContextKeysForPrincipalPolicyRequestFunc func(in1 *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)

	// GetContextKeysForPrincipalPolicyWithContextFunc mocks the GetContextKeysForPrincipalPolicyWithContext method.
	GetContextKeysForPrincipalPolicyWithContextFunc func(in1 context.Context, in2 *iam.GetContextKeysForPrincipalPolicyInput, in3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)

	// GetCredentialReportFunc mocks the GetCredentialReport method.
	GetCredentialReportFunc func(in1 *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)

	// GetCredentialReportRequestFunc mocks the GetCredentialReportRequest method.
	GetCredentialReportRequestFunc func(in1 *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput)

	// GetCredentialReportWithContextFunc mocks the GetCredentialReportWithContext method.
	GetCredentialReportWithContextFunc func(in1 context.Context, in2 *iam.GetCredentialReportInput, in3 ...request.Option) (*iam.GetCredentialReportOutput, error)

	// GetGroupFunc mocks the GetGroup method.
	GetGroupFunc func(in1 *iam.GetGroupInput) (*iam.GetGroupOutput, error)

	// GetGroupPagesFunc mocks the GetGroupPages method.
	GetGroupPagesFunc func(in1 *iam.GetGroupInput, in2 func(*iam.GetGroupOutput, bool) bool) error

	// GetGroupPagesWithContextFunc mocks the GetGroupPagesWithContext method.
	GetGroupPagesWithContextFunc func(in1 context.Context, in2 *iam.GetGroupInput, in3 func(*iam.GetGroupOutput, bool) bool, in4 ...request.Option) error

	// GetGroupPolicyFunc mocks the GetGroupPolicy method.
	GetGroupPolicyFunc func(in1 *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)

	// GetGroupPolicyRequestFunc mocks the GetGroupPolicyRequest method.
	GetGroupPolicyRequestFunc func(in1 *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput)

	// GetGroupPolicyWithContextFunc mocks the GetGroupPolicyWithContext method.
	GetGroupPolicyWithContextFunc func(in1 context.Context, in2 *iam.GetGroupPolicyInput, in3 ...request.Option) (*iam.GetGroupPolicyOutput, error)

	// GetGroupRequestFunc mocks the GetGroupRequest method.
	GetGroupRequestFunc func(in1 *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput)

	// GetGroupWithContextFunc mocks the GetGroupWithContext method.
	GetGroupWithContextFunc func(in1 context.Context, in2 *iam.GetGroupInput, in3 ...request.Option) (*iam.GetGroupOutput, error)

	// GetInstanceProfileFunc mocks the GetInstanceProfile method.
	GetInstanceProfileFunc func(in1 *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)

	// GetInstanceProfileRequestFunc mocks the GetInstanceProfileRequest method.
	GetInstanceProfileRequestFunc func(in1 *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput)

	// GetInstanceProfileWithContextFunc mocks the GetInstanceProfileWithContext method.
	GetInstanceProfileWithContextFunc func(in1 context.Context, in2 *iam.GetInstanceProfileInput, in3 ...request.Option) (*iam.GetInstanceProfileOutput, error)

	// GetLoginProfileFunc mocks the GetLoginProfile method.
	GetLoginProfileFunc func(in1 *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)

	// GetLoginProfileRequestFunc mocks the GetLoginProfileRequest method.
	GetLoginProfileRequestFunc func(in1 *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput)

	// GetLoginProfileWithContextFunc mocks the GetLoginProfileWithContext method.
	GetLoginProfileWithContextFunc func(in1 context.Context, in2 *iam.GetLoginProfileInput, in3 ...request.Option) (*iam.GetLoginProfileOutput, error)

	// GetOpenIDConnectProviderFunc mocks the GetOpenIDConnectProvider method.
	GetOpenIDConnectProviderFunc func(in1 *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)

	// GetOpenIDConnectProviderRequestFunc mocks the GetOpenIDConnectProviderRequest method.
	GetOpenIDConnectProviderRequestFunc func(in1 *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput)

	// GetOpenIDConnectProviderWithContextFunc mocks the GetOpenIDConnectProviderWithContext method.
	GetOpenIDConnectProviderWithContextFunc func(in1 context.Context, in2 *iam.GetOpenIDConnectProviderInput, in3 ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error)

	// GetOrganizationsAccessReportFunc mocks the GetOrganizationsAccessReport method.
	GetOrganizationsAccessReportFunc func(in1 *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)

	// GetOrganizationsAccessReportRequestFunc mocks the GetOrganizationsAccessReportRequest method.
	GetOrganizationsAccessReportRequestFunc func(in1 *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput)

	// GetOrganizationsAccessReportWithContextFunc mocks the GetOrganizationsAccessReportWithContext method.
	GetOrganizationsAccessReportWithContextFunc func(in1 context.Context, in2 *iam.GetOrganizationsAccessReportInput, in3 ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error)

	// GetPolicyFunc mocks the GetPolicy method.
	GetPolicyFunc func(in1 *iam.GetPolicyInput) (*iam.GetPolicyOutput, error)

	// GetPolicyRequestFunc mocks the GetPolicyRequest method.
	GetPolicyRequestFunc func(in1 *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput)

	// GetPolicyVersionFunc mocks the GetPolicyVersion method.
	GetPolicyVersionFunc func(in1 *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)

	// GetPolicyVersionRequestFunc mocks the GetPolicyVersionRequest method.
	GetPolicyVersionRequestFunc func(in1 *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput)

	// GetPolicyVersionWithContextFunc mocks the GetPolicyVersionWithContext method.
	GetPolicyVersionWithContextFunc func(in1 context.Context, in2 *iam.GetPolicyVersionInput, in3 ...request.Option) (*iam.GetPolicyVersionOutput, error)

	// GetPolicyWithContextFunc mocks the GetPolicyWithContext method.
	GetPolicyWithContextFunc func(in1 context.Context, in2 *iam.GetPolicyInput, in3 ...request.Option) (*iam.GetPolicyOutput, error)

	// GetRoleFunc mocks the GetRole method.
	GetRoleFunc func(in1 *iam.GetRoleInput) (*iam.GetRoleOutput, error)

	// GetRolePolicyFunc mocks the GetRolePolicy method.
	GetRolePolicyFunc func(in1 *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)

	// GetRolePolicyRequestFunc mocks the GetRolePolicyRequest method.
	GetRolePolicyRequestFunc func(in1 *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput)

	// GetRolePolicyWithContextFunc mocks the GetRolePolicyWithContext method.
	GetRolePolicyWithContextFunc func(in1 context.Context, in2 *iam.GetRolePolicyInput, in3 ...request.Option) (*iam.GetRolePolicyOutput, error)

	// GetRoleRequestFunc mocks the GetRoleRequest method.
	GetRoleRequestFunc func(in1 *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput)

	// GetRoleWithContextFunc mocks the GetRoleWithContext method.
	GetRoleWithContextFunc func(in1 context.Context, in2 *iam.GetRoleInput, in3 ...request.Option) (*iam.GetRoleOutput, error)

	// GetSAMLProviderFunc mocks the GetSAMLProvider method.
	GetSAMLProviderFunc func(in1 *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)

	// GetSAMLProviderRequestFunc mocks the GetSAMLProviderRequest method.
	GetSAMLProviderRequestFunc func(in1 *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput)

	// GetSAMLProviderWithContextFunc mocks the GetSAMLProviderWithContext method.
	GetSAMLProviderWithContextFunc func(in1 context.Context, in2 *iam.GetSAMLProviderInput, in3 ...request.Option) (*iam.GetSAMLProviderOutput, error)

	// GetSSHPublicKeyFunc mocks the GetSSHPublicKey method.
	GetSSHPublicKeyFunc func(in1 *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)

	// GetSSHPublicKeyRequestFunc mocks the GetSSHPublicKeyRequest method.
	GetSSHPublicKeyRequestFunc func(in1 *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput)

	// GetSSHPublicKeyWithContextFunc mocks the GetSSHPublicKeyWithContext method.
	GetSSHPublicKeyWithContextFunc func(in1 context.Context, in2 *iam.GetSSHPublicKeyInput, in3 ...request.Option) (*iam.GetSSHPublicKeyOutput, error)

	// GetServerCertificateFunc mocks the GetServerCertificate method.
	GetServerCertificateFunc func(in1 *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)

	// GetServerCertificateRequestFunc mocks the GetServerCertificateRequest method.
	GetServerCertificateRequestFunc func(in1 *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput)

	// GetServerCertificateWithContextFunc mocks the GetServerCertificateWithContext method.
	GetServerCertificateWithContextFunc func(in1 context.Context, in2 *iam.GetServerCertificateInput, in3 ...request.Option) (*iam.GetServerCertificateOutput, error)

	// GetServiceLastAccessedDetailsFunc mocks the GetServiceLastAccessedDetails method.
	GetServiceLastAccessedDetailsFunc func(in1 *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)

	// GetServiceLastAccessedDetailsRequestFunc mocks the GetServiceLastAccessedDetailsRequest method.
	GetServiceLastAccessedDetailsRequestFunc func(in1 *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput)

	// GetServiceLastAccessedDetailsWithContextFunc mocks the GetServiceLastAccessedDetailsWithContext method.
	GetServiceLastAccessedDetailsWithContextFunc func(in1 context.Context, in2 *iam.GetServiceLastAccessedDetailsInput, in3 ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error)

	// GetServiceLastAccessedDetailsWithEntitiesFunc mocks the GetServiceLastAccessedDetailsWithEntities method.
	GetServiceLastAccessedDetailsWithEntitiesFunc func(in1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)

	// GetServiceLastAccessedDetailsWithEntitiesRequestFunc mocks the GetServiceLastAccessedDetailsWithEntitiesRequest method.
	GetServiceLastAccessedDetailsWithEntitiesRequestFunc func(in1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput)

	// GetServiceLastAccessedDetailsWithEntitiesWithContextFunc mocks the GetServiceLastAccessedDetailsWithEntitiesWithContext method.
	GetServiceLastAccessedDetailsWithEntitiesWithContextFunc func(in1 context.Context, in2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput, in3 ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)

	// GetServiceLinkedRoleDeletionStatusFunc mocks the GetServiceLinkedRoleDeletionStatus method.
	GetServiceLinkedRoleDeletionStatusFunc func(in1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)

	// GetServiceLinkedRoleDeletionStatusRequestFunc mocks the GetServiceLinkedRoleDeletionStatusRequest method.
	GetServiceLinkedRoleDeletionStatusRequestFunc func(in1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput)

	// GetServiceLinkedRoleDeletionStatusWithContextFunc mocks the GetServiceLinkedRoleDeletionStatusWithContext method.
	GetServiceLinkedRoleDeletionStatusWithContextFunc func(in1 context.Context, in2 *iam.GetServiceLinkedRoleDeletionStatusInput, in3 ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(in1 *iam.GetUserInput) (*iam.GetUserOutput, error)

	// GetUserPolicyFunc mocks the GetUserPolicy method.
	GetUserPolicyFunc func(in1 *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)

	// GetUserPolicyRequestFunc mocks the GetUserPolicyRequest method.
	GetUserPolicyRequestFunc func(in1 *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput)

	// GetUserPolicyWithContextFunc mocks the GetUserPolicyWithContext method.
	GetUserPolicyWithContextFunc func(in1 context.Context, in2 *iam.GetUserPolicyInput, in3 ...request.Option) (*iam.GetUserPolicyOutput, error)

	// GetUserRequestFunc mocks the GetUserRequest method.
	GetUserRequestFunc func(in1 *iam.GetUserInput) (*request.Request, *iam.GetUserOutput)

	// GetUserWithContextFunc mocks the GetUserWithContext method.
	GetUserWithContextFunc func(in1 context.Context, in2 *iam.GetUserInput, in3 ...request.Option) (*iam.GetUserOutput, error)

	// ListAccessKeysFunc mocks the ListAccessKeys method.
	ListAccessKeysFunc func(in1 *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)

	// ListAccessKeysPagesFunc mocks the ListAccessKeysPages method.
	ListAccessKeysPagesFunc func(in1 *iam.ListAccessKeysInput, in2 func(*iam.ListAccessKeysOutput, bool) bool) error

	// ListAccessKeysPagesWithContextFunc mocks the ListAccessKeysPagesWithContext method.
	ListAccessKeysPagesWithContextFunc func(in1 context.Context, in2 *iam.ListAccessKeysInput, in3 func(*iam.ListAccessKeysOutput, bool) bool, in4 ...request.Option) error

	// ListAccessKeysRequestFunc mocks the ListAccessKeysRequest method.
	ListAccessKeysRequestFunc func(in1 *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput)

	// ListAccessKeysWithContextFunc mocks the ListAccessKeysWithContext method.
	ListAccessKeysWithContextFunc func(in1 context.Context, in2 *iam.ListAccessKeysInput, in3 ...request.Option) (*iam.ListAccessKeysOutput, error)

	// ListAccountAliasesFunc mocks the ListAccountAliases method.
	ListAccountAliasesFunc func(in1 *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)

	// ListAccountAliasesPagesFunc mocks the ListAccountAliasesPages method.
	ListAccountAliasesPagesFunc func(in1 *iam.ListAccountAliasesInput, in2 func(*iam.ListAccountAliasesOutput, bool) bool) error

	// ListAccountAliasesPagesWithContextFunc mocks the ListAccountAliasesPagesWithContext method.
	ListAccountAliasesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListAccountAliasesInput, in3 func(*iam.ListAccountAliasesOutput, bool) bool, in4 ...request.Option) error

	// ListAccountAliasesRequestFunc mocks the ListAccountAliasesRequest method.
	ListAccountAliasesRequestFunc func(in1 *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput)

	// ListAccountAliasesWithContextFunc mocks the ListAccountAliasesWithContext method.
	ListAccountAliasesWithContextFunc func(in1 context.Context, in2 *iam.ListAccountAliasesInput, in3 ...request.Option) (*iam.ListAccountAliasesOutput, error)

	// ListAttachedGroupPoliciesFunc mocks the ListAttachedGroupPolicies method.
	ListAttachedGroupPoliciesFunc func(in1 *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)

	// ListAttachedGroupPoliciesPagesFunc mocks the ListAttachedGroupPoliciesPages method.
	ListAttachedGroupPoliciesPagesFunc func(in1 *iam.ListAttachedGroupPoliciesInput, in2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error

	// ListAttachedGroupPoliciesPagesWithContextFunc mocks the ListAttachedGroupPoliciesPagesWithContext method.
	ListAttachedGroupPoliciesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListAttachedGroupPoliciesInput, in3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, in4 ...request.Option) error

	// ListAttachedGroupPoliciesRequestFunc mocks the ListAttachedGroupPoliciesRequest method.
	ListAttachedGroupPoliciesRequestFunc func(in1 *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput)

	// ListAttachedGroupPoliciesWithContextFunc mocks the ListAttachedGroupPoliciesWithContext method.
	ListAttachedGroupPoliciesWithContextFunc func(in1 context.Context, in2 *iam.ListAttachedGroupPoliciesInput, in3 ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error)

	// ListAttachedRolePoliciesFunc mocks the ListAttachedRolePolicies method.
	ListAttachedRolePoliciesFunc func(in1 *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)

	// ListAttachedRolePoliciesPagesFunc mocks the ListAttachedRolePoliciesPages method.
	ListAttachedRolePoliciesPagesFunc func(in1 *iam.ListAttachedRolePoliciesInput, in2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error

	// ListAttachedRolePoliciesPagesWithContextFunc mocks the ListAttachedRolePoliciesPagesWithContext method.
	ListAttachedRolePoliciesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListAttachedRolePoliciesInput, in3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool, in4 ...request.Option) error

	// ListAttachedRolePoliciesRequestFunc mocks the ListAttachedRolePoliciesRequest method.
	ListAttachedRolePoliciesRequestFunc func(in1 *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput)

	// ListAttachedRolePoliciesWithContextFunc mocks the ListAttachedRolePoliciesWithContext method.
	ListAttachedRolePoliciesWithContextFunc func(in1 context.Context, in2 *iam.ListAttachedRolePoliciesInput, in3 ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error)

	// ListAttachedUserPoliciesFunc mocks the ListAttachedUserPolicies method.
	ListAttachedUserPoliciesFunc func(in1 *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)

	// ListAttachedUserPoliciesPagesFunc mocks the ListAttachedUserPoliciesPages method.
	ListAttachedUserPoliciesPagesFunc func(in1 *iam.ListAttachedUserPoliciesInput, in2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error

	// ListAttachedUserPoliciesPagesWithContextFunc mocks the ListAttachedUserPoliciesPagesWithContext method.
	ListAttachedUserPoliciesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListAttachedUserPoliciesInput, in3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool, in4 ...request.Option) error

	// ListAttachedUserPoliciesRequestFunc mocks the ListAttachedUserPoliciesRequest method.
	ListAttachedUserPoliciesRequestFunc func(in1 *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput)

	// ListAttachedUserPoliciesWithContextFunc mocks the ListAttachedUserPoliciesWithContext method.
	ListAttachedUserPoliciesWithContextFunc func(in1 context.Context, in2 *iam.ListAttachedUserPoliciesInput, in3 ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error)

	// ListEntitiesForPolicyFunc mocks the ListEntitiesForPolicy method.
	ListEntitiesForPolicyFunc func(in1 *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)

	// ListEntitiesForPolicyPagesFunc mocks the ListEntitiesForPolicyPages method.
	ListEntitiesForPolicyPagesFunc func(in1 *iam.ListEntitiesForPolicyInput, in2 func(*iam.ListEntitiesForPolicyOutput, bool) bool) error

	// ListEntitiesForPolicyPagesWithContextFunc mocks the ListEntitiesForPolicyPagesWithContext method.
	ListEntitiesForPolicyPagesWithContextFunc func(in1 context.Context, in2 *iam.ListEntitiesForPolicyInput, in3 func(*iam.ListEntitiesForPolicyOutput, bool) bool, in4 ...request.Option) error

	// ListEntitiesForPolicyRequestFunc mocks the ListEntitiesForPolicyRequest method.
	ListEntitiesForPolicyRequestFunc func(in1 *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput)

	// ListEntitiesForPolicyWithContextFunc mocks the ListEntitiesForPolicyWithContext method.
	ListEntitiesForPolicyWithContextFunc func(in1 context.Context, in2 *iam.ListEntitiesForPolicyInput, in3 ...request.Option) (*iam.ListEntitiesForPolicyOutput, error)

	// ListGroupPoliciesFunc mocks the ListGroupPolicies method.
	ListGroupPoliciesFunc func(in1 *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)

	// ListGroupPoliciesPagesFunc mocks the ListGroupPoliciesPages method.
	ListGroupPoliciesPagesFunc func(in1 *iam.ListGroupPoliciesInput, in2 func(*iam.ListGroupPoliciesOutput, bool) bool) error

	// ListGroupPoliciesPagesWithContextFunc mocks the ListGroupPoliciesPagesWithContext method.
	ListGroupPoliciesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListGroupPoliciesInput, in3 func(*iam.ListGroupPoliciesOutput, bool) bool, in4 ...request.Option) error

	// ListGroupPoliciesRequestFunc mocks the ListGroupPoliciesRequest method.
	ListGroupPoliciesRequestFunc func(in1 *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput)

	// ListGroupPoliciesWithContextFunc mocks the ListGroupPoliciesWithContext method.
	ListGroupPoliciesWithContextFunc func(in1 context.Context, in2 *iam.ListGroupPoliciesInput, in3 ...request.Option) (*iam.ListGroupPoliciesOutput, error)

	// ListGroupsFunc mocks the ListGroups method.
	ListGroupsFunc func(in1 *iam.ListGroupsInput) (*iam.ListGroupsOutput, error)

	// ListGroupsForUserFunc mocks the ListGroupsForUser method.
	ListGroupsForUserFunc func(in1 *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)

	// ListGroupsForUserPagesFunc mocks the ListGroupsForUserPages method.
	ListGroupsForUserPagesFunc func(in1 *iam.ListGroupsForUserInput, in2 func(*iam.ListGroupsForUserOutput, bool) bool) error

	// ListGroupsForUserPagesWithContextFunc mocks the ListGroupsForUserPagesWithContext method.
	ListGroupsForUserPagesWithContextFunc func(in1 context.Context, in2 *iam.ListGroupsForUserInput, in3 func(*iam.ListGroupsForUserOutput, bool) bool, in4 ...request.Option) error

	// ListGroupsForUserRequestFunc mocks the ListGroupsForUserRequest method.
	ListGroupsForUserRequestFunc func(in1 *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput)

	// ListGroupsForUserWithContextFunc mocks the ListGroupsForUserWithContext method.
	ListGroupsForUserWithContextFunc func(in1 context.Context, in2 *iam.ListGroupsForUserInput, in3 ...request.Option) (*iam.ListGroupsForUserOutput, error)

	// ListGroupsPagesFunc mocks the ListGroupsPages method.
	ListGroupsPagesFunc func(in1 *iam.ListGroupsInput, in2 func(*iam.ListGroupsOutput, bool) bool) error

	// ListGroupsPagesWithContextFunc mocks the ListGroupsPagesWithContext method.
	ListGroupsPagesWithContextFunc func(in1 context.Context, in2 *iam.ListGroupsInput, in3 func(*iam.ListGroupsOutput, bool) bool, in4 ...request.Option) error

	// ListGroupsRequestFunc mocks the ListGroupsRequest method.
	ListGroupsRequestFunc func(in1 *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput)

	// ListGroupsWithContextFunc mocks the ListGroupsWithContext method.
	ListGroupsWithContextFunc func(in1 context.Context, in2 *iam.ListGroupsInput, in3 ...request.Option) (*iam.ListGroupsOutput, error)

	// ListInstanceProfilesFunc mocks the ListInstanceProfiles method.
	ListInstanceProfilesFunc func(in1 *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)

	// ListInstanceProfilesForRoleFunc mocks the ListInstanceProfilesForRole method.
	ListInstanceProfilesForRoleFunc func(in1 *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)

	// ListInstanceProfilesForRolePagesFunc mocks the ListInstanceProfilesForRolePages method.
	ListInstanceProfilesForRolePagesFunc func(in1 *iam.ListInstanceProfilesForRoleInput, in2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error

	// ListInstanceProfilesForRolePagesWithContextFunc mocks the ListInstanceProfilesForRolePagesWithContext method.
	ListInstanceProfilesForRolePagesWithContextFunc func(in1 context.Context, in2 *iam.ListInstanceProfilesForRoleInput, in3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, in4 ...request.Option) error

	// ListInstanceProfilesForRoleRequestFunc mocks the ListInstanceProfilesForRoleRequest method.
	ListInstanceProfilesForRoleRequestFunc func(in1 *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput)

	// ListInstanceProfilesForRoleWithContextFunc mocks the ListInstanceProfilesForRoleWithContext method.
	ListInstanceProfilesForRoleWithContextFunc func(in1 context.Context, in2 *iam.ListInstanceProfilesForRoleInput, in3 ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error)

	// ListInstanceProfilesPagesFunc mocks the ListInstanceProfilesPages method.
	ListInstanceProfilesPagesFunc func(in1 *iam.ListInstanceProfilesInput, in2 func(*iam.ListInstanceProfilesOutput, bool) bool) error

	// ListInstanceProfilesPagesWithContextFunc mocks the ListInstanceProfilesPagesWithContext method.
	ListInstanceProfilesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListInstanceProfilesInput, in3 func(*iam.ListInstanceProfilesOutput, bool) bool, in4 ...request.Option) error

	// ListInstanceProfilesRequestFunc mocks the ListInstanceProfilesRequest method.
	ListInstanceProfilesRequestFunc func(in1 *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput)

	// ListInstanceProfilesWithContextFunc mocks the ListInstanceProfilesWithContext method.
	ListInstanceProfilesWithContextFunc func(in1 context.Context, in2 *iam.ListInstanceProfilesInput, in3 ...request.Option) (*iam.ListInstanceProfilesOutput, error)

	// ListMFADevicesFunc mocks the ListMFADevices method.
	ListMFADevicesFunc func(in1 *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)

	// ListMFADevicesPagesFunc mocks the ListMFADevicesPages method.
	ListMFADevicesPagesFunc func(in1 *iam.ListMFADevicesInput, in2 func(*iam.ListMFADevicesOutput, bool) bool) error

	// ListMFADevicesPagesWithContextFunc mocks the ListMFADevicesPagesWithContext method.
	ListMFADevicesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListMFADevicesInput, in3 func(*iam.ListMFADevicesOutput, bool) bool, in4 ...request.Option) error

	// ListMFADevicesRequestFunc mocks the ListMFADevicesRequest method.
	ListMFADevicesRequestFunc func(in1 *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput)

	// ListMFADevicesWithContextFunc mocks the ListMFADevicesWithContext method.
	ListMFADevicesWithContextFunc func(in1 context.Context, in2 *iam.ListMFADevicesInput, in3 ...request.Option) (*iam.ListMFADevicesOutput, error)

	// ListOpenIDConnectProvidersFunc mocks the ListOpenIDConnectProviders method.
	ListOpenIDConnectProvidersFunc func(in1 *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)

	// ListOpenIDConnectProvidersRequestFunc mocks the ListOpenIDConnectProvidersRequest method.
	ListOpenIDConnectProvidersRequestFunc func(in1 *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput)

	// ListOpenIDConnectProvidersWithContextFunc mocks the ListOpenIDConnectProvidersWithContext method.
	ListOpenIDConnectProvidersWithContextFunc func(in1 context.Context, in2 *iam.ListOpenIDConnectProvidersInput, in3 ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error)

	// ListPoliciesFunc mocks the ListPolicies method.
	ListPoliciesFunc func(in1 *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)

	// ListPoliciesGrantingServiceAccessFunc mocks the ListPoliciesGrantingServiceAccess method.
	ListPoliciesGrantingServiceAccessFunc func(in1 *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)

	// ListPoliciesGrantingServiceAccessRequestFunc mocks the ListPoliciesGrantingServiceAccessRequest method.
	ListPoliciesGrantingServiceAccessRequestFunc func(in1 *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput)

	// ListPoliciesGrantingServiceAccessWithContextFunc mocks the ListPoliciesGrantingServiceAccessWithContext method.
	ListPoliciesGrantingServiceAccessWithContextFunc func(in1 context.Context, in2 *iam.ListPoliciesGrantingServiceAccessInput, in3 ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error)

	// ListPoliciesPagesFunc mocks the ListPoliciesPages method.
	ListPoliciesPagesFunc func(in1 *iam.ListPoliciesInput, in2 func(*iam.ListPoliciesOutput, bool) bool) error

	// ListPoliciesPagesWithContextFunc mocks the ListPoliciesPagesWithContext method.
	ListPoliciesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListPoliciesInput, in3 func(*iam.ListPoliciesOutput, bool) bool, in4 ...request.Option) error

	// ListPoliciesRequestFunc mocks the ListPoliciesRequest method.
	ListPoliciesRequestFunc func(in1 *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput)

	// ListPoliciesWithContextFunc mocks the ListPoliciesWithContext method.
	ListPoliciesWithContextFunc func(in1 context.Context, in2 *iam.ListPoliciesInput, in3 ...request.Option) (*iam.ListPoliciesOutput, error)

	// ListPolicyVersionsFunc mocks the ListPolicyVersions method.
	ListPolicyVersionsFunc func(in1 *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)

	// ListPolicyVersionsPagesFunc mocks the ListPolicyVersionsPages method.
	ListPolicyVersionsPagesFunc func(in1 *iam.ListPolicyVersionsInput, in2 func(*iam.ListPolicyVersionsOutput, bool) bool) error

	// ListPolicyVersionsPagesWithContextFunc mocks the ListPolicyVersionsPagesWithContext method.
	ListPolicyVersionsPagesWithContextFunc func(in1 context.Context, in2 *iam.ListPolicyVersionsInput, in3 func(*iam.ListPolicyVersionsOutput, bool) bool, in4 ...request.Option) error

	// ListPolicyVersionsRequestFunc mocks the ListPolicyVersionsRequest method.
	ListPolicyVersionsRequestFunc func(in1 *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput)

	// ListPolicyVersionsWithContextFunc mocks the ListPolicyVersionsWithContext method.
	ListPolicyVersionsWithContextFunc func(in1 context.Context, in2 *iam.ListPolicyVersionsInput, in3 ...request.Option) (*iam.ListPolicyVersionsOutput, error)

	// ListRolePoliciesFunc mocks the ListRolePolicies method.
	ListRolePoliciesFunc func(in1 *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)

	// ListRolePoliciesPagesFunc mocks the ListRolePoliciesPages method.
	ListRolePoliciesPagesFunc func(in1 *iam.ListRolePoliciesInput, in2 func(*iam.ListRolePoliciesOutput, bool) bool) error

	// ListRolePoliciesPagesWithContextFunc mocks the ListRolePoliciesPagesWithContext method.
	ListRolePoliciesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListRolePoliciesInput, in3 func(*iam.ListRolePoliciesOutput, bool) bool, in4 ...request.Option) error

	// ListRolePoliciesRequestFunc mocks the ListRolePoliciesRequest method.
	ListRolePoliciesRequestFunc func(in1 *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput)

	// ListRolePoliciesWithContextFunc mocks the ListRolePoliciesWithContext method.
	ListRolePoliciesWithContextFunc func(in1 context.Context, in2 *iam.ListRolePoliciesInput, in3 ...request.Option) (*iam.ListRolePoliciesOutput, error)

	// ListRoleTagsFunc mocks the ListRoleTags method.
	ListRoleTagsFunc func(in1 *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)

	// ListRoleTagsRequestFunc mocks the ListRoleTagsRequest method.
	ListRoleTagsRequestFunc func(in1 *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput)

	// ListRoleTagsWithContextFunc mocks the ListRoleTagsWithContext method.
	ListRoleTagsWithContextFunc func(in1 context.Context, in2 *iam.ListRoleTagsInput, in3 ...request.Option) (*iam.ListRoleTagsOutput, error)

	// ListRolesFunc mocks the ListRoles method.
	ListRolesFunc func(in1 *iam.ListRolesInput) (*iam.ListRolesOutput, error)

	// ListRolesPagesFunc mocks the ListRolesPages method.
	ListRolesPagesFunc func(in1 *iam.ListRolesInput, in2 func(*iam.ListRolesOutput, bool) bool) error

	// ListRolesPagesWithContextFunc mocks the ListRolesPagesWithContext method.
	ListRolesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListRolesInput, in3 func(*iam.ListRolesOutput, bool) bool, in4 ...request.Option) error

	// ListRolesRequestFunc mocks the ListRolesRequest method.
	ListRolesRequestFunc func(in1 *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput)

	// ListRolesWithContextFunc mocks the ListRolesWithContext method.
	ListRolesWithContextFunc func(in1 context.Context, in2 *iam.ListRolesInput, in3 ...request.Option) (*iam.ListRolesOutput, error)

	// ListSAMLProvidersFunc mocks the ListSAMLProviders method.
	ListSAMLProvidersFunc func(in1 *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)

	// ListSAMLProvidersRequestFunc mocks the ListSAMLProvidersRequest method.
	ListSAMLProvidersRequestFunc func(in1 *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput)

	// ListSAMLProvidersWithContextFunc mocks the ListSAMLProvidersWithContext method.
	ListSAMLProvidersWithContextFunc func(in1 context.Context, in2 *iam.ListSAMLProvidersInput, in3 ...request.Option) (*iam.ListSAMLProvidersOutput, error)

	// ListSSHPublicKeysFunc mocks the ListSSHPublicKeys method.
	ListSSHPublicKeysFunc func(in1 *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)

	// ListSSHPublicKeysPagesFunc mocks the ListSSHPublicKeysPages method.
	ListSSHPublicKeysPagesFunc func(in1 *iam.ListSSHPublicKeysInput, in2 func(*iam.ListSSHPublicKeysOutput, bool) bool) error

	// ListSSHPublicKeysPagesWithContextFunc mocks the ListSSHPublicKeysPagesWithContext method.
	ListSSHPublicKeysPagesWithContextFunc func(in1 context.Context, in2 *iam.ListSSHPublicKeysInput, in3 func(*iam.ListSSHPublicKeysOutput, bool) bool, in4 ...request.Option) error

	// ListSSHPublicKeysRequestFunc mocks the ListSSHPublicKeysRequest method.
	ListSSHPublicKeysRequestFunc func(in1 *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput)

	// ListSSHPublicKeysWithContextFunc mocks the ListSSHPublicKeysWithContext method.
	ListSSHPublicKeysWithContextFunc func(in1 context.Context, in2 *iam.ListSSHPublicKeysInput, in3 ...request.Option) (*iam.ListSSHPublicKeysOutput, error)

	// ListServerCertificatesFunc mocks the ListServerCertificates method.
	ListServerCertificatesFunc func(in1 *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)

	// ListServerCertificatesPagesFunc mocks the ListServerCertificatesPages method.
	ListServerCertificatesPagesFunc func(in1 *iam.ListServerCertificatesInput, in2 func(*iam.ListServerCertificatesOutput, bool) bool) error

	// ListServerCertificatesPagesWithContextFunc mocks the ListServerCertificatesPagesWithContext method.
	ListServerCertificatesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListServerCertificatesInput, in3 func(*iam.ListServerCertificatesOutput, bool) bool, in4 ...request.Option) error

	// ListServerCertificatesRequestFunc mocks the ListServerCertificatesRequest method.
	ListServerCertificatesRequestFunc func(in1 *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput)

	// ListServerCertificatesWithContextFunc mocks the ListServerCertificatesWithContext method.
	ListServerCertificatesWithContextFunc func(in1 context.Context, in2 *iam.ListServerCertificatesInput, in3 ...request.Option) (*iam.ListServerCertificatesOutput, error)

	// ListServiceSpecificCredentialsFunc mocks the ListServiceSpecificCredentials method.
	ListServiceSpecificCredentialsFunc func(in1 *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)

	// ListServiceSpecificCredentialsRequestFunc mocks the ListServiceSpecificCredentialsRequest method.
	ListServiceSpecificCredentialsRequestFunc func(in1 *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput)

	// ListServiceSpecificCredentialsWithContextFunc mocks the ListServiceSpecificCredentialsWithContext method.
	ListServiceSpecificCredentialsWithContextFunc func(in1 context.Context, in2 *iam.ListServiceSpecificCredentialsInput, in3 ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error)

	// ListSigningCertificatesFunc mocks the ListSigningCertificates method.
	ListSigningCertificatesFunc func(in1 *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)

	// ListSigningCertificatesPagesFunc mocks the ListSigningCertificatesPages method.
	ListSigningCertificatesPagesFunc func(in1 *iam.ListSigningCertificatesInput, in2 func(*iam.ListSigningCertificatesOutput, bool) bool) error

	// ListSigningCertificatesPagesWithContextFunc mocks the ListSigningCertificatesPagesWithContext method.
	ListSigningCertificatesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListSigningCertificatesInput, in3 func(*iam.ListSigningCertificatesOutput, bool) bool, in4 ...request.Option) error

	// ListSigningCertificatesRequestFunc mocks the ListSigningCertificatesRequest method.
	ListSigningCertificatesRequestFunc func(in1 *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput)

	// ListSigningCertificatesWithContextFunc mocks the ListSigningCertificatesWithContext method.
	ListSigningCertificatesWithContextFunc func(in1 context.Context, in2 *iam.ListSigningCertificatesInput, in3 ...request.Option) (*iam.ListSigningCertificatesOutput, error)

	// ListUserPoliciesFunc mocks the ListUserPolicies method.
	ListUserPoliciesFunc func(in1 *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)

	// ListUserPoliciesPagesFunc mocks the ListUserPoliciesPages method.
	ListUserPoliciesPagesFunc func(in1 *iam.ListUserPoliciesInput, in2 func(*iam.ListUserPoliciesOutput, bool) bool) error

	// ListUserPoliciesPagesWithContextFunc mocks the ListUserPoliciesPagesWithContext method.
	ListUserPoliciesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListUserPoliciesInput, in3 func(*iam.ListUserPoliciesOutput, bool) bool, in4 ...request.Option) error

	// ListUserPoliciesRequestFunc mocks the ListUserPoliciesRequest method.
	ListUserPoliciesRequestFunc func(in1 *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput)

	// ListUserPoliciesWithContextFunc mocks the ListUserPoliciesWithContext method.
	ListUserPoliciesWithContextFunc func(in1 context.Context, in2 *iam.ListUserPoliciesInput, in3 ...request.Option) (*iam.ListUserPoliciesOutput, error)

	// ListUserTagsFunc mocks the ListUserTags method.
	ListUserTagsFunc func(in1 *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)

	// ListUserTagsRequestFunc mocks the ListUserTagsRequest method.
	ListUserTagsRequestFunc func(in1 *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput)

	// ListUserTagsWithContextFunc mocks the ListUserTagsWithContext method.
	ListUserTagsWithContextFunc func(in1 context.Context, in2 *iam.ListUserTagsInput, in3 ...request.Option) (*iam.ListUserTagsOutput, error)

	// ListUsersFunc mocks the ListUsers method.
	ListUsersFunc func(in1 *iam.ListUsersInput) (*iam.ListUsersOutput, error)

	// ListUsersPagesFunc mocks the ListUsersPages method.
	ListUsersPagesFunc func(in1 *iam.ListUsersInput, in2 func(*iam.ListUsersOutput, bool) bool) error

	// ListUsersPagesWithContextFunc mocks the ListUsersPagesWithContext method.
	ListUsersPagesWithContextFunc func(in1 context.Context, in2 *iam.ListUsersInput, in3 func(*iam.ListUsersOutput, bool) bool, in4 ...request.Option) error

	// ListUsersRequestFunc mocks the ListUsersRequest method.
	ListUsersRequestFunc func(in1 *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput)

	// ListUsersWithContextFunc mocks the ListUsersWithContext method.
	ListUsersWithContextFunc func(in1 context.Context, in2 *iam.ListUsersInput, in3 ...request.Option) (*iam.ListUsersOutput, error)

	// ListVirtualMFADevicesFunc mocks the ListVirtualMFADevices method.
	ListVirtualMFADevicesFunc func(in1 *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)

	// ListVirtualMFADevicesPagesFunc mocks the ListVirtualMFADevicesPages method.
	ListVirtualMFADevicesPagesFunc func(in1 *iam.ListVirtualMFADevicesInput, in2 func(*iam.ListVirtualMFADevicesOutput, bool) bool) error

	// ListVirtualMFADevicesPagesWithContextFunc mocks the ListVirtualMFADevicesPagesWithContext method.
	ListVirtualMFADevicesPagesWithContextFunc func(in1 context.Context, in2 *iam.ListVirtualMFADevicesInput, in3 func(*iam.ListVirtualMFADevicesOutput, bool) bool, in4 ...request.Option) error

	// ListVirtualMFADevicesRequestFunc mocks the ListVirtualMFADevicesRequest method.
	ListVirtualMFADevicesRequestFunc func(in1 *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput)

	// ListVirtualMFADevicesWithContextFunc mocks the ListVirtualMFADevicesWithContext method.
	ListVirtualMFADevicesWithContextFunc func(in1 context.Context, in2 *iam.ListVirtualMFADevicesInput, in3 ...request.Option) (*iam.ListVirtualMFADevicesOutput, error)

	// PutGroupPolicyFunc mocks the PutGroupPolicy method.
	PutGroupPolicyFunc func(in1 *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)

	// PutGroupPolicyRequestFunc mocks the PutGroupPolicyRequest method.
	PutGroupPolicyRequestFunc func(in1 *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput)

	// PutGroupPolicyWithContextFunc mocks the PutGroupPolicyWithContext method.
	PutGroupPolicyWithContextFunc func(in1 context.Context, in2 *iam.PutGroupPolicyInput, in3 ...request.Option) (*iam.PutGroupPolicyOutput, error)

	// PutRolePermissionsBoundaryFunc mocks the PutRolePermissionsBoundary method.
	PutRolePermissionsBoundaryFunc func(in1 *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)

	// PutRolePermissionsBoundaryRequestFunc mocks the PutRolePermissionsBoundaryRequest method.
	PutRolePermissionsBoundaryRequestFunc func(in1 *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput)

	// PutRolePermissionsBoundaryWithContextFunc mocks the PutRolePermissionsBoundaryWithContext method.
	PutRolePermissionsBoundaryWithContextFunc func(in1 context.Context, in2 *iam.PutRolePermissionsBoundaryInput, in3 ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error)

	// PutRolePolicyFunc mocks the PutRolePolicy method.
	PutRolePolicyFunc func(in1 *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)

	// PutRolePolicyRequestFunc mocks the PutRolePolicyRequest method.
	PutRolePolicyRequestFunc func(in1 *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput)

	// PutRolePolicyWithContextFunc mocks the PutRolePolicyWithContext method.
	PutRolePolicyWithContextFunc func(in1 context.Context, in2 *iam.PutRolePolicyInput, in3 ...request.Option) (*iam.PutRolePolicyOutput, error)

	// PutUserPermissionsBoundaryFunc mocks the PutUserPermissionsBoundary method.
	PutUserPermissionsBoundaryFunc func(in1 *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)

	// PutUserPermissionsBoundaryRequestFunc mocks the PutUserPermissionsBoundaryRequest method.
	PutUserPermissionsBoundaryRequestFunc func(in1 *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput)

	// PutUserPermissionsBoundaryWithContextFunc mocks the PutUserPermissionsBoundaryWithContext method.
	PutUserPermissionsBoundaryWithContextFunc func(in1 context.Context, in2 *iam.PutUserPermissionsBoundaryInput, in3 ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error)

	// PutUserPolicyFunc mocks the PutUserPolicy method.
	PutUserPolicyFunc func(in1 *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)

	// PutUserPolicyRequestFunc mocks the PutUserPolicyRequest method.
	PutUserPolicyRequestFunc func(in1 *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput)

	// PutUserPolicyWithContextFunc mocks the PutUserPolicyWithContext method.
	PutUserPolicyWithContextFunc func(in1 context.Context, in2 *iam.PutUserPolicyInput, in3 ...request.Option) (*iam.PutUserPolicyOutput, error)

	// RemoveClientIDFromOpenIDConnectProviderFunc mocks the RemoveClientIDFromOpenIDConnectProvider method.
	RemoveClientIDFromOpenIDConnectProviderFunc func(in1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)

	// RemoveClientIDFromOpenIDConnectProviderRequestFunc mocks the RemoveClientIDFromOpenIDConnectProviderRequest method.
	RemoveClientIDFromOpenIDConnectProviderRequestFunc func(in1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput)

	// RemoveClientIDFromOpenIDConnectProviderWithContextFunc mocks the RemoveClientIDFromOpenIDConnectProviderWithContext method.
	RemoveClientIDFromOpenIDConnectProviderWithContextFunc func(in1 context.Context, in2 *iam.RemoveClientIDFromOpenIDConnectProviderInput, in3 ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)

	// RemoveRoleFromInstanceProfileFunc mocks the RemoveRoleFromInstanceProfile method.
	RemoveRoleFromInstanceProfileFunc func(in1 *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)

	// RemoveRoleFromInstanceProfileRequestFunc mocks the RemoveRoleFromInstanceProfileRequest method.
	RemoveRoleFromInstanceProfileRequestFunc func(in1 *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput)

	// RemoveRoleFromInstanceProfileWithContextFunc mocks the RemoveRoleFromInstanceProfileWithContext method.
	RemoveRoleFromInstanceProfileWithContextFunc func(in1 context.Context, in2 *iam.RemoveRoleFromInstanceProfileInput, in3 ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error)

	// RemoveUserFromGroupFunc mocks the RemoveUserFromGroup method.
	RemoveUserFromGroupFunc func(in1 *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)

	// RemoveUserFromGroupRequestFunc mocks the RemoveUserFromGroupRequest method.
	RemoveUserFromGroupRequestFunc func(in1 *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput)

	// RemoveUserFromGroupWithContextFunc mocks the RemoveUserFromGroupWithContext method.
	RemoveUserFromGroupWithContextFunc func(in1 context.Context, in2 *iam.RemoveUserFromGroupInput, in3 ...request.Option) (*iam.RemoveUserFromGroupOutput, error)

	// ResetServiceSpecificCredentialFunc mocks the ResetServiceSpecificCredential method.
	ResetServiceSpecificCredentialFunc func(in1 *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)

	// ResetServiceSpecificCredentialRequestFunc mocks the ResetServiceSpecificCredentialRequest method.
	ResetServiceSpecificCredentialRequestFunc func(in1 *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput)

	// ResetServiceSpecificCredentialWithContextFunc mocks the ResetServiceSpecificCredentialWithContext method.
	ResetServiceSpecificCredentialWithContextFunc func(in1 context.Context, in2 *iam.ResetServiceSpecificCredentialInput, in3 ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error)

	// ResyncMFADeviceFunc mocks the ResyncMFADevice method.
	ResyncMFADeviceFunc func(in1 *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)

	// ResyncMFADeviceRequestFunc mocks the ResyncMFADeviceRequest method.
	ResyncMFADeviceRequestFunc func(in1 *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput)

	// ResyncMFADeviceWithContextFunc mocks the ResyncMFADeviceWithContext method.
	ResyncMFADeviceWithContextFunc func(in1 context.Context, in2 *iam.ResyncMFADeviceInput, in3 ...request.Option) (*iam.ResyncMFADeviceOutput, error)

	// SetDefaultPolicyVersionFunc mocks the SetDefaultPolicyVersion method.
	SetDefaultPolicyVersionFunc func(in1 *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)

	// SetDefaultPolicyVersionRequestFunc mocks the SetDefaultPolicyVersionRequest method.
	SetDefaultPolicyVersionRequestFunc func(in1 *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput)

	// SetDefaultPolicyVersionWithContextFunc mocks the SetDefaultPolicyVersionWithContext method.
	SetDefaultPolicyVersionWithContextFunc func(in1 context.Context, in2 *iam.SetDefaultPolicyVersionInput, in3 ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error)

	// SetSecurityTokenServicePreferencesFunc mocks the SetSecurityTokenServicePreferences method.
	SetSecurityTokenServicePreferencesFunc func(in1 *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)

	// SetSecurityTokenServicePreferencesRequestFunc mocks the SetSecurityTokenServicePreferencesRequest method.
	SetSecurityTokenServicePreferencesRequestFunc func(in1 *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput)

	// SetSecurityTokenServicePreferencesWithContextFunc mocks the SetSecurityTokenServicePreferencesWithContext method.
	SetSecurityTokenServicePreferencesWithContextFunc func(in1 context.Context, in2 *iam.SetSecurityTokenServicePreferencesInput, in3 ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error)

	// SimulateCustomPolicyFunc mocks the SimulateCustomPolicy method.
	SimulateCustomPolicyFunc func(in1 *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)

	// SimulateCustomPolicyPagesFunc mocks the SimulateCustomPolicyPages method.
	SimulateCustomPolicyPagesFunc func(in1 *iam.SimulateCustomPolicyInput, in2 func(*iam.SimulatePolicyResponse, bool) bool) error

	// SimulateCustomPolicyPagesWithContextFunc mocks the SimulateCustomPolicyPagesWithContext method.
	SimulateCustomPolicyPagesWithContextFunc func(in1 context.Context, in2 *iam.SimulateCustomPolicyInput, in3 func(*iam.SimulatePolicyResponse, bool) bool, in4 ...request.Option) error

	// SimulateCustomPolicyRequestFunc mocks the SimulateCustomPolicyRequest method.
	SimulateCustomPolicyRequestFunc func(in1 *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)

	// SimulateCustomPolicyWithContextFunc mocks the SimulateCustomPolicyWithContext method.
	SimulateCustomPolicyWithContextFunc func(in1 context.Context, in2 *iam.SimulateCustomPolicyInput, in3 ...request.Option) (*iam.SimulatePolicyResponse, error)

	// SimulatePrincipalPolicyFunc mocks the SimulatePrincipalPolicy method.
	SimulatePrincipalPolicyFunc func(in1 *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)

	// SimulatePrincipalPolicyPagesFunc mocks the SimulatePrincipalPolicyPages method.
	SimulatePrincipalPolicyPagesFunc func(in1 *iam.SimulatePrincipalPolicyInput, in2 func(*iam.SimulatePolicyResponse, bool) bool) error

	// SimulatePrincipalPolicyPagesWithContextFunc mocks the SimulatePrincipalPolicyPagesWithContext method.
	SimulatePrincipalPolicyPagesWithContextFunc func(in1 context.Context, in2 *iam.SimulatePrincipalPolicyInput, in3 func(*iam.SimulatePolicyResponse, bool) bool, in4 ...request.Option) error

	// SimulatePrincipalPolicyRequestFunc mocks the SimulatePrincipalPolicyRequest method.
	SimulatePrincipalPolicyRequestFunc func(in1 *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)

	// SimulatePrincipalPolicyWithContextFunc mocks the SimulatePrincipalPolicyWithContext method.
	SimulatePrincipalPolicyWithContextFunc func(in1 context.Context, in2 *iam.SimulatePrincipalPolicyInput, in3 ...request.Option) (*iam.SimulatePolicyResponse, error)

	// TagRoleFunc mocks the TagRole method.
	TagRoleFunc func(in1 *iam.TagRoleInput) (*iam.TagRoleOutput, error)

	// TagRoleRequestFunc mocks the TagRoleRequest method.
	TagRoleRequestFunc func(in1 *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput)

	// TagRoleWithContextFunc mocks the TagRoleWithContext method.
	TagRoleWithContextFunc func(in1 context.Context, in2 *iam.TagRoleInput, in3 ...request.Option) (*iam.TagRoleOutput, error)

	// TagUserFunc mocks the TagUser method.
	TagUserFunc func(in1 *iam.TagUserInput) (*iam.TagUserOutput, error)

	// TagUserRequestFunc mocks the TagUserRequest method.
	TagUserRequestFunc func(in1 *iam.TagUserInput) (*request.Request, *iam.TagUserOutput)

	// TagUserWithContextFunc mocks the TagUserWithContext method.
	TagUserWithContextFunc func(in1 context.Context, in2 *iam.TagUserInput, in3 ...request.Option) (*iam.TagUserOutput, error)

	// UntagRoleFunc mocks the UntagRole method.
	UntagRoleFunc func(in1 *iam.UntagRoleInput) (*iam.UntagRoleOutput, error)

	// UntagRoleRequestFunc mocks the UntagRoleRequest method.
	UntagRoleRequestFunc func(in1 *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput)

	// UntagRoleWithContextFunc mocks the UntagRoleWithContext method.
	UntagRoleWithContextFunc func(in1 context.Context, in2 *iam.UntagRoleInput, in3 ...request.Option) (*iam.UntagRoleOutput, error)

	// UntagUserFunc mocks the UntagUser method.
	UntagUserFunc func(in1 *iam.UntagUserInput) (*iam.UntagUserOutput, error)

	// UntagUserRequestFunc mocks the UntagUserRequest method.
	UntagUserRequestFunc func(in1 *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput)

	// UntagUserWithContextFunc mocks the UntagUserWithContext method.
	UntagUserWithContextFunc func(in1 context.Context, in2 *iam.UntagUserInput, in3 ...request.Option) (*iam.UntagUserOutput, error)

	// UpdateAccessKeyFunc mocks the UpdateAccessKey method.
	UpdateAccessKeyFunc func(in1 *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)

	// UpdateAccessKeyRequestFunc mocks the UpdateAccessKeyRequest method.
	UpdateAccessKeyRequestFunc func(in1 *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput)

	// UpdateAccessKeyWithContextFunc mocks the UpdateAccessKeyWithContext method.
	UpdateAccessKeyWithContextFunc func(in1 context.Context, in2 *iam.UpdateAccessKeyInput, in3 ...request.Option) (*iam.UpdateAccessKeyOutput, error)

	// UpdateAccountPasswordPolicyFunc mocks the UpdateAccountPasswordPolicy method.
	UpdateAccountPasswordPolicyFunc func(in1 *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)

	// UpdateAccountPasswordPolicyRequestFunc mocks the UpdateAccountPasswordPolicyRequest method.
	UpdateAccountPasswordPolicyRequestFunc func(in1 *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput)

	// UpdateAccountPasswordPolicyWithContextFunc mocks the UpdateAccountPasswordPolicyWithContext method.
	UpdateAccountPasswordPolicyWithContextFunc func(in1 context.Context, in2 *iam.UpdateAccountPasswordPolicyInput, in3 ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error)

	// UpdateAssumeRolePolicyFunc mocks the UpdateAssumeRolePolicy method.
	UpdateAssumeRolePolicyFunc func(in1 *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)

	// UpdateAssumeRolePolicyRequestFunc mocks the UpdateAssumeRolePolicyRequest method.
	UpdateAssumeRolePolicyRequestFunc func(in1 *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput)

	// UpdateAssumeRolePolicyWithContextFunc mocks the UpdateAssumeRolePolicyWithContext method.
	UpdateAssumeRolePolicyWithContextFunc func(in1 context.Context, in2 *iam.UpdateAssumeRolePolicyInput, in3 ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error)

	// UpdateGroupFunc mocks the UpdateGroup method.
	UpdateGroupFunc func(in1 *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)

	// UpdateGroupRequestFunc mocks the UpdateGroupRequest method.
	UpdateGroupRequestFunc func(in1 *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput)

	// UpdateGroupWithContextFunc mocks the UpdateGroupWithContext method.
	UpdateGroupWithContextFunc func(in1 context.Context, in2 *iam.UpdateGroupInput, in3 ...request.Option) (*iam.UpdateGroupOutput, error)

	// UpdateLoginProfileFunc mocks the UpdateLoginProfile method.
	UpdateLoginProfileFunc func(in1 *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)

	// UpdateLoginProfileRequestFunc mocks the UpdateLoginProfileRequest method.
	UpdateLoginProfileRequestFunc func(in1 *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput)

	// UpdateLoginProfileWithContextFunc mocks the UpdateLoginProfileWithContext method.
	UpdateLoginProfileWithContextFunc func(in1 context.Context, in2 *iam.UpdateLoginProfileInput, in3 ...request.Option) (*iam.UpdateLoginProfileOutput, error)

	// UpdateOpenIDConnectProviderThumbprintFunc mocks the UpdateOpenIDConnectProviderThumbprint method.
	UpdateOpenIDConnectProviderThumbprintFunc func(in1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)

	// UpdateOpenIDConnectProviderThumbprintRequestFunc mocks the UpdateOpenIDConnectProviderThumbprintRequest method.
	UpdateOpenIDConnectProviderThumbprintRequestFunc func(in1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput)

	// UpdateOpenIDConnectProviderThumbprintWithContextFunc mocks the UpdateOpenIDConnectProviderThumbprintWithContext method.
	UpdateOpenIDConnectProviderThumbprintWithContextFunc func(in1 context.Context, in2 *iam.UpdateOpenIDConnectProviderThumbprintInput, in3 ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)

	// UpdateRoleFunc mocks the UpdateRole method.
	UpdateRoleFunc func(in1 *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)

	// UpdateRoleDescriptionFunc mocks the UpdateRoleDescription method.
	UpdateRoleDescriptionFunc func(in1 *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)

	// UpdateRoleDescriptionRequestFunc mocks the UpdateRoleDescriptionRequest method.
	UpdateRoleDescriptionRequestFunc func(in1 *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput)

	// UpdateRoleDescriptionWithContextFunc mocks the UpdateRoleDescriptionWithContext method.
	UpdateRoleDescriptionWithContextFunc func(in1 context.Context, in2 *iam.UpdateRoleDescriptionInput, in3 ...request.Option) (*iam.UpdateRoleDescriptionOutput, error)

	// UpdateRoleRequestFunc mocks the UpdateRoleRequest method.
	UpdateRoleRequestFunc func(in1 *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput)

	// UpdateRoleWithContextFunc mocks the UpdateRoleWithContext method.
	UpdateRoleWithContextFunc func(in1 context.Context, in2 *iam.UpdateRoleInput, in3 ...request.Option) (*iam.UpdateRoleOutput, error)

	// UpdateSAMLProviderFunc mocks the UpdateSAMLProvider method.
	UpdateSAMLProviderFunc func(in1 *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)

	// UpdateSAMLProviderRequestFunc mocks the UpdateSAMLProviderRequest method.
	UpdateSAMLProviderRequestFunc func(in1 *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput)

	// UpdateSAMLProviderWithContextFunc mocks the UpdateSAMLProviderWithContext method.
	UpdateSAMLProviderWithContextFunc func(in1 context.Context, in2 *iam.UpdateSAMLProviderInput, in3 ...request.Option) (*iam.UpdateSAMLProviderOutput, error)

	// UpdateSSHPublicKeyFunc mocks the UpdateSSHPublicKey method.
	UpdateSSHPublicKeyFunc func(in1 *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)

	// UpdateSSHPublicKeyRequestFunc mocks the UpdateSSHPublicKeyRequest method.
	UpdateSSHPublicKeyRequestFunc func(in1 *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput)

	// UpdateSSHPublicKeyWithContextFunc mocks the UpdateSSHPublicKeyWithContext method.
	UpdateSSHPublicKeyWithContextFunc func(in1 context.Context, in2 *iam.UpdateSSHPublicKeyInput, in3 ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error)

	// UpdateServerCertificateFunc mocks the UpdateServerCertificate method.
	UpdateServerCertificateFunc func(in1 *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)

	// UpdateServerCertificateRequestFunc mocks the UpdateServerCertificateRequest method.
	UpdateServerCertificateRequestFunc func(in1 *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput)

	// UpdateServerCertificateWithContextFunc mocks the UpdateServerCertificateWithContext method.
	UpdateServerCertificateWithContextFunc func(in1 context.Context, in2 *iam.UpdateServerCertificateInput, in3 ...request.Option) (*iam.UpdateServerCertificateOutput, error)

	// UpdateServiceSpecificCredentialFunc mocks the UpdateServiceSpecificCredential method.
	UpdateServiceSpecificCredentialFunc func(in1 *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)

	// UpdateServiceSpecificCredentialRequestFunc mocks the UpdateServiceSpecificCredentialRequest method.
	UpdateServiceSpecificCredentialRequestFunc func(in1 *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput)

	// UpdateServiceSpecificCredentialWithContextFunc mocks the UpdateServiceSpecificCredentialWithContext method.
	UpdateServiceSpecificCredentialWithContextFunc func(in1 context.Context, in2 *iam.UpdateServiceSpecificCredentialInput, in3 ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error)

	// UpdateSigningCertificateFunc mocks the UpdateSigningCertificate method.
	UpdateSigningCertificateFunc func(in1 *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)

	// UpdateSigningCertificateRequestFunc mocks the UpdateSigningCertificateRequest method.
	UpdateSigningCertificateRequestFunc func(in1 *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput)

	// UpdateSigningCertificateWithContextFunc mocks the UpdateSigningCertificateWithContext method.
	UpdateSigningCertificateWithContextFunc func(in1 context.Context, in2 *iam.UpdateSigningCertificateInput, in3 ...request.Option) (*iam.UpdateSigningCertificateOutput, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(in1 *iam.UpdateUserInput) (*iam.UpdateUserOutput, error)

	// UpdateUserRequestFunc mocks the UpdateUserRequest method.
	UpdateUserRequestFunc func(in1 *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput)

	// UpdateUserWithContextFunc mocks the UpdateUserWithContext method.
	UpdateUserWithContextFunc func(in1 context.Context, in2 *iam.UpdateUserInput, in3 ...request.Option) (*iam.UpdateUserOutput, error)

	// UploadSSHPublicKeyFunc mocks the UploadSSHPublicKey method.
	UploadSSHPublicKeyFunc func(in1 *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)

	// UploadSSHPublicKeyRequestFunc mocks the UploadSSHPublicKeyRequest method.
	UploadSSHPublicKeyRequestFunc func(in1 *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput)

	// UploadSSHPublicKeyWithContextFunc mocks the UploadSSHPublicKeyWithContext method.
	UploadSSHPublicKeyWithContextFunc func(in1 context.Context, in2 *iam.UploadSSHPublicKeyInput, in3 ...request.Option) (*iam.UploadSSHPublicKeyOutput, error)

	// UploadServerCertificateFunc mocks the UploadServerCertificate method.
	UploadServerCertificateFunc func(in1 *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)

	// UploadServerCertificateRequestFunc mocks the UploadServerCertificateRequest method.
	UploadServerCertificateRequestFunc func(in1 *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput)

	// UploadServerCertificateWithContextFunc mocks the UploadServerCertificateWithContext method.
	UploadServerCertificateWithContextFunc func(in1 context.Context, in2 *iam.UploadServerCertificateInput, in3 ...request.Option) (*iam.UploadServerCertificateOutput, error)

	// UploadSigningCertificateFunc mocks the UploadSigningCertificate method.
	UploadSigningCertificateFunc func(in1 *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)

	// UploadSigningCertificateRequestFunc mocks the UploadSigningCertificateRequest method.
	UploadSigningCertificateRequestFunc func(in1 *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput)

	// UploadSigningCertificateWithContextFunc mocks the UploadSigningCertificateWithContext method.
	UploadSigningCertificateWithContextFunc func(in1 context.Context, in2 *iam.UploadSigningCertificateInput, in3 ...request.Option) (*iam.UploadSigningCertificateOutput, error)

	// WaitUntilInstanceProfileExistsFunc mocks the WaitUntilInstanceProfileExists method.
	WaitUntilInstanceProfileExistsFunc func(in1 *iam.GetInstanceProfileInput) error

	// WaitUntilInstanceProfileExistsWithContextFunc mocks the WaitUntilInstanceProfileExistsWithContext method.
	WaitUntilInstanceProfileExistsWithContextFunc func(in1 context.Context, in2 *iam.GetInstanceProfileInput, in3 ...request.WaiterOption) error

	// WaitUntilPolicyExistsFunc mocks the WaitUntilPolicyExists method.
	WaitUntilPolicyExistsFunc func(in1 *iam.GetPolicyInput) error

	// WaitUntilPolicyExistsWithContextFunc mocks the WaitUntilPolicyExistsWithContext method.
	WaitUntilPolicyExistsWithContextFunc func(in1 context.Context, in2 *iam.GetPolicyInput, in3 ...request.WaiterOption) error

	// WaitUntilRoleExistsFunc mocks the WaitUntilRoleExists method.
	WaitUntilRoleExistsFunc func(in1 *iam.GetRoleInput) error

	// WaitUntilRoleExistsWithContextFunc mocks the WaitUntilRoleExistsWithContext method.
	WaitUntilRoleExistsWithContextFunc func(in1 context.Context, in2 *iam.GetRoleInput, in3 ...request.WaiterOption) error

	// WaitUntilUserExistsFunc mocks the WaitUntilUserExists method.
	WaitUntilUserExistsFunc func(in1 *iam.GetUserInput) error

	// WaitUntilUserExistsWithContextFunc mocks the WaitUntilUserExistsWithContext method.
	WaitUntilUserExistsWithContextFunc func(in1 context.Context, in2 *iam.GetUserInput, in3 ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClientIDToOpenIDConnectProvider holds details about calls to the AddClientIDToOpenIDConnectProvider method.
		AddClientIDToOpenIDConnectProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.AddClientIDToOpenIDConnectProviderInput
		}
		// AddClientIDToOpenIDConnectProviderRequest holds details about calls to the AddClientIDToOpenIDConnectProviderRequest method.
		AddClientIDToOpenIDConnectProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.AddClientIDToOpenIDConnectProviderInput
		}
		// AddClientIDToOpenIDConnectProviderWithContext holds details about calls to the AddClientIDToOpenIDConnectProviderWithContext method.
		AddClientIDToOpenIDConnectProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.AddClientIDToOpenIDConnectProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AddRoleToInstanceProfile holds details about calls to the AddRoleToInstanceProfile method.
		AddRoleToInstanceProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.AddRoleToInstanceProfileInput
		}
		// AddRoleToInstanceProfileRequest holds details about calls to the AddRoleToInstanceProfileRequest method.
		AddRoleToInstanceProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.AddRoleToInstanceProfileInput
		}
		// AddRoleToInstanceProfileWithContext holds details about calls to the AddRoleToInstanceProfileWithContext method.
		AddRoleToInstanceProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.AddRoleToInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AddUserToGroup holds details about calls to the AddUserToGroup method.
		AddUserToGroup []struct {
			// In1 is the in1 argument value.
			In1 *iam.AddUserToGroupInput
		}
		// AddUserToGroupRequest holds details about calls to the AddUserToGroupRequest method.
		AddUserToGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.AddUserToGroupInput
		}
		// AddUserToGroupWithContext holds details about calls to the AddUserToGroupWithContext method.
		AddUserToGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.AddUserToGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachGroupPolicy holds details about calls to the AttachGroupPolicy method.
		AttachGroupPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.AttachGroupPolicyInput
		}
		// AttachGroupPolicyRequest holds details about calls to the AttachGroupPolicyRequest method.
		AttachGroupPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.AttachGroupPolicyInput
		}
		// AttachGroupPolicyWithContext holds details about calls to the AttachGroupPolicyWithContext method.
		AttachGroupPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.AttachGroupPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachRolePolicy holds details about calls to the AttachRolePolicy method.
		AttachRolePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.AttachRolePolicyInput
		}
		// AttachRolePolicyRequest holds details about calls to the AttachRolePolicyRequest method.
		AttachRolePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.AttachRolePolicyInput
		}
		// AttachRolePolicyWithContext holds details about calls to the AttachRolePolicyWithContext method.
		AttachRolePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.AttachRolePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachUserPolicy holds details about calls to the AttachUserPolicy method.
		AttachUserPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.AttachUserPolicyInput
		}
		// AttachUserPolicyRequest holds details about calls to the AttachUserPolicyRequest method.
		AttachUserPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.AttachUserPolicyInput
		}
		// AttachUserPolicyWithContext holds details about calls to the AttachUserPolicyWithContext method.
		AttachUserPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.AttachUserPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ChangePassword holds details about calls to the ChangePassword method.
		ChangePassword []struct {
			// In1 is the in1 argument value.
			In1 *iam.ChangePasswordInput
		}
		// ChangePasswordRequest holds details about calls to the ChangePasswordRequest method.
		ChangePasswordRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ChangePasswordInput
		}
		// ChangePasswordWithContext holds details about calls to the ChangePasswordWithContext method.
		ChangePasswordWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ChangePasswordInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateAccessKey holds details about calls to the CreateAccessKey method.
		CreateAccessKey []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateAccessKeyInput
		}
		// CreateAccessKeyRequest holds details about calls to the CreateAccessKeyRequest method.
		CreateAccessKeyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateAccessKeyInput
		}
		// CreateAccessKeyWithContext holds details about calls to the CreateAccessKeyWithContext method.
		CreateAccessKeyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateAccessKeyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateAccountAlias holds details about calls to the CreateAccountAlias method.
		CreateAccountAlias []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateAccountAliasInput
		}
		// CreateAccountAliasRequest holds details about calls to the CreateAccountAliasRequest method.
		CreateAccountAliasRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateAccountAliasInput
		}
		// CreateAccountAliasWithContext holds details about calls to the CreateAccountAliasWithContext method.
		CreateAccountAliasWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateAccountAliasInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateGroup holds details about calls to the CreateGroup method.
		CreateGroup []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateGroupInput
		}
		// CreateGroupRequest holds details about calls to the CreateGroupRequest method.
		CreateGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateGroupInput
		}
		// CreateGroupWithContext holds details about calls to the CreateGroupWithContext method.
		CreateGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateInstanceProfile holds details about calls to the CreateInstanceProfile method.
		CreateInstanceProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateInstanceProfileInput
		}
		// CreateInstanceProfileRequest holds details about calls to the CreateInstanceProfileRequest method.
		CreateInstanceProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateInstanceProfileInput
		}
		// CreateInstanceProfileWithContext holds details about calls to the CreateInstanceProfileWithContext method.
		CreateInstanceProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateLoginProfile holds details about calls to the CreateLoginProfile method.
		CreateLoginProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateLoginProfileInput
		}
		// CreateLoginProfileRequest holds details about calls to the CreateLoginProfileRequest method.
		CreateLoginProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateLoginProfileInput
		}
		// CreateLoginProfileWithContext holds details about calls to the CreateLoginProfileWithContext method.
		CreateLoginProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateLoginProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateOpenIDConnectProvider holds details about calls to the CreateOpenIDConnectProvider method.
		CreateOpenIDConnectProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateOpenIDConnectProviderInput
		}
		// CreateOpenIDConnectProviderRequest holds details about calls to the CreateOpenIDConnectProviderRequest method.
		CreateOpenIDConnectProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateOpenIDConnectProviderInput
		}
		// CreateOpenIDConnectProviderWithContext holds details about calls to the CreateOpenIDConnectProviderWithContext method.
		CreateOpenIDConnectProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateOpenIDConnectProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreatePolicy holds details about calls to the CreatePolicy method.
		CreatePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreatePolicyInput
		}
		// CreatePolicyRequest holds details about calls to the CreatePolicyRequest method.
		CreatePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreatePolicyInput
		}
		// CreatePolicyVersion holds details about calls to the CreatePolicyVersion method.
		CreatePolicyVersion []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreatePolicyVersionInput
		}
		// CreatePolicyVersionRequest holds details about calls to the CreatePolicyVersionRequest method.
		CreatePolicyVersionRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreatePolicyVersionInput
		}
		// CreatePolicyVersionWithContext holds details about calls to the CreatePolicyVersionWithContext method.
		CreatePolicyVersionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreatePolicyVersionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreatePolicyWithContext holds details about calls to the CreatePolicyWithContext method.
		CreatePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreatePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateRole holds details about calls to the CreateRole method.
		CreateRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateRoleInput
		}
		// CreateRoleRequest holds details about calls to the CreateRoleRequest method.
		CreateRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateRoleInput
		}
		// CreateRoleWithContext holds details about calls to the CreateRoleWithContext method.
		CreateRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateSAMLProvider holds details about calls to the CreateSAMLProvider method.
		CreateSAMLProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateSAMLProviderInput
		}
		// CreateSAMLProviderRequest holds details about calls to the CreateSAMLProviderRequest method.
		CreateSAMLProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateSAMLProviderInput
		}
		// CreateSAMLProviderWithContext holds details about calls to the CreateSAMLProviderWithContext method.
		CreateSAMLProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateSAMLProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateServiceLinkedRole holds details about calls to the CreateServiceLinkedRole method.
		CreateServiceLinkedRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateServiceLinkedRoleInput
		}
		// CreateServiceLinkedRoleRequest holds details about calls to the CreateServiceLinkedRoleRequest method.
		CreateServiceLinkedRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateServiceLinkedRoleInput
		}
		// CreateServiceLinkedRoleWithContext holds details about calls to the CreateServiceLinkedRoleWithContext method.
		CreateServiceLinkedRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateServiceLinkedRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateServiceSpecificCredential holds details about calls to the CreateServiceSpecificCredential method.
		CreateServiceSpecificCredential []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateServiceSpecificCredentialInput
		}
		// CreateServiceSpecificCredentialRequest holds details about calls to the CreateServiceSpecificCredentialRequest method.
		CreateServiceSpecificCredentialRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateServiceSpecificCredentialInput
		}
		// CreateServiceSpecificCredentialWithContext holds details about calls to the CreateServiceSpecificCredentialWithContext method.
		CreateServiceSpecificCredentialWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateServiceSpecificCredentialInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateUserInput
		}
		// CreateUserRequest holds details about calls to the CreateUserRequest method.
		CreateUserRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateUserInput
		}
		// CreateUserWithContext holds details about calls to the CreateUserWithContext method.
		CreateUserWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateUserInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVirtualMFADevice holds details about calls to the CreateVirtualMFADevice method.
		CreateVirtualMFADevice []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateVirtualMFADeviceInput
		}
		// CreateVirtualMFADeviceRequest holds details about calls to the CreateVirtualMFADeviceRequest method.
		CreateVirtualMFADeviceRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.CreateVirtualMFADeviceInput
		}
		// CreateVirtualMFADeviceWithContext holds details about calls to the CreateVirtualMFADeviceWithContext method.
		CreateVirtualMFADeviceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.CreateVirtualMFADeviceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeactivateMFADevice holds details about calls to the DeactivateMFADevice method.
		DeactivateMFADevice []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeactivateMFADeviceInput
		}
		// DeactivateMFADeviceRequest holds details about calls to the DeactivateMFADeviceRequest method.
		DeactivateMFADeviceRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeactivateMFADeviceInput
		}
		// DeactivateMFADeviceWithContext holds details about calls to the DeactivateMFADeviceWithContext method.
		DeactivateMFADeviceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeactivateMFADeviceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteAccessKey holds details about calls to the DeleteAccessKey method.
		DeleteAccessKey []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteAccessKeyInput
		}
		// DeleteAccessKeyRequest holds details about calls to the DeleteAccessKeyRequest method.
		DeleteAccessKeyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteAccessKeyInput
		}
		// DeleteAccessKeyWithContext holds details about calls to the DeleteAccessKeyWithContext method.
		DeleteAccessKeyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteAccessKeyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteAccountAlias holds details about calls to the DeleteAccountAlias method.
		DeleteAccountAlias []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteAccountAliasInput
		}
		// DeleteAccountAliasRequest holds details about calls to the DeleteAccountAliasRequest method.
		DeleteAccountAliasRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteAccountAliasInput
		}
		// DeleteAccountAliasWithContext holds details about calls to the DeleteAccountAliasWithContext method.
		DeleteAccountAliasWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteAccountAliasInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteAccountPasswordPolicy holds details about calls to the DeleteAccountPasswordPolicy method.
		DeleteAccountPasswordPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteAccountPasswordPolicyInput
		}
		// DeleteAccountPasswordPolicyRequest holds details about calls to the DeleteAccountPasswordPolicyRequest method.
		DeleteAccountPasswordPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteAccountPasswordPolicyInput
		}
		// DeleteAccountPasswordPolicyWithContext holds details about calls to the DeleteAccountPasswordPolicyWithContext method.
		DeleteAccountPasswordPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteAccountPasswordPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteGroup holds details about calls to the DeleteGroup method.
		DeleteGroup []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteGroupInput
		}
		// DeleteGroupPolicy holds details about calls to the DeleteGroupPolicy method.
		DeleteGroupPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteGroupPolicyInput
		}
		// DeleteGroupPolicyRequest holds details about calls to the DeleteGroupPolicyRequest method.
		DeleteGroupPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteGroupPolicyInput
		}
		// DeleteGroupPolicyWithContext holds details about calls to the DeleteGroupPolicyWithContext method.
		DeleteGroupPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteGroupPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteGroupRequest holds details about calls to the DeleteGroupRequest method.
		DeleteGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteGroupInput
		}
		// DeleteGroupWithContext holds details about calls to the DeleteGroupWithContext method.
		DeleteGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteInstanceProfile holds details about calls to the DeleteInstanceProfile method.
		DeleteInstanceProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteInstanceProfileInput
		}
		// DeleteInstanceProfileRequest holds details about calls to the DeleteInstanceProfileRequest method.
		DeleteInstanceProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteInstanceProfileInput
		}
		// DeleteInstanceProfileWithContext holds details about calls to the DeleteInstanceProfileWithContext method.
		DeleteInstanceProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteLoginProfile holds details about calls to the DeleteLoginProfile method.
		DeleteLoginProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteLoginProfileInput
		}
		// DeleteLoginProfileRequest holds details about calls to the DeleteLoginProfileRequest method.
		DeleteLoginProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteLoginProfileInput
		}
		// DeleteLoginProfileWithContext holds details about calls to the DeleteLoginProfileWithContext method.
		DeleteLoginProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteLoginProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteOpenIDConnectProvider holds details about calls to the DeleteOpenIDConnectProvider method.
		DeleteOpenIDConnectProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteOpenIDConnectProviderInput
		}
		// DeleteOpenIDConnectProviderRequest holds details about calls to the DeleteOpenIDConnectProviderRequest method.
		DeleteOpenIDConnectProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteOpenIDConnectProviderInput
		}
		// DeleteOpenIDConnectProviderWithContext holds details about calls to the DeleteOpenIDConnectProviderWithContext method.
		DeleteOpenIDConnectProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteOpenIDConnectProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeletePolicy holds details about calls to the DeletePolicy method.
		DeletePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeletePolicyInput
		}
		// DeletePolicyRequest holds details about calls to the DeletePolicyRequest method.
		DeletePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeletePolicyInput
		}
		// DeletePolicyVersion holds details about calls to the DeletePolicyVersion method.
		DeletePolicyVersion []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeletePolicyVersionInput
		}
		// DeletePolicyVersionRequest holds details about calls to the DeletePolicyVersionRequest method.
		DeletePolicyVersionRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeletePolicyVersionInput
		}
		// DeletePolicyVersionWithContext holds details about calls to the DeletePolicyVersionWithContext method.
		DeletePolicyVersionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeletePolicyVersionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeletePolicyWithContext holds details about calls to the DeletePolicyWithContext method.
		DeletePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeletePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteRole holds details about calls to the DeleteRole method.
		DeleteRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteRoleInput
		}
		// DeleteRolePermissionsBoundary holds details about calls to the DeleteRolePermissionsBoundary method.
		DeleteRolePermissionsBoundary []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteRolePermissionsBoundaryInput
		}
		// DeleteRolePermissionsBoundaryRequest holds details about calls to the DeleteRolePermissionsBoundaryRequest method.
		DeleteRolePermissionsBoundaryRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteRolePermissionsBoundaryInput
		}
		// DeleteRolePermissionsBoundaryWithContext holds details about calls to the DeleteRolePermissionsBoundaryWithContext method.
		DeleteRolePermissionsBoundaryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteRolePermissionsBoundaryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteRolePolicy holds details about calls to the DeleteRolePolicy method.
		DeleteRolePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteRolePolicyInput
		}
		// DeleteRolePolicyRequest holds details about calls to the DeleteRolePolicyRequest method.
		DeleteRolePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteRolePolicyInput
		}
		// DeleteRolePolicyWithContext holds details about calls to the DeleteRolePolicyWithContext method.
		DeleteRolePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteRolePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteRoleRequest holds details about calls to the DeleteRoleRequest method.
		DeleteRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteRoleInput
		}
		// DeleteRoleWithContext holds details about calls to the DeleteRoleWithContext method.
		DeleteRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSAMLProvider holds details about calls to the DeleteSAMLProvider method.
		DeleteSAMLProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteSAMLProviderInput
		}
		// DeleteSAMLProviderRequest holds details about calls to the DeleteSAMLProviderRequest method.
		DeleteSAMLProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteSAMLProviderInput
		}
		// DeleteSAMLProviderWithContext holds details about calls to the DeleteSAMLProviderWithContext method.
		DeleteSAMLProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteSAMLProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSSHPublicKey holds details about calls to the DeleteSSHPublicKey method.
		DeleteSSHPublicKey []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteSSHPublicKeyInput
		}
		// DeleteSSHPublicKeyRequest holds details about calls to the DeleteSSHPublicKeyRequest method.
		DeleteSSHPublicKeyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteSSHPublicKeyInput
		}
		// DeleteSSHPublicKeyWithContext holds details about calls to the DeleteSSHPublicKeyWithContext method.
		DeleteSSHPublicKeyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteSSHPublicKeyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteServerCertificate holds details about calls to the DeleteServerCertificate method.
		DeleteServerCertificate []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteServerCertificateInput
		}
		// DeleteServerCertificateRequest holds details about calls to the DeleteServerCertificateRequest method.
		DeleteServerCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteServerCertificateInput
		}
		// DeleteServerCertificateWithContext holds details about calls to the DeleteServerCertificateWithContext method.
		DeleteServerCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteServerCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteServiceLinkedRole holds details about calls to the DeleteServiceLinkedRole method.
		DeleteServiceLinkedRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteServiceLinkedRoleInput
		}
		// DeleteServiceLinkedRoleRequest holds details about calls to the DeleteServiceLinkedRoleRequest method.
		DeleteServiceLinkedRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteServiceLinkedRoleInput
		}
		// DeleteServiceLinkedRoleWithContext holds details about calls to the DeleteServiceLinkedRoleWithContext method.
		DeleteServiceLinkedRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteServiceLinkedRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteServiceSpecificCredential holds details about calls to the DeleteServiceSpecificCredential method.
		DeleteServiceSpecificCredential []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteServiceSpecificCredentialInput
		}
		// DeleteServiceSpecificCredentialRequest holds details about calls to the DeleteServiceSpecificCredentialRequest method.
		DeleteServiceSpecificCredentialRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteServiceSpecificCredentialInput
		}
		// DeleteServiceSpecificCredentialWithContext holds details about calls to the DeleteServiceSpecificCredentialWithContext method.
		DeleteServiceSpecificCredentialWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteServiceSpecificCredentialInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSigningCertificate holds details about calls to the DeleteSigningCertificate method.
		DeleteSigningCertificate []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteSigningCertificateInput
		}
		// DeleteSigningCertificateRequest holds details about calls to the DeleteSigningCertificateRequest method.
		DeleteSigningCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteSigningCertificateInput
		}
		// DeleteSigningCertificateWithContext holds details about calls to the DeleteSigningCertificateWithContext method.
		DeleteSigningCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteSigningCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteUserInput
		}
		// DeleteUserPermissionsBoundary holds details about calls to the DeleteUserPermissionsBoundary method.
		DeleteUserPermissionsBoundary []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteUserPermissionsBoundaryInput
		}
		// DeleteUserPermissionsBoundaryRequest holds details about calls to the DeleteUserPermissionsBoundaryRequest method.
		DeleteUserPermissionsBoundaryRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteUserPermissionsBoundaryInput
		}
		// DeleteUserPermissionsBoundaryWithContext holds details about calls to the DeleteUserPermissionsBoundaryWithContext method.
		DeleteUserPermissionsBoundaryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteUserPermissionsBoundaryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteUserPolicy holds details about calls to the DeleteUserPolicy method.
		DeleteUserPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteUserPolicyInput
		}
		// DeleteUserPolicyRequest holds details about calls to the DeleteUserPolicyRequest method.
		DeleteUserPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteUserPolicyInput
		}
		// DeleteUserPolicyWithContext holds details about calls to the DeleteUserPolicyWithContext method.
		DeleteUserPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteUserPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteUserRequest holds details about calls to the DeleteUserRequest method.
		DeleteUserRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteUserInput
		}
		// DeleteUserWithContext holds details about calls to the DeleteUserWithContext method.
		DeleteUserWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteUserInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVirtualMFADevice holds details about calls to the DeleteVirtualMFADevice method.
		DeleteVirtualMFADevice []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteVirtualMFADeviceInput
		}
		// DeleteVirtualMFADeviceRequest holds details about calls to the DeleteVirtualMFADeviceRequest method.
		DeleteVirtualMFADeviceRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DeleteVirtualMFADeviceInput
		}
		// DeleteVirtualMFADeviceWithContext holds details about calls to the DeleteVirtualMFADeviceWithContext method.
		DeleteVirtualMFADeviceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DeleteVirtualMFADeviceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachGroupPolicy holds details about calls to the DetachGroupPolicy method.
		DetachGroupPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DetachGroupPolicyInput
		}
		// DetachGroupPolicyRequest holds details about calls to the DetachGroupPolicyRequest method.
		DetachGroupPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DetachGroupPolicyInput
		}
		// DetachGroupPolicyWithContext holds details about calls to the DetachGroupPolicyWithContext method.
		DetachGroupPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DetachGroupPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachRolePolicy holds details about calls to the DetachRolePolicy method.
		DetachRolePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DetachRolePolicyInput
		}
		// DetachRolePolicyRequest holds details about calls to the DetachRolePolicyRequest method.
		DetachRolePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DetachRolePolicyInput
		}
		// DetachRolePolicyWithContext holds details about calls to the DetachRolePolicyWithContext method.
		DetachRolePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DetachRolePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachUserPolicy holds details about calls to the DetachUserPolicy method.
		DetachUserPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.DetachUserPolicyInput
		}
		// DetachUserPolicyRequest holds details about calls to the DetachUserPolicyRequest method.
		DetachUserPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.DetachUserPolicyInput
		}
		// DetachUserPolicyWithContext holds details about calls to the DetachUserPolicyWithContext method.
		DetachUserPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.DetachUserPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableMFADevice holds details about calls to the EnableMFADevice method.
		EnableMFADevice []struct {
			// In1 is the in1 argument value.
			In1 *iam.EnableMFADeviceInput
		}
		// EnableMFADeviceRequest holds details about calls to the EnableMFADeviceRequest method.
		EnableMFADeviceRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.EnableMFADeviceInput
		}
		// EnableMFADeviceWithContext holds details about calls to the EnableMFADeviceWithContext method.
		EnableMFADeviceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.EnableMFADeviceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GenerateCredentialReport holds details about calls to the GenerateCredentialReport method.
		GenerateCredentialReport []struct {
			// In1 is the in1 argument value.
			In1 *iam.GenerateCredentialReportInput
		}
		// GenerateCredentialReportRequest holds details about calls to the GenerateCredentialReportRequest method.
		GenerateCredentialReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GenerateCredentialReportInput
		}
		// GenerateCredentialReportWithContext holds details about calls to the GenerateCredentialReportWithContext method.
		GenerateCredentialReportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GenerateCredentialReportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GenerateOrganizationsAccessReport holds details about calls to the GenerateOrganizationsAccessReport method.
		GenerateOrganizationsAccessReport []struct {
			// In1 is the in1 argument value.
			In1 *iam.GenerateOrganizationsAccessReportInput
		}
		// GenerateOrganizationsAccessReportRequest holds details about calls to the GenerateOrganizationsAccessReportRequest method.
		GenerateOrganizationsAccessReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GenerateOrganizationsAccessReportInput
		}
		// GenerateOrganizationsAccessReportWithContext holds details about calls to the GenerateOrganizationsAccessReportWithContext method.
		GenerateOrganizationsAccessReportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GenerateOrganizationsAccessReportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GenerateServiceLastAccessedDetails holds details about calls to the GenerateServiceLastAccessedDetails method.
		GenerateServiceLastAccessedDetails []struct {
			// In1 is the in1 argument value.
			In1 *iam.GenerateServiceLastAccessedDetailsInput
		}
		// GenerateServiceLastAccessedDetailsRequest holds details about calls to the GenerateServiceLastAccessedDetailsRequest method.
		GenerateServiceLastAccessedDetailsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GenerateServiceLastAccessedDetailsInput
		}
		// GenerateServiceLastAccessedDetailsWithContext holds details about calls to the GenerateServiceLastAccessedDetailsWithContext method.
		GenerateServiceLastAccessedDetailsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GenerateServiceLastAccessedDetailsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetAccessKeyLastUsed holds details about calls to the GetAccessKeyLastUsed method.
		GetAccessKeyLastUsed []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccessKeyLastUsedInput
		}
		// GetAccessKeyLastUsedRequest holds details about calls to the GetAccessKeyLastUsedRequest method.
		GetAccessKeyLastUsedRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccessKeyLastUsedInput
		}
		// GetAccessKeyLastUsedWithContext holds details about calls to the GetAccessKeyLastUsedWithContext method.
		GetAccessKeyLastUsedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetAccessKeyLastUsedInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetAccountAuthorizationDetails holds details about calls to the GetAccountAuthorizationDetails method.
		GetAccountAuthorizationDetails []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccountAuthorizationDetailsInput
		}
		// GetAccountAuthorizationDetailsPages holds details about calls to the GetAccountAuthorizationDetailsPages method.
		GetAccountAuthorizationDetailsPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccountAuthorizationDetailsInput
			// In2 is the in2 argument value.
			In2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		}
		// GetAccountAuthorizationDetailsPagesWithContext holds details about calls to the GetAccountAuthorizationDetailsPagesWithContext method.
		GetAccountAuthorizationDetailsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetAccountAuthorizationDetailsInput
			// In3 is the in3 argument value.
			In3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// GetAccountAuthorizationDetailsRequest holds details about calls to the GetAccountAuthorizationDetailsRequest method.
		GetAccountAuthorizationDetailsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccountAuthorizationDetailsInput
		}
		// GetAccountAuthorizationDetailsWithContext holds details about calls to the GetAccountAuthorizationDetailsWithContext method.
		GetAccountAuthorizationDetailsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetAccountAuthorizationDetailsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetAccountPasswordPolicy holds details about calls to the GetAccountPasswordPolicy method.
		GetAccountPasswordPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccountPasswordPolicyInput
		}
		// GetAccountPasswordPolicyRequest holds details about calls to the GetAccountPasswordPolicyRequest method.
		GetAccountPasswordPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccountPasswordPolicyInput
		}
		// GetAccountPasswordPolicyWithContext holds details about calls to the GetAccountPasswordPolicyWithContext method.
		GetAccountPasswordPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetAccountPasswordPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetAccountSummary holds details about calls to the GetAccountSummary method.
		GetAccountSummary []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccountSummaryInput
		}
		// GetAccountSummaryRequest holds details about calls to the GetAccountSummaryRequest method.
		GetAccountSummaryRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetAccountSummaryInput
		}
		// GetAccountSummaryWithContext holds details about calls to the GetAccountSummaryWithContext method.
		GetAccountSummaryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetAccountSummaryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetContextKeysForCustomPolicy holds details about calls to the GetContextKeysForCustomPolicy method.
		GetContextKeysForCustomPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetContextKeysForCustomPolicyInput
		}
		// GetContextKeysForCustomPolicyRequest holds details about calls to the GetContextKeysForCustomPolicyRequest method.
		GetContextKeysForCustomPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetContextKeysForCustomPolicyInput
		}
		// GetContextKeysForCustomPolicyWithContext holds details about calls to the GetContextKeysForCustomPolicyWithContext method.
		GetContextKeysForCustomPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetContextKeysForCustomPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetContextKeysForPrincipalPolicy holds details about calls to the GetContextKeysForPrincipalPolicy method.
		GetContextKeysForPrincipalPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetContextKeysForPrincipalPolicyInput
		}
		// GetContextKeysForPrincipalPolicyRequest holds details about calls to the GetContextKeysForPrincipalPolicyRequest method.
		GetContextKeysForPrincipalPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetContextKeysForPrincipalPolicyInput
		}
		// GetContextKeysForPrincipalPolicyWithContext holds details about calls to the GetContextKeysForPrincipalPolicyWithContext method.
		GetContextKeysForPrincipalPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetContextKeysForPrincipalPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetCredentialReport holds details about calls to the GetCredentialReport method.
		GetCredentialReport []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetCredentialReportInput
		}
		// GetCredentialReportRequest holds details about calls to the GetCredentialReportRequest method.
		GetCredentialReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetCredentialReportInput
		}
		// GetCredentialReportWithContext holds details about calls to the GetCredentialReportWithContext method.
		GetCredentialReportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetCredentialReportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetGroup holds details about calls to the GetGroup method.
		GetGroup []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetGroupInput
		}
		// GetGroupPages holds details about calls to the GetGroupPages method.
		GetGroupPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetGroupInput
			// In2 is the in2 argument value.
			In2 func(*iam.GetGroupOutput, bool) bool
		}
		// GetGroupPagesWithContext holds details about calls to the GetGroupPagesWithContext method.
		GetGroupPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetGroupInput
			// In3 is the in3 argument value.
			In3 func(*iam.GetGroupOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// GetGroupPolicy holds details about calls to the GetGroupPolicy method.
		GetGroupPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetGroupPolicyInput
		}
		// GetGroupPolicyRequest holds details about calls to the GetGroupPolicyRequest method.
		GetGroupPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetGroupPolicyInput
		}
		// GetGroupPolicyWithContext holds details about calls to the GetGroupPolicyWithContext method.
		GetGroupPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetGroupPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetGroupRequest holds details about calls to the GetGroupRequest method.
		GetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetGroupInput
		}
		// GetGroupWithContext holds details about calls to the GetGroupWithContext method.
		GetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetInstanceProfile holds details about calls to the GetInstanceProfile method.
		GetInstanceProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetInstanceProfileInput
		}
		// GetInstanceProfileRequest holds details about calls to the GetInstanceProfileRequest method.
		GetInstanceProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetInstanceProfileInput
		}
		// GetInstanceProfileWithContext holds details about calls to the GetInstanceProfileWithContext method.
		GetInstanceProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetLoginProfile holds details about calls to the GetLoginProfile method.
		GetLoginProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetLoginProfileInput
		}
		// GetLoginProfileRequest holds details about calls to the GetLoginProfileRequest method.
		GetLoginProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetLoginProfileInput
		}
		// GetLoginProfileWithContext holds details about calls to the GetLoginProfileWithContext method.
		GetLoginProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetLoginProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetOpenIDConnectProvider holds details about calls to the GetOpenIDConnectProvider method.
		GetOpenIDConnectProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetOpenIDConnectProviderInput
		}
		// GetOpenIDConnectProviderRequest holds details about calls to the GetOpenIDConnectProviderRequest method.
		GetOpenIDConnectProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetOpenIDConnectProviderInput
		}
		// GetOpenIDConnectProviderWithContext holds details about calls to the GetOpenIDConnectProviderWithContext method.
		GetOpenIDConnectProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetOpenIDConnectProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetOrganizationsAccessReport holds details about calls to the GetOrganizationsAccessReport method.
		GetOrganizationsAccessReport []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetOrganizationsAccessReportInput
		}
		// GetOrganizationsAccessReportRequest holds details about calls to the GetOrganizationsAccessReportRequest method.
		GetOrganizationsAccessReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetOrganizationsAccessReportInput
		}
		// GetOrganizationsAccessReportWithContext holds details about calls to the GetOrganizationsAccessReportWithContext method.
		GetOrganizationsAccessReportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetOrganizationsAccessReportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetPolicy holds details about calls to the GetPolicy method.
		GetPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetPolicyInput
		}
		// GetPolicyRequest holds details about calls to the GetPolicyRequest method.
		GetPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetPolicyInput
		}
		// GetPolicyVersion holds details about calls to the GetPolicyVersion method.
		GetPolicyVersion []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetPolicyVersionInput
		}
		// GetPolicyVersionRequest holds details about calls to the GetPolicyVersionRequest method.
		GetPolicyVersionRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetPolicyVersionInput
		}
		// GetPolicyVersionWithContext holds details about calls to the GetPolicyVersionWithContext method.
		GetPolicyVersionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetPolicyVersionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetPolicyWithContext holds details about calls to the GetPolicyWithContext method.
		GetPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetRole holds details about calls to the GetRole method.
		GetRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetRoleInput
		}
		// GetRolePolicy holds details about calls to the GetRolePolicy method.
		GetRolePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetRolePolicyInput
		}
		// GetRolePolicyRequest holds details about calls to the GetRolePolicyRequest method.
		GetRolePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetRolePolicyInput
		}
		// GetRolePolicyWithContext holds details about calls to the GetRolePolicyWithContext method.
		GetRolePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetRolePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetRoleRequest holds details about calls to the GetRoleRequest method.
		GetRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetRoleInput
		}
		// GetRoleWithContext holds details about calls to the GetRoleWithContext method.
		GetRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetSAMLProvider holds details about calls to the GetSAMLProvider method.
		GetSAMLProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetSAMLProviderInput
		}
		// GetSAMLProviderRequest holds details about calls to the GetSAMLProviderRequest method.
		GetSAMLProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetSAMLProviderInput
		}
		// GetSAMLProviderWithContext holds details about calls to the GetSAMLProviderWithContext method.
		GetSAMLProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetSAMLProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetSSHPublicKey holds details about calls to the GetSSHPublicKey method.
		GetSSHPublicKey []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetSSHPublicKeyInput
		}
		// GetSSHPublicKeyRequest holds details about calls to the GetSSHPublicKeyRequest method.
		GetSSHPublicKeyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetSSHPublicKeyInput
		}
		// GetSSHPublicKeyWithContext holds details about calls to the GetSSHPublicKeyWithContext method.
		GetSSHPublicKeyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetSSHPublicKeyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetServerCertificate holds details about calls to the GetServerCertificate method.
		GetServerCertificate []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServerCertificateInput
		}
		// GetServerCertificateRequest holds details about calls to the GetServerCertificateRequest method.
		GetServerCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServerCertificateInput
		}
		// GetServerCertificateWithContext holds details about calls to the GetServerCertificateWithContext method.
		GetServerCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetServerCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetServiceLastAccessedDetails holds details about calls to the GetServiceLastAccessedDetails method.
		GetServiceLastAccessedDetails []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServiceLastAccessedDetailsInput
		}
		// GetServiceLastAccessedDetailsRequest holds details about calls to the GetServiceLastAccessedDetailsRequest method.
		GetServiceLastAccessedDetailsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServiceLastAccessedDetailsInput
		}
		// GetServiceLastAccessedDetailsWithContext holds details about calls to the GetServiceLastAccessedDetailsWithContext method.
		GetServiceLastAccessedDetailsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetServiceLastAccessedDetailsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetServiceLastAccessedDetailsWithEntities holds details about calls to the GetServiceLastAccessedDetailsWithEntities method.
		GetServiceLastAccessedDetailsWithEntities []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		}
		// GetServiceLastAccessedDetailsWithEntitiesRequest holds details about calls to the GetServiceLastAccessedDetailsWithEntitiesRequest method.
		GetServiceLastAccessedDetailsWithEntitiesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		}
		// GetServiceLastAccessedDetailsWithEntitiesWithContext holds details about calls to the GetServiceLastAccessedDetailsWithEntitiesWithContext method.
		GetServiceLastAccessedDetailsWithEntitiesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetServiceLinkedRoleDeletionStatus holds details about calls to the GetServiceLinkedRoleDeletionStatus method.
		GetServiceLinkedRoleDeletionStatus []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServiceLinkedRoleDeletionStatusInput
		}
		// GetServiceLinkedRoleDeletionStatusRequest holds details about calls to the GetServiceLinkedRoleDeletionStatusRequest method.
		GetServiceLinkedRoleDeletionStatusRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetServiceLinkedRoleDeletionStatusInput
		}
		// GetServiceLinkedRoleDeletionStatusWithContext holds details about calls to the GetServiceLinkedRoleDeletionStatusWithContext method.
		GetServiceLinkedRoleDeletionStatusWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetServiceLinkedRoleDeletionStatusInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetUserInput
		}
		// GetUserPolicy holds details about calls to the GetUserPolicy method.
		GetUserPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetUserPolicyInput
		}
		// GetUserPolicyRequest holds details about calls to the GetUserPolicyRequest method.
		GetUserPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetUserPolicyInput
		}
		// GetUserPolicyWithContext holds details about calls to the GetUserPolicyWithContext method.
		GetUserPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetUserPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetUserRequest holds details about calls to the GetUserRequest method.
		GetUserRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetUserInput
		}
		// GetUserWithContext holds details about calls to the GetUserWithContext method.
		GetUserWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetUserInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListAccessKeys holds details about calls to the ListAccessKeys method.
		ListAccessKeys []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAccessKeysInput
		}
		// ListAccessKeysPages holds details about calls to the ListAccessKeysPages method.
		ListAccessKeysPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAccessKeysInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListAccessKeysOutput, bool) bool
		}
		// ListAccessKeysPagesWithContext holds details about calls to the ListAccessKeysPagesWithContext method.
		ListAccessKeysPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAccessKeysInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListAccessKeysOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListAccessKeysRequest holds details about calls to the ListAccessKeysRequest method.
		ListAccessKeysRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAccessKeysInput
		}
		// ListAccessKeysWithContext holds details about calls to the ListAccessKeysWithContext method.
		ListAccessKeysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAccessKeysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListAccountAliases holds details about calls to the ListAccountAliases method.
		ListAccountAliases []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAccountAliasesInput
		}
		// ListAccountAliasesPages holds details about calls to the ListAccountAliasesPages method.
		ListAccountAliasesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAccountAliasesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListAccountAliasesOutput, bool) bool
		}
		// ListAccountAliasesPagesWithContext holds details about calls to the ListAccountAliasesPagesWithContext method.
		ListAccountAliasesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAccountAliasesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListAccountAliasesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListAccountAliasesRequest holds details about calls to the ListAccountAliasesRequest method.
		ListAccountAliasesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAccountAliasesInput
		}
		// ListAccountAliasesWithContext holds details about calls to the ListAccountAliasesWithContext method.
		ListAccountAliasesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAccountAliasesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListAttachedGroupPolicies holds details about calls to the ListAttachedGroupPolicies method.
		ListAttachedGroupPolicies []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedGroupPoliciesInput
		}
		// ListAttachedGroupPoliciesPages holds details about calls to the ListAttachedGroupPoliciesPages method.
		ListAttachedGroupPoliciesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedGroupPoliciesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		}
		// ListAttachedGroupPoliciesPagesWithContext holds details about calls to the ListAttachedGroupPoliciesPagesWithContext method.
		ListAttachedGroupPoliciesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAttachedGroupPoliciesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListAttachedGroupPoliciesRequest holds details about calls to the ListAttachedGroupPoliciesRequest method.
		ListAttachedGroupPoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedGroupPoliciesInput
		}
		// ListAttachedGroupPoliciesWithContext holds details about calls to the ListAttachedGroupPoliciesWithContext method.
		ListAttachedGroupPoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAttachedGroupPoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListAttachedRolePolicies holds details about calls to the ListAttachedRolePolicies method.
		ListAttachedRolePolicies []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedRolePoliciesInput
		}
		// ListAttachedRolePoliciesPages holds details about calls to the ListAttachedRolePoliciesPages method.
		ListAttachedRolePoliciesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedRolePoliciesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		}
		// ListAttachedRolePoliciesPagesWithContext holds details about calls to the ListAttachedRolePoliciesPagesWithContext method.
		ListAttachedRolePoliciesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAttachedRolePoliciesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListAttachedRolePoliciesRequest holds details about calls to the ListAttachedRolePoliciesRequest method.
		ListAttachedRolePoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedRolePoliciesInput
		}
		// ListAttachedRolePoliciesWithContext holds details about calls to the ListAttachedRolePoliciesWithContext method.
		ListAttachedRolePoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAttachedRolePoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListAttachedUserPolicies holds details about calls to the ListAttachedUserPolicies method.
		ListAttachedUserPolicies []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedUserPoliciesInput
		}
		// ListAttachedUserPoliciesPages holds details about calls to the ListAttachedUserPoliciesPages method.
		ListAttachedUserPoliciesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedUserPoliciesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		}
		// ListAttachedUserPoliciesPagesWithContext holds details about calls to the ListAttachedUserPoliciesPagesWithContext method.
		ListAttachedUserPoliciesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAttachedUserPoliciesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListAttachedUserPoliciesRequest holds details about calls to the ListAttachedUserPoliciesRequest method.
		ListAttachedUserPoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListAttachedUserPoliciesInput
		}
		// ListAttachedUserPoliciesWithContext holds details about calls to the ListAttachedUserPoliciesWithContext method.
		ListAttachedUserPoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListAttachedUserPoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListEntitiesForPolicy holds details about calls to the ListEntitiesForPolicy method.
		ListEntitiesForPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListEntitiesForPolicyInput
		}
		// ListEntitiesForPolicyPages holds details about calls to the ListEntitiesForPolicyPages method.
		ListEntitiesForPolicyPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListEntitiesForPolicyInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListEntitiesForPolicyOutput, bool) bool
		}
		// ListEntitiesForPolicyPagesWithContext holds details about calls to the ListEntitiesForPolicyPagesWithContext method.
		ListEntitiesForPolicyPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListEntitiesForPolicyInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListEntitiesForPolicyOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListEntitiesForPolicyRequest holds details about calls to the ListEntitiesForPolicyRequest method.
		ListEntitiesForPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListEntitiesForPolicyInput
		}
		// ListEntitiesForPolicyWithContext holds details about calls to the ListEntitiesForPolicyWithContext method.
		ListEntitiesForPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListEntitiesForPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListGroupPolicies holds details about calls to the ListGroupPolicies method.
		ListGroupPolicies []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupPoliciesInput
		}
		// ListGroupPoliciesPages holds details about calls to the ListGroupPoliciesPages method.
		ListGroupPoliciesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupPoliciesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListGroupPoliciesOutput, bool) bool
		}
		// ListGroupPoliciesPagesWithContext holds details about calls to the ListGroupPoliciesPagesWithContext method.
		ListGroupPoliciesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListGroupPoliciesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListGroupPoliciesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListGroupPoliciesRequest holds details about calls to the ListGroupPoliciesRequest method.
		ListGroupPoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupPoliciesInput
		}
		// ListGroupPoliciesWithContext holds details about calls to the ListGroupPoliciesWithContext method.
		ListGroupPoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListGroupPoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListGroups holds details about calls to the ListGroups method.
		ListGroups []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupsInput
		}
		// ListGroupsForUser holds details about calls to the ListGroupsForUser method.
		ListGroupsForUser []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupsForUserInput
		}
		// ListGroupsForUserPages holds details about calls to the ListGroupsForUserPages method.
		ListGroupsForUserPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupsForUserInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListGroupsForUserOutput, bool) bool
		}
		// ListGroupsForUserPagesWithContext holds details about calls to the ListGroupsForUserPagesWithContext method.
		ListGroupsForUserPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListGroupsForUserInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListGroupsForUserOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListGroupsForUserRequest holds details about calls to the ListGroupsForUserRequest method.
		ListGroupsForUserRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupsForUserInput
		}
		// ListGroupsForUserWithContext holds details about calls to the ListGroupsForUserWithContext method.
		ListGroupsForUserWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListGroupsForUserInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListGroupsPages holds details about calls to the ListGroupsPages method.
		ListGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupsInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListGroupsOutput, bool) bool
		}
		// ListGroupsPagesWithContext holds details about calls to the ListGroupsPagesWithContext method.
		ListGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListGroupsInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListGroupsRequest holds details about calls to the ListGroupsRequest method.
		ListGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListGroupsInput
		}
		// ListGroupsWithContext holds details about calls to the ListGroupsWithContext method.
		ListGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListInstanceProfiles holds details about calls to the ListInstanceProfiles method.
		ListInstanceProfiles []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListInstanceProfilesInput
		}
		// ListInstanceProfilesForRole holds details about calls to the ListInstanceProfilesForRole method.
		ListInstanceProfilesForRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListInstanceProfilesForRoleInput
		}
		// ListInstanceProfilesForRolePages holds details about calls to the ListInstanceProfilesForRolePages method.
		ListInstanceProfilesForRolePages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListInstanceProfilesForRoleInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		}
		// ListInstanceProfilesForRolePagesWithContext holds details about calls to the ListInstanceProfilesForRolePagesWithContext method.
		ListInstanceProfilesForRolePagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListInstanceProfilesForRoleInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListInstanceProfilesForRoleRequest holds details about calls to the ListInstanceProfilesForRoleRequest method.
		ListInstanceProfilesForRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListInstanceProfilesForRoleInput
		}
		// ListInstanceProfilesForRoleWithContext holds details about calls to the ListInstanceProfilesForRoleWithContext method.
		ListInstanceProfilesForRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListInstanceProfilesForRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListInstanceProfilesPages holds details about calls to the ListInstanceProfilesPages method.
		ListInstanceProfilesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListInstanceProfilesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListInstanceProfilesOutput, bool) bool
		}
		// ListInstanceProfilesPagesWithContext holds details about calls to the ListInstanceProfilesPagesWithContext method.
		ListInstanceProfilesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListInstanceProfilesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListInstanceProfilesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListInstanceProfilesRequest holds details about calls to the ListInstanceProfilesRequest method.
		ListInstanceProfilesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListInstanceProfilesInput
		}
		// ListInstanceProfilesWithContext holds details about calls to the ListInstanceProfilesWithContext method.
		ListInstanceProfilesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListInstanceProfilesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListMFADevices holds details about calls to the ListMFADevices method.
		ListMFADevices []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListMFADevicesInput
		}
		// ListMFADevicesPages holds details about calls to the ListMFADevicesPages method.
		ListMFADevicesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListMFADevicesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListMFADevicesOutput, bool) bool
		}
		// ListMFADevicesPagesWithContext holds details about calls to the ListMFADevicesPagesWithContext method.
		ListMFADevicesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListMFADevicesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListMFADevicesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListMFADevicesRequest holds details about calls to the ListMFADevicesRequest method.
		ListMFADevicesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListMFADevicesInput
		}
		// ListMFADevicesWithContext holds details about calls to the ListMFADevicesWithContext method.
		ListMFADevicesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListMFADevicesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListOpenIDConnectProviders holds details about calls to the ListOpenIDConnectProviders method.
		ListOpenIDConnectProviders []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListOpenIDConnectProvidersInput
		}
		// ListOpenIDConnectProvidersRequest holds details about calls to the ListOpenIDConnectProvidersRequest method.
		ListOpenIDConnectProvidersRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListOpenIDConnectProvidersInput
		}
		// ListOpenIDConnectProvidersWithContext holds details about calls to the ListOpenIDConnectProvidersWithContext method.
		ListOpenIDConnectProvidersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListOpenIDConnectProvidersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListPolicies holds details about calls to the ListPolicies method.
		ListPolicies []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPoliciesInput
		}
		// ListPoliciesGrantingServiceAccess holds details about calls to the ListPoliciesGrantingServiceAccess method.
		ListPoliciesGrantingServiceAccess []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPoliciesGrantingServiceAccessInput
		}
		// ListPoliciesGrantingServiceAccessRequest holds details about calls to the ListPoliciesGrantingServiceAccessRequest method.
		ListPoliciesGrantingServiceAccessRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPoliciesGrantingServiceAccessInput
		}
		// ListPoliciesGrantingServiceAccessWithContext holds details about calls to the ListPoliciesGrantingServiceAccessWithContext method.
		ListPoliciesGrantingServiceAccessWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListPoliciesGrantingServiceAccessInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListPoliciesPages holds details about calls to the ListPoliciesPages method.
		ListPoliciesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPoliciesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListPoliciesOutput, bool) bool
		}
		// ListPoliciesPagesWithContext holds details about calls to the ListPoliciesPagesWithContext method.
		ListPoliciesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListPoliciesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListPoliciesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListPoliciesRequest holds details about calls to the ListPoliciesRequest method.
		ListPoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPoliciesInput
		}
		// ListPoliciesWithContext holds details about calls to the ListPoliciesWithContext method.
		ListPoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListPoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListPolicyVersions holds details about calls to the ListPolicyVersions method.
		ListPolicyVersions []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPolicyVersionsInput
		}
		// ListPolicyVersionsPages holds details about calls to the ListPolicyVersionsPages method.
		ListPolicyVersionsPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPolicyVersionsInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListPolicyVersionsOutput, bool) bool
		}
		// ListPolicyVersionsPagesWithContext holds details about calls to the ListPolicyVersionsPagesWithContext method.
		ListPolicyVersionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListPolicyVersionsInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListPolicyVersionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListPolicyVersionsRequest holds details about calls to the ListPolicyVersionsRequest method.
		ListPolicyVersionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListPolicyVersionsInput
		}
		// ListPolicyVersionsWithContext holds details about calls to the ListPolicyVersionsWithContext method.
		ListPolicyVersionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListPolicyVersionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListRolePolicies holds details about calls to the ListRolePolicies method.
		ListRolePolicies []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRolePoliciesInput
		}
		// ListRolePoliciesPages holds details about calls to the ListRolePoliciesPages method.
		ListRolePoliciesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRolePoliciesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListRolePoliciesOutput, bool) bool
		}
		// ListRolePoliciesPagesWithContext holds details about calls to the ListRolePoliciesPagesWithContext method.
		ListRolePoliciesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListRolePoliciesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListRolePoliciesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListRolePoliciesRequest holds details about calls to the ListRolePoliciesRequest method.
		ListRolePoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRolePoliciesInput
		}
		// ListRolePoliciesWithContext holds details about calls to the ListRolePoliciesWithContext method.
		ListRolePoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListRolePoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListRoleTags holds details about calls to the ListRoleTags method.
		ListRoleTags []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRoleTagsInput
		}
		// ListRoleTagsRequest holds details about calls to the ListRoleTagsRequest method.
		ListRoleTagsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRoleTagsInput
		}
		// ListRoleTagsWithContext holds details about calls to the ListRoleTagsWithContext method.
		ListRoleTagsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListRoleTagsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListRoles holds details about calls to the ListRoles method.
		ListRoles []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRolesInput
		}
		// ListRolesPages holds details about calls to the ListRolesPages method.
		ListRolesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRolesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListRolesOutput, bool) bool
		}
		// ListRolesPagesWithContext holds details about calls to the ListRolesPagesWithContext method.
		ListRolesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListRolesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListRolesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListRolesRequest holds details about calls to the ListRolesRequest method.
		ListRolesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListRolesInput
		}
		// ListRolesWithContext holds details about calls to the ListRolesWithContext method.
		ListRolesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListRolesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListSAMLProviders holds details about calls to the ListSAMLProviders method.
		ListSAMLProviders []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSAMLProvidersInput
		}
		// ListSAMLProvidersRequest holds details about calls to the ListSAMLProvidersRequest method.
		ListSAMLProvidersRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSAMLProvidersInput
		}
		// ListSAMLProvidersWithContext holds details about calls to the ListSAMLProvidersWithContext method.
		ListSAMLProvidersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListSAMLProvidersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListSSHPublicKeys holds details about calls to the ListSSHPublicKeys method.
		ListSSHPublicKeys []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSSHPublicKeysInput
		}
		// ListSSHPublicKeysPages holds details about calls to the ListSSHPublicKeysPages method.
		ListSSHPublicKeysPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSSHPublicKeysInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListSSHPublicKeysOutput, bool) bool
		}
		// ListSSHPublicKeysPagesWithContext holds details about calls to the ListSSHPublicKeysPagesWithContext method.
		ListSSHPublicKeysPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListSSHPublicKeysInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListSSHPublicKeysOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListSSHPublicKeysRequest holds details about calls to the ListSSHPublicKeysRequest method.
		ListSSHPublicKeysRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSSHPublicKeysInput
		}
		// ListSSHPublicKeysWithContext holds details about calls to the ListSSHPublicKeysWithContext method.
		ListSSHPublicKeysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListSSHPublicKeysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListServerCertificates holds details about calls to the ListServerCertificates method.
		ListServerCertificates []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListServerCertificatesInput
		}
		// ListServerCertificatesPages holds details about calls to the ListServerCertificatesPages method.
		ListServerCertificatesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListServerCertificatesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListServerCertificatesOutput, bool) bool
		}
		// ListServerCertificatesPagesWithContext holds details about calls to the ListServerCertificatesPagesWithContext method.
		ListServerCertificatesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListServerCertificatesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListServerCertificatesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListServerCertificatesRequest holds details about calls to the ListServerCertificatesRequest method.
		ListServerCertificatesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListServerCertificatesInput
		}
		// ListServerCertificatesWithContext holds details about calls to the ListServerCertificatesWithContext method.
		ListServerCertificatesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListServerCertificatesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListServiceSpecificCredentials holds details about calls to the ListServiceSpecificCredentials method.
		ListServiceSpecificCredentials []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListServiceSpecificCredentialsInput
		}
		// ListServiceSpecificCredentialsRequest holds details about calls to the ListServiceSpecificCredentialsRequest method.
		ListServiceSpecificCredentialsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListServiceSpecificCredentialsInput
		}
		// ListServiceSpecificCredentialsWithContext holds details about calls to the ListServiceSpecificCredentialsWithContext method.
		ListServiceSpecificCredentialsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListServiceSpecificCredentialsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListSigningCertificates holds details about calls to the ListSigningCertificates method.
		ListSigningCertificates []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSigningCertificatesInput
		}
		// ListSigningCertificatesPages holds details about calls to the ListSigningCertificatesPages method.
		ListSigningCertificatesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSigningCertificatesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListSigningCertificatesOutput, bool) bool
		}
		// ListSigningCertificatesPagesWithContext holds details about calls to the ListSigningCertificatesPagesWithContext method.
		ListSigningCertificatesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListSigningCertificatesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListSigningCertificatesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListSigningCertificatesRequest holds details about calls to the ListSigningCertificatesRequest method.
		ListSigningCertificatesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListSigningCertificatesInput
		}
		// ListSigningCertificatesWithContext holds details about calls to the ListSigningCertificatesWithContext method.
		ListSigningCertificatesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListSigningCertificatesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListUserPolicies holds details about calls to the ListUserPolicies method.
		ListUserPolicies []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUserPoliciesInput
		}
		// ListUserPoliciesPages holds details about calls to the ListUserPoliciesPages method.
		ListUserPoliciesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUserPoliciesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListUserPoliciesOutput, bool) bool
		}
		// ListUserPoliciesPagesWithContext holds details about calls to the ListUserPoliciesPagesWithContext method.
		ListUserPoliciesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListUserPoliciesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListUserPoliciesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListUserPoliciesRequest holds details about calls to the ListUserPoliciesRequest method.
		ListUserPoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUserPoliciesInput
		}
		// ListUserPoliciesWithContext holds details about calls to the ListUserPoliciesWithContext method.
		ListUserPoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListUserPoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListUserTags holds details about calls to the ListUserTags method.
		ListUserTags []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUserTagsInput
		}
		// ListUserTagsRequest holds details about calls to the ListUserTagsRequest method.
		ListUserTagsRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUserTagsInput
		}
		// ListUserTagsWithContext holds details about calls to the ListUserTagsWithContext method.
		ListUserTagsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListUserTagsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListUsers holds details about calls to the ListUsers method.
		ListUsers []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUsersInput
		}
		// ListUsersPages holds details about calls to the ListUsersPages method.
		ListUsersPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUsersInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListUsersOutput, bool) bool
		}
		// ListUsersPagesWithContext holds details about calls to the ListUsersPagesWithContext method.
		ListUsersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListUsersInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListUsersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListUsersRequest holds details about calls to the ListUsersRequest method.
		ListUsersRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListUsersInput
		}
		// ListUsersWithContext holds details about calls to the ListUsersWithContext method.
		ListUsersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListUsersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListVirtualMFADevices holds details about calls to the ListVirtualMFADevices method.
		ListVirtualMFADevices []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListVirtualMFADevicesInput
		}
		// ListVirtualMFADevicesPages holds details about calls to the ListVirtualMFADevicesPages method.
		ListVirtualMFADevicesPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListVirtualMFADevicesInput
			// In2 is the in2 argument value.
			In2 func(*iam.ListVirtualMFADevicesOutput, bool) bool
		}
		// ListVirtualMFADevicesPagesWithContext holds details about calls to the ListVirtualMFADevicesPagesWithContext method.
		ListVirtualMFADevicesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListVirtualMFADevicesInput
			// In3 is the in3 argument value.
			In3 func(*iam.ListVirtualMFADevicesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListVirtualMFADevicesRequest holds details about calls to the ListVirtualMFADevicesRequest method.
		ListVirtualMFADevicesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ListVirtualMFADevicesInput
		}
		// ListVirtualMFADevicesWithContext holds details about calls to the ListVirtualMFADevicesWithContext method.
		ListVirtualMFADevicesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ListVirtualMFADevicesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutGroupPolicy holds details about calls to the PutGroupPolicy method.
		PutGroupPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutGroupPolicyInput
		}
		// PutGroupPolicyRequest holds details about calls to the PutGroupPolicyRequest method.
		PutGroupPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutGroupPolicyInput
		}
		// PutGroupPolicyWithContext holds details about calls to the PutGroupPolicyWithContext method.
		PutGroupPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.PutGroupPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutRolePermissionsBoundary holds details about calls to the PutRolePermissionsBoundary method.
		PutRolePermissionsBoundary []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutRolePermissionsBoundaryInput
		}
		// PutRolePermissionsBoundaryRequest holds details about calls to the PutRolePermissionsBoundaryRequest method.
		PutRolePermissionsBoundaryRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutRolePermissionsBoundaryInput
		}
		// PutRolePermissionsBoundaryWithContext holds details about calls to the PutRolePermissionsBoundaryWithContext method.
		PutRolePermissionsBoundaryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.PutRolePermissionsBoundaryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutRolePolicy holds details about calls to the PutRolePolicy method.
		PutRolePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutRolePolicyInput
		}
		// PutRolePolicyRequest holds details about calls to the PutRolePolicyRequest method.
		PutRolePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutRolePolicyInput
		}
		// PutRolePolicyWithContext holds details about calls to the PutRolePolicyWithContext method.
		PutRolePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.PutRolePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutUserPermissionsBoundary holds details about calls to the PutUserPermissionsBoundary method.
		PutUserPermissionsBoundary []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutUserPermissionsBoundaryInput
		}
		// PutUserPermissionsBoundaryRequest holds details about calls to the PutUserPermissionsBoundaryRequest method.
		PutUserPermissionsBoundaryRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutUserPermissionsBoundaryInput
		}
		// PutUserPermissionsBoundaryWithContext holds details about calls to the PutUserPermissionsBoundaryWithContext method.
		PutUserPermissionsBoundaryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.PutUserPermissionsBoundaryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutUserPolicy holds details about calls to the PutUserPolicy method.
		PutUserPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutUserPolicyInput
		}
		// PutUserPolicyRequest holds details about calls to the PutUserPolicyRequest method.
		PutUserPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.PutUserPolicyInput
		}
		// PutUserPolicyWithContext holds details about calls to the PutUserPolicyWithContext method.
		PutUserPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.PutUserPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveClientIDFromOpenIDConnectProvider holds details about calls to the RemoveClientIDFromOpenIDConnectProvider method.
		RemoveClientIDFromOpenIDConnectProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
		}
		// RemoveClientIDFromOpenIDConnectProviderRequest holds details about calls to the RemoveClientIDFromOpenIDConnectProviderRequest method.
		RemoveClientIDFromOpenIDConnectProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
		}
		// RemoveClientIDFromOpenIDConnectProviderWithContext holds details about calls to the RemoveClientIDFromOpenIDConnectProviderWithContext method.
		RemoveClientIDFromOpenIDConnectProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.RemoveClientIDFromOpenIDConnectProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveRoleFromInstanceProfile holds details about calls to the RemoveRoleFromInstanceProfile method.
		RemoveRoleFromInstanceProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.RemoveRoleFromInstanceProfileInput
		}
		// RemoveRoleFromInstanceProfileRequest holds details about calls to the RemoveRoleFromInstanceProfileRequest method.
		RemoveRoleFromInstanceProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.RemoveRoleFromInstanceProfileInput
		}
		// RemoveRoleFromInstanceProfileWithContext holds details about calls to the RemoveRoleFromInstanceProfileWithContext method.
		RemoveRoleFromInstanceProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.RemoveRoleFromInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveUserFromGroup holds details about calls to the RemoveUserFromGroup method.
		RemoveUserFromGroup []struct {
			// In1 is the in1 argument value.
			In1 *iam.RemoveUserFromGroupInput
		}
		// RemoveUserFromGroupRequest holds details about calls to the RemoveUserFromGroupRequest method.
		RemoveUserFromGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.RemoveUserFromGroupInput
		}
		// RemoveUserFromGroupWithContext holds details about calls to the RemoveUserFromGroupWithContext method.
		RemoveUserFromGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.RemoveUserFromGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetServiceSpecificCredential holds details about calls to the ResetServiceSpecificCredential method.
		ResetServiceSpecificCredential []struct {
			// In1 is the in1 argument value.
			In1 *iam.ResetServiceSpecificCredentialInput
		}
		// ResetServiceSpecificCredentialRequest holds details about calls to the ResetServiceSpecificCredentialRequest method.
		ResetServiceSpecificCredentialRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ResetServiceSpecificCredentialInput
		}
		// ResetServiceSpecificCredentialWithContext holds details about calls to the ResetServiceSpecificCredentialWithContext method.
		ResetServiceSpecificCredentialWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ResetServiceSpecificCredentialInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResyncMFADevice holds details about calls to the ResyncMFADevice method.
		ResyncMFADevice []struct {
			// In1 is the in1 argument value.
			In1 *iam.ResyncMFADeviceInput
		}
		// ResyncMFADeviceRequest holds details about calls to the ResyncMFADeviceRequest method.
		ResyncMFADeviceRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.ResyncMFADeviceInput
		}
		// ResyncMFADeviceWithContext holds details about calls to the ResyncMFADeviceWithContext method.
		ResyncMFADeviceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.ResyncMFADeviceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SetDefaultPolicyVersion holds details about calls to the SetDefaultPolicyVersion method.
		SetDefaultPolicyVersion []struct {
			// In1 is the in1 argument value.
			In1 *iam.SetDefaultPolicyVersionInput
		}
		// SetDefaultPolicyVersionRequest holds details about calls to the SetDefaultPolicyVersionRequest method.
		SetDefaultPolicyVersionRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.SetDefaultPolicyVersionInput
		}
		// SetDefaultPolicyVersionWithContext holds details about calls to the SetDefaultPolicyVersionWithContext method.
		SetDefaultPolicyVersionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.SetDefaultPolicyVersionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SetSecurityTokenServicePreferences holds details about calls to the SetSecurityTokenServicePreferences method.
		SetSecurityTokenServicePreferences []struct {
			// In1 is the in1 argument value.
			In1 *iam.SetSecurityTokenServicePreferencesInput
		}
		// SetSecurityTokenServicePreferencesRequest holds details about calls to the SetSecurityTokenServicePreferencesRequest method.
		SetSecurityTokenServicePreferencesRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.SetSecurityTokenServicePreferencesInput
		}
		// SetSecurityTokenServicePreferencesWithContext holds details about calls to the SetSecurityTokenServicePreferencesWithContext method.
		SetSecurityTokenServicePreferencesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.SetSecurityTokenServicePreferencesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SimulateCustomPolicy holds details about calls to the SimulateCustomPolicy method.
		SimulateCustomPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.SimulateCustomPolicyInput
		}
		// SimulateCustomPolicyPages holds details about calls to the SimulateCustomPolicyPages method.
		SimulateCustomPolicyPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.SimulateCustomPolicyInput
			// In2 is the in2 argument value.
			In2 func(*iam.SimulatePolicyResponse, bool) bool
		}
		// SimulateCustomPolicyPagesWithContext holds details about calls to the SimulateCustomPolicyPagesWithContext method.
		SimulateCustomPolicyPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.SimulateCustomPolicyInput
			// In3 is the in3 argument value.
			In3 func(*iam.SimulatePolicyResponse, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// SimulateCustomPolicyRequest holds details about calls to the SimulateCustomPolicyRequest method.
		SimulateCustomPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.SimulateCustomPolicyInput
		}
		// SimulateCustomPolicyWithContext holds details about calls to the SimulateCustomPolicyWithContext method.
		SimulateCustomPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.SimulateCustomPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SimulatePrincipalPolicy holds details about calls to the SimulatePrincipalPolicy method.
		SimulatePrincipalPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.SimulatePrincipalPolicyInput
		}
		// SimulatePrincipalPolicyPages holds details about calls to the SimulatePrincipalPolicyPages method.
		SimulatePrincipalPolicyPages []struct {
			// In1 is the in1 argument value.
			In1 *iam.SimulatePrincipalPolicyInput
			// In2 is the in2 argument value.
			In2 func(*iam.SimulatePolicyResponse, bool) bool
		}
		// SimulatePrincipalPolicyPagesWithContext holds details about calls to the SimulatePrincipalPolicyPagesWithContext method.
		SimulatePrincipalPolicyPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.SimulatePrincipalPolicyInput
			// In3 is the in3 argument value.
			In3 func(*iam.SimulatePolicyResponse, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// SimulatePrincipalPolicyRequest holds details about calls to the SimulatePrincipalPolicyRequest method.
		SimulatePrincipalPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.SimulatePrincipalPolicyInput
		}
		// SimulatePrincipalPolicyWithContext holds details about calls to the SimulatePrincipalPolicyWithContext method.
		SimulatePrincipalPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.SimulatePrincipalPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TagRole holds details about calls to the TagRole method.
		TagRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.TagRoleInput
		}
		// TagRoleRequest holds details about calls to the TagRoleRequest method.
		TagRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.TagRoleInput
		}
		// TagRoleWithContext holds details about calls to the TagRoleWithContext method.
		TagRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.TagRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TagUser holds details about calls to the TagUser method.
		TagUser []struct {
			// In1 is the in1 argument value.
			In1 *iam.TagUserInput
		}
		// TagUserRequest holds details about calls to the TagUserRequest method.
		TagUserRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.TagUserInput
		}
		// TagUserWithContext holds details about calls to the TagUserWithContext method.
		TagUserWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.TagUserInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UntagRole holds details about calls to the UntagRole method.
		UntagRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.UntagRoleInput
		}
		// UntagRoleRequest holds details about calls to the UntagRoleRequest method.
		UntagRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UntagRoleInput
		}
		// UntagRoleWithContext holds details about calls to the UntagRoleWithContext method.
		UntagRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UntagRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UntagUser holds details about calls to the UntagUser method.
		UntagUser []struct {
			// In1 is the in1 argument value.
			In1 *iam.UntagUserInput
		}
		// UntagUserRequest holds details about calls to the UntagUserRequest method.
		UntagUserRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UntagUserInput
		}
		// UntagUserWithContext holds details about calls to the UntagUserWithContext method.
		UntagUserWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UntagUserInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateAccessKey holds details about calls to the UpdateAccessKey method.
		UpdateAccessKey []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateAccessKeyInput
		}
		// UpdateAccessKeyRequest holds details about calls to the UpdateAccessKeyRequest method.
		UpdateAccessKeyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateAccessKeyInput
		}
		// UpdateAccessKeyWithContext holds details about calls to the UpdateAccessKeyWithContext method.
		UpdateAccessKeyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateAccessKeyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateAccountPasswordPolicy holds details about calls to the UpdateAccountPasswordPolicy method.
		UpdateAccountPasswordPolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateAccountPasswordPolicyInput
		}
		// UpdateAccountPasswordPolicyRequest holds details about calls to the UpdateAccountPasswordPolicyRequest method.
		UpdateAccountPasswordPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateAccountPasswordPolicyInput
		}
		// UpdateAccountPasswordPolicyWithContext holds details about calls to the UpdateAccountPasswordPolicyWithContext method.
		UpdateAccountPasswordPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateAccountPasswordPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateAssumeRolePolicy holds details about calls to the UpdateAssumeRolePolicy method.
		UpdateAssumeRolePolicy []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateAssumeRolePolicyInput
		}
		// UpdateAssumeRolePolicyRequest holds details about calls to the UpdateAssumeRolePolicyRequest method.
		UpdateAssumeRolePolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateAssumeRolePolicyInput
		}
		// UpdateAssumeRolePolicyWithContext holds details about calls to the UpdateAssumeRolePolicyWithContext method.
		UpdateAssumeRolePolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateAssumeRolePolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateGroup holds details about calls to the UpdateGroup method.
		UpdateGroup []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateGroupInput
		}
		// UpdateGroupRequest holds details about calls to the UpdateGroupRequest method.
		UpdateGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateGroupInput
		}
		// UpdateGroupWithContext holds details about calls to the UpdateGroupWithContext method.
		UpdateGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateLoginProfile holds details about calls to the UpdateLoginProfile method.
		UpdateLoginProfile []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateLoginProfileInput
		}
		// UpdateLoginProfileRequest holds details about calls to the UpdateLoginProfileRequest method.
		UpdateLoginProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateLoginProfileInput
		}
		// UpdateLoginProfileWithContext holds details about calls to the UpdateLoginProfileWithContext method.
		UpdateLoginProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateLoginProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateOpenIDConnectProviderThumbprint holds details about calls to the UpdateOpenIDConnectProviderThumbprint method.
		UpdateOpenIDConnectProviderThumbprint []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
		}
		// UpdateOpenIDConnectProviderThumbprintRequest holds details about calls to the UpdateOpenIDConnectProviderThumbprintRequest method.
		UpdateOpenIDConnectProviderThumbprintRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
		}
		// UpdateOpenIDConnectProviderThumbprintWithContext holds details about calls to the UpdateOpenIDConnectProviderThumbprintWithContext method.
		UpdateOpenIDConnectProviderThumbprintWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateOpenIDConnectProviderThumbprintInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateRole holds details about calls to the UpdateRole method.
		UpdateRole []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateRoleInput
		}
		// UpdateRoleDescription holds details about calls to the UpdateRoleDescription method.
		UpdateRoleDescription []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateRoleDescriptionInput
		}
		// UpdateRoleDescriptionRequest holds details about calls to the UpdateRoleDescriptionRequest method.
		UpdateRoleDescriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateRoleDescriptionInput
		}
		// UpdateRoleDescriptionWithContext holds details about calls to the UpdateRoleDescriptionWithContext method.
		UpdateRoleDescriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateRoleDescriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateRoleRequest holds details about calls to the UpdateRoleRequest method.
		UpdateRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateRoleInput
		}
		// UpdateRoleWithContext holds details about calls to the UpdateRoleWithContext method.
		UpdateRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateSAMLProvider holds details about calls to the UpdateSAMLProvider method.
		UpdateSAMLProvider []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateSAMLProviderInput
		}
		// UpdateSAMLProviderRequest holds details about calls to the UpdateSAMLProviderRequest method.
		UpdateSAMLProviderRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateSAMLProviderInput
		}
		// UpdateSAMLProviderWithContext holds details about calls to the UpdateSAMLProviderWithContext method.
		UpdateSAMLProviderWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateSAMLProviderInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateSSHPublicKey holds details about calls to the UpdateSSHPublicKey method.
		UpdateSSHPublicKey []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateSSHPublicKeyInput
		}
		// UpdateSSHPublicKeyRequest holds details about calls to the UpdateSSHPublicKeyRequest method.
		UpdateSSHPublicKeyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateSSHPublicKeyInput
		}
		// UpdateSSHPublicKeyWithContext holds details about calls to the UpdateSSHPublicKeyWithContext method.
		UpdateSSHPublicKeyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateSSHPublicKeyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateServerCertificate holds details about calls to the UpdateServerCertificate method.
		UpdateServerCertificate []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateServerCertificateInput
		}
		// UpdateServerCertificateRequest holds details about calls to the UpdateServerCertificateRequest method.
		UpdateServerCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateServerCertificateInput
		}
		// UpdateServerCertificateWithContext holds details about calls to the UpdateServerCertificateWithContext method.
		UpdateServerCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateServerCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateServiceSpecificCredential holds details about calls to the UpdateServiceSpecificCredential method.
		UpdateServiceSpecificCredential []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateServiceSpecificCredentialInput
		}
		// UpdateServiceSpecificCredentialRequest holds details about calls to the UpdateServiceSpecificCredentialRequest method.
		UpdateServiceSpecificCredentialRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateServiceSpecificCredentialInput
		}
		// UpdateServiceSpecificCredentialWithContext holds details about calls to the UpdateServiceSpecificCredentialWithContext method.
		UpdateServiceSpecificCredentialWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateServiceSpecificCredentialInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateSigningCertificate holds details about calls to the UpdateSigningCertificate method.
		UpdateSigningCertificate []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateSigningCertificateInput
		}
		// UpdateSigningCertificateRequest holds details about calls to the UpdateSigningCertificateRequest method.
		UpdateSigningCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateSigningCertificateInput
		}
		// UpdateSigningCertificateWithContext holds details about calls to the UpdateSigningCertificateWithContext method.
		UpdateSigningCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateSigningCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateUserInput
		}
		// UpdateUserRequest holds details about calls to the UpdateUserRequest method.
		UpdateUserRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UpdateUserInput
		}
		// UpdateUserWithContext holds details about calls to the UpdateUserWithContext method.
		UpdateUserWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UpdateUserInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UploadSSHPublicKey holds details about calls to the UploadSSHPublicKey method.
		UploadSSHPublicKey []struct {
			// In1 is the in1 argument value.
			In1 *iam.UploadSSHPublicKeyInput
		}
		// UploadSSHPublicKeyRequest holds details about calls to the UploadSSHPublicKeyRequest method.
		UploadSSHPublicKeyRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UploadSSHPublicKeyInput
		}
		// UploadSSHPublicKeyWithContext holds details about calls to the UploadSSHPublicKeyWithContext method.
		UploadSSHPublicKeyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UploadSSHPublicKeyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UploadServerCertificate holds details about calls to the UploadServerCertificate method.
		UploadServerCertificate []struct {
			// In1 is the in1 argument value.
			In1 *iam.UploadServerCertificateInput
		}
		// UploadServerCertificateRequest holds details about calls to the UploadServerCertificateRequest method.
		UploadServerCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UploadServerCertificateInput
		}
		// UploadServerCertificateWithContext holds details about calls to the UploadServerCertificateWithContext method.
		UploadServerCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UploadServerCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UploadSigningCertificate holds details about calls to the UploadSigningCertificate method.
		UploadSigningCertificate []struct {
			// In1 is the in1 argument value.
			In1 *iam.UploadSigningCertificateInput
		}
		// UploadSigningCertificateRequest holds details about calls to the UploadSigningCertificateRequest method.
		UploadSigningCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *iam.UploadSigningCertificateInput
		}
		// UploadSigningCertificateWithContext holds details about calls to the UploadSigningCertificateWithContext method.
		UploadSigningCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.UploadSigningCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// WaitUntilInstanceProfileExists holds details about calls to the WaitUntilInstanceProfileExists method.
		WaitUntilInstanceProfileExists []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetInstanceProfileInput
		}
		// WaitUntilInstanceProfileExistsWithContext holds details about calls to the WaitUntilInstanceProfileExistsWithContext method.
		WaitUntilInstanceProfileExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilPolicyExists holds details about calls to the WaitUntilPolicyExists method.
		WaitUntilPolicyExists []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetPolicyInput
		}
		// WaitUntilPolicyExistsWithContext holds details about calls to the WaitUntilPolicyExistsWithContext method.
		WaitUntilPolicyExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetPolicyInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilRoleExists holds details about calls to the WaitUntilRoleExists method.
		WaitUntilRoleExists []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetRoleInput
		}
		// WaitUntilRoleExistsWithContext holds details about calls to the WaitUntilRoleExistsWithContext method.
		WaitUntilRoleExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetRoleInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilUserExists holds details about calls to the WaitUntilUserExists method.
		WaitUntilUserExists []struct {
			// In1 is the in1 argument value.
			In1 *iam.GetUserInput
		}
		// WaitUntilUserExistsWithContext holds details about calls to the WaitUntilUserExistsWithContext method.
		WaitUntilUserExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *iam.GetUserInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
	}
}

// AddClientIDToOpenIDConnectProvider calls AddClientIDToOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProvider(in1 *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	if mock.AddClientIDToOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.AddClientIDToOpenIDConnectProviderFunc: method is nil but IAMAPI.AddClientIDToOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		In1 *iam.AddClientIDToOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAddClientIDToOpenIDConnectProvider.Lock()
	mock.calls.AddClientIDToOpenIDConnectProvider = append(mock.calls.AddClientIDToOpenIDConnectProvider, callInfo)
	lockIAMAPIMockAddClientIDToOpenIDConnectProvider.Unlock()
	return mock.AddClientIDToOpenIDConnectProviderFunc(in1)
}

// AddClientIDToOpenIDConnectProviderCalls gets all the calls that were made to AddClientIDToOpenIDConnectProvider.
// Check the length with:
//     len(mockedIAMAPI.AddClientIDToOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderCalls() []struct {
	In1 *iam.AddClientIDToOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.AddClientIDToOpenIDConnectProviderInput
	}
	lockIAMAPIMockAddClientIDToOpenIDConnectProvider.RLock()
	calls = mock.calls.AddClientIDToOpenIDConnectProvider
	lockIAMAPIMockAddClientIDToOpenIDConnectProvider.RUnlock()
	return calls
}

// AddClientIDToOpenIDConnectProviderRequest calls AddClientIDToOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderRequest(in1 *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput) {
	if mock.AddClientIDToOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.AddClientIDToOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.AddClientIDToOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.AddClientIDToOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderRequest.Lock()
	mock.calls.AddClientIDToOpenIDConnectProviderRequest = append(mock.calls.AddClientIDToOpenIDConnectProviderRequest, callInfo)
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderRequest.Unlock()
	return mock.AddClientIDToOpenIDConnectProviderRequestFunc(in1)
}

// AddClientIDToOpenIDConnectProviderRequestCalls gets all the calls that were made to AddClientIDToOpenIDConnectProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.AddClientIDToOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderRequestCalls() []struct {
	In1 *iam.AddClientIDToOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.AddClientIDToOpenIDConnectProviderInput
	}
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.AddClientIDToOpenIDConnectProviderRequest
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// AddClientIDToOpenIDConnectProviderWithContext calls AddClientIDToOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderWithContext(in1 context.Context, in2 *iam.AddClientIDToOpenIDConnectProviderInput, in3 ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	if mock.AddClientIDToOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.AddClientIDToOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.AddClientIDToOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.AddClientIDToOpenIDConnectProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderWithContext.Lock()
	mock.calls.AddClientIDToOpenIDConnectProviderWithContext = append(mock.calls.AddClientIDToOpenIDConnectProviderWithContext, callInfo)
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderWithContext.Unlock()
	return mock.AddClientIDToOpenIDConnectProviderWithContextFunc(in1, in2, in3...)
}

// AddClientIDToOpenIDConnectProviderWithContextCalls gets all the calls that were made to AddClientIDToOpenIDConnectProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.AddClientIDToOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.AddClientIDToOpenIDConnectProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.AddClientIDToOpenIDConnectProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.AddClientIDToOpenIDConnectProviderWithContext
	lockIAMAPIMockAddClientIDToOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// AddRoleToInstanceProfile calls AddRoleToInstanceProfileFunc.
func (mock *IAMAPIMock) AddRoleToInstanceProfile(in1 *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	if mock.AddRoleToInstanceProfileFunc == nil {
		panic("IAMAPIMock.AddRoleToInstanceProfileFunc: method is nil but IAMAPI.AddRoleToInstanceProfile was just called")
	}
	callInfo := struct {
		In1 *iam.AddRoleToInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAddRoleToInstanceProfile.Lock()
	mock.calls.AddRoleToInstanceProfile = append(mock.calls.AddRoleToInstanceProfile, callInfo)
	lockIAMAPIMockAddRoleToInstanceProfile.Unlock()
	return mock.AddRoleToInstanceProfileFunc(in1)
}

// AddRoleToInstanceProfileCalls gets all the calls that were made to AddRoleToInstanceProfile.
// Check the length with:
//     len(mockedIAMAPI.AddRoleToInstanceProfileCalls())
func (mock *IAMAPIMock) AddRoleToInstanceProfileCalls() []struct {
	In1 *iam.AddRoleToInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.AddRoleToInstanceProfileInput
	}
	lockIAMAPIMockAddRoleToInstanceProfile.RLock()
	calls = mock.calls.AddRoleToInstanceProfile
	lockIAMAPIMockAddRoleToInstanceProfile.RUnlock()
	return calls
}

// AddRoleToInstanceProfileRequest calls AddRoleToInstanceProfileRequestFunc.
func (mock *IAMAPIMock) AddRoleToInstanceProfileRequest(in1 *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput) {
	if mock.AddRoleToInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.AddRoleToInstanceProfileRequestFunc: method is nil but IAMAPI.AddRoleToInstanceProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.AddRoleToInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAddRoleToInstanceProfileRequest.Lock()
	mock.calls.AddRoleToInstanceProfileRequest = append(mock.calls.AddRoleToInstanceProfileRequest, callInfo)
	lockIAMAPIMockAddRoleToInstanceProfileRequest.Unlock()
	return mock.AddRoleToInstanceProfileRequestFunc(in1)
}

// AddRoleToInstanceProfileRequestCalls gets all the calls that were made to AddRoleToInstanceProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.AddRoleToInstanceProfileRequestCalls())
func (mock *IAMAPIMock) AddRoleToInstanceProfileRequestCalls() []struct {
	In1 *iam.AddRoleToInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.AddRoleToInstanceProfileInput
	}
	lockIAMAPIMockAddRoleToInstanceProfileRequest.RLock()
	calls = mock.calls.AddRoleToInstanceProfileRequest
	lockIAMAPIMockAddRoleToInstanceProfileRequest.RUnlock()
	return calls
}

// AddRoleToInstanceProfileWithContext calls AddRoleToInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) AddRoleToInstanceProfileWithContext(in1 context.Context, in2 *iam.AddRoleToInstanceProfileInput, in3 ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
	if mock.AddRoleToInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.AddRoleToInstanceProfileWithContextFunc: method is nil but IAMAPI.AddRoleToInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.AddRoleToInstanceProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockAddRoleToInstanceProfileWithContext.Lock()
	mock.calls.AddRoleToInstanceProfileWithContext = append(mock.calls.AddRoleToInstanceProfileWithContext, callInfo)
	lockIAMAPIMockAddRoleToInstanceProfileWithContext.Unlock()
	return mock.AddRoleToInstanceProfileWithContextFunc(in1, in2, in3...)
}

// AddRoleToInstanceProfileWithContextCalls gets all the calls that were made to AddRoleToInstanceProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.AddRoleToInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) AddRoleToInstanceProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.AddRoleToInstanceProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.AddRoleToInstanceProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockAddRoleToInstanceProfileWithContext.RLock()
	calls = mock.calls.AddRoleToInstanceProfileWithContext
	lockIAMAPIMockAddRoleToInstanceProfileWithContext.RUnlock()
	return calls
}

// AddUserToGroup calls AddUserToGroupFunc.
func (mock *IAMAPIMock) AddUserToGroup(in1 *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	if mock.AddUserToGroupFunc == nil {
		panic("IAMAPIMock.AddUserToGroupFunc: method is nil but IAMAPI.AddUserToGroup was just called")
	}
	callInfo := struct {
		In1 *iam.AddUserToGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAddUserToGroup.Lock()
	mock.calls.AddUserToGroup = append(mock.calls.AddUserToGroup, callInfo)
	lockIAMAPIMockAddUserToGroup.Unlock()
	return mock.AddUserToGroupFunc(in1)
}

// AddUserToGroupCalls gets all the calls that were made to AddUserToGroup.
// Check the length with:
//     len(mockedIAMAPI.AddUserToGroupCalls())
func (mock *IAMAPIMock) AddUserToGroupCalls() []struct {
	In1 *iam.AddUserToGroupInput
} {
	var calls []struct {
		In1 *iam.AddUserToGroupInput
	}
	lockIAMAPIMockAddUserToGroup.RLock()
	calls = mock.calls.AddUserToGroup
	lockIAMAPIMockAddUserToGroup.RUnlock()
	return calls
}

// AddUserToGroupRequest calls AddUserToGroupRequestFunc.
func (mock *IAMAPIMock) AddUserToGroupRequest(in1 *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput) {
	if mock.AddUserToGroupRequestFunc == nil {
		panic("IAMAPIMock.AddUserToGroupRequestFunc: method is nil but IAMAPI.AddUserToGroupRequest was just called")
	}
	callInfo := struct {
		In1 *iam.AddUserToGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAddUserToGroupRequest.Lock()
	mock.calls.AddUserToGroupRequest = append(mock.calls.AddUserToGroupRequest, callInfo)
	lockIAMAPIMockAddUserToGroupRequest.Unlock()
	return mock.AddUserToGroupRequestFunc(in1)
}

// AddUserToGroupRequestCalls gets all the calls that were made to AddUserToGroupRequest.
// Check the length with:
//     len(mockedIAMAPI.AddUserToGroupRequestCalls())
func (mock *IAMAPIMock) AddUserToGroupRequestCalls() []struct {
	In1 *iam.AddUserToGroupInput
} {
	var calls []struct {
		In1 *iam.AddUserToGroupInput
	}
	lockIAMAPIMockAddUserToGroupRequest.RLock()
	calls = mock.calls.AddUserToGroupRequest
	lockIAMAPIMockAddUserToGroupRequest.RUnlock()
	return calls
}

// AddUserToGroupWithContext calls AddUserToGroupWithContextFunc.
func (mock *IAMAPIMock) AddUserToGroupWithContext(in1 context.Context, in2 *iam.AddUserToGroupInput, in3 ...request.Option) (*iam.AddUserToGroupOutput, error) {
	if mock.AddUserToGroupWithContextFunc == nil {
		panic("IAMAPIMock.AddUserToGroupWithContextFunc: method is nil but IAMAPI.AddUserToGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.AddUserToGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockAddUserToGroupWithContext.Lock()
	mock.calls.AddUserToGroupWithContext = append(mock.calls.AddUserToGroupWithContext, callInfo)
	lockIAMAPIMockAddUserToGroupWithContext.Unlock()
	return mock.AddUserToGroupWithContextFunc(in1, in2, in3...)
}

// AddUserToGroupWithContextCalls gets all the calls that were made to AddUserToGroupWithContext.
// Check the length with:
//     len(mockedIAMAPI.AddUserToGroupWithContextCalls())
func (mock *IAMAPIMock) AddUserToGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.AddUserToGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.AddUserToGroupInput
		In3 []request.Option
	}
	lockIAMAPIMockAddUserToGroupWithContext.RLock()
	calls = mock.calls.AddUserToGroupWithContext
	lockIAMAPIMockAddUserToGroupWithContext.RUnlock()
	return calls
}

// AttachGroupPolicy calls AttachGroupPolicyFunc.
func (mock *IAMAPIMock) AttachGroupPolicy(in1 *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	if mock.AttachGroupPolicyFunc == nil {
		panic("IAMAPIMock.AttachGroupPolicyFunc: method is nil but IAMAPI.AttachGroupPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.AttachGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAttachGroupPolicy.Lock()
	mock.calls.AttachGroupPolicy = append(mock.calls.AttachGroupPolicy, callInfo)
	lockIAMAPIMockAttachGroupPolicy.Unlock()
	return mock.AttachGroupPolicyFunc(in1)
}

// AttachGroupPolicyCalls gets all the calls that were made to AttachGroupPolicy.
// Check the length with:
//     len(mockedIAMAPI.AttachGroupPolicyCalls())
func (mock *IAMAPIMock) AttachGroupPolicyCalls() []struct {
	In1 *iam.AttachGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.AttachGroupPolicyInput
	}
	lockIAMAPIMockAttachGroupPolicy.RLock()
	calls = mock.calls.AttachGroupPolicy
	lockIAMAPIMockAttachGroupPolicy.RUnlock()
	return calls
}

// AttachGroupPolicyRequest calls AttachGroupPolicyRequestFunc.
func (mock *IAMAPIMock) AttachGroupPolicyRequest(in1 *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput) {
	if mock.AttachGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.AttachGroupPolicyRequestFunc: method is nil but IAMAPI.AttachGroupPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.AttachGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAttachGroupPolicyRequest.Lock()
	mock.calls.AttachGroupPolicyRequest = append(mock.calls.AttachGroupPolicyRequest, callInfo)
	lockIAMAPIMockAttachGroupPolicyRequest.Unlock()
	return mock.AttachGroupPolicyRequestFunc(in1)
}

// AttachGroupPolicyRequestCalls gets all the calls that were made to AttachGroupPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.AttachGroupPolicyRequestCalls())
func (mock *IAMAPIMock) AttachGroupPolicyRequestCalls() []struct {
	In1 *iam.AttachGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.AttachGroupPolicyInput
	}
	lockIAMAPIMockAttachGroupPolicyRequest.RLock()
	calls = mock.calls.AttachGroupPolicyRequest
	lockIAMAPIMockAttachGroupPolicyRequest.RUnlock()
	return calls
}

// AttachGroupPolicyWithContext calls AttachGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) AttachGroupPolicyWithContext(in1 context.Context, in2 *iam.AttachGroupPolicyInput, in3 ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
	if mock.AttachGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.AttachGroupPolicyWithContextFunc: method is nil but IAMAPI.AttachGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.AttachGroupPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockAttachGroupPolicyWithContext.Lock()
	mock.calls.AttachGroupPolicyWithContext = append(mock.calls.AttachGroupPolicyWithContext, callInfo)
	lockIAMAPIMockAttachGroupPolicyWithContext.Unlock()
	return mock.AttachGroupPolicyWithContextFunc(in1, in2, in3...)
}

// AttachGroupPolicyWithContextCalls gets all the calls that were made to AttachGroupPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.AttachGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) AttachGroupPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.AttachGroupPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.AttachGroupPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockAttachGroupPolicyWithContext.RLock()
	calls = mock.calls.AttachGroupPolicyWithContext
	lockIAMAPIMockAttachGroupPolicyWithContext.RUnlock()
	return calls
}

// AttachRolePolicy calls AttachRolePolicyFunc.
func (mock *IAMAPIMock) AttachRolePolicy(in1 *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	if mock.AttachRolePolicyFunc == nil {
		panic("IAMAPIMock.AttachRolePolicyFunc: method is nil but IAMAPI.AttachRolePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.AttachRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAttachRolePolicy.Lock()
	mock.calls.AttachRolePolicy = append(mock.calls.AttachRolePolicy, callInfo)
	lockIAMAPIMockAttachRolePolicy.Unlock()
	return mock.AttachRolePolicyFunc(in1)
}

// AttachRolePolicyCalls gets all the calls that were made to AttachRolePolicy.
// Check the length with:
//     len(mockedIAMAPI.AttachRolePolicyCalls())
func (mock *IAMAPIMock) AttachRolePolicyCalls() []struct {
	In1 *iam.AttachRolePolicyInput
} {
	var calls []struct {
		In1 *iam.AttachRolePolicyInput
	}
	lockIAMAPIMockAttachRolePolicy.RLock()
	calls = mock.calls.AttachRolePolicy
	lockIAMAPIMockAttachRolePolicy.RUnlock()
	return calls
}

// AttachRolePolicyRequest calls AttachRolePolicyRequestFunc.
func (mock *IAMAPIMock) AttachRolePolicyRequest(in1 *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput) {
	if mock.AttachRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.AttachRolePolicyRequestFunc: method is nil but IAMAPI.AttachRolePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.AttachRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAttachRolePolicyRequest.Lock()
	mock.calls.AttachRolePolicyRequest = append(mock.calls.AttachRolePolicyRequest, callInfo)
	lockIAMAPIMockAttachRolePolicyRequest.Unlock()
	return mock.AttachRolePolicyRequestFunc(in1)
}

// AttachRolePolicyRequestCalls gets all the calls that were made to AttachRolePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.AttachRolePolicyRequestCalls())
func (mock *IAMAPIMock) AttachRolePolicyRequestCalls() []struct {
	In1 *iam.AttachRolePolicyInput
} {
	var calls []struct {
		In1 *iam.AttachRolePolicyInput
	}
	lockIAMAPIMockAttachRolePolicyRequest.RLock()
	calls = mock.calls.AttachRolePolicyRequest
	lockIAMAPIMockAttachRolePolicyRequest.RUnlock()
	return calls
}

// AttachRolePolicyWithContext calls AttachRolePolicyWithContextFunc.
func (mock *IAMAPIMock) AttachRolePolicyWithContext(in1 context.Context, in2 *iam.AttachRolePolicyInput, in3 ...request.Option) (*iam.AttachRolePolicyOutput, error) {
	if mock.AttachRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.AttachRolePolicyWithContextFunc: method is nil but IAMAPI.AttachRolePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.AttachRolePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockAttachRolePolicyWithContext.Lock()
	mock.calls.AttachRolePolicyWithContext = append(mock.calls.AttachRolePolicyWithContext, callInfo)
	lockIAMAPIMockAttachRolePolicyWithContext.Unlock()
	return mock.AttachRolePolicyWithContextFunc(in1, in2, in3...)
}

// AttachRolePolicyWithContextCalls gets all the calls that were made to AttachRolePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.AttachRolePolicyWithContextCalls())
func (mock *IAMAPIMock) AttachRolePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.AttachRolePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.AttachRolePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockAttachRolePolicyWithContext.RLock()
	calls = mock.calls.AttachRolePolicyWithContext
	lockIAMAPIMockAttachRolePolicyWithContext.RUnlock()
	return calls
}

// AttachUserPolicy calls AttachUserPolicyFunc.
func (mock *IAMAPIMock) AttachUserPolicy(in1 *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	if mock.AttachUserPolicyFunc == nil {
		panic("IAMAPIMock.AttachUserPolicyFunc: method is nil but IAMAPI.AttachUserPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.AttachUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAttachUserPolicy.Lock()
	mock.calls.AttachUserPolicy = append(mock.calls.AttachUserPolicy, callInfo)
	lockIAMAPIMockAttachUserPolicy.Unlock()
	return mock.AttachUserPolicyFunc(in1)
}

// AttachUserPolicyCalls gets all the calls that were made to AttachUserPolicy.
// Check the length with:
//     len(mockedIAMAPI.AttachUserPolicyCalls())
func (mock *IAMAPIMock) AttachUserPolicyCalls() []struct {
	In1 *iam.AttachUserPolicyInput
} {
	var calls []struct {
		In1 *iam.AttachUserPolicyInput
	}
	lockIAMAPIMockAttachUserPolicy.RLock()
	calls = mock.calls.AttachUserPolicy
	lockIAMAPIMockAttachUserPolicy.RUnlock()
	return calls
}

// AttachUserPolicyRequest calls AttachUserPolicyRequestFunc.
func (mock *IAMAPIMock) AttachUserPolicyRequest(in1 *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput) {
	if mock.AttachUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.AttachUserPolicyRequestFunc: method is nil but IAMAPI.AttachUserPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.AttachUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockAttachUserPolicyRequest.Lock()
	mock.calls.AttachUserPolicyRequest = append(mock.calls.AttachUserPolicyRequest, callInfo)
	lockIAMAPIMockAttachUserPolicyRequest.Unlock()
	return mock.AttachUserPolicyRequestFunc(in1)
}

// AttachUserPolicyRequestCalls gets all the calls that were made to AttachUserPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.AttachUserPolicyRequestCalls())
func (mock *IAMAPIMock) AttachUserPolicyRequestCalls() []struct {
	In1 *iam.AttachUserPolicyInput
} {
	var calls []struct {
		In1 *iam.AttachUserPolicyInput
	}
	lockIAMAPIMockAttachUserPolicyRequest.RLock()
	calls = mock.calls.AttachUserPolicyRequest
	lockIAMAPIMockAttachUserPolicyRequest.RUnlock()
	return calls
}

// AttachUserPolicyWithContext calls AttachUserPolicyWithContextFunc.
func (mock *IAMAPIMock) AttachUserPolicyWithContext(in1 context.Context, in2 *iam.AttachUserPolicyInput, in3 ...request.Option) (*iam.AttachUserPolicyOutput, error) {
	if mock.AttachUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.AttachUserPolicyWithContextFunc: method is nil but IAMAPI.AttachUserPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.AttachUserPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockAttachUserPolicyWithContext.Lock()
	mock.calls.AttachUserPolicyWithContext = append(mock.calls.AttachUserPolicyWithContext, callInfo)
	lockIAMAPIMockAttachUserPolicyWithContext.Unlock()
	return mock.AttachUserPolicyWithContextFunc(in1, in2, in3...)
}

// AttachUserPolicyWithContextCalls gets all the calls that were made to AttachUserPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.AttachUserPolicyWithContextCalls())
func (mock *IAMAPIMock) AttachUserPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.AttachUserPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.AttachUserPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockAttachUserPolicyWithContext.RLock()
	calls = mock.calls.AttachUserPolicyWithContext
	lockIAMAPIMockAttachUserPolicyWithContext.RUnlock()
	return calls
}

// ChangePassword calls ChangePasswordFunc.
func (mock *IAMAPIMock) ChangePassword(in1 *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	if mock.ChangePasswordFunc == nil {
		panic("IAMAPIMock.ChangePasswordFunc: method is nil but IAMAPI.ChangePassword was just called")
	}
	callInfo := struct {
		In1 *iam.ChangePasswordInput
	}{
		In1: in1,
	}
	lockIAMAPIMockChangePassword.Lock()
	mock.calls.ChangePassword = append(mock.calls.ChangePassword, callInfo)
	lockIAMAPIMockChangePassword.Unlock()
	return mock.ChangePasswordFunc(in1)
}

// ChangePasswordCalls gets all the calls that were made to ChangePassword.
// Check the length with:
//     len(mockedIAMAPI.ChangePasswordCalls())
func (mock *IAMAPIMock) ChangePasswordCalls() []struct {
	In1 *iam.ChangePasswordInput
} {
	var calls []struct {
		In1 *iam.ChangePasswordInput
	}
	lockIAMAPIMockChangePassword.RLock()
	calls = mock.calls.ChangePassword
	lockIAMAPIMockChangePassword.RUnlock()
	return calls
}

// ChangePasswordRequest calls ChangePasswordRequestFunc.
func (mock *IAMAPIMock) ChangePasswordRequest(in1 *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput) {
	if mock.ChangePasswordRequestFunc == nil {
		panic("IAMAPIMock.ChangePasswordRequestFunc: method is nil but IAMAPI.ChangePasswordRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ChangePasswordInput
	}{
		In1: in1,
	}
	lockIAMAPIMockChangePasswordRequest.Lock()
	mock.calls.ChangePasswordRequest = append(mock.calls.ChangePasswordRequest, callInfo)
	lockIAMAPIMockChangePasswordRequest.Unlock()
	return mock.ChangePasswordRequestFunc(in1)
}

// ChangePasswordRequestCalls gets all the calls that were made to ChangePasswordRequest.
// Check the length with:
//     len(mockedIAMAPI.ChangePasswordRequestCalls())
func (mock *IAMAPIMock) ChangePasswordRequestCalls() []struct {
	In1 *iam.ChangePasswordInput
} {
	var calls []struct {
		In1 *iam.ChangePasswordInput
	}
	lockIAMAPIMockChangePasswordRequest.RLock()
	calls = mock.calls.ChangePasswordRequest
	lockIAMAPIMockChangePasswordRequest.RUnlock()
	return calls
}

// ChangePasswordWithContext calls ChangePasswordWithContextFunc.
func (mock *IAMAPIMock) ChangePasswordWithContext(in1 context.Context, in2 *iam.ChangePasswordInput, in3 ...request.Option) (*iam.ChangePasswordOutput, error) {
	if mock.ChangePasswordWithContextFunc == nil {
		panic("IAMAPIMock.ChangePasswordWithContextFunc: method is nil but IAMAPI.ChangePasswordWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ChangePasswordInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockChangePasswordWithContext.Lock()
	mock.calls.ChangePasswordWithContext = append(mock.calls.ChangePasswordWithContext, callInfo)
	lockIAMAPIMockChangePasswordWithContext.Unlock()
	return mock.ChangePasswordWithContextFunc(in1, in2, in3...)
}

// ChangePasswordWithContextCalls gets all the calls that were made to ChangePasswordWithContext.
// Check the length with:
//     len(mockedIAMAPI.ChangePasswordWithContextCalls())
func (mock *IAMAPIMock) ChangePasswordWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ChangePasswordInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ChangePasswordInput
		In3 []request.Option
	}
	lockIAMAPIMockChangePasswordWithContext.RLock()
	calls = mock.calls.ChangePasswordWithContext
	lockIAMAPIMockChangePasswordWithContext.RUnlock()
	return calls
}

// CreateAccessKey calls CreateAccessKeyFunc.
func (mock *IAMAPIMock) CreateAccessKey(in1 *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	if mock.CreateAccessKeyFunc == nil {
		panic("IAMAPIMock.CreateAccessKeyFunc: method is nil but IAMAPI.CreateAccessKey was just called")
	}
	callInfo := struct {
		In1 *iam.CreateAccessKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateAccessKey.Lock()
	mock.calls.CreateAccessKey = append(mock.calls.CreateAccessKey, callInfo)
	lockIAMAPIMockCreateAccessKey.Unlock()
	return mock.CreateAccessKeyFunc(in1)
}

// CreateAccessKeyCalls gets all the calls that were made to CreateAccessKey.
// Check the length with:
//     len(mockedIAMAPI.CreateAccessKeyCalls())
func (mock *IAMAPIMock) CreateAccessKeyCalls() []struct {
	In1 *iam.CreateAccessKeyInput
} {
	var calls []struct {
		In1 *iam.CreateAccessKeyInput
	}
	lockIAMAPIMockCreateAccessKey.RLock()
	calls = mock.calls.CreateAccessKey
	lockIAMAPIMockCreateAccessKey.RUnlock()
	return calls
}

// CreateAccessKeyRequest calls CreateAccessKeyRequestFunc.
func (mock *IAMAPIMock) CreateAccessKeyRequest(in1 *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput) {
	if mock.CreateAccessKeyRequestFunc == nil {
		panic("IAMAPIMock.CreateAccessKeyRequestFunc: method is nil but IAMAPI.CreateAccessKeyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateAccessKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateAccessKeyRequest.Lock()
	mock.calls.CreateAccessKeyRequest = append(mock.calls.CreateAccessKeyRequest, callInfo)
	lockIAMAPIMockCreateAccessKeyRequest.Unlock()
	return mock.CreateAccessKeyRequestFunc(in1)
}

// CreateAccessKeyRequestCalls gets all the calls that were made to CreateAccessKeyRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateAccessKeyRequestCalls())
func (mock *IAMAPIMock) CreateAccessKeyRequestCalls() []struct {
	In1 *iam.CreateAccessKeyInput
} {
	var calls []struct {
		In1 *iam.CreateAccessKeyInput
	}
	lockIAMAPIMockCreateAccessKeyRequest.RLock()
	calls = mock.calls.CreateAccessKeyRequest
	lockIAMAPIMockCreateAccessKeyRequest.RUnlock()
	return calls
}

// CreateAccessKeyWithContext calls CreateAccessKeyWithContextFunc.
func (mock *IAMAPIMock) CreateAccessKeyWithContext(in1 context.Context, in2 *iam.CreateAccessKeyInput, in3 ...request.Option) (*iam.CreateAccessKeyOutput, error) {
	if mock.CreateAccessKeyWithContextFunc == nil {
		panic("IAMAPIMock.CreateAccessKeyWithContextFunc: method is nil but IAMAPI.CreateAccessKeyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateAccessKeyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateAccessKeyWithContext.Lock()
	mock.calls.CreateAccessKeyWithContext = append(mock.calls.CreateAccessKeyWithContext, callInfo)
	lockIAMAPIMockCreateAccessKeyWithContext.Unlock()
	return mock.CreateAccessKeyWithContextFunc(in1, in2, in3...)
}

// CreateAccessKeyWithContextCalls gets all the calls that were made to CreateAccessKeyWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateAccessKeyWithContextCalls())
func (mock *IAMAPIMock) CreateAccessKeyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateAccessKeyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateAccessKeyInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateAccessKeyWithContext.RLock()
	calls = mock.calls.CreateAccessKeyWithContext
	lockIAMAPIMockCreateAccessKeyWithContext.RUnlock()
	return calls
}

// CreateAccountAlias calls CreateAccountAliasFunc.
func (mock *IAMAPIMock) CreateAccountAlias(in1 *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	if mock.CreateAccountAliasFunc == nil {
		panic("IAMAPIMock.CreateAccountAliasFunc: method is nil but IAMAPI.CreateAccountAlias was just called")
	}
	callInfo := struct {
		In1 *iam.CreateAccountAliasInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateAccountAlias.Lock()
	mock.calls.CreateAccountAlias = append(mock.calls.CreateAccountAlias, callInfo)
	lockIAMAPIMockCreateAccountAlias.Unlock()
	return mock.CreateAccountAliasFunc(in1)
}

// CreateAccountAliasCalls gets all the calls that were made to CreateAccountAlias.
// Check the length with:
//     len(mockedIAMAPI.CreateAccountAliasCalls())
func (mock *IAMAPIMock) CreateAccountAliasCalls() []struct {
	In1 *iam.CreateAccountAliasInput
} {
	var calls []struct {
		In1 *iam.CreateAccountAliasInput
	}
	lockIAMAPIMockCreateAccountAlias.RLock()
	calls = mock.calls.CreateAccountAlias
	lockIAMAPIMockCreateAccountAlias.RUnlock()
	return calls
}

// CreateAccountAliasRequest calls CreateAccountAliasRequestFunc.
func (mock *IAMAPIMock) CreateAccountAliasRequest(in1 *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput) {
	if mock.CreateAccountAliasRequestFunc == nil {
		panic("IAMAPIMock.CreateAccountAliasRequestFunc: method is nil but IAMAPI.CreateAccountAliasRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateAccountAliasInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateAccountAliasRequest.Lock()
	mock.calls.CreateAccountAliasRequest = append(mock.calls.CreateAccountAliasRequest, callInfo)
	lockIAMAPIMockCreateAccountAliasRequest.Unlock()
	return mock.CreateAccountAliasRequestFunc(in1)
}

// CreateAccountAliasRequestCalls gets all the calls that were made to CreateAccountAliasRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateAccountAliasRequestCalls())
func (mock *IAMAPIMock) CreateAccountAliasRequestCalls() []struct {
	In1 *iam.CreateAccountAliasInput
} {
	var calls []struct {
		In1 *iam.CreateAccountAliasInput
	}
	lockIAMAPIMockCreateAccountAliasRequest.RLock()
	calls = mock.calls.CreateAccountAliasRequest
	lockIAMAPIMockCreateAccountAliasRequest.RUnlock()
	return calls
}

// CreateAccountAliasWithContext calls CreateAccountAliasWithContextFunc.
func (mock *IAMAPIMock) CreateAccountAliasWithContext(in1 context.Context, in2 *iam.CreateAccountAliasInput, in3 ...request.Option) (*iam.CreateAccountAliasOutput, error) {
	if mock.CreateAccountAliasWithContextFunc == nil {
		panic("IAMAPIMock.CreateAccountAliasWithContextFunc: method is nil but IAMAPI.CreateAccountAliasWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateAccountAliasInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateAccountAliasWithContext.Lock()
	mock.calls.CreateAccountAliasWithContext = append(mock.calls.CreateAccountAliasWithContext, callInfo)
	lockIAMAPIMockCreateAccountAliasWithContext.Unlock()
	return mock.CreateAccountAliasWithContextFunc(in1, in2, in3...)
}

// CreateAccountAliasWithContextCalls gets all the calls that were made to CreateAccountAliasWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateAccountAliasWithContextCalls())
func (mock *IAMAPIMock) CreateAccountAliasWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateAccountAliasInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateAccountAliasInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateAccountAliasWithContext.RLock()
	calls = mock.calls.CreateAccountAliasWithContext
	lockIAMAPIMockCreateAccountAliasWithContext.RUnlock()
	return calls
}

// CreateGroup calls CreateGroupFunc.
func (mock *IAMAPIMock) CreateGroup(in1 *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	if mock.CreateGroupFunc == nil {
		panic("IAMAPIMock.CreateGroupFunc: method is nil but IAMAPI.CreateGroup was just called")
	}
	callInfo := struct {
		In1 *iam.CreateGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateGroup.Lock()
	mock.calls.CreateGroup = append(mock.calls.CreateGroup, callInfo)
	lockIAMAPIMockCreateGroup.Unlock()
	return mock.CreateGroupFunc(in1)
}

// CreateGroupCalls gets all the calls that were made to CreateGroup.
// Check the length with:
//     len(mockedIAMAPI.CreateGroupCalls())
func (mock *IAMAPIMock) CreateGroupCalls() []struct {
	In1 *iam.CreateGroupInput
} {
	var calls []struct {
		In1 *iam.CreateGroupInput
	}
	lockIAMAPIMockCreateGroup.RLock()
	calls = mock.calls.CreateGroup
	lockIAMAPIMockCreateGroup.RUnlock()
	return calls
}

// CreateGroupRequest calls CreateGroupRequestFunc.
func (mock *IAMAPIMock) CreateGroupRequest(in1 *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput) {
	if mock.CreateGroupRequestFunc == nil {
		panic("IAMAPIMock.CreateGroupRequestFunc: method is nil but IAMAPI.CreateGroupRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateGroupRequest.Lock()
	mock.calls.CreateGroupRequest = append(mock.calls.CreateGroupRequest, callInfo)
	lockIAMAPIMockCreateGroupRequest.Unlock()
	return mock.CreateGroupRequestFunc(in1)
}

// CreateGroupRequestCalls gets all the calls that were made to CreateGroupRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateGroupRequestCalls())
func (mock *IAMAPIMock) CreateGroupRequestCalls() []struct {
	In1 *iam.CreateGroupInput
} {
	var calls []struct {
		In1 *iam.CreateGroupInput
	}
	lockIAMAPIMockCreateGroupRequest.RLock()
	calls = mock.calls.CreateGroupRequest
	lockIAMAPIMockCreateGroupRequest.RUnlock()
	return calls
}

// CreateGroupWithContext calls CreateGroupWithContextFunc.
func (mock *IAMAPIMock) CreateGroupWithContext(in1 context.Context, in2 *iam.CreateGroupInput, in3 ...request.Option) (*iam.CreateGroupOutput, error) {
	if mock.CreateGroupWithContextFunc == nil {
		panic("IAMAPIMock.CreateGroupWithContextFunc: method is nil but IAMAPI.CreateGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateGroupWithContext.Lock()
	mock.calls.CreateGroupWithContext = append(mock.calls.CreateGroupWithContext, callInfo)
	lockIAMAPIMockCreateGroupWithContext.Unlock()
	return mock.CreateGroupWithContextFunc(in1, in2, in3...)
}

// CreateGroupWithContextCalls gets all the calls that were made to CreateGroupWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateGroupWithContextCalls())
func (mock *IAMAPIMock) CreateGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateGroupInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateGroupWithContext.RLock()
	calls = mock.calls.CreateGroupWithContext
	lockIAMAPIMockCreateGroupWithContext.RUnlock()
	return calls
}

// CreateInstanceProfile calls CreateInstanceProfileFunc.
func (mock *IAMAPIMock) CreateInstanceProfile(in1 *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	if mock.CreateInstanceProfileFunc == nil {
		panic("IAMAPIMock.CreateInstanceProfileFunc: method is nil but IAMAPI.CreateInstanceProfile was just called")
	}
	callInfo := struct {
		In1 *iam.CreateInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateInstanceProfile.Lock()
	mock.calls.CreateInstanceProfile = append(mock.calls.CreateInstanceProfile, callInfo)
	lockIAMAPIMockCreateInstanceProfile.Unlock()
	return mock.CreateInstanceProfileFunc(in1)
}

// CreateInstanceProfileCalls gets all the calls that were made to CreateInstanceProfile.
// Check the length with:
//     len(mockedIAMAPI.CreateInstanceProfileCalls())
func (mock *IAMAPIMock) CreateInstanceProfileCalls() []struct {
	In1 *iam.CreateInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.CreateInstanceProfileInput
	}
	lockIAMAPIMockCreateInstanceProfile.RLock()
	calls = mock.calls.CreateInstanceProfile
	lockIAMAPIMockCreateInstanceProfile.RUnlock()
	return calls
}

// CreateInstanceProfileRequest calls CreateInstanceProfileRequestFunc.
func (mock *IAMAPIMock) CreateInstanceProfileRequest(in1 *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput) {
	if mock.CreateInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.CreateInstanceProfileRequestFunc: method is nil but IAMAPI.CreateInstanceProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateInstanceProfileRequest.Lock()
	mock.calls.CreateInstanceProfileRequest = append(mock.calls.CreateInstanceProfileRequest, callInfo)
	lockIAMAPIMockCreateInstanceProfileRequest.Unlock()
	return mock.CreateInstanceProfileRequestFunc(in1)
}

// CreateInstanceProfileRequestCalls gets all the calls that were made to CreateInstanceProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateInstanceProfileRequestCalls())
func (mock *IAMAPIMock) CreateInstanceProfileRequestCalls() []struct {
	In1 *iam.CreateInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.CreateInstanceProfileInput
	}
	lockIAMAPIMockCreateInstanceProfileRequest.RLock()
	calls = mock.calls.CreateInstanceProfileRequest
	lockIAMAPIMockCreateInstanceProfileRequest.RUnlock()
	return calls
}

// CreateInstanceProfileWithContext calls CreateInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) CreateInstanceProfileWithContext(in1 context.Context, in2 *iam.CreateInstanceProfileInput, in3 ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
	if mock.CreateInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.CreateInstanceProfileWithContextFunc: method is nil but IAMAPI.CreateInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateInstanceProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateInstanceProfileWithContext.Lock()
	mock.calls.CreateInstanceProfileWithContext = append(mock.calls.CreateInstanceProfileWithContext, callInfo)
	lockIAMAPIMockCreateInstanceProfileWithContext.Unlock()
	return mock.CreateInstanceProfileWithContextFunc(in1, in2, in3...)
}

// CreateInstanceProfileWithContextCalls gets all the calls that were made to CreateInstanceProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) CreateInstanceProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateInstanceProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateInstanceProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateInstanceProfileWithContext.RLock()
	calls = mock.calls.CreateInstanceProfileWithContext
	lockIAMAPIMockCreateInstanceProfileWithContext.RUnlock()
	return calls
}

// CreateLoginProfile calls CreateLoginProfileFunc.
func (mock *IAMAPIMock) CreateLoginProfile(in1 *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	if mock.CreateLoginProfileFunc == nil {
		panic("IAMAPIMock.CreateLoginProfileFunc: method is nil but IAMAPI.CreateLoginProfile was just called")
	}
	callInfo := struct {
		In1 *iam.CreateLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateLoginProfile.Lock()
	mock.calls.CreateLoginProfile = append(mock.calls.CreateLoginProfile, callInfo)
	lockIAMAPIMockCreateLoginProfile.Unlock()
	return mock.CreateLoginProfileFunc(in1)
}

// CreateLoginProfileCalls gets all the calls that were made to CreateLoginProfile.
// Check the length with:
//     len(mockedIAMAPI.CreateLoginProfileCalls())
func (mock *IAMAPIMock) CreateLoginProfileCalls() []struct {
	In1 *iam.CreateLoginProfileInput
} {
	var calls []struct {
		In1 *iam.CreateLoginProfileInput
	}
	lockIAMAPIMockCreateLoginProfile.RLock()
	calls = mock.calls.CreateLoginProfile
	lockIAMAPIMockCreateLoginProfile.RUnlock()
	return calls
}

// CreateLoginProfileRequest calls CreateLoginProfileRequestFunc.
func (mock *IAMAPIMock) CreateLoginProfileRequest(in1 *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput) {
	if mock.CreateLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.CreateLoginProfileRequestFunc: method is nil but IAMAPI.CreateLoginProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateLoginProfileRequest.Lock()
	mock.calls.CreateLoginProfileRequest = append(mock.calls.CreateLoginProfileRequest, callInfo)
	lockIAMAPIMockCreateLoginProfileRequest.Unlock()
	return mock.CreateLoginProfileRequestFunc(in1)
}

// CreateLoginProfileRequestCalls gets all the calls that were made to CreateLoginProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateLoginProfileRequestCalls())
func (mock *IAMAPIMock) CreateLoginProfileRequestCalls() []struct {
	In1 *iam.CreateLoginProfileInput
} {
	var calls []struct {
		In1 *iam.CreateLoginProfileInput
	}
	lockIAMAPIMockCreateLoginProfileRequest.RLock()
	calls = mock.calls.CreateLoginProfileRequest
	lockIAMAPIMockCreateLoginProfileRequest.RUnlock()
	return calls
}

// CreateLoginProfileWithContext calls CreateLoginProfileWithContextFunc.
func (mock *IAMAPIMock) CreateLoginProfileWithContext(in1 context.Context, in2 *iam.CreateLoginProfileInput, in3 ...request.Option) (*iam.CreateLoginProfileOutput, error) {
	if mock.CreateLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.CreateLoginProfileWithContextFunc: method is nil but IAMAPI.CreateLoginProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateLoginProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateLoginProfileWithContext.Lock()
	mock.calls.CreateLoginProfileWithContext = append(mock.calls.CreateLoginProfileWithContext, callInfo)
	lockIAMAPIMockCreateLoginProfileWithContext.Unlock()
	return mock.CreateLoginProfileWithContextFunc(in1, in2, in3...)
}

// CreateLoginProfileWithContextCalls gets all the calls that were made to CreateLoginProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateLoginProfileWithContextCalls())
func (mock *IAMAPIMock) CreateLoginProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateLoginProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateLoginProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateLoginProfileWithContext.RLock()
	calls = mock.calls.CreateLoginProfileWithContext
	lockIAMAPIMockCreateLoginProfileWithContext.RUnlock()
	return calls
}

// CreateOpenIDConnectProvider calls CreateOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) CreateOpenIDConnectProvider(in1 *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	if mock.CreateOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.CreateOpenIDConnectProviderFunc: method is nil but IAMAPI.CreateOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		In1 *iam.CreateOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateOpenIDConnectProvider.Lock()
	mock.calls.CreateOpenIDConnectProvider = append(mock.calls.CreateOpenIDConnectProvider, callInfo)
	lockIAMAPIMockCreateOpenIDConnectProvider.Unlock()
	return mock.CreateOpenIDConnectProviderFunc(in1)
}

// CreateOpenIDConnectProviderCalls gets all the calls that were made to CreateOpenIDConnectProvider.
// Check the length with:
//     len(mockedIAMAPI.CreateOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) CreateOpenIDConnectProviderCalls() []struct {
	In1 *iam.CreateOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.CreateOpenIDConnectProviderInput
	}
	lockIAMAPIMockCreateOpenIDConnectProvider.RLock()
	calls = mock.calls.CreateOpenIDConnectProvider
	lockIAMAPIMockCreateOpenIDConnectProvider.RUnlock()
	return calls
}

// CreateOpenIDConnectProviderRequest calls CreateOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) CreateOpenIDConnectProviderRequest(in1 *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput) {
	if mock.CreateOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.CreateOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.CreateOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateOpenIDConnectProviderRequest.Lock()
	mock.calls.CreateOpenIDConnectProviderRequest = append(mock.calls.CreateOpenIDConnectProviderRequest, callInfo)
	lockIAMAPIMockCreateOpenIDConnectProviderRequest.Unlock()
	return mock.CreateOpenIDConnectProviderRequestFunc(in1)
}

// CreateOpenIDConnectProviderRequestCalls gets all the calls that were made to CreateOpenIDConnectProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) CreateOpenIDConnectProviderRequestCalls() []struct {
	In1 *iam.CreateOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.CreateOpenIDConnectProviderInput
	}
	lockIAMAPIMockCreateOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.CreateOpenIDConnectProviderRequest
	lockIAMAPIMockCreateOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// CreateOpenIDConnectProviderWithContext calls CreateOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) CreateOpenIDConnectProviderWithContext(in1 context.Context, in2 *iam.CreateOpenIDConnectProviderInput, in3 ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
	if mock.CreateOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.CreateOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.CreateOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateOpenIDConnectProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateOpenIDConnectProviderWithContext.Lock()
	mock.calls.CreateOpenIDConnectProviderWithContext = append(mock.calls.CreateOpenIDConnectProviderWithContext, callInfo)
	lockIAMAPIMockCreateOpenIDConnectProviderWithContext.Unlock()
	return mock.CreateOpenIDConnectProviderWithContextFunc(in1, in2, in3...)
}

// CreateOpenIDConnectProviderWithContextCalls gets all the calls that were made to CreateOpenIDConnectProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) CreateOpenIDConnectProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateOpenIDConnectProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateOpenIDConnectProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.CreateOpenIDConnectProviderWithContext
	lockIAMAPIMockCreateOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// CreatePolicy calls CreatePolicyFunc.
func (mock *IAMAPIMock) CreatePolicy(in1 *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	if mock.CreatePolicyFunc == nil {
		panic("IAMAPIMock.CreatePolicyFunc: method is nil but IAMAPI.CreatePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.CreatePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreatePolicy.Lock()
	mock.calls.CreatePolicy = append(mock.calls.CreatePolicy, callInfo)
	lockIAMAPIMockCreatePolicy.Unlock()
	return mock.CreatePolicyFunc(in1)
}

// CreatePolicyCalls gets all the calls that were made to CreatePolicy.
// Check the length with:
//     len(mockedIAMAPI.CreatePolicyCalls())
func (mock *IAMAPIMock) CreatePolicyCalls() []struct {
	In1 *iam.CreatePolicyInput
} {
	var calls []struct {
		In1 *iam.CreatePolicyInput
	}
	lockIAMAPIMockCreatePolicy.RLock()
	calls = mock.calls.CreatePolicy
	lockIAMAPIMockCreatePolicy.RUnlock()
	return calls
}

// CreatePolicyRequest calls CreatePolicyRequestFunc.
func (mock *IAMAPIMock) CreatePolicyRequest(in1 *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput) {
	if mock.CreatePolicyRequestFunc == nil {
		panic("IAMAPIMock.CreatePolicyRequestFunc: method is nil but IAMAPI.CreatePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreatePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreatePolicyRequest.Lock()
	mock.calls.CreatePolicyRequest = append(mock.calls.CreatePolicyRequest, callInfo)
	lockIAMAPIMockCreatePolicyRequest.Unlock()
	return mock.CreatePolicyRequestFunc(in1)
}

// CreatePolicyRequestCalls gets all the calls that were made to CreatePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.CreatePolicyRequestCalls())
func (mock *IAMAPIMock) CreatePolicyRequestCalls() []struct {
	In1 *iam.CreatePolicyInput
} {
	var calls []struct {
		In1 *iam.CreatePolicyInput
	}
	lockIAMAPIMockCreatePolicyRequest.RLock()
	calls = mock.calls.CreatePolicyRequest
	lockIAMAPIMockCreatePolicyRequest.RUnlock()
	return calls
}

// CreatePolicyVersion calls CreatePolicyVersionFunc.
func (mock *IAMAPIMock) CreatePolicyVersion(in1 *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	if mock.CreatePolicyVersionFunc == nil {
		panic("IAMAPIMock.CreatePolicyVersionFunc: method is nil but IAMAPI.CreatePolicyVersion was just called")
	}
	callInfo := struct {
		In1 *iam.CreatePolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreatePolicyVersion.Lock()
	mock.calls.CreatePolicyVersion = append(mock.calls.CreatePolicyVersion, callInfo)
	lockIAMAPIMockCreatePolicyVersion.Unlock()
	return mock.CreatePolicyVersionFunc(in1)
}

// CreatePolicyVersionCalls gets all the calls that were made to CreatePolicyVersion.
// Check the length with:
//     len(mockedIAMAPI.CreatePolicyVersionCalls())
func (mock *IAMAPIMock) CreatePolicyVersionCalls() []struct {
	In1 *iam.CreatePolicyVersionInput
} {
	var calls []struct {
		In1 *iam.CreatePolicyVersionInput
	}
	lockIAMAPIMockCreatePolicyVersion.RLock()
	calls = mock.calls.CreatePolicyVersion
	lockIAMAPIMockCreatePolicyVersion.RUnlock()
	return calls
}

// CreatePolicyVersionRequest calls CreatePolicyVersionRequestFunc.
func (mock *IAMAPIMock) CreatePolicyVersionRequest(in1 *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput) {
	if mock.CreatePolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.CreatePolicyVersionRequestFunc: method is nil but IAMAPI.CreatePolicyVersionRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreatePolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreatePolicyVersionRequest.Lock()
	mock.calls.CreatePolicyVersionRequest = append(mock.calls.CreatePolicyVersionRequest, callInfo)
	lockIAMAPIMockCreatePolicyVersionRequest.Unlock()
	return mock.CreatePolicyVersionRequestFunc(in1)
}

// CreatePolicyVersionRequestCalls gets all the calls that were made to CreatePolicyVersionRequest.
// Check the length with:
//     len(mockedIAMAPI.CreatePolicyVersionRequestCalls())
func (mock *IAMAPIMock) CreatePolicyVersionRequestCalls() []struct {
	In1 *iam.CreatePolicyVersionInput
} {
	var calls []struct {
		In1 *iam.CreatePolicyVersionInput
	}
	lockIAMAPIMockCreatePolicyVersionRequest.RLock()
	calls = mock.calls.CreatePolicyVersionRequest
	lockIAMAPIMockCreatePolicyVersionRequest.RUnlock()
	return calls
}

// CreatePolicyVersionWithContext calls CreatePolicyVersionWithContextFunc.
func (mock *IAMAPIMock) CreatePolicyVersionWithContext(in1 context.Context, in2 *iam.CreatePolicyVersionInput, in3 ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
	if mock.CreatePolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.CreatePolicyVersionWithContextFunc: method is nil but IAMAPI.CreatePolicyVersionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreatePolicyVersionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreatePolicyVersionWithContext.Lock()
	mock.calls.CreatePolicyVersionWithContext = append(mock.calls.CreatePolicyVersionWithContext, callInfo)
	lockIAMAPIMockCreatePolicyVersionWithContext.Unlock()
	return mock.CreatePolicyVersionWithContextFunc(in1, in2, in3...)
}

// CreatePolicyVersionWithContextCalls gets all the calls that were made to CreatePolicyVersionWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreatePolicyVersionWithContextCalls())
func (mock *IAMAPIMock) CreatePolicyVersionWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreatePolicyVersionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreatePolicyVersionInput
		In3 []request.Option
	}
	lockIAMAPIMockCreatePolicyVersionWithContext.RLock()
	calls = mock.calls.CreatePolicyVersionWithContext
	lockIAMAPIMockCreatePolicyVersionWithContext.RUnlock()
	return calls
}

// CreatePolicyWithContext calls CreatePolicyWithContextFunc.
func (mock *IAMAPIMock) CreatePolicyWithContext(in1 context.Context, in2 *iam.CreatePolicyInput, in3 ...request.Option) (*iam.CreatePolicyOutput, error) {
	if mock.CreatePolicyWithContextFunc == nil {
		panic("IAMAPIMock.CreatePolicyWithContextFunc: method is nil but IAMAPI.CreatePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreatePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreatePolicyWithContext.Lock()
	mock.calls.CreatePolicyWithContext = append(mock.calls.CreatePolicyWithContext, callInfo)
	lockIAMAPIMockCreatePolicyWithContext.Unlock()
	return mock.CreatePolicyWithContextFunc(in1, in2, in3...)
}

// CreatePolicyWithContextCalls gets all the calls that were made to CreatePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreatePolicyWithContextCalls())
func (mock *IAMAPIMock) CreatePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreatePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreatePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockCreatePolicyWithContext.RLock()
	calls = mock.calls.CreatePolicyWithContext
	lockIAMAPIMockCreatePolicyWithContext.RUnlock()
	return calls
}

// CreateRole calls CreateRoleFunc.
func (mock *IAMAPIMock) CreateRole(in1 *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	if mock.CreateRoleFunc == nil {
		panic("IAMAPIMock.CreateRoleFunc: method is nil but IAMAPI.CreateRole was just called")
	}
	callInfo := struct {
		In1 *iam.CreateRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateRole.Lock()
	mock.calls.CreateRole = append(mock.calls.CreateRole, callInfo)
	lockIAMAPIMockCreateRole.Unlock()
	return mock.CreateRoleFunc(in1)
}

// CreateRoleCalls gets all the calls that were made to CreateRole.
// Check the length with:
//     len(mockedIAMAPI.CreateRoleCalls())
func (mock *IAMAPIMock) CreateRoleCalls() []struct {
	In1 *iam.CreateRoleInput
} {
	var calls []struct {
		In1 *iam.CreateRoleInput
	}
	lockIAMAPIMockCreateRole.RLock()
	calls = mock.calls.CreateRole
	lockIAMAPIMockCreateRole.RUnlock()
	return calls
}

// CreateRoleRequest calls CreateRoleRequestFunc.
func (mock *IAMAPIMock) CreateRoleRequest(in1 *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput) {
	if mock.CreateRoleRequestFunc == nil {
		panic("IAMAPIMock.CreateRoleRequestFunc: method is nil but IAMAPI.CreateRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateRoleRequest.Lock()
	mock.calls.CreateRoleRequest = append(mock.calls.CreateRoleRequest, callInfo)
	lockIAMAPIMockCreateRoleRequest.Unlock()
	return mock.CreateRoleRequestFunc(in1)
}

// CreateRoleRequestCalls gets all the calls that were made to CreateRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateRoleRequestCalls())
func (mock *IAMAPIMock) CreateRoleRequestCalls() []struct {
	In1 *iam.CreateRoleInput
} {
	var calls []struct {
		In1 *iam.CreateRoleInput
	}
	lockIAMAPIMockCreateRoleRequest.RLock()
	calls = mock.calls.CreateRoleRequest
	lockIAMAPIMockCreateRoleRequest.RUnlock()
	return calls
}

// CreateRoleWithContext calls CreateRoleWithContextFunc.
func (mock *IAMAPIMock) CreateRoleWithContext(in1 context.Context, in2 *iam.CreateRoleInput, in3 ...request.Option) (*iam.CreateRoleOutput, error) {
	if mock.CreateRoleWithContextFunc == nil {
		panic("IAMAPIMock.CreateRoleWithContextFunc: method is nil but IAMAPI.CreateRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateRoleWithContext.Lock()
	mock.calls.CreateRoleWithContext = append(mock.calls.CreateRoleWithContext, callInfo)
	lockIAMAPIMockCreateRoleWithContext.Unlock()
	return mock.CreateRoleWithContextFunc(in1, in2, in3...)
}

// CreateRoleWithContextCalls gets all the calls that were made to CreateRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateRoleWithContextCalls())
func (mock *IAMAPIMock) CreateRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateRoleWithContext.RLock()
	calls = mock.calls.CreateRoleWithContext
	lockIAMAPIMockCreateRoleWithContext.RUnlock()
	return calls
}

// CreateSAMLProvider calls CreateSAMLProviderFunc.
func (mock *IAMAPIMock) CreateSAMLProvider(in1 *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	if mock.CreateSAMLProviderFunc == nil {
		panic("IAMAPIMock.CreateSAMLProviderFunc: method is nil but IAMAPI.CreateSAMLProvider was just called")
	}
	callInfo := struct {
		In1 *iam.CreateSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateSAMLProvider.Lock()
	mock.calls.CreateSAMLProvider = append(mock.calls.CreateSAMLProvider, callInfo)
	lockIAMAPIMockCreateSAMLProvider.Unlock()
	return mock.CreateSAMLProviderFunc(in1)
}

// CreateSAMLProviderCalls gets all the calls that were made to CreateSAMLProvider.
// Check the length with:
//     len(mockedIAMAPI.CreateSAMLProviderCalls())
func (mock *IAMAPIMock) CreateSAMLProviderCalls() []struct {
	In1 *iam.CreateSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.CreateSAMLProviderInput
	}
	lockIAMAPIMockCreateSAMLProvider.RLock()
	calls = mock.calls.CreateSAMLProvider
	lockIAMAPIMockCreateSAMLProvider.RUnlock()
	return calls
}

// CreateSAMLProviderRequest calls CreateSAMLProviderRequestFunc.
func (mock *IAMAPIMock) CreateSAMLProviderRequest(in1 *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput) {
	if mock.CreateSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.CreateSAMLProviderRequestFunc: method is nil but IAMAPI.CreateSAMLProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateSAMLProviderRequest.Lock()
	mock.calls.CreateSAMLProviderRequest = append(mock.calls.CreateSAMLProviderRequest, callInfo)
	lockIAMAPIMockCreateSAMLProviderRequest.Unlock()
	return mock.CreateSAMLProviderRequestFunc(in1)
}

// CreateSAMLProviderRequestCalls gets all the calls that were made to CreateSAMLProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateSAMLProviderRequestCalls())
func (mock *IAMAPIMock) CreateSAMLProviderRequestCalls() []struct {
	In1 *iam.CreateSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.CreateSAMLProviderInput
	}
	lockIAMAPIMockCreateSAMLProviderRequest.RLock()
	calls = mock.calls.CreateSAMLProviderRequest
	lockIAMAPIMockCreateSAMLProviderRequest.RUnlock()
	return calls
}

// CreateSAMLProviderWithContext calls CreateSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) CreateSAMLProviderWithContext(in1 context.Context, in2 *iam.CreateSAMLProviderInput, in3 ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
	if mock.CreateSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.CreateSAMLProviderWithContextFunc: method is nil but IAMAPI.CreateSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateSAMLProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateSAMLProviderWithContext.Lock()
	mock.calls.CreateSAMLProviderWithContext = append(mock.calls.CreateSAMLProviderWithContext, callInfo)
	lockIAMAPIMockCreateSAMLProviderWithContext.Unlock()
	return mock.CreateSAMLProviderWithContextFunc(in1, in2, in3...)
}

// CreateSAMLProviderWithContextCalls gets all the calls that were made to CreateSAMLProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) CreateSAMLProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateSAMLProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateSAMLProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateSAMLProviderWithContext.RLock()
	calls = mock.calls.CreateSAMLProviderWithContext
	lockIAMAPIMockCreateSAMLProviderWithContext.RUnlock()
	return calls
}

// CreateServiceLinkedRole calls CreateServiceLinkedRoleFunc.
func (mock *IAMAPIMock) CreateServiceLinkedRole(in1 *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	if mock.CreateServiceLinkedRoleFunc == nil {
		panic("IAMAPIMock.CreateServiceLinkedRoleFunc: method is nil but IAMAPI.CreateServiceLinkedRole was just called")
	}
	callInfo := struct {
		In1 *iam.CreateServiceLinkedRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateServiceLinkedRole.Lock()
	mock.calls.CreateServiceLinkedRole = append(mock.calls.CreateServiceLinkedRole, callInfo)
	lockIAMAPIMockCreateServiceLinkedRole.Unlock()
	return mock.CreateServiceLinkedRoleFunc(in1)
}

// CreateServiceLinkedRoleCalls gets all the calls that were made to CreateServiceLinkedRole.
// Check the length with:
//     len(mockedIAMAPI.CreateServiceLinkedRoleCalls())
func (mock *IAMAPIMock) CreateServiceLinkedRoleCalls() []struct {
	In1 *iam.CreateServiceLinkedRoleInput
} {
	var calls []struct {
		In1 *iam.CreateServiceLinkedRoleInput
	}
	lockIAMAPIMockCreateServiceLinkedRole.RLock()
	calls = mock.calls.CreateServiceLinkedRole
	lockIAMAPIMockCreateServiceLinkedRole.RUnlock()
	return calls
}

// CreateServiceLinkedRoleRequest calls CreateServiceLinkedRoleRequestFunc.
func (mock *IAMAPIMock) CreateServiceLinkedRoleRequest(in1 *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput) {
	if mock.CreateServiceLinkedRoleRequestFunc == nil {
		panic("IAMAPIMock.CreateServiceLinkedRoleRequestFunc: method is nil but IAMAPI.CreateServiceLinkedRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateServiceLinkedRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateServiceLinkedRoleRequest.Lock()
	mock.calls.CreateServiceLinkedRoleRequest = append(mock.calls.CreateServiceLinkedRoleRequest, callInfo)
	lockIAMAPIMockCreateServiceLinkedRoleRequest.Unlock()
	return mock.CreateServiceLinkedRoleRequestFunc(in1)
}

// CreateServiceLinkedRoleRequestCalls gets all the calls that were made to CreateServiceLinkedRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateServiceLinkedRoleRequestCalls())
func (mock *IAMAPIMock) CreateServiceLinkedRoleRequestCalls() []struct {
	In1 *iam.CreateServiceLinkedRoleInput
} {
	var calls []struct {
		In1 *iam.CreateServiceLinkedRoleInput
	}
	lockIAMAPIMockCreateServiceLinkedRoleRequest.RLock()
	calls = mock.calls.CreateServiceLinkedRoleRequest
	lockIAMAPIMockCreateServiceLinkedRoleRequest.RUnlock()
	return calls
}

// CreateServiceLinkedRoleWithContext calls CreateServiceLinkedRoleWithContextFunc.
func (mock *IAMAPIMock) CreateServiceLinkedRoleWithContext(in1 context.Context, in2 *iam.CreateServiceLinkedRoleInput, in3 ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
	if mock.CreateServiceLinkedRoleWithContextFunc == nil {
		panic("IAMAPIMock.CreateServiceLinkedRoleWithContextFunc: method is nil but IAMAPI.CreateServiceLinkedRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateServiceLinkedRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateServiceLinkedRoleWithContext.Lock()
	mock.calls.CreateServiceLinkedRoleWithContext = append(mock.calls.CreateServiceLinkedRoleWithContext, callInfo)
	lockIAMAPIMockCreateServiceLinkedRoleWithContext.Unlock()
	return mock.CreateServiceLinkedRoleWithContextFunc(in1, in2, in3...)
}

// CreateServiceLinkedRoleWithContextCalls gets all the calls that were made to CreateServiceLinkedRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateServiceLinkedRoleWithContextCalls())
func (mock *IAMAPIMock) CreateServiceLinkedRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateServiceLinkedRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateServiceLinkedRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateServiceLinkedRoleWithContext.RLock()
	calls = mock.calls.CreateServiceLinkedRoleWithContext
	lockIAMAPIMockCreateServiceLinkedRoleWithContext.RUnlock()
	return calls
}

// CreateServiceSpecificCredential calls CreateServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) CreateServiceSpecificCredential(in1 *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	if mock.CreateServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.CreateServiceSpecificCredentialFunc: method is nil but IAMAPI.CreateServiceSpecificCredential was just called")
	}
	callInfo := struct {
		In1 *iam.CreateServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateServiceSpecificCredential.Lock()
	mock.calls.CreateServiceSpecificCredential = append(mock.calls.CreateServiceSpecificCredential, callInfo)
	lockIAMAPIMockCreateServiceSpecificCredential.Unlock()
	return mock.CreateServiceSpecificCredentialFunc(in1)
}

// CreateServiceSpecificCredentialCalls gets all the calls that were made to CreateServiceSpecificCredential.
// Check the length with:
//     len(mockedIAMAPI.CreateServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) CreateServiceSpecificCredentialCalls() []struct {
	In1 *iam.CreateServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.CreateServiceSpecificCredentialInput
	}
	lockIAMAPIMockCreateServiceSpecificCredential.RLock()
	calls = mock.calls.CreateServiceSpecificCredential
	lockIAMAPIMockCreateServiceSpecificCredential.RUnlock()
	return calls
}

// CreateServiceSpecificCredentialRequest calls CreateServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) CreateServiceSpecificCredentialRequest(in1 *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput) {
	if mock.CreateServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.CreateServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.CreateServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateServiceSpecificCredentialRequest.Lock()
	mock.calls.CreateServiceSpecificCredentialRequest = append(mock.calls.CreateServiceSpecificCredentialRequest, callInfo)
	lockIAMAPIMockCreateServiceSpecificCredentialRequest.Unlock()
	return mock.CreateServiceSpecificCredentialRequestFunc(in1)
}

// CreateServiceSpecificCredentialRequestCalls gets all the calls that were made to CreateServiceSpecificCredentialRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) CreateServiceSpecificCredentialRequestCalls() []struct {
	In1 *iam.CreateServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.CreateServiceSpecificCredentialInput
	}
	lockIAMAPIMockCreateServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.CreateServiceSpecificCredentialRequest
	lockIAMAPIMockCreateServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// CreateServiceSpecificCredentialWithContext calls CreateServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) CreateServiceSpecificCredentialWithContext(in1 context.Context, in2 *iam.CreateServiceSpecificCredentialInput, in3 ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
	if mock.CreateServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.CreateServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.CreateServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateServiceSpecificCredentialInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateServiceSpecificCredentialWithContext.Lock()
	mock.calls.CreateServiceSpecificCredentialWithContext = append(mock.calls.CreateServiceSpecificCredentialWithContext, callInfo)
	lockIAMAPIMockCreateServiceSpecificCredentialWithContext.Unlock()
	return mock.CreateServiceSpecificCredentialWithContextFunc(in1, in2, in3...)
}

// CreateServiceSpecificCredentialWithContextCalls gets all the calls that were made to CreateServiceSpecificCredentialWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) CreateServiceSpecificCredentialWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateServiceSpecificCredentialInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateServiceSpecificCredentialInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.CreateServiceSpecificCredentialWithContext
	lockIAMAPIMockCreateServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *IAMAPIMock) CreateUser(in1 *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	if mock.CreateUserFunc == nil {
		panic("IAMAPIMock.CreateUserFunc: method is nil but IAMAPI.CreateUser was just called")
	}
	callInfo := struct {
		In1 *iam.CreateUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockIAMAPIMockCreateUser.Unlock()
	return mock.CreateUserFunc(in1)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedIAMAPI.CreateUserCalls())
func (mock *IAMAPIMock) CreateUserCalls() []struct {
	In1 *iam.CreateUserInput
} {
	var calls []struct {
		In1 *iam.CreateUserInput
	}
	lockIAMAPIMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockIAMAPIMockCreateUser.RUnlock()
	return calls
}

// CreateUserRequest calls CreateUserRequestFunc.
func (mock *IAMAPIMock) CreateUserRequest(in1 *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput) {
	if mock.CreateUserRequestFunc == nil {
		panic("IAMAPIMock.CreateUserRequestFunc: method is nil but IAMAPI.CreateUserRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateUserRequest.Lock()
	mock.calls.CreateUserRequest = append(mock.calls.CreateUserRequest, callInfo)
	lockIAMAPIMockCreateUserRequest.Unlock()
	return mock.CreateUserRequestFunc(in1)
}

// CreateUserRequestCalls gets all the calls that were made to CreateUserRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateUserRequestCalls())
func (mock *IAMAPIMock) CreateUserRequestCalls() []struct {
	In1 *iam.CreateUserInput
} {
	var calls []struct {
		In1 *iam.CreateUserInput
	}
	lockIAMAPIMockCreateUserRequest.RLock()
	calls = mock.calls.CreateUserRequest
	lockIAMAPIMockCreateUserRequest.RUnlock()
	return calls
}

// CreateUserWithContext calls CreateUserWithContextFunc.
func (mock *IAMAPIMock) CreateUserWithContext(in1 context.Context, in2 *iam.CreateUserInput, in3 ...request.Option) (*iam.CreateUserOutput, error) {
	if mock.CreateUserWithContextFunc == nil {
		panic("IAMAPIMock.CreateUserWithContextFunc: method is nil but IAMAPI.CreateUserWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateUserInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateUserWithContext.Lock()
	mock.calls.CreateUserWithContext = append(mock.calls.CreateUserWithContext, callInfo)
	lockIAMAPIMockCreateUserWithContext.Unlock()
	return mock.CreateUserWithContextFunc(in1, in2, in3...)
}

// CreateUserWithContextCalls gets all the calls that were made to CreateUserWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateUserWithContextCalls())
func (mock *IAMAPIMock) CreateUserWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateUserInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateUserInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateUserWithContext.RLock()
	calls = mock.calls.CreateUserWithContext
	lockIAMAPIMockCreateUserWithContext.RUnlock()
	return calls
}

// CreateVirtualMFADevice calls CreateVirtualMFADeviceFunc.
func (mock *IAMAPIMock) CreateVirtualMFADevice(in1 *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	if mock.CreateVirtualMFADeviceFunc == nil {
		panic("IAMAPIMock.CreateVirtualMFADeviceFunc: method is nil but IAMAPI.CreateVirtualMFADevice was just called")
	}
	callInfo := struct {
		In1 *iam.CreateVirtualMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateVirtualMFADevice.Lock()
	mock.calls.CreateVirtualMFADevice = append(mock.calls.CreateVirtualMFADevice, callInfo)
	lockIAMAPIMockCreateVirtualMFADevice.Unlock()
	return mock.CreateVirtualMFADeviceFunc(in1)
}

// CreateVirtualMFADeviceCalls gets all the calls that were made to CreateVirtualMFADevice.
// Check the length with:
//     len(mockedIAMAPI.CreateVirtualMFADeviceCalls())
func (mock *IAMAPIMock) CreateVirtualMFADeviceCalls() []struct {
	In1 *iam.CreateVirtualMFADeviceInput
} {
	var calls []struct {
		In1 *iam.CreateVirtualMFADeviceInput
	}
	lockIAMAPIMockCreateVirtualMFADevice.RLock()
	calls = mock.calls.CreateVirtualMFADevice
	lockIAMAPIMockCreateVirtualMFADevice.RUnlock()
	return calls
}

// CreateVirtualMFADeviceRequest calls CreateVirtualMFADeviceRequestFunc.
func (mock *IAMAPIMock) CreateVirtualMFADeviceRequest(in1 *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput) {
	if mock.CreateVirtualMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.CreateVirtualMFADeviceRequestFunc: method is nil but IAMAPI.CreateVirtualMFADeviceRequest was just called")
	}
	callInfo := struct {
		In1 *iam.CreateVirtualMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockCreateVirtualMFADeviceRequest.Lock()
	mock.calls.CreateVirtualMFADeviceRequest = append(mock.calls.CreateVirtualMFADeviceRequest, callInfo)
	lockIAMAPIMockCreateVirtualMFADeviceRequest.Unlock()
	return mock.CreateVirtualMFADeviceRequestFunc(in1)
}

// CreateVirtualMFADeviceRequestCalls gets all the calls that were made to CreateVirtualMFADeviceRequest.
// Check the length with:
//     len(mockedIAMAPI.CreateVirtualMFADeviceRequestCalls())
func (mock *IAMAPIMock) CreateVirtualMFADeviceRequestCalls() []struct {
	In1 *iam.CreateVirtualMFADeviceInput
} {
	var calls []struct {
		In1 *iam.CreateVirtualMFADeviceInput
	}
	lockIAMAPIMockCreateVirtualMFADeviceRequest.RLock()
	calls = mock.calls.CreateVirtualMFADeviceRequest
	lockIAMAPIMockCreateVirtualMFADeviceRequest.RUnlock()
	return calls
}

// CreateVirtualMFADeviceWithContext calls CreateVirtualMFADeviceWithContextFunc.
func (mock *IAMAPIMock) CreateVirtualMFADeviceWithContext(in1 context.Context, in2 *iam.CreateVirtualMFADeviceInput, in3 ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
	if mock.CreateVirtualMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.CreateVirtualMFADeviceWithContextFunc: method is nil but IAMAPI.CreateVirtualMFADeviceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.CreateVirtualMFADeviceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockCreateVirtualMFADeviceWithContext.Lock()
	mock.calls.CreateVirtualMFADeviceWithContext = append(mock.calls.CreateVirtualMFADeviceWithContext, callInfo)
	lockIAMAPIMockCreateVirtualMFADeviceWithContext.Unlock()
	return mock.CreateVirtualMFADeviceWithContextFunc(in1, in2, in3...)
}

// CreateVirtualMFADeviceWithContextCalls gets all the calls that were made to CreateVirtualMFADeviceWithContext.
// Check the length with:
//     len(mockedIAMAPI.CreateVirtualMFADeviceWithContextCalls())
func (mock *IAMAPIMock) CreateVirtualMFADeviceWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.CreateVirtualMFADeviceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.CreateVirtualMFADeviceInput
		In3 []request.Option
	}
	lockIAMAPIMockCreateVirtualMFADeviceWithContext.RLock()
	calls = mock.calls.CreateVirtualMFADeviceWithContext
	lockIAMAPIMockCreateVirtualMFADeviceWithContext.RUnlock()
	return calls
}

// DeactivateMFADevice calls DeactivateMFADeviceFunc.
func (mock *IAMAPIMock) DeactivateMFADevice(in1 *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	if mock.DeactivateMFADeviceFunc == nil {
		panic("IAMAPIMock.DeactivateMFADeviceFunc: method is nil but IAMAPI.DeactivateMFADevice was just called")
	}
	callInfo := struct {
		In1 *iam.DeactivateMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeactivateMFADevice.Lock()
	mock.calls.DeactivateMFADevice = append(mock.calls.DeactivateMFADevice, callInfo)
	lockIAMAPIMockDeactivateMFADevice.Unlock()
	return mock.DeactivateMFADeviceFunc(in1)
}

// DeactivateMFADeviceCalls gets all the calls that were made to DeactivateMFADevice.
// Check the length with:
//     len(mockedIAMAPI.DeactivateMFADeviceCalls())
func (mock *IAMAPIMock) DeactivateMFADeviceCalls() []struct {
	In1 *iam.DeactivateMFADeviceInput
} {
	var calls []struct {
		In1 *iam.DeactivateMFADeviceInput
	}
	lockIAMAPIMockDeactivateMFADevice.RLock()
	calls = mock.calls.DeactivateMFADevice
	lockIAMAPIMockDeactivateMFADevice.RUnlock()
	return calls
}

// DeactivateMFADeviceRequest calls DeactivateMFADeviceRequestFunc.
func (mock *IAMAPIMock) DeactivateMFADeviceRequest(in1 *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput) {
	if mock.DeactivateMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.DeactivateMFADeviceRequestFunc: method is nil but IAMAPI.DeactivateMFADeviceRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeactivateMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeactivateMFADeviceRequest.Lock()
	mock.calls.DeactivateMFADeviceRequest = append(mock.calls.DeactivateMFADeviceRequest, callInfo)
	lockIAMAPIMockDeactivateMFADeviceRequest.Unlock()
	return mock.DeactivateMFADeviceRequestFunc(in1)
}

// DeactivateMFADeviceRequestCalls gets all the calls that were made to DeactivateMFADeviceRequest.
// Check the length with:
//     len(mockedIAMAPI.DeactivateMFADeviceRequestCalls())
func (mock *IAMAPIMock) DeactivateMFADeviceRequestCalls() []struct {
	In1 *iam.DeactivateMFADeviceInput
} {
	var calls []struct {
		In1 *iam.DeactivateMFADeviceInput
	}
	lockIAMAPIMockDeactivateMFADeviceRequest.RLock()
	calls = mock.calls.DeactivateMFADeviceRequest
	lockIAMAPIMockDeactivateMFADeviceRequest.RUnlock()
	return calls
}

// DeactivateMFADeviceWithContext calls DeactivateMFADeviceWithContextFunc.
func (mock *IAMAPIMock) DeactivateMFADeviceWithContext(in1 context.Context, in2 *iam.DeactivateMFADeviceInput, in3 ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
	if mock.DeactivateMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.DeactivateMFADeviceWithContextFunc: method is nil but IAMAPI.DeactivateMFADeviceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeactivateMFADeviceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeactivateMFADeviceWithContext.Lock()
	mock.calls.DeactivateMFADeviceWithContext = append(mock.calls.DeactivateMFADeviceWithContext, callInfo)
	lockIAMAPIMockDeactivateMFADeviceWithContext.Unlock()
	return mock.DeactivateMFADeviceWithContextFunc(in1, in2, in3...)
}

// DeactivateMFADeviceWithContextCalls gets all the calls that were made to DeactivateMFADeviceWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeactivateMFADeviceWithContextCalls())
func (mock *IAMAPIMock) DeactivateMFADeviceWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeactivateMFADeviceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeactivateMFADeviceInput
		In3 []request.Option
	}
	lockIAMAPIMockDeactivateMFADeviceWithContext.RLock()
	calls = mock.calls.DeactivateMFADeviceWithContext
	lockIAMAPIMockDeactivateMFADeviceWithContext.RUnlock()
	return calls
}

// DeleteAccessKey calls DeleteAccessKeyFunc.
func (mock *IAMAPIMock) DeleteAccessKey(in1 *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	if mock.DeleteAccessKeyFunc == nil {
		panic("IAMAPIMock.DeleteAccessKeyFunc: method is nil but IAMAPI.DeleteAccessKey was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteAccessKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteAccessKey.Lock()
	mock.calls.DeleteAccessKey = append(mock.calls.DeleteAccessKey, callInfo)
	lockIAMAPIMockDeleteAccessKey.Unlock()
	return mock.DeleteAccessKeyFunc(in1)
}

// DeleteAccessKeyCalls gets all the calls that were made to DeleteAccessKey.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccessKeyCalls())
func (mock *IAMAPIMock) DeleteAccessKeyCalls() []struct {
	In1 *iam.DeleteAccessKeyInput
} {
	var calls []struct {
		In1 *iam.DeleteAccessKeyInput
	}
	lockIAMAPIMockDeleteAccessKey.RLock()
	calls = mock.calls.DeleteAccessKey
	lockIAMAPIMockDeleteAccessKey.RUnlock()
	return calls
}

// DeleteAccessKeyRequest calls DeleteAccessKeyRequestFunc.
func (mock *IAMAPIMock) DeleteAccessKeyRequest(in1 *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput) {
	if mock.DeleteAccessKeyRequestFunc == nil {
		panic("IAMAPIMock.DeleteAccessKeyRequestFunc: method is nil but IAMAPI.DeleteAccessKeyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteAccessKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteAccessKeyRequest.Lock()
	mock.calls.DeleteAccessKeyRequest = append(mock.calls.DeleteAccessKeyRequest, callInfo)
	lockIAMAPIMockDeleteAccessKeyRequest.Unlock()
	return mock.DeleteAccessKeyRequestFunc(in1)
}

// DeleteAccessKeyRequestCalls gets all the calls that were made to DeleteAccessKeyRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccessKeyRequestCalls())
func (mock *IAMAPIMock) DeleteAccessKeyRequestCalls() []struct {
	In1 *iam.DeleteAccessKeyInput
} {
	var calls []struct {
		In1 *iam.DeleteAccessKeyInput
	}
	lockIAMAPIMockDeleteAccessKeyRequest.RLock()
	calls = mock.calls.DeleteAccessKeyRequest
	lockIAMAPIMockDeleteAccessKeyRequest.RUnlock()
	return calls
}

// DeleteAccessKeyWithContext calls DeleteAccessKeyWithContextFunc.
func (mock *IAMAPIMock) DeleteAccessKeyWithContext(in1 context.Context, in2 *iam.DeleteAccessKeyInput, in3 ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
	if mock.DeleteAccessKeyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteAccessKeyWithContextFunc: method is nil but IAMAPI.DeleteAccessKeyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteAccessKeyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteAccessKeyWithContext.Lock()
	mock.calls.DeleteAccessKeyWithContext = append(mock.calls.DeleteAccessKeyWithContext, callInfo)
	lockIAMAPIMockDeleteAccessKeyWithContext.Unlock()
	return mock.DeleteAccessKeyWithContextFunc(in1, in2, in3...)
}

// DeleteAccessKeyWithContextCalls gets all the calls that were made to DeleteAccessKeyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccessKeyWithContextCalls())
func (mock *IAMAPIMock) DeleteAccessKeyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteAccessKeyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteAccessKeyInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteAccessKeyWithContext.RLock()
	calls = mock.calls.DeleteAccessKeyWithContext
	lockIAMAPIMockDeleteAccessKeyWithContext.RUnlock()
	return calls
}

// DeleteAccountAlias calls DeleteAccountAliasFunc.
func (mock *IAMAPIMock) DeleteAccountAlias(in1 *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	if mock.DeleteAccountAliasFunc == nil {
		panic("IAMAPIMock.DeleteAccountAliasFunc: method is nil but IAMAPI.DeleteAccountAlias was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteAccountAliasInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteAccountAlias.Lock()
	mock.calls.DeleteAccountAlias = append(mock.calls.DeleteAccountAlias, callInfo)
	lockIAMAPIMockDeleteAccountAlias.Unlock()
	return mock.DeleteAccountAliasFunc(in1)
}

// DeleteAccountAliasCalls gets all the calls that were made to DeleteAccountAlias.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccountAliasCalls())
func (mock *IAMAPIMock) DeleteAccountAliasCalls() []struct {
	In1 *iam.DeleteAccountAliasInput
} {
	var calls []struct {
		In1 *iam.DeleteAccountAliasInput
	}
	lockIAMAPIMockDeleteAccountAlias.RLock()
	calls = mock.calls.DeleteAccountAlias
	lockIAMAPIMockDeleteAccountAlias.RUnlock()
	return calls
}

// DeleteAccountAliasRequest calls DeleteAccountAliasRequestFunc.
func (mock *IAMAPIMock) DeleteAccountAliasRequest(in1 *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput) {
	if mock.DeleteAccountAliasRequestFunc == nil {
		panic("IAMAPIMock.DeleteAccountAliasRequestFunc: method is nil but IAMAPI.DeleteAccountAliasRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteAccountAliasInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteAccountAliasRequest.Lock()
	mock.calls.DeleteAccountAliasRequest = append(mock.calls.DeleteAccountAliasRequest, callInfo)
	lockIAMAPIMockDeleteAccountAliasRequest.Unlock()
	return mock.DeleteAccountAliasRequestFunc(in1)
}

// DeleteAccountAliasRequestCalls gets all the calls that were made to DeleteAccountAliasRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccountAliasRequestCalls())
func (mock *IAMAPIMock) DeleteAccountAliasRequestCalls() []struct {
	In1 *iam.DeleteAccountAliasInput
} {
	var calls []struct {
		In1 *iam.DeleteAccountAliasInput
	}
	lockIAMAPIMockDeleteAccountAliasRequest.RLock()
	calls = mock.calls.DeleteAccountAliasRequest
	lockIAMAPIMockDeleteAccountAliasRequest.RUnlock()
	return calls
}

// DeleteAccountAliasWithContext calls DeleteAccountAliasWithContextFunc.
func (mock *IAMAPIMock) DeleteAccountAliasWithContext(in1 context.Context, in2 *iam.DeleteAccountAliasInput, in3 ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
	if mock.DeleteAccountAliasWithContextFunc == nil {
		panic("IAMAPIMock.DeleteAccountAliasWithContextFunc: method is nil but IAMAPI.DeleteAccountAliasWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteAccountAliasInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteAccountAliasWithContext.Lock()
	mock.calls.DeleteAccountAliasWithContext = append(mock.calls.DeleteAccountAliasWithContext, callInfo)
	lockIAMAPIMockDeleteAccountAliasWithContext.Unlock()
	return mock.DeleteAccountAliasWithContextFunc(in1, in2, in3...)
}

// DeleteAccountAliasWithContextCalls gets all the calls that were made to DeleteAccountAliasWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccountAliasWithContextCalls())
func (mock *IAMAPIMock) DeleteAccountAliasWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteAccountAliasInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteAccountAliasInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteAccountAliasWithContext.RLock()
	calls = mock.calls.DeleteAccountAliasWithContext
	lockIAMAPIMockDeleteAccountAliasWithContext.RUnlock()
	return calls
}

// DeleteAccountPasswordPolicy calls DeleteAccountPasswordPolicyFunc.
func (mock *IAMAPIMock) DeleteAccountPasswordPolicy(in1 *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	if mock.DeleteAccountPasswordPolicyFunc == nil {
		panic("IAMAPIMock.DeleteAccountPasswordPolicyFunc: method is nil but IAMAPI.DeleteAccountPasswordPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteAccountPasswordPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteAccountPasswordPolicy.Lock()
	mock.calls.DeleteAccountPasswordPolicy = append(mock.calls.DeleteAccountPasswordPolicy, callInfo)
	lockIAMAPIMockDeleteAccountPasswordPolicy.Unlock()
	return mock.DeleteAccountPasswordPolicyFunc(in1)
}

// DeleteAccountPasswordPolicyCalls gets all the calls that were made to DeleteAccountPasswordPolicy.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccountPasswordPolicyCalls())
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyCalls() []struct {
	In1 *iam.DeleteAccountPasswordPolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteAccountPasswordPolicyInput
	}
	lockIAMAPIMockDeleteAccountPasswordPolicy.RLock()
	calls = mock.calls.DeleteAccountPasswordPolicy
	lockIAMAPIMockDeleteAccountPasswordPolicy.RUnlock()
	return calls
}

// DeleteAccountPasswordPolicyRequest calls DeleteAccountPasswordPolicyRequestFunc.
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyRequest(in1 *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput) {
	if mock.DeleteAccountPasswordPolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteAccountPasswordPolicyRequestFunc: method is nil but IAMAPI.DeleteAccountPasswordPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteAccountPasswordPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteAccountPasswordPolicyRequest.Lock()
	mock.calls.DeleteAccountPasswordPolicyRequest = append(mock.calls.DeleteAccountPasswordPolicyRequest, callInfo)
	lockIAMAPIMockDeleteAccountPasswordPolicyRequest.Unlock()
	return mock.DeleteAccountPasswordPolicyRequestFunc(in1)
}

// DeleteAccountPasswordPolicyRequestCalls gets all the calls that were made to DeleteAccountPasswordPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccountPasswordPolicyRequestCalls())
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyRequestCalls() []struct {
	In1 *iam.DeleteAccountPasswordPolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteAccountPasswordPolicyInput
	}
	lockIAMAPIMockDeleteAccountPasswordPolicyRequest.RLock()
	calls = mock.calls.DeleteAccountPasswordPolicyRequest
	lockIAMAPIMockDeleteAccountPasswordPolicyRequest.RUnlock()
	return calls
}

// DeleteAccountPasswordPolicyWithContext calls DeleteAccountPasswordPolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyWithContext(in1 context.Context, in2 *iam.DeleteAccountPasswordPolicyInput, in3 ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	if mock.DeleteAccountPasswordPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteAccountPasswordPolicyWithContextFunc: method is nil but IAMAPI.DeleteAccountPasswordPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteAccountPasswordPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteAccountPasswordPolicyWithContext.Lock()
	mock.calls.DeleteAccountPasswordPolicyWithContext = append(mock.calls.DeleteAccountPasswordPolicyWithContext, callInfo)
	lockIAMAPIMockDeleteAccountPasswordPolicyWithContext.Unlock()
	return mock.DeleteAccountPasswordPolicyWithContextFunc(in1, in2, in3...)
}

// DeleteAccountPasswordPolicyWithContextCalls gets all the calls that were made to DeleteAccountPasswordPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteAccountPasswordPolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteAccountPasswordPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteAccountPasswordPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteAccountPasswordPolicyWithContext.RLock()
	calls = mock.calls.DeleteAccountPasswordPolicyWithContext
	lockIAMAPIMockDeleteAccountPasswordPolicyWithContext.RUnlock()
	return calls
}

// DeleteGroup calls DeleteGroupFunc.
func (mock *IAMAPIMock) DeleteGroup(in1 *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	if mock.DeleteGroupFunc == nil {
		panic("IAMAPIMock.DeleteGroupFunc: method is nil but IAMAPI.DeleteGroup was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteGroup.Lock()
	mock.calls.DeleteGroup = append(mock.calls.DeleteGroup, callInfo)
	lockIAMAPIMockDeleteGroup.Unlock()
	return mock.DeleteGroupFunc(in1)
}

// DeleteGroupCalls gets all the calls that were made to DeleteGroup.
// Check the length with:
//     len(mockedIAMAPI.DeleteGroupCalls())
func (mock *IAMAPIMock) DeleteGroupCalls() []struct {
	In1 *iam.DeleteGroupInput
} {
	var calls []struct {
		In1 *iam.DeleteGroupInput
	}
	lockIAMAPIMockDeleteGroup.RLock()
	calls = mock.calls.DeleteGroup
	lockIAMAPIMockDeleteGroup.RUnlock()
	return calls
}

// DeleteGroupPolicy calls DeleteGroupPolicyFunc.
func (mock *IAMAPIMock) DeleteGroupPolicy(in1 *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	if mock.DeleteGroupPolicyFunc == nil {
		panic("IAMAPIMock.DeleteGroupPolicyFunc: method is nil but IAMAPI.DeleteGroupPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteGroupPolicy.Lock()
	mock.calls.DeleteGroupPolicy = append(mock.calls.DeleteGroupPolicy, callInfo)
	lockIAMAPIMockDeleteGroupPolicy.Unlock()
	return mock.DeleteGroupPolicyFunc(in1)
}

// DeleteGroupPolicyCalls gets all the calls that were made to DeleteGroupPolicy.
// Check the length with:
//     len(mockedIAMAPI.DeleteGroupPolicyCalls())
func (mock *IAMAPIMock) DeleteGroupPolicyCalls() []struct {
	In1 *iam.DeleteGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteGroupPolicyInput
	}
	lockIAMAPIMockDeleteGroupPolicy.RLock()
	calls = mock.calls.DeleteGroupPolicy
	lockIAMAPIMockDeleteGroupPolicy.RUnlock()
	return calls
}

// DeleteGroupPolicyRequest calls DeleteGroupPolicyRequestFunc.
func (mock *IAMAPIMock) DeleteGroupPolicyRequest(in1 *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput) {
	if mock.DeleteGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteGroupPolicyRequestFunc: method is nil but IAMAPI.DeleteGroupPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteGroupPolicyRequest.Lock()
	mock.calls.DeleteGroupPolicyRequest = append(mock.calls.DeleteGroupPolicyRequest, callInfo)
	lockIAMAPIMockDeleteGroupPolicyRequest.Unlock()
	return mock.DeleteGroupPolicyRequestFunc(in1)
}

// DeleteGroupPolicyRequestCalls gets all the calls that were made to DeleteGroupPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteGroupPolicyRequestCalls())
func (mock *IAMAPIMock) DeleteGroupPolicyRequestCalls() []struct {
	In1 *iam.DeleteGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteGroupPolicyInput
	}
	lockIAMAPIMockDeleteGroupPolicyRequest.RLock()
	calls = mock.calls.DeleteGroupPolicyRequest
	lockIAMAPIMockDeleteGroupPolicyRequest.RUnlock()
	return calls
}

// DeleteGroupPolicyWithContext calls DeleteGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteGroupPolicyWithContext(in1 context.Context, in2 *iam.DeleteGroupPolicyInput, in3 ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
	if mock.DeleteGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteGroupPolicyWithContextFunc: method is nil but IAMAPI.DeleteGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteGroupPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteGroupPolicyWithContext.Lock()
	mock.calls.DeleteGroupPolicyWithContext = append(mock.calls.DeleteGroupPolicyWithContext, callInfo)
	lockIAMAPIMockDeleteGroupPolicyWithContext.Unlock()
	return mock.DeleteGroupPolicyWithContextFunc(in1, in2, in3...)
}

// DeleteGroupPolicyWithContextCalls gets all the calls that were made to DeleteGroupPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteGroupPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteGroupPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteGroupPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteGroupPolicyWithContext.RLock()
	calls = mock.calls.DeleteGroupPolicyWithContext
	lockIAMAPIMockDeleteGroupPolicyWithContext.RUnlock()
	return calls
}

// DeleteGroupRequest calls DeleteGroupRequestFunc.
func (mock *IAMAPIMock) DeleteGroupRequest(in1 *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput) {
	if mock.DeleteGroupRequestFunc == nil {
		panic("IAMAPIMock.DeleteGroupRequestFunc: method is nil but IAMAPI.DeleteGroupRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteGroupRequest.Lock()
	mock.calls.DeleteGroupRequest = append(mock.calls.DeleteGroupRequest, callInfo)
	lockIAMAPIMockDeleteGroupRequest.Unlock()
	return mock.DeleteGroupRequestFunc(in1)
}

// DeleteGroupRequestCalls gets all the calls that were made to DeleteGroupRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteGroupRequestCalls())
func (mock *IAMAPIMock) DeleteGroupRequestCalls() []struct {
	In1 *iam.DeleteGroupInput
} {
	var calls []struct {
		In1 *iam.DeleteGroupInput
	}
	lockIAMAPIMockDeleteGroupRequest.RLock()
	calls = mock.calls.DeleteGroupRequest
	lockIAMAPIMockDeleteGroupRequest.RUnlock()
	return calls
}

// DeleteGroupWithContext calls DeleteGroupWithContextFunc.
func (mock *IAMAPIMock) DeleteGroupWithContext(in1 context.Context, in2 *iam.DeleteGroupInput, in3 ...request.Option) (*iam.DeleteGroupOutput, error) {
	if mock.DeleteGroupWithContextFunc == nil {
		panic("IAMAPIMock.DeleteGroupWithContextFunc: method is nil but IAMAPI.DeleteGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteGroupWithContext.Lock()
	mock.calls.DeleteGroupWithContext = append(mock.calls.DeleteGroupWithContext, callInfo)
	lockIAMAPIMockDeleteGroupWithContext.Unlock()
	return mock.DeleteGroupWithContextFunc(in1, in2, in3...)
}

// DeleteGroupWithContextCalls gets all the calls that were made to DeleteGroupWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteGroupWithContextCalls())
func (mock *IAMAPIMock) DeleteGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteGroupInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteGroupWithContext.RLock()
	calls = mock.calls.DeleteGroupWithContext
	lockIAMAPIMockDeleteGroupWithContext.RUnlock()
	return calls
}

// DeleteInstanceProfile calls DeleteInstanceProfileFunc.
func (mock *IAMAPIMock) DeleteInstanceProfile(in1 *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	if mock.DeleteInstanceProfileFunc == nil {
		panic("IAMAPIMock.DeleteInstanceProfileFunc: method is nil but IAMAPI.DeleteInstanceProfile was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteInstanceProfile.Lock()
	mock.calls.DeleteInstanceProfile = append(mock.calls.DeleteInstanceProfile, callInfo)
	lockIAMAPIMockDeleteInstanceProfile.Unlock()
	return mock.DeleteInstanceProfileFunc(in1)
}

// DeleteInstanceProfileCalls gets all the calls that were made to DeleteInstanceProfile.
// Check the length with:
//     len(mockedIAMAPI.DeleteInstanceProfileCalls())
func (mock *IAMAPIMock) DeleteInstanceProfileCalls() []struct {
	In1 *iam.DeleteInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.DeleteInstanceProfileInput
	}
	lockIAMAPIMockDeleteInstanceProfile.RLock()
	calls = mock.calls.DeleteInstanceProfile
	lockIAMAPIMockDeleteInstanceProfile.RUnlock()
	return calls
}

// DeleteInstanceProfileRequest calls DeleteInstanceProfileRequestFunc.
func (mock *IAMAPIMock) DeleteInstanceProfileRequest(in1 *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput) {
	if mock.DeleteInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.DeleteInstanceProfileRequestFunc: method is nil but IAMAPI.DeleteInstanceProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteInstanceProfileRequest.Lock()
	mock.calls.DeleteInstanceProfileRequest = append(mock.calls.DeleteInstanceProfileRequest, callInfo)
	lockIAMAPIMockDeleteInstanceProfileRequest.Unlock()
	return mock.DeleteInstanceProfileRequestFunc(in1)
}

// DeleteInstanceProfileRequestCalls gets all the calls that were made to DeleteInstanceProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteInstanceProfileRequestCalls())
func (mock *IAMAPIMock) DeleteInstanceProfileRequestCalls() []struct {
	In1 *iam.DeleteInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.DeleteInstanceProfileInput
	}
	lockIAMAPIMockDeleteInstanceProfileRequest.RLock()
	calls = mock.calls.DeleteInstanceProfileRequest
	lockIAMAPIMockDeleteInstanceProfileRequest.RUnlock()
	return calls
}

// DeleteInstanceProfileWithContext calls DeleteInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) DeleteInstanceProfileWithContext(in1 context.Context, in2 *iam.DeleteInstanceProfileInput, in3 ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
	if mock.DeleteInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.DeleteInstanceProfileWithContextFunc: method is nil but IAMAPI.DeleteInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteInstanceProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteInstanceProfileWithContext.Lock()
	mock.calls.DeleteInstanceProfileWithContext = append(mock.calls.DeleteInstanceProfileWithContext, callInfo)
	lockIAMAPIMockDeleteInstanceProfileWithContext.Unlock()
	return mock.DeleteInstanceProfileWithContextFunc(in1, in2, in3...)
}

// DeleteInstanceProfileWithContextCalls gets all the calls that were made to DeleteInstanceProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) DeleteInstanceProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteInstanceProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteInstanceProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteInstanceProfileWithContext.RLock()
	calls = mock.calls.DeleteInstanceProfileWithContext
	lockIAMAPIMockDeleteInstanceProfileWithContext.RUnlock()
	return calls
}

// DeleteLoginProfile calls DeleteLoginProfileFunc.
func (mock *IAMAPIMock) DeleteLoginProfile(in1 *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	if mock.DeleteLoginProfileFunc == nil {
		panic("IAMAPIMock.DeleteLoginProfileFunc: method is nil but IAMAPI.DeleteLoginProfile was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteLoginProfile.Lock()
	mock.calls.DeleteLoginProfile = append(mock.calls.DeleteLoginProfile, callInfo)
	lockIAMAPIMockDeleteLoginProfile.Unlock()
	return mock.DeleteLoginProfileFunc(in1)
}

// DeleteLoginProfileCalls gets all the calls that were made to DeleteLoginProfile.
// Check the length with:
//     len(mockedIAMAPI.DeleteLoginProfileCalls())
func (mock *IAMAPIMock) DeleteLoginProfileCalls() []struct {
	In1 *iam.DeleteLoginProfileInput
} {
	var calls []struct {
		In1 *iam.DeleteLoginProfileInput
	}
	lockIAMAPIMockDeleteLoginProfile.RLock()
	calls = mock.calls.DeleteLoginProfile
	lockIAMAPIMockDeleteLoginProfile.RUnlock()
	return calls
}

// DeleteLoginProfileRequest calls DeleteLoginProfileRequestFunc.
func (mock *IAMAPIMock) DeleteLoginProfileRequest(in1 *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput) {
	if mock.DeleteLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.DeleteLoginProfileRequestFunc: method is nil but IAMAPI.DeleteLoginProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteLoginProfileRequest.Lock()
	mock.calls.DeleteLoginProfileRequest = append(mock.calls.DeleteLoginProfileRequest, callInfo)
	lockIAMAPIMockDeleteLoginProfileRequest.Unlock()
	return mock.DeleteLoginProfileRequestFunc(in1)
}

// DeleteLoginProfileRequestCalls gets all the calls that were made to DeleteLoginProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteLoginProfileRequestCalls())
func (mock *IAMAPIMock) DeleteLoginProfileRequestCalls() []struct {
	In1 *iam.DeleteLoginProfileInput
} {
	var calls []struct {
		In1 *iam.DeleteLoginProfileInput
	}
	lockIAMAPIMockDeleteLoginProfileRequest.RLock()
	calls = mock.calls.DeleteLoginProfileRequest
	lockIAMAPIMockDeleteLoginProfileRequest.RUnlock()
	return calls
}

// DeleteLoginProfileWithContext calls DeleteLoginProfileWithContextFunc.
func (mock *IAMAPIMock) DeleteLoginProfileWithContext(in1 context.Context, in2 *iam.DeleteLoginProfileInput, in3 ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
	if mock.DeleteLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.DeleteLoginProfileWithContextFunc: method is nil but IAMAPI.DeleteLoginProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteLoginProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteLoginProfileWithContext.Lock()
	mock.calls.DeleteLoginProfileWithContext = append(mock.calls.DeleteLoginProfileWithContext, callInfo)
	lockIAMAPIMockDeleteLoginProfileWithContext.Unlock()
	return mock.DeleteLoginProfileWithContextFunc(in1, in2, in3...)
}

// DeleteLoginProfileWithContextCalls gets all the calls that were made to DeleteLoginProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteLoginProfileWithContextCalls())
func (mock *IAMAPIMock) DeleteLoginProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteLoginProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteLoginProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteLoginProfileWithContext.RLock()
	calls = mock.calls.DeleteLoginProfileWithContext
	lockIAMAPIMockDeleteLoginProfileWithContext.RUnlock()
	return calls
}

// DeleteOpenIDConnectProvider calls DeleteOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) DeleteOpenIDConnectProvider(in1 *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	if mock.DeleteOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.DeleteOpenIDConnectProviderFunc: method is nil but IAMAPI.DeleteOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteOpenIDConnectProvider.Lock()
	mock.calls.DeleteOpenIDConnectProvider = append(mock.calls.DeleteOpenIDConnectProvider, callInfo)
	lockIAMAPIMockDeleteOpenIDConnectProvider.Unlock()
	return mock.DeleteOpenIDConnectProviderFunc(in1)
}

// DeleteOpenIDConnectProviderCalls gets all the calls that were made to DeleteOpenIDConnectProvider.
// Check the length with:
//     len(mockedIAMAPI.DeleteOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderCalls() []struct {
	In1 *iam.DeleteOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.DeleteOpenIDConnectProviderInput
	}
	lockIAMAPIMockDeleteOpenIDConnectProvider.RLock()
	calls = mock.calls.DeleteOpenIDConnectProvider
	lockIAMAPIMockDeleteOpenIDConnectProvider.RUnlock()
	return calls
}

// DeleteOpenIDConnectProviderRequest calls DeleteOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderRequest(in1 *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput) {
	if mock.DeleteOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.DeleteOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.DeleteOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteOpenIDConnectProviderRequest.Lock()
	mock.calls.DeleteOpenIDConnectProviderRequest = append(mock.calls.DeleteOpenIDConnectProviderRequest, callInfo)
	lockIAMAPIMockDeleteOpenIDConnectProviderRequest.Unlock()
	return mock.DeleteOpenIDConnectProviderRequestFunc(in1)
}

// DeleteOpenIDConnectProviderRequestCalls gets all the calls that were made to DeleteOpenIDConnectProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderRequestCalls() []struct {
	In1 *iam.DeleteOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.DeleteOpenIDConnectProviderInput
	}
	lockIAMAPIMockDeleteOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.DeleteOpenIDConnectProviderRequest
	lockIAMAPIMockDeleteOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// DeleteOpenIDConnectProviderWithContext calls DeleteOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderWithContext(in1 context.Context, in2 *iam.DeleteOpenIDConnectProviderInput, in3 ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	if mock.DeleteOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.DeleteOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.DeleteOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteOpenIDConnectProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteOpenIDConnectProviderWithContext.Lock()
	mock.calls.DeleteOpenIDConnectProviderWithContext = append(mock.calls.DeleteOpenIDConnectProviderWithContext, callInfo)
	lockIAMAPIMockDeleteOpenIDConnectProviderWithContext.Unlock()
	return mock.DeleteOpenIDConnectProviderWithContextFunc(in1, in2, in3...)
}

// DeleteOpenIDConnectProviderWithContextCalls gets all the calls that were made to DeleteOpenIDConnectProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteOpenIDConnectProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteOpenIDConnectProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.DeleteOpenIDConnectProviderWithContext
	lockIAMAPIMockDeleteOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// DeletePolicy calls DeletePolicyFunc.
func (mock *IAMAPIMock) DeletePolicy(in1 *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	if mock.DeletePolicyFunc == nil {
		panic("IAMAPIMock.DeletePolicyFunc: method is nil but IAMAPI.DeletePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DeletePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeletePolicy.Lock()
	mock.calls.DeletePolicy = append(mock.calls.DeletePolicy, callInfo)
	lockIAMAPIMockDeletePolicy.Unlock()
	return mock.DeletePolicyFunc(in1)
}

// DeletePolicyCalls gets all the calls that were made to DeletePolicy.
// Check the length with:
//     len(mockedIAMAPI.DeletePolicyCalls())
func (mock *IAMAPIMock) DeletePolicyCalls() []struct {
	In1 *iam.DeletePolicyInput
} {
	var calls []struct {
		In1 *iam.DeletePolicyInput
	}
	lockIAMAPIMockDeletePolicy.RLock()
	calls = mock.calls.DeletePolicy
	lockIAMAPIMockDeletePolicy.RUnlock()
	return calls
}

// DeletePolicyRequest calls DeletePolicyRequestFunc.
func (mock *IAMAPIMock) DeletePolicyRequest(in1 *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput) {
	if mock.DeletePolicyRequestFunc == nil {
		panic("IAMAPIMock.DeletePolicyRequestFunc: method is nil but IAMAPI.DeletePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeletePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeletePolicyRequest.Lock()
	mock.calls.DeletePolicyRequest = append(mock.calls.DeletePolicyRequest, callInfo)
	lockIAMAPIMockDeletePolicyRequest.Unlock()
	return mock.DeletePolicyRequestFunc(in1)
}

// DeletePolicyRequestCalls gets all the calls that were made to DeletePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DeletePolicyRequestCalls())
func (mock *IAMAPIMock) DeletePolicyRequestCalls() []struct {
	In1 *iam.DeletePolicyInput
} {
	var calls []struct {
		In1 *iam.DeletePolicyInput
	}
	lockIAMAPIMockDeletePolicyRequest.RLock()
	calls = mock.calls.DeletePolicyRequest
	lockIAMAPIMockDeletePolicyRequest.RUnlock()
	return calls
}

// DeletePolicyVersion calls DeletePolicyVersionFunc.
func (mock *IAMAPIMock) DeletePolicyVersion(in1 *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	if mock.DeletePolicyVersionFunc == nil {
		panic("IAMAPIMock.DeletePolicyVersionFunc: method is nil but IAMAPI.DeletePolicyVersion was just called")
	}
	callInfo := struct {
		In1 *iam.DeletePolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeletePolicyVersion.Lock()
	mock.calls.DeletePolicyVersion = append(mock.calls.DeletePolicyVersion, callInfo)
	lockIAMAPIMockDeletePolicyVersion.Unlock()
	return mock.DeletePolicyVersionFunc(in1)
}

// DeletePolicyVersionCalls gets all the calls that were made to DeletePolicyVersion.
// Check the length with:
//     len(mockedIAMAPI.DeletePolicyVersionCalls())
func (mock *IAMAPIMock) DeletePolicyVersionCalls() []struct {
	In1 *iam.DeletePolicyVersionInput
} {
	var calls []struct {
		In1 *iam.DeletePolicyVersionInput
	}
	lockIAMAPIMockDeletePolicyVersion.RLock()
	calls = mock.calls.DeletePolicyVersion
	lockIAMAPIMockDeletePolicyVersion.RUnlock()
	return calls
}

// DeletePolicyVersionRequest calls DeletePolicyVersionRequestFunc.
func (mock *IAMAPIMock) DeletePolicyVersionRequest(in1 *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput) {
	if mock.DeletePolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.DeletePolicyVersionRequestFunc: method is nil but IAMAPI.DeletePolicyVersionRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeletePolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeletePolicyVersionRequest.Lock()
	mock.calls.DeletePolicyVersionRequest = append(mock.calls.DeletePolicyVersionRequest, callInfo)
	lockIAMAPIMockDeletePolicyVersionRequest.Unlock()
	return mock.DeletePolicyVersionRequestFunc(in1)
}

// DeletePolicyVersionRequestCalls gets all the calls that were made to DeletePolicyVersionRequest.
// Check the length with:
//     len(mockedIAMAPI.DeletePolicyVersionRequestCalls())
func (mock *IAMAPIMock) DeletePolicyVersionRequestCalls() []struct {
	In1 *iam.DeletePolicyVersionInput
} {
	var calls []struct {
		In1 *iam.DeletePolicyVersionInput
	}
	lockIAMAPIMockDeletePolicyVersionRequest.RLock()
	calls = mock.calls.DeletePolicyVersionRequest
	lockIAMAPIMockDeletePolicyVersionRequest.RUnlock()
	return calls
}

// DeletePolicyVersionWithContext calls DeletePolicyVersionWithContextFunc.
func (mock *IAMAPIMock) DeletePolicyVersionWithContext(in1 context.Context, in2 *iam.DeletePolicyVersionInput, in3 ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
	if mock.DeletePolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.DeletePolicyVersionWithContextFunc: method is nil but IAMAPI.DeletePolicyVersionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeletePolicyVersionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeletePolicyVersionWithContext.Lock()
	mock.calls.DeletePolicyVersionWithContext = append(mock.calls.DeletePolicyVersionWithContext, callInfo)
	lockIAMAPIMockDeletePolicyVersionWithContext.Unlock()
	return mock.DeletePolicyVersionWithContextFunc(in1, in2, in3...)
}

// DeletePolicyVersionWithContextCalls gets all the calls that were made to DeletePolicyVersionWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeletePolicyVersionWithContextCalls())
func (mock *IAMAPIMock) DeletePolicyVersionWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeletePolicyVersionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeletePolicyVersionInput
		In3 []request.Option
	}
	lockIAMAPIMockDeletePolicyVersionWithContext.RLock()
	calls = mock.calls.DeletePolicyVersionWithContext
	lockIAMAPIMockDeletePolicyVersionWithContext.RUnlock()
	return calls
}

// DeletePolicyWithContext calls DeletePolicyWithContextFunc.
func (mock *IAMAPIMock) DeletePolicyWithContext(in1 context.Context, in2 *iam.DeletePolicyInput, in3 ...request.Option) (*iam.DeletePolicyOutput, error) {
	if mock.DeletePolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeletePolicyWithContextFunc: method is nil but IAMAPI.DeletePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeletePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeletePolicyWithContext.Lock()
	mock.calls.DeletePolicyWithContext = append(mock.calls.DeletePolicyWithContext, callInfo)
	lockIAMAPIMockDeletePolicyWithContext.Unlock()
	return mock.DeletePolicyWithContextFunc(in1, in2, in3...)
}

// DeletePolicyWithContextCalls gets all the calls that were made to DeletePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeletePolicyWithContextCalls())
func (mock *IAMAPIMock) DeletePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeletePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeletePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDeletePolicyWithContext.RLock()
	calls = mock.calls.DeletePolicyWithContext
	lockIAMAPIMockDeletePolicyWithContext.RUnlock()
	return calls
}

// DeleteRole calls DeleteRoleFunc.
func (mock *IAMAPIMock) DeleteRole(in1 *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	if mock.DeleteRoleFunc == nil {
		panic("IAMAPIMock.DeleteRoleFunc: method is nil but IAMAPI.DeleteRole was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteRole.Lock()
	mock.calls.DeleteRole = append(mock.calls.DeleteRole, callInfo)
	lockIAMAPIMockDeleteRole.Unlock()
	return mock.DeleteRoleFunc(in1)
}

// DeleteRoleCalls gets all the calls that were made to DeleteRole.
// Check the length with:
//     len(mockedIAMAPI.DeleteRoleCalls())
func (mock *IAMAPIMock) DeleteRoleCalls() []struct {
	In1 *iam.DeleteRoleInput
} {
	var calls []struct {
		In1 *iam.DeleteRoleInput
	}
	lockIAMAPIMockDeleteRole.RLock()
	calls = mock.calls.DeleteRole
	lockIAMAPIMockDeleteRole.RUnlock()
	return calls
}

// DeleteRolePermissionsBoundary calls DeleteRolePermissionsBoundaryFunc.
func (mock *IAMAPIMock) DeleteRolePermissionsBoundary(in1 *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	if mock.DeleteRolePermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.DeleteRolePermissionsBoundaryFunc: method is nil but IAMAPI.DeleteRolePermissionsBoundary was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteRolePermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteRolePermissionsBoundary.Lock()
	mock.calls.DeleteRolePermissionsBoundary = append(mock.calls.DeleteRolePermissionsBoundary, callInfo)
	lockIAMAPIMockDeleteRolePermissionsBoundary.Unlock()
	return mock.DeleteRolePermissionsBoundaryFunc(in1)
}

// DeleteRolePermissionsBoundaryCalls gets all the calls that were made to DeleteRolePermissionsBoundary.
// Check the length with:
//     len(mockedIAMAPI.DeleteRolePermissionsBoundaryCalls())
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryCalls() []struct {
	In1 *iam.DeleteRolePermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.DeleteRolePermissionsBoundaryInput
	}
	lockIAMAPIMockDeleteRolePermissionsBoundary.RLock()
	calls = mock.calls.DeleteRolePermissionsBoundary
	lockIAMAPIMockDeleteRolePermissionsBoundary.RUnlock()
	return calls
}

// DeleteRolePermissionsBoundaryRequest calls DeleteRolePermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryRequest(in1 *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput) {
	if mock.DeleteRolePermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.DeleteRolePermissionsBoundaryRequestFunc: method is nil but IAMAPI.DeleteRolePermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteRolePermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteRolePermissionsBoundaryRequest.Lock()
	mock.calls.DeleteRolePermissionsBoundaryRequest = append(mock.calls.DeleteRolePermissionsBoundaryRequest, callInfo)
	lockIAMAPIMockDeleteRolePermissionsBoundaryRequest.Unlock()
	return mock.DeleteRolePermissionsBoundaryRequestFunc(in1)
}

// DeleteRolePermissionsBoundaryRequestCalls gets all the calls that were made to DeleteRolePermissionsBoundaryRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteRolePermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryRequestCalls() []struct {
	In1 *iam.DeleteRolePermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.DeleteRolePermissionsBoundaryInput
	}
	lockIAMAPIMockDeleteRolePermissionsBoundaryRequest.RLock()
	calls = mock.calls.DeleteRolePermissionsBoundaryRequest
	lockIAMAPIMockDeleteRolePermissionsBoundaryRequest.RUnlock()
	return calls
}

// DeleteRolePermissionsBoundaryWithContext calls DeleteRolePermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryWithContext(in1 context.Context, in2 *iam.DeleteRolePermissionsBoundaryInput, in3 ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	if mock.DeleteRolePermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.DeleteRolePermissionsBoundaryWithContextFunc: method is nil but IAMAPI.DeleteRolePermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteRolePermissionsBoundaryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteRolePermissionsBoundaryWithContext.Lock()
	mock.calls.DeleteRolePermissionsBoundaryWithContext = append(mock.calls.DeleteRolePermissionsBoundaryWithContext, callInfo)
	lockIAMAPIMockDeleteRolePermissionsBoundaryWithContext.Unlock()
	return mock.DeleteRolePermissionsBoundaryWithContextFunc(in1, in2, in3...)
}

// DeleteRolePermissionsBoundaryWithContextCalls gets all the calls that were made to DeleteRolePermissionsBoundaryWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteRolePermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteRolePermissionsBoundaryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteRolePermissionsBoundaryInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteRolePermissionsBoundaryWithContext.RLock()
	calls = mock.calls.DeleteRolePermissionsBoundaryWithContext
	lockIAMAPIMockDeleteRolePermissionsBoundaryWithContext.RUnlock()
	return calls
}

// DeleteRolePolicy calls DeleteRolePolicyFunc.
func (mock *IAMAPIMock) DeleteRolePolicy(in1 *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	if mock.DeleteRolePolicyFunc == nil {
		panic("IAMAPIMock.DeleteRolePolicyFunc: method is nil but IAMAPI.DeleteRolePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteRolePolicy.Lock()
	mock.calls.DeleteRolePolicy = append(mock.calls.DeleteRolePolicy, callInfo)
	lockIAMAPIMockDeleteRolePolicy.Unlock()
	return mock.DeleteRolePolicyFunc(in1)
}

// DeleteRolePolicyCalls gets all the calls that were made to DeleteRolePolicy.
// Check the length with:
//     len(mockedIAMAPI.DeleteRolePolicyCalls())
func (mock *IAMAPIMock) DeleteRolePolicyCalls() []struct {
	In1 *iam.DeleteRolePolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteRolePolicyInput
	}
	lockIAMAPIMockDeleteRolePolicy.RLock()
	calls = mock.calls.DeleteRolePolicy
	lockIAMAPIMockDeleteRolePolicy.RUnlock()
	return calls
}

// DeleteRolePolicyRequest calls DeleteRolePolicyRequestFunc.
func (mock *IAMAPIMock) DeleteRolePolicyRequest(in1 *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput) {
	if mock.DeleteRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteRolePolicyRequestFunc: method is nil but IAMAPI.DeleteRolePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteRolePolicyRequest.Lock()
	mock.calls.DeleteRolePolicyRequest = append(mock.calls.DeleteRolePolicyRequest, callInfo)
	lockIAMAPIMockDeleteRolePolicyRequest.Unlock()
	return mock.DeleteRolePolicyRequestFunc(in1)
}

// DeleteRolePolicyRequestCalls gets all the calls that were made to DeleteRolePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteRolePolicyRequestCalls())
func (mock *IAMAPIMock) DeleteRolePolicyRequestCalls() []struct {
	In1 *iam.DeleteRolePolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteRolePolicyInput
	}
	lockIAMAPIMockDeleteRolePolicyRequest.RLock()
	calls = mock.calls.DeleteRolePolicyRequest
	lockIAMAPIMockDeleteRolePolicyRequest.RUnlock()
	return calls
}

// DeleteRolePolicyWithContext calls DeleteRolePolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteRolePolicyWithContext(in1 context.Context, in2 *iam.DeleteRolePolicyInput, in3 ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
	if mock.DeleteRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteRolePolicyWithContextFunc: method is nil but IAMAPI.DeleteRolePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteRolePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteRolePolicyWithContext.Lock()
	mock.calls.DeleteRolePolicyWithContext = append(mock.calls.DeleteRolePolicyWithContext, callInfo)
	lockIAMAPIMockDeleteRolePolicyWithContext.Unlock()
	return mock.DeleteRolePolicyWithContextFunc(in1, in2, in3...)
}

// DeleteRolePolicyWithContextCalls gets all the calls that were made to DeleteRolePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteRolePolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteRolePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteRolePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteRolePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteRolePolicyWithContext.RLock()
	calls = mock.calls.DeleteRolePolicyWithContext
	lockIAMAPIMockDeleteRolePolicyWithContext.RUnlock()
	return calls
}

// DeleteRoleRequest calls DeleteRoleRequestFunc.
func (mock *IAMAPIMock) DeleteRoleRequest(in1 *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput) {
	if mock.DeleteRoleRequestFunc == nil {
		panic("IAMAPIMock.DeleteRoleRequestFunc: method is nil but IAMAPI.DeleteRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteRoleRequest.Lock()
	mock.calls.DeleteRoleRequest = append(mock.calls.DeleteRoleRequest, callInfo)
	lockIAMAPIMockDeleteRoleRequest.Unlock()
	return mock.DeleteRoleRequestFunc(in1)
}

// DeleteRoleRequestCalls gets all the calls that were made to DeleteRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteRoleRequestCalls())
func (mock *IAMAPIMock) DeleteRoleRequestCalls() []struct {
	In1 *iam.DeleteRoleInput
} {
	var calls []struct {
		In1 *iam.DeleteRoleInput
	}
	lockIAMAPIMockDeleteRoleRequest.RLock()
	calls = mock.calls.DeleteRoleRequest
	lockIAMAPIMockDeleteRoleRequest.RUnlock()
	return calls
}

// DeleteRoleWithContext calls DeleteRoleWithContextFunc.
func (mock *IAMAPIMock) DeleteRoleWithContext(in1 context.Context, in2 *iam.DeleteRoleInput, in3 ...request.Option) (*iam.DeleteRoleOutput, error) {
	if mock.DeleteRoleWithContextFunc == nil {
		panic("IAMAPIMock.DeleteRoleWithContextFunc: method is nil but IAMAPI.DeleteRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteRoleWithContext.Lock()
	mock.calls.DeleteRoleWithContext = append(mock.calls.DeleteRoleWithContext, callInfo)
	lockIAMAPIMockDeleteRoleWithContext.Unlock()
	return mock.DeleteRoleWithContextFunc(in1, in2, in3...)
}

// DeleteRoleWithContextCalls gets all the calls that were made to DeleteRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteRoleWithContextCalls())
func (mock *IAMAPIMock) DeleteRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteRoleWithContext.RLock()
	calls = mock.calls.DeleteRoleWithContext
	lockIAMAPIMockDeleteRoleWithContext.RUnlock()
	return calls
}

// DeleteSAMLProvider calls DeleteSAMLProviderFunc.
func (mock *IAMAPIMock) DeleteSAMLProvider(in1 *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	if mock.DeleteSAMLProviderFunc == nil {
		panic("IAMAPIMock.DeleteSAMLProviderFunc: method is nil but IAMAPI.DeleteSAMLProvider was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteSAMLProvider.Lock()
	mock.calls.DeleteSAMLProvider = append(mock.calls.DeleteSAMLProvider, callInfo)
	lockIAMAPIMockDeleteSAMLProvider.Unlock()
	return mock.DeleteSAMLProviderFunc(in1)
}

// DeleteSAMLProviderCalls gets all the calls that were made to DeleteSAMLProvider.
// Check the length with:
//     len(mockedIAMAPI.DeleteSAMLProviderCalls())
func (mock *IAMAPIMock) DeleteSAMLProviderCalls() []struct {
	In1 *iam.DeleteSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.DeleteSAMLProviderInput
	}
	lockIAMAPIMockDeleteSAMLProvider.RLock()
	calls = mock.calls.DeleteSAMLProvider
	lockIAMAPIMockDeleteSAMLProvider.RUnlock()
	return calls
}

// DeleteSAMLProviderRequest calls DeleteSAMLProviderRequestFunc.
func (mock *IAMAPIMock) DeleteSAMLProviderRequest(in1 *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput) {
	if mock.DeleteSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.DeleteSAMLProviderRequestFunc: method is nil but IAMAPI.DeleteSAMLProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteSAMLProviderRequest.Lock()
	mock.calls.DeleteSAMLProviderRequest = append(mock.calls.DeleteSAMLProviderRequest, callInfo)
	lockIAMAPIMockDeleteSAMLProviderRequest.Unlock()
	return mock.DeleteSAMLProviderRequestFunc(in1)
}

// DeleteSAMLProviderRequestCalls gets all the calls that were made to DeleteSAMLProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteSAMLProviderRequestCalls())
func (mock *IAMAPIMock) DeleteSAMLProviderRequestCalls() []struct {
	In1 *iam.DeleteSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.DeleteSAMLProviderInput
	}
	lockIAMAPIMockDeleteSAMLProviderRequest.RLock()
	calls = mock.calls.DeleteSAMLProviderRequest
	lockIAMAPIMockDeleteSAMLProviderRequest.RUnlock()
	return calls
}

// DeleteSAMLProviderWithContext calls DeleteSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) DeleteSAMLProviderWithContext(in1 context.Context, in2 *iam.DeleteSAMLProviderInput, in3 ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
	if mock.DeleteSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.DeleteSAMLProviderWithContextFunc: method is nil but IAMAPI.DeleteSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteSAMLProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteSAMLProviderWithContext.Lock()
	mock.calls.DeleteSAMLProviderWithContext = append(mock.calls.DeleteSAMLProviderWithContext, callInfo)
	lockIAMAPIMockDeleteSAMLProviderWithContext.Unlock()
	return mock.DeleteSAMLProviderWithContextFunc(in1, in2, in3...)
}

// DeleteSAMLProviderWithContextCalls gets all the calls that were made to DeleteSAMLProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) DeleteSAMLProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteSAMLProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteSAMLProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteSAMLProviderWithContext.RLock()
	calls = mock.calls.DeleteSAMLProviderWithContext
	lockIAMAPIMockDeleteSAMLProviderWithContext.RUnlock()
	return calls
}

// DeleteSSHPublicKey calls DeleteSSHPublicKeyFunc.
func (mock *IAMAPIMock) DeleteSSHPublicKey(in1 *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	if mock.DeleteSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.DeleteSSHPublicKeyFunc: method is nil but IAMAPI.DeleteSSHPublicKey was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteSSHPublicKey.Lock()
	mock.calls.DeleteSSHPublicKey = append(mock.calls.DeleteSSHPublicKey, callInfo)
	lockIAMAPIMockDeleteSSHPublicKey.Unlock()
	return mock.DeleteSSHPublicKeyFunc(in1)
}

// DeleteSSHPublicKeyCalls gets all the calls that were made to DeleteSSHPublicKey.
// Check the length with:
//     len(mockedIAMAPI.DeleteSSHPublicKeyCalls())
func (mock *IAMAPIMock) DeleteSSHPublicKeyCalls() []struct {
	In1 *iam.DeleteSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.DeleteSSHPublicKeyInput
	}
	lockIAMAPIMockDeleteSSHPublicKey.RLock()
	calls = mock.calls.DeleteSSHPublicKey
	lockIAMAPIMockDeleteSSHPublicKey.RUnlock()
	return calls
}

// DeleteSSHPublicKeyRequest calls DeleteSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) DeleteSSHPublicKeyRequest(in1 *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput) {
	if mock.DeleteSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.DeleteSSHPublicKeyRequestFunc: method is nil but IAMAPI.DeleteSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteSSHPublicKeyRequest.Lock()
	mock.calls.DeleteSSHPublicKeyRequest = append(mock.calls.DeleteSSHPublicKeyRequest, callInfo)
	lockIAMAPIMockDeleteSSHPublicKeyRequest.Unlock()
	return mock.DeleteSSHPublicKeyRequestFunc(in1)
}

// DeleteSSHPublicKeyRequestCalls gets all the calls that were made to DeleteSSHPublicKeyRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) DeleteSSHPublicKeyRequestCalls() []struct {
	In1 *iam.DeleteSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.DeleteSSHPublicKeyInput
	}
	lockIAMAPIMockDeleteSSHPublicKeyRequest.RLock()
	calls = mock.calls.DeleteSSHPublicKeyRequest
	lockIAMAPIMockDeleteSSHPublicKeyRequest.RUnlock()
	return calls
}

// DeleteSSHPublicKeyWithContext calls DeleteSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) DeleteSSHPublicKeyWithContext(in1 context.Context, in2 *iam.DeleteSSHPublicKeyInput, in3 ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
	if mock.DeleteSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteSSHPublicKeyWithContextFunc: method is nil but IAMAPI.DeleteSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteSSHPublicKeyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteSSHPublicKeyWithContext.Lock()
	mock.calls.DeleteSSHPublicKeyWithContext = append(mock.calls.DeleteSSHPublicKeyWithContext, callInfo)
	lockIAMAPIMockDeleteSSHPublicKeyWithContext.Unlock()
	return mock.DeleteSSHPublicKeyWithContextFunc(in1, in2, in3...)
}

// DeleteSSHPublicKeyWithContextCalls gets all the calls that were made to DeleteSSHPublicKeyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) DeleteSSHPublicKeyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteSSHPublicKeyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteSSHPublicKeyInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteSSHPublicKeyWithContext.RLock()
	calls = mock.calls.DeleteSSHPublicKeyWithContext
	lockIAMAPIMockDeleteSSHPublicKeyWithContext.RUnlock()
	return calls
}

// DeleteServerCertificate calls DeleteServerCertificateFunc.
func (mock *IAMAPIMock) DeleteServerCertificate(in1 *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	if mock.DeleteServerCertificateFunc == nil {
		panic("IAMAPIMock.DeleteServerCertificateFunc: method is nil but IAMAPI.DeleteServerCertificate was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteServerCertificate.Lock()
	mock.calls.DeleteServerCertificate = append(mock.calls.DeleteServerCertificate, callInfo)
	lockIAMAPIMockDeleteServerCertificate.Unlock()
	return mock.DeleteServerCertificateFunc(in1)
}

// DeleteServerCertificateCalls gets all the calls that were made to DeleteServerCertificate.
// Check the length with:
//     len(mockedIAMAPI.DeleteServerCertificateCalls())
func (mock *IAMAPIMock) DeleteServerCertificateCalls() []struct {
	In1 *iam.DeleteServerCertificateInput
} {
	var calls []struct {
		In1 *iam.DeleteServerCertificateInput
	}
	lockIAMAPIMockDeleteServerCertificate.RLock()
	calls = mock.calls.DeleteServerCertificate
	lockIAMAPIMockDeleteServerCertificate.RUnlock()
	return calls
}

// DeleteServerCertificateRequest calls DeleteServerCertificateRequestFunc.
func (mock *IAMAPIMock) DeleteServerCertificateRequest(in1 *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput) {
	if mock.DeleteServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.DeleteServerCertificateRequestFunc: method is nil but IAMAPI.DeleteServerCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteServerCertificateRequest.Lock()
	mock.calls.DeleteServerCertificateRequest = append(mock.calls.DeleteServerCertificateRequest, callInfo)
	lockIAMAPIMockDeleteServerCertificateRequest.Unlock()
	return mock.DeleteServerCertificateRequestFunc(in1)
}

// DeleteServerCertificateRequestCalls gets all the calls that were made to DeleteServerCertificateRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteServerCertificateRequestCalls())
func (mock *IAMAPIMock) DeleteServerCertificateRequestCalls() []struct {
	In1 *iam.DeleteServerCertificateInput
} {
	var calls []struct {
		In1 *iam.DeleteServerCertificateInput
	}
	lockIAMAPIMockDeleteServerCertificateRequest.RLock()
	calls = mock.calls.DeleteServerCertificateRequest
	lockIAMAPIMockDeleteServerCertificateRequest.RUnlock()
	return calls
}

// DeleteServerCertificateWithContext calls DeleteServerCertificateWithContextFunc.
func (mock *IAMAPIMock) DeleteServerCertificateWithContext(in1 context.Context, in2 *iam.DeleteServerCertificateInput, in3 ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
	if mock.DeleteServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.DeleteServerCertificateWithContextFunc: method is nil but IAMAPI.DeleteServerCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteServerCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteServerCertificateWithContext.Lock()
	mock.calls.DeleteServerCertificateWithContext = append(mock.calls.DeleteServerCertificateWithContext, callInfo)
	lockIAMAPIMockDeleteServerCertificateWithContext.Unlock()
	return mock.DeleteServerCertificateWithContextFunc(in1, in2, in3...)
}

// DeleteServerCertificateWithContextCalls gets all the calls that were made to DeleteServerCertificateWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteServerCertificateWithContextCalls())
func (mock *IAMAPIMock) DeleteServerCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteServerCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteServerCertificateInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteServerCertificateWithContext.RLock()
	calls = mock.calls.DeleteServerCertificateWithContext
	lockIAMAPIMockDeleteServerCertificateWithContext.RUnlock()
	return calls
}

// DeleteServiceLinkedRole calls DeleteServiceLinkedRoleFunc.
func (mock *IAMAPIMock) DeleteServiceLinkedRole(in1 *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	if mock.DeleteServiceLinkedRoleFunc == nil {
		panic("IAMAPIMock.DeleteServiceLinkedRoleFunc: method is nil but IAMAPI.DeleteServiceLinkedRole was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteServiceLinkedRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteServiceLinkedRole.Lock()
	mock.calls.DeleteServiceLinkedRole = append(mock.calls.DeleteServiceLinkedRole, callInfo)
	lockIAMAPIMockDeleteServiceLinkedRole.Unlock()
	return mock.DeleteServiceLinkedRoleFunc(in1)
}

// DeleteServiceLinkedRoleCalls gets all the calls that were made to DeleteServiceLinkedRole.
// Check the length with:
//     len(mockedIAMAPI.DeleteServiceLinkedRoleCalls())
func (mock *IAMAPIMock) DeleteServiceLinkedRoleCalls() []struct {
	In1 *iam.DeleteServiceLinkedRoleInput
} {
	var calls []struct {
		In1 *iam.DeleteServiceLinkedRoleInput
	}
	lockIAMAPIMockDeleteServiceLinkedRole.RLock()
	calls = mock.calls.DeleteServiceLinkedRole
	lockIAMAPIMockDeleteServiceLinkedRole.RUnlock()
	return calls
}

// DeleteServiceLinkedRoleRequest calls DeleteServiceLinkedRoleRequestFunc.
func (mock *IAMAPIMock) DeleteServiceLinkedRoleRequest(in1 *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput) {
	if mock.DeleteServiceLinkedRoleRequestFunc == nil {
		panic("IAMAPIMock.DeleteServiceLinkedRoleRequestFunc: method is nil but IAMAPI.DeleteServiceLinkedRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteServiceLinkedRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteServiceLinkedRoleRequest.Lock()
	mock.calls.DeleteServiceLinkedRoleRequest = append(mock.calls.DeleteServiceLinkedRoleRequest, callInfo)
	lockIAMAPIMockDeleteServiceLinkedRoleRequest.Unlock()
	return mock.DeleteServiceLinkedRoleRequestFunc(in1)
}

// DeleteServiceLinkedRoleRequestCalls gets all the calls that were made to DeleteServiceLinkedRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteServiceLinkedRoleRequestCalls())
func (mock *IAMAPIMock) DeleteServiceLinkedRoleRequestCalls() []struct {
	In1 *iam.DeleteServiceLinkedRoleInput
} {
	var calls []struct {
		In1 *iam.DeleteServiceLinkedRoleInput
	}
	lockIAMAPIMockDeleteServiceLinkedRoleRequest.RLock()
	calls = mock.calls.DeleteServiceLinkedRoleRequest
	lockIAMAPIMockDeleteServiceLinkedRoleRequest.RUnlock()
	return calls
}

// DeleteServiceLinkedRoleWithContext calls DeleteServiceLinkedRoleWithContextFunc.
func (mock *IAMAPIMock) DeleteServiceLinkedRoleWithContext(in1 context.Context, in2 *iam.DeleteServiceLinkedRoleInput, in3 ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
	if mock.DeleteServiceLinkedRoleWithContextFunc == nil {
		panic("IAMAPIMock.DeleteServiceLinkedRoleWithContextFunc: method is nil but IAMAPI.DeleteServiceLinkedRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteServiceLinkedRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteServiceLinkedRoleWithContext.Lock()
	mock.calls.DeleteServiceLinkedRoleWithContext = append(mock.calls.DeleteServiceLinkedRoleWithContext, callInfo)
	lockIAMAPIMockDeleteServiceLinkedRoleWithContext.Unlock()
	return mock.DeleteServiceLinkedRoleWithContextFunc(in1, in2, in3...)
}

// DeleteServiceLinkedRoleWithContextCalls gets all the calls that were made to DeleteServiceLinkedRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteServiceLinkedRoleWithContextCalls())
func (mock *IAMAPIMock) DeleteServiceLinkedRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteServiceLinkedRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteServiceLinkedRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteServiceLinkedRoleWithContext.RLock()
	calls = mock.calls.DeleteServiceLinkedRoleWithContext
	lockIAMAPIMockDeleteServiceLinkedRoleWithContext.RUnlock()
	return calls
}

// DeleteServiceSpecificCredential calls DeleteServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) DeleteServiceSpecificCredential(in1 *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	if mock.DeleteServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.DeleteServiceSpecificCredentialFunc: method is nil but IAMAPI.DeleteServiceSpecificCredential was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteServiceSpecificCredential.Lock()
	mock.calls.DeleteServiceSpecificCredential = append(mock.calls.DeleteServiceSpecificCredential, callInfo)
	lockIAMAPIMockDeleteServiceSpecificCredential.Unlock()
	return mock.DeleteServiceSpecificCredentialFunc(in1)
}

// DeleteServiceSpecificCredentialCalls gets all the calls that were made to DeleteServiceSpecificCredential.
// Check the length with:
//     len(mockedIAMAPI.DeleteServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialCalls() []struct {
	In1 *iam.DeleteServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.DeleteServiceSpecificCredentialInput
	}
	lockIAMAPIMockDeleteServiceSpecificCredential.RLock()
	calls = mock.calls.DeleteServiceSpecificCredential
	lockIAMAPIMockDeleteServiceSpecificCredential.RUnlock()
	return calls
}

// DeleteServiceSpecificCredentialRequest calls DeleteServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialRequest(in1 *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput) {
	if mock.DeleteServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.DeleteServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.DeleteServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteServiceSpecificCredentialRequest.Lock()
	mock.calls.DeleteServiceSpecificCredentialRequest = append(mock.calls.DeleteServiceSpecificCredentialRequest, callInfo)
	lockIAMAPIMockDeleteServiceSpecificCredentialRequest.Unlock()
	return mock.DeleteServiceSpecificCredentialRequestFunc(in1)
}

// DeleteServiceSpecificCredentialRequestCalls gets all the calls that were made to DeleteServiceSpecificCredentialRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialRequestCalls() []struct {
	In1 *iam.DeleteServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.DeleteServiceSpecificCredentialInput
	}
	lockIAMAPIMockDeleteServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.DeleteServiceSpecificCredentialRequest
	lockIAMAPIMockDeleteServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// DeleteServiceSpecificCredentialWithContext calls DeleteServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialWithContext(in1 context.Context, in2 *iam.DeleteServiceSpecificCredentialInput, in3 ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	if mock.DeleteServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.DeleteServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.DeleteServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteServiceSpecificCredentialInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteServiceSpecificCredentialWithContext.Lock()
	mock.calls.DeleteServiceSpecificCredentialWithContext = append(mock.calls.DeleteServiceSpecificCredentialWithContext, callInfo)
	lockIAMAPIMockDeleteServiceSpecificCredentialWithContext.Unlock()
	return mock.DeleteServiceSpecificCredentialWithContextFunc(in1, in2, in3...)
}

// DeleteServiceSpecificCredentialWithContextCalls gets all the calls that were made to DeleteServiceSpecificCredentialWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteServiceSpecificCredentialInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteServiceSpecificCredentialInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.DeleteServiceSpecificCredentialWithContext
	lockIAMAPIMockDeleteServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// DeleteSigningCertificate calls DeleteSigningCertificateFunc.
func (mock *IAMAPIMock) DeleteSigningCertificate(in1 *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	if mock.DeleteSigningCertificateFunc == nil {
		panic("IAMAPIMock.DeleteSigningCertificateFunc: method is nil but IAMAPI.DeleteSigningCertificate was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteSigningCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteSigningCertificate.Lock()
	mock.calls.DeleteSigningCertificate = append(mock.calls.DeleteSigningCertificate, callInfo)
	lockIAMAPIMockDeleteSigningCertificate.Unlock()
	return mock.DeleteSigningCertificateFunc(in1)
}

// DeleteSigningCertificateCalls gets all the calls that were made to DeleteSigningCertificate.
// Check the length with:
//     len(mockedIAMAPI.DeleteSigningCertificateCalls())
func (mock *IAMAPIMock) DeleteSigningCertificateCalls() []struct {
	In1 *iam.DeleteSigningCertificateInput
} {
	var calls []struct {
		In1 *iam.DeleteSigningCertificateInput
	}
	lockIAMAPIMockDeleteSigningCertificate.RLock()
	calls = mock.calls.DeleteSigningCertificate
	lockIAMAPIMockDeleteSigningCertificate.RUnlock()
	return calls
}

// DeleteSigningCertificateRequest calls DeleteSigningCertificateRequestFunc.
func (mock *IAMAPIMock) DeleteSigningCertificateRequest(in1 *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput) {
	if mock.DeleteSigningCertificateRequestFunc == nil {
		panic("IAMAPIMock.DeleteSigningCertificateRequestFunc: method is nil but IAMAPI.DeleteSigningCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteSigningCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteSigningCertificateRequest.Lock()
	mock.calls.DeleteSigningCertificateRequest = append(mock.calls.DeleteSigningCertificateRequest, callInfo)
	lockIAMAPIMockDeleteSigningCertificateRequest.Unlock()
	return mock.DeleteSigningCertificateRequestFunc(in1)
}

// DeleteSigningCertificateRequestCalls gets all the calls that were made to DeleteSigningCertificateRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteSigningCertificateRequestCalls())
func (mock *IAMAPIMock) DeleteSigningCertificateRequestCalls() []struct {
	In1 *iam.DeleteSigningCertificateInput
} {
	var calls []struct {
		In1 *iam.DeleteSigningCertificateInput
	}
	lockIAMAPIMockDeleteSigningCertificateRequest.RLock()
	calls = mock.calls.DeleteSigningCertificateRequest
	lockIAMAPIMockDeleteSigningCertificateRequest.RUnlock()
	return calls
}

// DeleteSigningCertificateWithContext calls DeleteSigningCertificateWithContextFunc.
func (mock *IAMAPIMock) DeleteSigningCertificateWithContext(in1 context.Context, in2 *iam.DeleteSigningCertificateInput, in3 ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
	if mock.DeleteSigningCertificateWithContextFunc == nil {
		panic("IAMAPIMock.DeleteSigningCertificateWithContextFunc: method is nil but IAMAPI.DeleteSigningCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteSigningCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteSigningCertificateWithContext.Lock()
	mock.calls.DeleteSigningCertificateWithContext = append(mock.calls.DeleteSigningCertificateWithContext, callInfo)
	lockIAMAPIMockDeleteSigningCertificateWithContext.Unlock()
	return mock.DeleteSigningCertificateWithContextFunc(in1, in2, in3...)
}

// DeleteSigningCertificateWithContextCalls gets all the calls that were made to DeleteSigningCertificateWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteSigningCertificateWithContextCalls())
func (mock *IAMAPIMock) DeleteSigningCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteSigningCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteSigningCertificateInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteSigningCertificateWithContext.RLock()
	calls = mock.calls.DeleteSigningCertificateWithContext
	lockIAMAPIMockDeleteSigningCertificateWithContext.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *IAMAPIMock) DeleteUser(in1 *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	if mock.DeleteUserFunc == nil {
		panic("IAMAPIMock.DeleteUserFunc: method is nil but IAMAPI.DeleteUser was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockIAMAPIMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(in1)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserCalls())
func (mock *IAMAPIMock) DeleteUserCalls() []struct {
	In1 *iam.DeleteUserInput
} {
	var calls []struct {
		In1 *iam.DeleteUserInput
	}
	lockIAMAPIMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockIAMAPIMockDeleteUser.RUnlock()
	return calls
}

// DeleteUserPermissionsBoundary calls DeleteUserPermissionsBoundaryFunc.
func (mock *IAMAPIMock) DeleteUserPermissionsBoundary(in1 *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	if mock.DeleteUserPermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.DeleteUserPermissionsBoundaryFunc: method is nil but IAMAPI.DeleteUserPermissionsBoundary was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteUserPermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteUserPermissionsBoundary.Lock()
	mock.calls.DeleteUserPermissionsBoundary = append(mock.calls.DeleteUserPermissionsBoundary, callInfo)
	lockIAMAPIMockDeleteUserPermissionsBoundary.Unlock()
	return mock.DeleteUserPermissionsBoundaryFunc(in1)
}

// DeleteUserPermissionsBoundaryCalls gets all the calls that were made to DeleteUserPermissionsBoundary.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserPermissionsBoundaryCalls())
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryCalls() []struct {
	In1 *iam.DeleteUserPermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.DeleteUserPermissionsBoundaryInput
	}
	lockIAMAPIMockDeleteUserPermissionsBoundary.RLock()
	calls = mock.calls.DeleteUserPermissionsBoundary
	lockIAMAPIMockDeleteUserPermissionsBoundary.RUnlock()
	return calls
}

// DeleteUserPermissionsBoundaryRequest calls DeleteUserPermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryRequest(in1 *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput) {
	if mock.DeleteUserPermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.DeleteUserPermissionsBoundaryRequestFunc: method is nil but IAMAPI.DeleteUserPermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteUserPermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteUserPermissionsBoundaryRequest.Lock()
	mock.calls.DeleteUserPermissionsBoundaryRequest = append(mock.calls.DeleteUserPermissionsBoundaryRequest, callInfo)
	lockIAMAPIMockDeleteUserPermissionsBoundaryRequest.Unlock()
	return mock.DeleteUserPermissionsBoundaryRequestFunc(in1)
}

// DeleteUserPermissionsBoundaryRequestCalls gets all the calls that were made to DeleteUserPermissionsBoundaryRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserPermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryRequestCalls() []struct {
	In1 *iam.DeleteUserPermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.DeleteUserPermissionsBoundaryInput
	}
	lockIAMAPIMockDeleteUserPermissionsBoundaryRequest.RLock()
	calls = mock.calls.DeleteUserPermissionsBoundaryRequest
	lockIAMAPIMockDeleteUserPermissionsBoundaryRequest.RUnlock()
	return calls
}

// DeleteUserPermissionsBoundaryWithContext calls DeleteUserPermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryWithContext(in1 context.Context, in2 *iam.DeleteUserPermissionsBoundaryInput, in3 ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	if mock.DeleteUserPermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.DeleteUserPermissionsBoundaryWithContextFunc: method is nil but IAMAPI.DeleteUserPermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteUserPermissionsBoundaryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteUserPermissionsBoundaryWithContext.Lock()
	mock.calls.DeleteUserPermissionsBoundaryWithContext = append(mock.calls.DeleteUserPermissionsBoundaryWithContext, callInfo)
	lockIAMAPIMockDeleteUserPermissionsBoundaryWithContext.Unlock()
	return mock.DeleteUserPermissionsBoundaryWithContextFunc(in1, in2, in3...)
}

// DeleteUserPermissionsBoundaryWithContextCalls gets all the calls that were made to DeleteUserPermissionsBoundaryWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserPermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteUserPermissionsBoundaryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteUserPermissionsBoundaryInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteUserPermissionsBoundaryWithContext.RLock()
	calls = mock.calls.DeleteUserPermissionsBoundaryWithContext
	lockIAMAPIMockDeleteUserPermissionsBoundaryWithContext.RUnlock()
	return calls
}

// DeleteUserPolicy calls DeleteUserPolicyFunc.
func (mock *IAMAPIMock) DeleteUserPolicy(in1 *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	if mock.DeleteUserPolicyFunc == nil {
		panic("IAMAPIMock.DeleteUserPolicyFunc: method is nil but IAMAPI.DeleteUserPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteUserPolicy.Lock()
	mock.calls.DeleteUserPolicy = append(mock.calls.DeleteUserPolicy, callInfo)
	lockIAMAPIMockDeleteUserPolicy.Unlock()
	return mock.DeleteUserPolicyFunc(in1)
}

// DeleteUserPolicyCalls gets all the calls that were made to DeleteUserPolicy.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserPolicyCalls())
func (mock *IAMAPIMock) DeleteUserPolicyCalls() []struct {
	In1 *iam.DeleteUserPolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteUserPolicyInput
	}
	lockIAMAPIMockDeleteUserPolicy.RLock()
	calls = mock.calls.DeleteUserPolicy
	lockIAMAPIMockDeleteUserPolicy.RUnlock()
	return calls
}

// DeleteUserPolicyRequest calls DeleteUserPolicyRequestFunc.
func (mock *IAMAPIMock) DeleteUserPolicyRequest(in1 *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput) {
	if mock.DeleteUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteUserPolicyRequestFunc: method is nil but IAMAPI.DeleteUserPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteUserPolicyRequest.Lock()
	mock.calls.DeleteUserPolicyRequest = append(mock.calls.DeleteUserPolicyRequest, callInfo)
	lockIAMAPIMockDeleteUserPolicyRequest.Unlock()
	return mock.DeleteUserPolicyRequestFunc(in1)
}

// DeleteUserPolicyRequestCalls gets all the calls that were made to DeleteUserPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserPolicyRequestCalls())
func (mock *IAMAPIMock) DeleteUserPolicyRequestCalls() []struct {
	In1 *iam.DeleteUserPolicyInput
} {
	var calls []struct {
		In1 *iam.DeleteUserPolicyInput
	}
	lockIAMAPIMockDeleteUserPolicyRequest.RLock()
	calls = mock.calls.DeleteUserPolicyRequest
	lockIAMAPIMockDeleteUserPolicyRequest.RUnlock()
	return calls
}

// DeleteUserPolicyWithContext calls DeleteUserPolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteUserPolicyWithContext(in1 context.Context, in2 *iam.DeleteUserPolicyInput, in3 ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
	if mock.DeleteUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteUserPolicyWithContextFunc: method is nil but IAMAPI.DeleteUserPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteUserPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteUserPolicyWithContext.Lock()
	mock.calls.DeleteUserPolicyWithContext = append(mock.calls.DeleteUserPolicyWithContext, callInfo)
	lockIAMAPIMockDeleteUserPolicyWithContext.Unlock()
	return mock.DeleteUserPolicyWithContextFunc(in1, in2, in3...)
}

// DeleteUserPolicyWithContextCalls gets all the calls that were made to DeleteUserPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserPolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteUserPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteUserPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteUserPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteUserPolicyWithContext.RLock()
	calls = mock.calls.DeleteUserPolicyWithContext
	lockIAMAPIMockDeleteUserPolicyWithContext.RUnlock()
	return calls
}

// DeleteUserRequest calls DeleteUserRequestFunc.
func (mock *IAMAPIMock) DeleteUserRequest(in1 *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput) {
	if mock.DeleteUserRequestFunc == nil {
		panic("IAMAPIMock.DeleteUserRequestFunc: method is nil but IAMAPI.DeleteUserRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteUserRequest.Lock()
	mock.calls.DeleteUserRequest = append(mock.calls.DeleteUserRequest, callInfo)
	lockIAMAPIMockDeleteUserRequest.Unlock()
	return mock.DeleteUserRequestFunc(in1)
}

// DeleteUserRequestCalls gets all the calls that were made to DeleteUserRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserRequestCalls())
func (mock *IAMAPIMock) DeleteUserRequestCalls() []struct {
	In1 *iam.DeleteUserInput
} {
	var calls []struct {
		In1 *iam.DeleteUserInput
	}
	lockIAMAPIMockDeleteUserRequest.RLock()
	calls = mock.calls.DeleteUserRequest
	lockIAMAPIMockDeleteUserRequest.RUnlock()
	return calls
}

// DeleteUserWithContext calls DeleteUserWithContextFunc.
func (mock *IAMAPIMock) DeleteUserWithContext(in1 context.Context, in2 *iam.DeleteUserInput, in3 ...request.Option) (*iam.DeleteUserOutput, error) {
	if mock.DeleteUserWithContextFunc == nil {
		panic("IAMAPIMock.DeleteUserWithContextFunc: method is nil but IAMAPI.DeleteUserWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteUserInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteUserWithContext.Lock()
	mock.calls.DeleteUserWithContext = append(mock.calls.DeleteUserWithContext, callInfo)
	lockIAMAPIMockDeleteUserWithContext.Unlock()
	return mock.DeleteUserWithContextFunc(in1, in2, in3...)
}

// DeleteUserWithContextCalls gets all the calls that were made to DeleteUserWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteUserWithContextCalls())
func (mock *IAMAPIMock) DeleteUserWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteUserInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteUserInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteUserWithContext.RLock()
	calls = mock.calls.DeleteUserWithContext
	lockIAMAPIMockDeleteUserWithContext.RUnlock()
	return calls
}

// DeleteVirtualMFADevice calls DeleteVirtualMFADeviceFunc.
func (mock *IAMAPIMock) DeleteVirtualMFADevice(in1 *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	if mock.DeleteVirtualMFADeviceFunc == nil {
		panic("IAMAPIMock.DeleteVirtualMFADeviceFunc: method is nil but IAMAPI.DeleteVirtualMFADevice was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteVirtualMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteVirtualMFADevice.Lock()
	mock.calls.DeleteVirtualMFADevice = append(mock.calls.DeleteVirtualMFADevice, callInfo)
	lockIAMAPIMockDeleteVirtualMFADevice.Unlock()
	return mock.DeleteVirtualMFADeviceFunc(in1)
}

// DeleteVirtualMFADeviceCalls gets all the calls that were made to DeleteVirtualMFADevice.
// Check the length with:
//     len(mockedIAMAPI.DeleteVirtualMFADeviceCalls())
func (mock *IAMAPIMock) DeleteVirtualMFADeviceCalls() []struct {
	In1 *iam.DeleteVirtualMFADeviceInput
} {
	var calls []struct {
		In1 *iam.DeleteVirtualMFADeviceInput
	}
	lockIAMAPIMockDeleteVirtualMFADevice.RLock()
	calls = mock.calls.DeleteVirtualMFADevice
	lockIAMAPIMockDeleteVirtualMFADevice.RUnlock()
	return calls
}

// DeleteVirtualMFADeviceRequest calls DeleteVirtualMFADeviceRequestFunc.
func (mock *IAMAPIMock) DeleteVirtualMFADeviceRequest(in1 *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput) {
	if mock.DeleteVirtualMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.DeleteVirtualMFADeviceRequestFunc: method is nil but IAMAPI.DeleteVirtualMFADeviceRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DeleteVirtualMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDeleteVirtualMFADeviceRequest.Lock()
	mock.calls.DeleteVirtualMFADeviceRequest = append(mock.calls.DeleteVirtualMFADeviceRequest, callInfo)
	lockIAMAPIMockDeleteVirtualMFADeviceRequest.Unlock()
	return mock.DeleteVirtualMFADeviceRequestFunc(in1)
}

// DeleteVirtualMFADeviceRequestCalls gets all the calls that were made to DeleteVirtualMFADeviceRequest.
// Check the length with:
//     len(mockedIAMAPI.DeleteVirtualMFADeviceRequestCalls())
func (mock *IAMAPIMock) DeleteVirtualMFADeviceRequestCalls() []struct {
	In1 *iam.DeleteVirtualMFADeviceInput
} {
	var calls []struct {
		In1 *iam.DeleteVirtualMFADeviceInput
	}
	lockIAMAPIMockDeleteVirtualMFADeviceRequest.RLock()
	calls = mock.calls.DeleteVirtualMFADeviceRequest
	lockIAMAPIMockDeleteVirtualMFADeviceRequest.RUnlock()
	return calls
}

// DeleteVirtualMFADeviceWithContext calls DeleteVirtualMFADeviceWithContextFunc.
func (mock *IAMAPIMock) DeleteVirtualMFADeviceWithContext(in1 context.Context, in2 *iam.DeleteVirtualMFADeviceInput, in3 ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
	if mock.DeleteVirtualMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.DeleteVirtualMFADeviceWithContextFunc: method is nil but IAMAPI.DeleteVirtualMFADeviceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DeleteVirtualMFADeviceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDeleteVirtualMFADeviceWithContext.Lock()
	mock.calls.DeleteVirtualMFADeviceWithContext = append(mock.calls.DeleteVirtualMFADeviceWithContext, callInfo)
	lockIAMAPIMockDeleteVirtualMFADeviceWithContext.Unlock()
	return mock.DeleteVirtualMFADeviceWithContextFunc(in1, in2, in3...)
}

// DeleteVirtualMFADeviceWithContextCalls gets all the calls that were made to DeleteVirtualMFADeviceWithContext.
// Check the length with:
//     len(mockedIAMAPI.DeleteVirtualMFADeviceWithContextCalls())
func (mock *IAMAPIMock) DeleteVirtualMFADeviceWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DeleteVirtualMFADeviceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DeleteVirtualMFADeviceInput
		In3 []request.Option
	}
	lockIAMAPIMockDeleteVirtualMFADeviceWithContext.RLock()
	calls = mock.calls.DeleteVirtualMFADeviceWithContext
	lockIAMAPIMockDeleteVirtualMFADeviceWithContext.RUnlock()
	return calls
}

// DetachGroupPolicy calls DetachGroupPolicyFunc.
func (mock *IAMAPIMock) DetachGroupPolicy(in1 *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	if mock.DetachGroupPolicyFunc == nil {
		panic("IAMAPIMock.DetachGroupPolicyFunc: method is nil but IAMAPI.DetachGroupPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DetachGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDetachGroupPolicy.Lock()
	mock.calls.DetachGroupPolicy = append(mock.calls.DetachGroupPolicy, callInfo)
	lockIAMAPIMockDetachGroupPolicy.Unlock()
	return mock.DetachGroupPolicyFunc(in1)
}

// DetachGroupPolicyCalls gets all the calls that were made to DetachGroupPolicy.
// Check the length with:
//     len(mockedIAMAPI.DetachGroupPolicyCalls())
func (mock *IAMAPIMock) DetachGroupPolicyCalls() []struct {
	In1 *iam.DetachGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.DetachGroupPolicyInput
	}
	lockIAMAPIMockDetachGroupPolicy.RLock()
	calls = mock.calls.DetachGroupPolicy
	lockIAMAPIMockDetachGroupPolicy.RUnlock()
	return calls
}

// DetachGroupPolicyRequest calls DetachGroupPolicyRequestFunc.
func (mock *IAMAPIMock) DetachGroupPolicyRequest(in1 *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput) {
	if mock.DetachGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.DetachGroupPolicyRequestFunc: method is nil but IAMAPI.DetachGroupPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DetachGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDetachGroupPolicyRequest.Lock()
	mock.calls.DetachGroupPolicyRequest = append(mock.calls.DetachGroupPolicyRequest, callInfo)
	lockIAMAPIMockDetachGroupPolicyRequest.Unlock()
	return mock.DetachGroupPolicyRequestFunc(in1)
}

// DetachGroupPolicyRequestCalls gets all the calls that were made to DetachGroupPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DetachGroupPolicyRequestCalls())
func (mock *IAMAPIMock) DetachGroupPolicyRequestCalls() []struct {
	In1 *iam.DetachGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.DetachGroupPolicyInput
	}
	lockIAMAPIMockDetachGroupPolicyRequest.RLock()
	calls = mock.calls.DetachGroupPolicyRequest
	lockIAMAPIMockDetachGroupPolicyRequest.RUnlock()
	return calls
}

// DetachGroupPolicyWithContext calls DetachGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) DetachGroupPolicyWithContext(in1 context.Context, in2 *iam.DetachGroupPolicyInput, in3 ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
	if mock.DetachGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DetachGroupPolicyWithContextFunc: method is nil but IAMAPI.DetachGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DetachGroupPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDetachGroupPolicyWithContext.Lock()
	mock.calls.DetachGroupPolicyWithContext = append(mock.calls.DetachGroupPolicyWithContext, callInfo)
	lockIAMAPIMockDetachGroupPolicyWithContext.Unlock()
	return mock.DetachGroupPolicyWithContextFunc(in1, in2, in3...)
}

// DetachGroupPolicyWithContextCalls gets all the calls that were made to DetachGroupPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DetachGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) DetachGroupPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DetachGroupPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DetachGroupPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDetachGroupPolicyWithContext.RLock()
	calls = mock.calls.DetachGroupPolicyWithContext
	lockIAMAPIMockDetachGroupPolicyWithContext.RUnlock()
	return calls
}

// DetachRolePolicy calls DetachRolePolicyFunc.
func (mock *IAMAPIMock) DetachRolePolicy(in1 *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	if mock.DetachRolePolicyFunc == nil {
		panic("IAMAPIMock.DetachRolePolicyFunc: method is nil but IAMAPI.DetachRolePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DetachRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDetachRolePolicy.Lock()
	mock.calls.DetachRolePolicy = append(mock.calls.DetachRolePolicy, callInfo)
	lockIAMAPIMockDetachRolePolicy.Unlock()
	return mock.DetachRolePolicyFunc(in1)
}

// DetachRolePolicyCalls gets all the calls that were made to DetachRolePolicy.
// Check the length with:
//     len(mockedIAMAPI.DetachRolePolicyCalls())
func (mock *IAMAPIMock) DetachRolePolicyCalls() []struct {
	In1 *iam.DetachRolePolicyInput
} {
	var calls []struct {
		In1 *iam.DetachRolePolicyInput
	}
	lockIAMAPIMockDetachRolePolicy.RLock()
	calls = mock.calls.DetachRolePolicy
	lockIAMAPIMockDetachRolePolicy.RUnlock()
	return calls
}

// DetachRolePolicyRequest calls DetachRolePolicyRequestFunc.
func (mock *IAMAPIMock) DetachRolePolicyRequest(in1 *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput) {
	if mock.DetachRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.DetachRolePolicyRequestFunc: method is nil but IAMAPI.DetachRolePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DetachRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDetachRolePolicyRequest.Lock()
	mock.calls.DetachRolePolicyRequest = append(mock.calls.DetachRolePolicyRequest, callInfo)
	lockIAMAPIMockDetachRolePolicyRequest.Unlock()
	return mock.DetachRolePolicyRequestFunc(in1)
}

// DetachRolePolicyRequestCalls gets all the calls that were made to DetachRolePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DetachRolePolicyRequestCalls())
func (mock *IAMAPIMock) DetachRolePolicyRequestCalls() []struct {
	In1 *iam.DetachRolePolicyInput
} {
	var calls []struct {
		In1 *iam.DetachRolePolicyInput
	}
	lockIAMAPIMockDetachRolePolicyRequest.RLock()
	calls = mock.calls.DetachRolePolicyRequest
	lockIAMAPIMockDetachRolePolicyRequest.RUnlock()
	return calls
}

// DetachRolePolicyWithContext calls DetachRolePolicyWithContextFunc.
func (mock *IAMAPIMock) DetachRolePolicyWithContext(in1 context.Context, in2 *iam.DetachRolePolicyInput, in3 ...request.Option) (*iam.DetachRolePolicyOutput, error) {
	if mock.DetachRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.DetachRolePolicyWithContextFunc: method is nil but IAMAPI.DetachRolePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DetachRolePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDetachRolePolicyWithContext.Lock()
	mock.calls.DetachRolePolicyWithContext = append(mock.calls.DetachRolePolicyWithContext, callInfo)
	lockIAMAPIMockDetachRolePolicyWithContext.Unlock()
	return mock.DetachRolePolicyWithContextFunc(in1, in2, in3...)
}

// DetachRolePolicyWithContextCalls gets all the calls that were made to DetachRolePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DetachRolePolicyWithContextCalls())
func (mock *IAMAPIMock) DetachRolePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DetachRolePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DetachRolePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDetachRolePolicyWithContext.RLock()
	calls = mock.calls.DetachRolePolicyWithContext
	lockIAMAPIMockDetachRolePolicyWithContext.RUnlock()
	return calls
}

// DetachUserPolicy calls DetachUserPolicyFunc.
func (mock *IAMAPIMock) DetachUserPolicy(in1 *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	if mock.DetachUserPolicyFunc == nil {
		panic("IAMAPIMock.DetachUserPolicyFunc: method is nil but IAMAPI.DetachUserPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.DetachUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDetachUserPolicy.Lock()
	mock.calls.DetachUserPolicy = append(mock.calls.DetachUserPolicy, callInfo)
	lockIAMAPIMockDetachUserPolicy.Unlock()
	return mock.DetachUserPolicyFunc(in1)
}

// DetachUserPolicyCalls gets all the calls that were made to DetachUserPolicy.
// Check the length with:
//     len(mockedIAMAPI.DetachUserPolicyCalls())
func (mock *IAMAPIMock) DetachUserPolicyCalls() []struct {
	In1 *iam.DetachUserPolicyInput
} {
	var calls []struct {
		In1 *iam.DetachUserPolicyInput
	}
	lockIAMAPIMockDetachUserPolicy.RLock()
	calls = mock.calls.DetachUserPolicy
	lockIAMAPIMockDetachUserPolicy.RUnlock()
	return calls
}

// DetachUserPolicyRequest calls DetachUserPolicyRequestFunc.
func (mock *IAMAPIMock) DetachUserPolicyRequest(in1 *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput) {
	if mock.DetachUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.DetachUserPolicyRequestFunc: method is nil but IAMAPI.DetachUserPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.DetachUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockDetachUserPolicyRequest.Lock()
	mock.calls.DetachUserPolicyRequest = append(mock.calls.DetachUserPolicyRequest, callInfo)
	lockIAMAPIMockDetachUserPolicyRequest.Unlock()
	return mock.DetachUserPolicyRequestFunc(in1)
}

// DetachUserPolicyRequestCalls gets all the calls that were made to DetachUserPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.DetachUserPolicyRequestCalls())
func (mock *IAMAPIMock) DetachUserPolicyRequestCalls() []struct {
	In1 *iam.DetachUserPolicyInput
} {
	var calls []struct {
		In1 *iam.DetachUserPolicyInput
	}
	lockIAMAPIMockDetachUserPolicyRequest.RLock()
	calls = mock.calls.DetachUserPolicyRequest
	lockIAMAPIMockDetachUserPolicyRequest.RUnlock()
	return calls
}

// DetachUserPolicyWithContext calls DetachUserPolicyWithContextFunc.
func (mock *IAMAPIMock) DetachUserPolicyWithContext(in1 context.Context, in2 *iam.DetachUserPolicyInput, in3 ...request.Option) (*iam.DetachUserPolicyOutput, error) {
	if mock.DetachUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DetachUserPolicyWithContextFunc: method is nil but IAMAPI.DetachUserPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.DetachUserPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockDetachUserPolicyWithContext.Lock()
	mock.calls.DetachUserPolicyWithContext = append(mock.calls.DetachUserPolicyWithContext, callInfo)
	lockIAMAPIMockDetachUserPolicyWithContext.Unlock()
	return mock.DetachUserPolicyWithContextFunc(in1, in2, in3...)
}

// DetachUserPolicyWithContextCalls gets all the calls that were made to DetachUserPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.DetachUserPolicyWithContextCalls())
func (mock *IAMAPIMock) DetachUserPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.DetachUserPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.DetachUserPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockDetachUserPolicyWithContext.RLock()
	calls = mock.calls.DetachUserPolicyWithContext
	lockIAMAPIMockDetachUserPolicyWithContext.RUnlock()
	return calls
}

// EnableMFADevice calls EnableMFADeviceFunc.
func (mock *IAMAPIMock) EnableMFADevice(in1 *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	if mock.EnableMFADeviceFunc == nil {
		panic("IAMAPIMock.EnableMFADeviceFunc: method is nil but IAMAPI.EnableMFADevice was just called")
	}
	callInfo := struct {
		In1 *iam.EnableMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockEnableMFADevice.Lock()
	mock.calls.EnableMFADevice = append(mock.calls.EnableMFADevice, callInfo)
	lockIAMAPIMockEnableMFADevice.Unlock()
	return mock.EnableMFADeviceFunc(in1)
}

// EnableMFADeviceCalls gets all the calls that were made to EnableMFADevice.
// Check the length with:
//     len(mockedIAMAPI.EnableMFADeviceCalls())
func (mock *IAMAPIMock) EnableMFADeviceCalls() []struct {
	In1 *iam.EnableMFADeviceInput
} {
	var calls []struct {
		In1 *iam.EnableMFADeviceInput
	}
	lockIAMAPIMockEnableMFADevice.RLock()
	calls = mock.calls.EnableMFADevice
	lockIAMAPIMockEnableMFADevice.RUnlock()
	return calls
}

// EnableMFADeviceRequest calls EnableMFADeviceRequestFunc.
func (mock *IAMAPIMock) EnableMFADeviceRequest(in1 *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput) {
	if mock.EnableMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.EnableMFADeviceRequestFunc: method is nil but IAMAPI.EnableMFADeviceRequest was just called")
	}
	callInfo := struct {
		In1 *iam.EnableMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockEnableMFADeviceRequest.Lock()
	mock.calls.EnableMFADeviceRequest = append(mock.calls.EnableMFADeviceRequest, callInfo)
	lockIAMAPIMockEnableMFADeviceRequest.Unlock()
	return mock.EnableMFADeviceRequestFunc(in1)
}

// EnableMFADeviceRequestCalls gets all the calls that were made to EnableMFADeviceRequest.
// Check the length with:
//     len(mockedIAMAPI.EnableMFADeviceRequestCalls())
func (mock *IAMAPIMock) EnableMFADeviceRequestCalls() []struct {
	In1 *iam.EnableMFADeviceInput
} {
	var calls []struct {
		In1 *iam.EnableMFADeviceInput
	}
	lockIAMAPIMockEnableMFADeviceRequest.RLock()
	calls = mock.calls.EnableMFADeviceRequest
	lockIAMAPIMockEnableMFADeviceRequest.RUnlock()
	return calls
}

// EnableMFADeviceWithContext calls EnableMFADeviceWithContextFunc.
func (mock *IAMAPIMock) EnableMFADeviceWithContext(in1 context.Context, in2 *iam.EnableMFADeviceInput, in3 ...request.Option) (*iam.EnableMFADeviceOutput, error) {
	if mock.EnableMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.EnableMFADeviceWithContextFunc: method is nil but IAMAPI.EnableMFADeviceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.EnableMFADeviceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockEnableMFADeviceWithContext.Lock()
	mock.calls.EnableMFADeviceWithContext = append(mock.calls.EnableMFADeviceWithContext, callInfo)
	lockIAMAPIMockEnableMFADeviceWithContext.Unlock()
	return mock.EnableMFADeviceWithContextFunc(in1, in2, in3...)
}

// EnableMFADeviceWithContextCalls gets all the calls that were made to EnableMFADeviceWithContext.
// Check the length with:
//     len(mockedIAMAPI.EnableMFADeviceWithContextCalls())
func (mock *IAMAPIMock) EnableMFADeviceWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.EnableMFADeviceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.EnableMFADeviceInput
		In3 []request.Option
	}
	lockIAMAPIMockEnableMFADeviceWithContext.RLock()
	calls = mock.calls.EnableMFADeviceWithContext
	lockIAMAPIMockEnableMFADeviceWithContext.RUnlock()
	return calls
}

// GenerateCredentialReport calls GenerateCredentialReportFunc.
func (mock *IAMAPIMock) GenerateCredentialReport(in1 *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	if mock.GenerateCredentialReportFunc == nil {
		panic("IAMAPIMock.GenerateCredentialReportFunc: method is nil but IAMAPI.GenerateCredentialReport was just called")
	}
	callInfo := struct {
		In1 *iam.GenerateCredentialReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGenerateCredentialReport.Lock()
	mock.calls.GenerateCredentialReport = append(mock.calls.GenerateCredentialReport, callInfo)
	lockIAMAPIMockGenerateCredentialReport.Unlock()
	return mock.GenerateCredentialReportFunc(in1)
}

// GenerateCredentialReportCalls gets all the calls that were made to GenerateCredentialReport.
// Check the length with:
//     len(mockedIAMAPI.GenerateCredentialReportCalls())
func (mock *IAMAPIMock) GenerateCredentialReportCalls() []struct {
	In1 *iam.GenerateCredentialReportInput
} {
	var calls []struct {
		In1 *iam.GenerateCredentialReportInput
	}
	lockIAMAPIMockGenerateCredentialReport.RLock()
	calls = mock.calls.GenerateCredentialReport
	lockIAMAPIMockGenerateCredentialReport.RUnlock()
	return calls
}

// GenerateCredentialReportRequest calls GenerateCredentialReportRequestFunc.
func (mock *IAMAPIMock) GenerateCredentialReportRequest(in1 *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput) {
	if mock.GenerateCredentialReportRequestFunc == nil {
		panic("IAMAPIMock.GenerateCredentialReportRequestFunc: method is nil but IAMAPI.GenerateCredentialReportRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GenerateCredentialReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGenerateCredentialReportRequest.Lock()
	mock.calls.GenerateCredentialReportRequest = append(mock.calls.GenerateCredentialReportRequest, callInfo)
	lockIAMAPIMockGenerateCredentialReportRequest.Unlock()
	return mock.GenerateCredentialReportRequestFunc(in1)
}

// GenerateCredentialReportRequestCalls gets all the calls that were made to GenerateCredentialReportRequest.
// Check the length with:
//     len(mockedIAMAPI.GenerateCredentialReportRequestCalls())
func (mock *IAMAPIMock) GenerateCredentialReportRequestCalls() []struct {
	In1 *iam.GenerateCredentialReportInput
} {
	var calls []struct {
		In1 *iam.GenerateCredentialReportInput
	}
	lockIAMAPIMockGenerateCredentialReportRequest.RLock()
	calls = mock.calls.GenerateCredentialReportRequest
	lockIAMAPIMockGenerateCredentialReportRequest.RUnlock()
	return calls
}

// GenerateCredentialReportWithContext calls GenerateCredentialReportWithContextFunc.
func (mock *IAMAPIMock) GenerateCredentialReportWithContext(in1 context.Context, in2 *iam.GenerateCredentialReportInput, in3 ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
	if mock.GenerateCredentialReportWithContextFunc == nil {
		panic("IAMAPIMock.GenerateCredentialReportWithContextFunc: method is nil but IAMAPI.GenerateCredentialReportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GenerateCredentialReportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGenerateCredentialReportWithContext.Lock()
	mock.calls.GenerateCredentialReportWithContext = append(mock.calls.GenerateCredentialReportWithContext, callInfo)
	lockIAMAPIMockGenerateCredentialReportWithContext.Unlock()
	return mock.GenerateCredentialReportWithContextFunc(in1, in2, in3...)
}

// GenerateCredentialReportWithContextCalls gets all the calls that were made to GenerateCredentialReportWithContext.
// Check the length with:
//     len(mockedIAMAPI.GenerateCredentialReportWithContextCalls())
func (mock *IAMAPIMock) GenerateCredentialReportWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GenerateCredentialReportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GenerateCredentialReportInput
		In3 []request.Option
	}
	lockIAMAPIMockGenerateCredentialReportWithContext.RLock()
	calls = mock.calls.GenerateCredentialReportWithContext
	lockIAMAPIMockGenerateCredentialReportWithContext.RUnlock()
	return calls
}

// GenerateOrganizationsAccessReport calls GenerateOrganizationsAccessReportFunc.
func (mock *IAMAPIMock) GenerateOrganizationsAccessReport(in1 *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	if mock.GenerateOrganizationsAccessReportFunc == nil {
		panic("IAMAPIMock.GenerateOrganizationsAccessReportFunc: method is nil but IAMAPI.GenerateOrganizationsAccessReport was just called")
	}
	callInfo := struct {
		In1 *iam.GenerateOrganizationsAccessReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGenerateOrganizationsAccessReport.Lock()
	mock.calls.GenerateOrganizationsAccessReport = append(mock.calls.GenerateOrganizationsAccessReport, callInfo)
	lockIAMAPIMockGenerateOrganizationsAccessReport.Unlock()
	return mock.GenerateOrganizationsAccessReportFunc(in1)
}

// GenerateOrganizationsAccessReportCalls gets all the calls that were made to GenerateOrganizationsAccessReport.
// Check the length with:
//     len(mockedIAMAPI.GenerateOrganizationsAccessReportCalls())
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportCalls() []struct {
	In1 *iam.GenerateOrganizationsAccessReportInput
} {
	var calls []struct {
		In1 *iam.GenerateOrganizationsAccessReportInput
	}
	lockIAMAPIMockGenerateOrganizationsAccessReport.RLock()
	calls = mock.calls.GenerateOrganizationsAccessReport
	lockIAMAPIMockGenerateOrganizationsAccessReport.RUnlock()
	return calls
}

// GenerateOrganizationsAccessReportRequest calls GenerateOrganizationsAccessReportRequestFunc.
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportRequest(in1 *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput) {
	if mock.GenerateOrganizationsAccessReportRequestFunc == nil {
		panic("IAMAPIMock.GenerateOrganizationsAccessReportRequestFunc: method is nil but IAMAPI.GenerateOrganizationsAccessReportRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GenerateOrganizationsAccessReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGenerateOrganizationsAccessReportRequest.Lock()
	mock.calls.GenerateOrganizationsAccessReportRequest = append(mock.calls.GenerateOrganizationsAccessReportRequest, callInfo)
	lockIAMAPIMockGenerateOrganizationsAccessReportRequest.Unlock()
	return mock.GenerateOrganizationsAccessReportRequestFunc(in1)
}

// GenerateOrganizationsAccessReportRequestCalls gets all the calls that were made to GenerateOrganizationsAccessReportRequest.
// Check the length with:
//     len(mockedIAMAPI.GenerateOrganizationsAccessReportRequestCalls())
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportRequestCalls() []struct {
	In1 *iam.GenerateOrganizationsAccessReportInput
} {
	var calls []struct {
		In1 *iam.GenerateOrganizationsAccessReportInput
	}
	lockIAMAPIMockGenerateOrganizationsAccessReportRequest.RLock()
	calls = mock.calls.GenerateOrganizationsAccessReportRequest
	lockIAMAPIMockGenerateOrganizationsAccessReportRequest.RUnlock()
	return calls
}

// GenerateOrganizationsAccessReportWithContext calls GenerateOrganizationsAccessReportWithContextFunc.
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportWithContext(in1 context.Context, in2 *iam.GenerateOrganizationsAccessReportInput, in3 ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	if mock.GenerateOrganizationsAccessReportWithContextFunc == nil {
		panic("IAMAPIMock.GenerateOrganizationsAccessReportWithContextFunc: method is nil but IAMAPI.GenerateOrganizationsAccessReportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GenerateOrganizationsAccessReportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGenerateOrganizationsAccessReportWithContext.Lock()
	mock.calls.GenerateOrganizationsAccessReportWithContext = append(mock.calls.GenerateOrganizationsAccessReportWithContext, callInfo)
	lockIAMAPIMockGenerateOrganizationsAccessReportWithContext.Unlock()
	return mock.GenerateOrganizationsAccessReportWithContextFunc(in1, in2, in3...)
}

// GenerateOrganizationsAccessReportWithContextCalls gets all the calls that were made to GenerateOrganizationsAccessReportWithContext.
// Check the length with:
//     len(mockedIAMAPI.GenerateOrganizationsAccessReportWithContextCalls())
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GenerateOrganizationsAccessReportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GenerateOrganizationsAccessReportInput
		In3 []request.Option
	}
	lockIAMAPIMockGenerateOrganizationsAccessReportWithContext.RLock()
	calls = mock.calls.GenerateOrganizationsAccessReportWithContext
	lockIAMAPIMockGenerateOrganizationsAccessReportWithContext.RUnlock()
	return calls
}

// GenerateServiceLastAccessedDetails calls GenerateServiceLastAccessedDetailsFunc.
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetails(in1 *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	if mock.GenerateServiceLastAccessedDetailsFunc == nil {
		panic("IAMAPIMock.GenerateServiceLastAccessedDetailsFunc: method is nil but IAMAPI.GenerateServiceLastAccessedDetails was just called")
	}
	callInfo := struct {
		In1 *iam.GenerateServiceLastAccessedDetailsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGenerateServiceLastAccessedDetails.Lock()
	mock.calls.GenerateServiceLastAccessedDetails = append(mock.calls.GenerateServiceLastAccessedDetails, callInfo)
	lockIAMAPIMockGenerateServiceLastAccessedDetails.Unlock()
	return mock.GenerateServiceLastAccessedDetailsFunc(in1)
}

// GenerateServiceLastAccessedDetailsCalls gets all the calls that were made to GenerateServiceLastAccessedDetails.
// Check the length with:
//     len(mockedIAMAPI.GenerateServiceLastAccessedDetailsCalls())
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsCalls() []struct {
	In1 *iam.GenerateServiceLastAccessedDetailsInput
} {
	var calls []struct {
		In1 *iam.GenerateServiceLastAccessedDetailsInput
	}
	lockIAMAPIMockGenerateServiceLastAccessedDetails.RLock()
	calls = mock.calls.GenerateServiceLastAccessedDetails
	lockIAMAPIMockGenerateServiceLastAccessedDetails.RUnlock()
	return calls
}

// GenerateServiceLastAccessedDetailsRequest calls GenerateServiceLastAccessedDetailsRequestFunc.
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsRequest(in1 *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput) {
	if mock.GenerateServiceLastAccessedDetailsRequestFunc == nil {
		panic("IAMAPIMock.GenerateServiceLastAccessedDetailsRequestFunc: method is nil but IAMAPI.GenerateServiceLastAccessedDetailsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GenerateServiceLastAccessedDetailsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGenerateServiceLastAccessedDetailsRequest.Lock()
	mock.calls.GenerateServiceLastAccessedDetailsRequest = append(mock.calls.GenerateServiceLastAccessedDetailsRequest, callInfo)
	lockIAMAPIMockGenerateServiceLastAccessedDetailsRequest.Unlock()
	return mock.GenerateServiceLastAccessedDetailsRequestFunc(in1)
}

// GenerateServiceLastAccessedDetailsRequestCalls gets all the calls that were made to GenerateServiceLastAccessedDetailsRequest.
// Check the length with:
//     len(mockedIAMAPI.GenerateServiceLastAccessedDetailsRequestCalls())
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsRequestCalls() []struct {
	In1 *iam.GenerateServiceLastAccessedDetailsInput
} {
	var calls []struct {
		In1 *iam.GenerateServiceLastAccessedDetailsInput
	}
	lockIAMAPIMockGenerateServiceLastAccessedDetailsRequest.RLock()
	calls = mock.calls.GenerateServiceLastAccessedDetailsRequest
	lockIAMAPIMockGenerateServiceLastAccessedDetailsRequest.RUnlock()
	return calls
}

// GenerateServiceLastAccessedDetailsWithContext calls GenerateServiceLastAccessedDetailsWithContextFunc.
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsWithContext(in1 context.Context, in2 *iam.GenerateServiceLastAccessedDetailsInput, in3 ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	if mock.GenerateServiceLastAccessedDetailsWithContextFunc == nil {
		panic("IAMAPIMock.GenerateServiceLastAccessedDetailsWithContextFunc: method is nil but IAMAPI.GenerateServiceLastAccessedDetailsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GenerateServiceLastAccessedDetailsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGenerateServiceLastAccessedDetailsWithContext.Lock()
	mock.calls.GenerateServiceLastAccessedDetailsWithContext = append(mock.calls.GenerateServiceLastAccessedDetailsWithContext, callInfo)
	lockIAMAPIMockGenerateServiceLastAccessedDetailsWithContext.Unlock()
	return mock.GenerateServiceLastAccessedDetailsWithContextFunc(in1, in2, in3...)
}

// GenerateServiceLastAccessedDetailsWithContextCalls gets all the calls that were made to GenerateServiceLastAccessedDetailsWithContext.
// Check the length with:
//     len(mockedIAMAPI.GenerateServiceLastAccessedDetailsWithContextCalls())
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GenerateServiceLastAccessedDetailsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GenerateServiceLastAccessedDetailsInput
		In3 []request.Option
	}
	lockIAMAPIMockGenerateServiceLastAccessedDetailsWithContext.RLock()
	calls = mock.calls.GenerateServiceLastAccessedDetailsWithContext
	lockIAMAPIMockGenerateServiceLastAccessedDetailsWithContext.RUnlock()
	return calls
}

// GetAccessKeyLastUsed calls GetAccessKeyLastUsedFunc.
func (mock *IAMAPIMock) GetAccessKeyLastUsed(in1 *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	if mock.GetAccessKeyLastUsedFunc == nil {
		panic("IAMAPIMock.GetAccessKeyLastUsedFunc: method is nil but IAMAPI.GetAccessKeyLastUsed was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccessKeyLastUsedInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccessKeyLastUsed.Lock()
	mock.calls.GetAccessKeyLastUsed = append(mock.calls.GetAccessKeyLastUsed, callInfo)
	lockIAMAPIMockGetAccessKeyLastUsed.Unlock()
	return mock.GetAccessKeyLastUsedFunc(in1)
}

// GetAccessKeyLastUsedCalls gets all the calls that were made to GetAccessKeyLastUsed.
// Check the length with:
//     len(mockedIAMAPI.GetAccessKeyLastUsedCalls())
func (mock *IAMAPIMock) GetAccessKeyLastUsedCalls() []struct {
	In1 *iam.GetAccessKeyLastUsedInput
} {
	var calls []struct {
		In1 *iam.GetAccessKeyLastUsedInput
	}
	lockIAMAPIMockGetAccessKeyLastUsed.RLock()
	calls = mock.calls.GetAccessKeyLastUsed
	lockIAMAPIMockGetAccessKeyLastUsed.RUnlock()
	return calls
}

// GetAccessKeyLastUsedRequest calls GetAccessKeyLastUsedRequestFunc.
func (mock *IAMAPIMock) GetAccessKeyLastUsedRequest(in1 *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput) {
	if mock.GetAccessKeyLastUsedRequestFunc == nil {
		panic("IAMAPIMock.GetAccessKeyLastUsedRequestFunc: method is nil but IAMAPI.GetAccessKeyLastUsedRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccessKeyLastUsedInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccessKeyLastUsedRequest.Lock()
	mock.calls.GetAccessKeyLastUsedRequest = append(mock.calls.GetAccessKeyLastUsedRequest, callInfo)
	lockIAMAPIMockGetAccessKeyLastUsedRequest.Unlock()
	return mock.GetAccessKeyLastUsedRequestFunc(in1)
}

// GetAccessKeyLastUsedRequestCalls gets all the calls that were made to GetAccessKeyLastUsedRequest.
// Check the length with:
//     len(mockedIAMAPI.GetAccessKeyLastUsedRequestCalls())
func (mock *IAMAPIMock) GetAccessKeyLastUsedRequestCalls() []struct {
	In1 *iam.GetAccessKeyLastUsedInput
} {
	var calls []struct {
		In1 *iam.GetAccessKeyLastUsedInput
	}
	lockIAMAPIMockGetAccessKeyLastUsedRequest.RLock()
	calls = mock.calls.GetAccessKeyLastUsedRequest
	lockIAMAPIMockGetAccessKeyLastUsedRequest.RUnlock()
	return calls
}

// GetAccessKeyLastUsedWithContext calls GetAccessKeyLastUsedWithContextFunc.
func (mock *IAMAPIMock) GetAccessKeyLastUsedWithContext(in1 context.Context, in2 *iam.GetAccessKeyLastUsedInput, in3 ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
	if mock.GetAccessKeyLastUsedWithContextFunc == nil {
		panic("IAMAPIMock.GetAccessKeyLastUsedWithContextFunc: method is nil but IAMAPI.GetAccessKeyLastUsedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetAccessKeyLastUsedInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetAccessKeyLastUsedWithContext.Lock()
	mock.calls.GetAccessKeyLastUsedWithContext = append(mock.calls.GetAccessKeyLastUsedWithContext, callInfo)
	lockIAMAPIMockGetAccessKeyLastUsedWithContext.Unlock()
	return mock.GetAccessKeyLastUsedWithContextFunc(in1, in2, in3...)
}

// GetAccessKeyLastUsedWithContextCalls gets all the calls that were made to GetAccessKeyLastUsedWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetAccessKeyLastUsedWithContextCalls())
func (mock *IAMAPIMock) GetAccessKeyLastUsedWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetAccessKeyLastUsedInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetAccessKeyLastUsedInput
		In3 []request.Option
	}
	lockIAMAPIMockGetAccessKeyLastUsedWithContext.RLock()
	calls = mock.calls.GetAccessKeyLastUsedWithContext
	lockIAMAPIMockGetAccessKeyLastUsedWithContext.RUnlock()
	return calls
}

// GetAccountAuthorizationDetails calls GetAccountAuthorizationDetailsFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetails(in1 *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	if mock.GetAccountAuthorizationDetailsFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsFunc: method is nil but IAMAPI.GetAccountAuthorizationDetails was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccountAuthorizationDetailsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccountAuthorizationDetails.Lock()
	mock.calls.GetAccountAuthorizationDetails = append(mock.calls.GetAccountAuthorizationDetails, callInfo)
	lockIAMAPIMockGetAccountAuthorizationDetails.Unlock()
	return mock.GetAccountAuthorizationDetailsFunc(in1)
}

// GetAccountAuthorizationDetailsCalls gets all the calls that were made to GetAccountAuthorizationDetails.
// Check the length with:
//     len(mockedIAMAPI.GetAccountAuthorizationDetailsCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsCalls() []struct {
	In1 *iam.GetAccountAuthorizationDetailsInput
} {
	var calls []struct {
		In1 *iam.GetAccountAuthorizationDetailsInput
	}
	lockIAMAPIMockGetAccountAuthorizationDetails.RLock()
	calls = mock.calls.GetAccountAuthorizationDetails
	lockIAMAPIMockGetAccountAuthorizationDetails.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsPages calls GetAccountAuthorizationDetailsPagesFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPages(in1 *iam.GetAccountAuthorizationDetailsInput, in2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
	if mock.GetAccountAuthorizationDetailsPagesFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsPagesFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsPages was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccountAuthorizationDetailsInput
		In2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsPages.Lock()
	mock.calls.GetAccountAuthorizationDetailsPages = append(mock.calls.GetAccountAuthorizationDetailsPages, callInfo)
	lockIAMAPIMockGetAccountAuthorizationDetailsPages.Unlock()
	return mock.GetAccountAuthorizationDetailsPagesFunc(in1, in2)
}

// GetAccountAuthorizationDetailsPagesCalls gets all the calls that were made to GetAccountAuthorizationDetailsPages.
// Check the length with:
//     len(mockedIAMAPI.GetAccountAuthorizationDetailsPagesCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPagesCalls() []struct {
	In1 *iam.GetAccountAuthorizationDetailsInput
	In2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.GetAccountAuthorizationDetailsInput
		In2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsPages.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsPages
	lockIAMAPIMockGetAccountAuthorizationDetailsPages.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsPagesWithContext calls GetAccountAuthorizationDetailsPagesWithContextFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPagesWithContext(in1 context.Context, in2 *iam.GetAccountAuthorizationDetailsInput, in3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, in4 ...request.Option) error {
	if mock.GetAccountAuthorizationDetailsPagesWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsPagesWithContextFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetAccountAuthorizationDetailsInput
		In3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsPagesWithContext.Lock()
	mock.calls.GetAccountAuthorizationDetailsPagesWithContext = append(mock.calls.GetAccountAuthorizationDetailsPagesWithContext, callInfo)
	lockIAMAPIMockGetAccountAuthorizationDetailsPagesWithContext.Unlock()
	return mock.GetAccountAuthorizationDetailsPagesWithContextFunc(in1, in2, in3, in4...)
}

// GetAccountAuthorizationDetailsPagesWithContextCalls gets all the calls that were made to GetAccountAuthorizationDetailsPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetAccountAuthorizationDetailsPagesWithContextCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetAccountAuthorizationDetailsInput
	In3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetAccountAuthorizationDetailsInput
		In3 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsPagesWithContext.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsPagesWithContext
	lockIAMAPIMockGetAccountAuthorizationDetailsPagesWithContext.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsRequest calls GetAccountAuthorizationDetailsRequestFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsRequest(in1 *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput) {
	if mock.GetAccountAuthorizationDetailsRequestFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsRequestFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccountAuthorizationDetailsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsRequest.Lock()
	mock.calls.GetAccountAuthorizationDetailsRequest = append(mock.calls.GetAccountAuthorizationDetailsRequest, callInfo)
	lockIAMAPIMockGetAccountAuthorizationDetailsRequest.Unlock()
	return mock.GetAccountAuthorizationDetailsRequestFunc(in1)
}

// GetAccountAuthorizationDetailsRequestCalls gets all the calls that were made to GetAccountAuthorizationDetailsRequest.
// Check the length with:
//     len(mockedIAMAPI.GetAccountAuthorizationDetailsRequestCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsRequestCalls() []struct {
	In1 *iam.GetAccountAuthorizationDetailsInput
} {
	var calls []struct {
		In1 *iam.GetAccountAuthorizationDetailsInput
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsRequest.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsRequest
	lockIAMAPIMockGetAccountAuthorizationDetailsRequest.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsWithContext calls GetAccountAuthorizationDetailsWithContextFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsWithContext(in1 context.Context, in2 *iam.GetAccountAuthorizationDetailsInput, in3 ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	if mock.GetAccountAuthorizationDetailsWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsWithContextFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetAccountAuthorizationDetailsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsWithContext.Lock()
	mock.calls.GetAccountAuthorizationDetailsWithContext = append(mock.calls.GetAccountAuthorizationDetailsWithContext, callInfo)
	lockIAMAPIMockGetAccountAuthorizationDetailsWithContext.Unlock()
	return mock.GetAccountAuthorizationDetailsWithContextFunc(in1, in2, in3...)
}

// GetAccountAuthorizationDetailsWithContextCalls gets all the calls that were made to GetAccountAuthorizationDetailsWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetAccountAuthorizationDetailsWithContextCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetAccountAuthorizationDetailsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetAccountAuthorizationDetailsInput
		In3 []request.Option
	}
	lockIAMAPIMockGetAccountAuthorizationDetailsWithContext.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsWithContext
	lockIAMAPIMockGetAccountAuthorizationDetailsWithContext.RUnlock()
	return calls
}

// GetAccountPasswordPolicy calls GetAccountPasswordPolicyFunc.
func (mock *IAMAPIMock) GetAccountPasswordPolicy(in1 *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	if mock.GetAccountPasswordPolicyFunc == nil {
		panic("IAMAPIMock.GetAccountPasswordPolicyFunc: method is nil but IAMAPI.GetAccountPasswordPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccountPasswordPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccountPasswordPolicy.Lock()
	mock.calls.GetAccountPasswordPolicy = append(mock.calls.GetAccountPasswordPolicy, callInfo)
	lockIAMAPIMockGetAccountPasswordPolicy.Unlock()
	return mock.GetAccountPasswordPolicyFunc(in1)
}

// GetAccountPasswordPolicyCalls gets all the calls that were made to GetAccountPasswordPolicy.
// Check the length with:
//     len(mockedIAMAPI.GetAccountPasswordPolicyCalls())
func (mock *IAMAPIMock) GetAccountPasswordPolicyCalls() []struct {
	In1 *iam.GetAccountPasswordPolicyInput
} {
	var calls []struct {
		In1 *iam.GetAccountPasswordPolicyInput
	}
	lockIAMAPIMockGetAccountPasswordPolicy.RLock()
	calls = mock.calls.GetAccountPasswordPolicy
	lockIAMAPIMockGetAccountPasswordPolicy.RUnlock()
	return calls
}

// GetAccountPasswordPolicyRequest calls GetAccountPasswordPolicyRequestFunc.
func (mock *IAMAPIMock) GetAccountPasswordPolicyRequest(in1 *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput) {
	if mock.GetAccountPasswordPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetAccountPasswordPolicyRequestFunc: method is nil but IAMAPI.GetAccountPasswordPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccountPasswordPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccountPasswordPolicyRequest.Lock()
	mock.calls.GetAccountPasswordPolicyRequest = append(mock.calls.GetAccountPasswordPolicyRequest, callInfo)
	lockIAMAPIMockGetAccountPasswordPolicyRequest.Unlock()
	return mock.GetAccountPasswordPolicyRequestFunc(in1)
}

// GetAccountPasswordPolicyRequestCalls gets all the calls that were made to GetAccountPasswordPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetAccountPasswordPolicyRequestCalls())
func (mock *IAMAPIMock) GetAccountPasswordPolicyRequestCalls() []struct {
	In1 *iam.GetAccountPasswordPolicyInput
} {
	var calls []struct {
		In1 *iam.GetAccountPasswordPolicyInput
	}
	lockIAMAPIMockGetAccountPasswordPolicyRequest.RLock()
	calls = mock.calls.GetAccountPasswordPolicyRequest
	lockIAMAPIMockGetAccountPasswordPolicyRequest.RUnlock()
	return calls
}

// GetAccountPasswordPolicyWithContext calls GetAccountPasswordPolicyWithContextFunc.
func (mock *IAMAPIMock) GetAccountPasswordPolicyWithContext(in1 context.Context, in2 *iam.GetAccountPasswordPolicyInput, in3 ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
	if mock.GetAccountPasswordPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountPasswordPolicyWithContextFunc: method is nil but IAMAPI.GetAccountPasswordPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetAccountPasswordPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetAccountPasswordPolicyWithContext.Lock()
	mock.calls.GetAccountPasswordPolicyWithContext = append(mock.calls.GetAccountPasswordPolicyWithContext, callInfo)
	lockIAMAPIMockGetAccountPasswordPolicyWithContext.Unlock()
	return mock.GetAccountPasswordPolicyWithContextFunc(in1, in2, in3...)
}

// GetAccountPasswordPolicyWithContextCalls gets all the calls that were made to GetAccountPasswordPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetAccountPasswordPolicyWithContextCalls())
func (mock *IAMAPIMock) GetAccountPasswordPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetAccountPasswordPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetAccountPasswordPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetAccountPasswordPolicyWithContext.RLock()
	calls = mock.calls.GetAccountPasswordPolicyWithContext
	lockIAMAPIMockGetAccountPasswordPolicyWithContext.RUnlock()
	return calls
}

// GetAccountSummary calls GetAccountSummaryFunc.
func (mock *IAMAPIMock) GetAccountSummary(in1 *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	if mock.GetAccountSummaryFunc == nil {
		panic("IAMAPIMock.GetAccountSummaryFunc: method is nil but IAMAPI.GetAccountSummary was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccountSummaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccountSummary.Lock()
	mock.calls.GetAccountSummary = append(mock.calls.GetAccountSummary, callInfo)
	lockIAMAPIMockGetAccountSummary.Unlock()
	return mock.GetAccountSummaryFunc(in1)
}

// GetAccountSummaryCalls gets all the calls that were made to GetAccountSummary.
// Check the length with:
//     len(mockedIAMAPI.GetAccountSummaryCalls())
func (mock *IAMAPIMock) GetAccountSummaryCalls() []struct {
	In1 *iam.GetAccountSummaryInput
} {
	var calls []struct {
		In1 *iam.GetAccountSummaryInput
	}
	lockIAMAPIMockGetAccountSummary.RLock()
	calls = mock.calls.GetAccountSummary
	lockIAMAPIMockGetAccountSummary.RUnlock()
	return calls
}

// GetAccountSummaryRequest calls GetAccountSummaryRequestFunc.
func (mock *IAMAPIMock) GetAccountSummaryRequest(in1 *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput) {
	if mock.GetAccountSummaryRequestFunc == nil {
		panic("IAMAPIMock.GetAccountSummaryRequestFunc: method is nil but IAMAPI.GetAccountSummaryRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetAccountSummaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetAccountSummaryRequest.Lock()
	mock.calls.GetAccountSummaryRequest = append(mock.calls.GetAccountSummaryRequest, callInfo)
	lockIAMAPIMockGetAccountSummaryRequest.Unlock()
	return mock.GetAccountSummaryRequestFunc(in1)
}

// GetAccountSummaryRequestCalls gets all the calls that were made to GetAccountSummaryRequest.
// Check the length with:
//     len(mockedIAMAPI.GetAccountSummaryRequestCalls())
func (mock *IAMAPIMock) GetAccountSummaryRequestCalls() []struct {
	In1 *iam.GetAccountSummaryInput
} {
	var calls []struct {
		In1 *iam.GetAccountSummaryInput
	}
	lockIAMAPIMockGetAccountSummaryRequest.RLock()
	calls = mock.calls.GetAccountSummaryRequest
	lockIAMAPIMockGetAccountSummaryRequest.RUnlock()
	return calls
}

// GetAccountSummaryWithContext calls GetAccountSummaryWithContextFunc.
func (mock *IAMAPIMock) GetAccountSummaryWithContext(in1 context.Context, in2 *iam.GetAccountSummaryInput, in3 ...request.Option) (*iam.GetAccountSummaryOutput, error) {
	if mock.GetAccountSummaryWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountSummaryWithContextFunc: method is nil but IAMAPI.GetAccountSummaryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetAccountSummaryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetAccountSummaryWithContext.Lock()
	mock.calls.GetAccountSummaryWithContext = append(mock.calls.GetAccountSummaryWithContext, callInfo)
	lockIAMAPIMockGetAccountSummaryWithContext.Unlock()
	return mock.GetAccountSummaryWithContextFunc(in1, in2, in3...)
}

// GetAccountSummaryWithContextCalls gets all the calls that were made to GetAccountSummaryWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetAccountSummaryWithContextCalls())
func (mock *IAMAPIMock) GetAccountSummaryWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetAccountSummaryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetAccountSummaryInput
		In3 []request.Option
	}
	lockIAMAPIMockGetAccountSummaryWithContext.RLock()
	calls = mock.calls.GetAccountSummaryWithContext
	lockIAMAPIMockGetAccountSummaryWithContext.RUnlock()
	return calls
}

// GetContextKeysForCustomPolicy calls GetContextKeysForCustomPolicyFunc.
func (mock *IAMAPIMock) GetContextKeysForCustomPolicy(in1 *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForCustomPolicyFunc == nil {
		panic("IAMAPIMock.GetContextKeysForCustomPolicyFunc: method is nil but IAMAPI.GetContextKeysForCustomPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.GetContextKeysForCustomPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetContextKeysForCustomPolicy.Lock()
	mock.calls.GetContextKeysForCustomPolicy = append(mock.calls.GetContextKeysForCustomPolicy, callInfo)
	lockIAMAPIMockGetContextKeysForCustomPolicy.Unlock()
	return mock.GetContextKeysForCustomPolicyFunc(in1)
}

// GetContextKeysForCustomPolicyCalls gets all the calls that were made to GetContextKeysForCustomPolicy.
// Check the length with:
//     len(mockedIAMAPI.GetContextKeysForCustomPolicyCalls())
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyCalls() []struct {
	In1 *iam.GetContextKeysForCustomPolicyInput
} {
	var calls []struct {
		In1 *iam.GetContextKeysForCustomPolicyInput
	}
	lockIAMAPIMockGetContextKeysForCustomPolicy.RLock()
	calls = mock.calls.GetContextKeysForCustomPolicy
	lockIAMAPIMockGetContextKeysForCustomPolicy.RUnlock()
	return calls
}

// GetContextKeysForCustomPolicyRequest calls GetContextKeysForCustomPolicyRequestFunc.
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyRequest(in1 *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	if mock.GetContextKeysForCustomPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetContextKeysForCustomPolicyRequestFunc: method is nil but IAMAPI.GetContextKeysForCustomPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetContextKeysForCustomPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetContextKeysForCustomPolicyRequest.Lock()
	mock.calls.GetContextKeysForCustomPolicyRequest = append(mock.calls.GetContextKeysForCustomPolicyRequest, callInfo)
	lockIAMAPIMockGetContextKeysForCustomPolicyRequest.Unlock()
	return mock.GetContextKeysForCustomPolicyRequestFunc(in1)
}

// GetContextKeysForCustomPolicyRequestCalls gets all the calls that were made to GetContextKeysForCustomPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetContextKeysForCustomPolicyRequestCalls())
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyRequestCalls() []struct {
	In1 *iam.GetContextKeysForCustomPolicyInput
} {
	var calls []struct {
		In1 *iam.GetContextKeysForCustomPolicyInput
	}
	lockIAMAPIMockGetContextKeysForCustomPolicyRequest.RLock()
	calls = mock.calls.GetContextKeysForCustomPolicyRequest
	lockIAMAPIMockGetContextKeysForCustomPolicyRequest.RUnlock()
	return calls
}

// GetContextKeysForCustomPolicyWithContext calls GetContextKeysForCustomPolicyWithContextFunc.
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyWithContext(in1 context.Context, in2 *iam.GetContextKeysForCustomPolicyInput, in3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForCustomPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetContextKeysForCustomPolicyWithContextFunc: method is nil but IAMAPI.GetContextKeysForCustomPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetContextKeysForCustomPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetContextKeysForCustomPolicyWithContext.Lock()
	mock.calls.GetContextKeysForCustomPolicyWithContext = append(mock.calls.GetContextKeysForCustomPolicyWithContext, callInfo)
	lockIAMAPIMockGetContextKeysForCustomPolicyWithContext.Unlock()
	return mock.GetContextKeysForCustomPolicyWithContextFunc(in1, in2, in3...)
}

// GetContextKeysForCustomPolicyWithContextCalls gets all the calls that were made to GetContextKeysForCustomPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetContextKeysForCustomPolicyWithContextCalls())
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetContextKeysForCustomPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetContextKeysForCustomPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetContextKeysForCustomPolicyWithContext.RLock()
	calls = mock.calls.GetContextKeysForCustomPolicyWithContext
	lockIAMAPIMockGetContextKeysForCustomPolicyWithContext.RUnlock()
	return calls
}

// GetContextKeysForPrincipalPolicy calls GetContextKeysForPrincipalPolicyFunc.
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicy(in1 *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForPrincipalPolicyFunc == nil {
		panic("IAMAPIMock.GetContextKeysForPrincipalPolicyFunc: method is nil but IAMAPI.GetContextKeysForPrincipalPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.GetContextKeysForPrincipalPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetContextKeysForPrincipalPolicy.Lock()
	mock.calls.GetContextKeysForPrincipalPolicy = append(mock.calls.GetContextKeysForPrincipalPolicy, callInfo)
	lockIAMAPIMockGetContextKeysForPrincipalPolicy.Unlock()
	return mock.GetContextKeysForPrincipalPolicyFunc(in1)
}

// GetContextKeysForPrincipalPolicyCalls gets all the calls that were made to GetContextKeysForPrincipalPolicy.
// Check the length with:
//     len(mockedIAMAPI.GetContextKeysForPrincipalPolicyCalls())
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyCalls() []struct {
	In1 *iam.GetContextKeysForPrincipalPolicyInput
} {
	var calls []struct {
		In1 *iam.GetContextKeysForPrincipalPolicyInput
	}
	lockIAMAPIMockGetContextKeysForPrincipalPolicy.RLock()
	calls = mock.calls.GetContextKeysForPrincipalPolicy
	lockIAMAPIMockGetContextKeysForPrincipalPolicy.RUnlock()
	return calls
}

// GetContextKeysForPrincipalPolicyRequest calls GetContextKeysForPrincipalPolicyRequestFunc.
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyRequest(in1 *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	if mock.GetContextKeysForPrincipalPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetContextKeysForPrincipalPolicyRequestFunc: method is nil but IAMAPI.GetContextKeysForPrincipalPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetContextKeysForPrincipalPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetContextKeysForPrincipalPolicyRequest.Lock()
	mock.calls.GetContextKeysForPrincipalPolicyRequest = append(mock.calls.GetContextKeysForPrincipalPolicyRequest, callInfo)
	lockIAMAPIMockGetContextKeysForPrincipalPolicyRequest.Unlock()
	return mock.GetContextKeysForPrincipalPolicyRequestFunc(in1)
}

// GetContextKeysForPrincipalPolicyRequestCalls gets all the calls that were made to GetContextKeysForPrincipalPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetContextKeysForPrincipalPolicyRequestCalls())
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyRequestCalls() []struct {
	In1 *iam.GetContextKeysForPrincipalPolicyInput
} {
	var calls []struct {
		In1 *iam.GetContextKeysForPrincipalPolicyInput
	}
	lockIAMAPIMockGetContextKeysForPrincipalPolicyRequest.RLock()
	calls = mock.calls.GetContextKeysForPrincipalPolicyRequest
	lockIAMAPIMockGetContextKeysForPrincipalPolicyRequest.RUnlock()
	return calls
}

// GetContextKeysForPrincipalPolicyWithContext calls GetContextKeysForPrincipalPolicyWithContextFunc.
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyWithContext(in1 context.Context, in2 *iam.GetContextKeysForPrincipalPolicyInput, in3 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForPrincipalPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetContextKeysForPrincipalPolicyWithContextFunc: method is nil but IAMAPI.GetContextKeysForPrincipalPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetContextKeysForPrincipalPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetContextKeysForPrincipalPolicyWithContext.Lock()
	mock.calls.GetContextKeysForPrincipalPolicyWithContext = append(mock.calls.GetContextKeysForPrincipalPolicyWithContext, callInfo)
	lockIAMAPIMockGetContextKeysForPrincipalPolicyWithContext.Unlock()
	return mock.GetContextKeysForPrincipalPolicyWithContextFunc(in1, in2, in3...)
}

// GetContextKeysForPrincipalPolicyWithContextCalls gets all the calls that were made to GetContextKeysForPrincipalPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetContextKeysForPrincipalPolicyWithContextCalls())
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetContextKeysForPrincipalPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetContextKeysForPrincipalPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetContextKeysForPrincipalPolicyWithContext.RLock()
	calls = mock.calls.GetContextKeysForPrincipalPolicyWithContext
	lockIAMAPIMockGetContextKeysForPrincipalPolicyWithContext.RUnlock()
	return calls
}

// GetCredentialReport calls GetCredentialReportFunc.
func (mock *IAMAPIMock) GetCredentialReport(in1 *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	if mock.GetCredentialReportFunc == nil {
		panic("IAMAPIMock.GetCredentialReportFunc: method is nil but IAMAPI.GetCredentialReport was just called")
	}
	callInfo := struct {
		In1 *iam.GetCredentialReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetCredentialReport.Lock()
	mock.calls.GetCredentialReport = append(mock.calls.GetCredentialReport, callInfo)
	lockIAMAPIMockGetCredentialReport.Unlock()
	return mock.GetCredentialReportFunc(in1)
}

// GetCredentialReportCalls gets all the calls that were made to GetCredentialReport.
// Check the length with:
//     len(mockedIAMAPI.GetCredentialReportCalls())
func (mock *IAMAPIMock) GetCredentialReportCalls() []struct {
	In1 *iam.GetCredentialReportInput
} {
	var calls []struct {
		In1 *iam.GetCredentialReportInput
	}
	lockIAMAPIMockGetCredentialReport.RLock()
	calls = mock.calls.GetCredentialReport
	lockIAMAPIMockGetCredentialReport.RUnlock()
	return calls
}

// GetCredentialReportRequest calls GetCredentialReportRequestFunc.
func (mock *IAMAPIMock) GetCredentialReportRequest(in1 *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput) {
	if mock.GetCredentialReportRequestFunc == nil {
		panic("IAMAPIMock.GetCredentialReportRequestFunc: method is nil but IAMAPI.GetCredentialReportRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetCredentialReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetCredentialReportRequest.Lock()
	mock.calls.GetCredentialReportRequest = append(mock.calls.GetCredentialReportRequest, callInfo)
	lockIAMAPIMockGetCredentialReportRequest.Unlock()
	return mock.GetCredentialReportRequestFunc(in1)
}

// GetCredentialReportRequestCalls gets all the calls that were made to GetCredentialReportRequest.
// Check the length with:
//     len(mockedIAMAPI.GetCredentialReportRequestCalls())
func (mock *IAMAPIMock) GetCredentialReportRequestCalls() []struct {
	In1 *iam.GetCredentialReportInput
} {
	var calls []struct {
		In1 *iam.GetCredentialReportInput
	}
	lockIAMAPIMockGetCredentialReportRequest.RLock()
	calls = mock.calls.GetCredentialReportRequest
	lockIAMAPIMockGetCredentialReportRequest.RUnlock()
	return calls
}

// GetCredentialReportWithContext calls GetCredentialReportWithContextFunc.
func (mock *IAMAPIMock) GetCredentialReportWithContext(in1 context.Context, in2 *iam.GetCredentialReportInput, in3 ...request.Option) (*iam.GetCredentialReportOutput, error) {
	if mock.GetCredentialReportWithContextFunc == nil {
		panic("IAMAPIMock.GetCredentialReportWithContextFunc: method is nil but IAMAPI.GetCredentialReportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetCredentialReportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetCredentialReportWithContext.Lock()
	mock.calls.GetCredentialReportWithContext = append(mock.calls.GetCredentialReportWithContext, callInfo)
	lockIAMAPIMockGetCredentialReportWithContext.Unlock()
	return mock.GetCredentialReportWithContextFunc(in1, in2, in3...)
}

// GetCredentialReportWithContextCalls gets all the calls that were made to GetCredentialReportWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetCredentialReportWithContextCalls())
func (mock *IAMAPIMock) GetCredentialReportWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetCredentialReportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetCredentialReportInput
		In3 []request.Option
	}
	lockIAMAPIMockGetCredentialReportWithContext.RLock()
	calls = mock.calls.GetCredentialReportWithContext
	lockIAMAPIMockGetCredentialReportWithContext.RUnlock()
	return calls
}

// GetGroup calls GetGroupFunc.
func (mock *IAMAPIMock) GetGroup(in1 *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	if mock.GetGroupFunc == nil {
		panic("IAMAPIMock.GetGroupFunc: method is nil but IAMAPI.GetGroup was just called")
	}
	callInfo := struct {
		In1 *iam.GetGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetGroup.Lock()
	mock.calls.GetGroup = append(mock.calls.GetGroup, callInfo)
	lockIAMAPIMockGetGroup.Unlock()
	return mock.GetGroupFunc(in1)
}

// GetGroupCalls gets all the calls that were made to GetGroup.
// Check the length with:
//     len(mockedIAMAPI.GetGroupCalls())
func (mock *IAMAPIMock) GetGroupCalls() []struct {
	In1 *iam.GetGroupInput
} {
	var calls []struct {
		In1 *iam.GetGroupInput
	}
	lockIAMAPIMockGetGroup.RLock()
	calls = mock.calls.GetGroup
	lockIAMAPIMockGetGroup.RUnlock()
	return calls
}

// GetGroupPages calls GetGroupPagesFunc.
func (mock *IAMAPIMock) GetGroupPages(in1 *iam.GetGroupInput, in2 func(*iam.GetGroupOutput, bool) bool) error {
	if mock.GetGroupPagesFunc == nil {
		panic("IAMAPIMock.GetGroupPagesFunc: method is nil but IAMAPI.GetGroupPages was just called")
	}
	callInfo := struct {
		In1 *iam.GetGroupInput
		In2 func(*iam.GetGroupOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockGetGroupPages.Lock()
	mock.calls.GetGroupPages = append(mock.calls.GetGroupPages, callInfo)
	lockIAMAPIMockGetGroupPages.Unlock()
	return mock.GetGroupPagesFunc(in1, in2)
}

// GetGroupPagesCalls gets all the calls that were made to GetGroupPages.
// Check the length with:
//     len(mockedIAMAPI.GetGroupPagesCalls())
func (mock *IAMAPIMock) GetGroupPagesCalls() []struct {
	In1 *iam.GetGroupInput
	In2 func(*iam.GetGroupOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.GetGroupInput
		In2 func(*iam.GetGroupOutput, bool) bool
	}
	lockIAMAPIMockGetGroupPages.RLock()
	calls = mock.calls.GetGroupPages
	lockIAMAPIMockGetGroupPages.RUnlock()
	return calls
}

// GetGroupPagesWithContext calls GetGroupPagesWithContextFunc.
func (mock *IAMAPIMock) GetGroupPagesWithContext(in1 context.Context, in2 *iam.GetGroupInput, in3 func(*iam.GetGroupOutput, bool) bool, in4 ...request.Option) error {
	if mock.GetGroupPagesWithContextFunc == nil {
		panic("IAMAPIMock.GetGroupPagesWithContextFunc: method is nil but IAMAPI.GetGroupPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetGroupInput
		In3 func(*iam.GetGroupOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockGetGroupPagesWithContext.Lock()
	mock.calls.GetGroupPagesWithContext = append(mock.calls.GetGroupPagesWithContext, callInfo)
	lockIAMAPIMockGetGroupPagesWithContext.Unlock()
	return mock.GetGroupPagesWithContextFunc(in1, in2, in3, in4...)
}

// GetGroupPagesWithContextCalls gets all the calls that were made to GetGroupPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetGroupPagesWithContextCalls())
func (mock *IAMAPIMock) GetGroupPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetGroupInput
	In3 func(*iam.GetGroupOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetGroupInput
		In3 func(*iam.GetGroupOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockGetGroupPagesWithContext.RLock()
	calls = mock.calls.GetGroupPagesWithContext
	lockIAMAPIMockGetGroupPagesWithContext.RUnlock()
	return calls
}

// GetGroupPolicy calls GetGroupPolicyFunc.
func (mock *IAMAPIMock) GetGroupPolicy(in1 *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	if mock.GetGroupPolicyFunc == nil {
		panic("IAMAPIMock.GetGroupPolicyFunc: method is nil but IAMAPI.GetGroupPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.GetGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetGroupPolicy.Lock()
	mock.calls.GetGroupPolicy = append(mock.calls.GetGroupPolicy, callInfo)
	lockIAMAPIMockGetGroupPolicy.Unlock()
	return mock.GetGroupPolicyFunc(in1)
}

// GetGroupPolicyCalls gets all the calls that were made to GetGroupPolicy.
// Check the length with:
//     len(mockedIAMAPI.GetGroupPolicyCalls())
func (mock *IAMAPIMock) GetGroupPolicyCalls() []struct {
	In1 *iam.GetGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.GetGroupPolicyInput
	}
	lockIAMAPIMockGetGroupPolicy.RLock()
	calls = mock.calls.GetGroupPolicy
	lockIAMAPIMockGetGroupPolicy.RUnlock()
	return calls
}

// GetGroupPolicyRequest calls GetGroupPolicyRequestFunc.
func (mock *IAMAPIMock) GetGroupPolicyRequest(in1 *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput) {
	if mock.GetGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetGroupPolicyRequestFunc: method is nil but IAMAPI.GetGroupPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetGroupPolicyRequest.Lock()
	mock.calls.GetGroupPolicyRequest = append(mock.calls.GetGroupPolicyRequest, callInfo)
	lockIAMAPIMockGetGroupPolicyRequest.Unlock()
	return mock.GetGroupPolicyRequestFunc(in1)
}

// GetGroupPolicyRequestCalls gets all the calls that were made to GetGroupPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetGroupPolicyRequestCalls())
func (mock *IAMAPIMock) GetGroupPolicyRequestCalls() []struct {
	In1 *iam.GetGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.GetGroupPolicyInput
	}
	lockIAMAPIMockGetGroupPolicyRequest.RLock()
	calls = mock.calls.GetGroupPolicyRequest
	lockIAMAPIMockGetGroupPolicyRequest.RUnlock()
	return calls
}

// GetGroupPolicyWithContext calls GetGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) GetGroupPolicyWithContext(in1 context.Context, in2 *iam.GetGroupPolicyInput, in3 ...request.Option) (*iam.GetGroupPolicyOutput, error) {
	if mock.GetGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetGroupPolicyWithContextFunc: method is nil but IAMAPI.GetGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetGroupPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetGroupPolicyWithContext.Lock()
	mock.calls.GetGroupPolicyWithContext = append(mock.calls.GetGroupPolicyWithContext, callInfo)
	lockIAMAPIMockGetGroupPolicyWithContext.Unlock()
	return mock.GetGroupPolicyWithContextFunc(in1, in2, in3...)
}

// GetGroupPolicyWithContextCalls gets all the calls that were made to GetGroupPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) GetGroupPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetGroupPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetGroupPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetGroupPolicyWithContext.RLock()
	calls = mock.calls.GetGroupPolicyWithContext
	lockIAMAPIMockGetGroupPolicyWithContext.RUnlock()
	return calls
}

// GetGroupRequest calls GetGroupRequestFunc.
func (mock *IAMAPIMock) GetGroupRequest(in1 *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput) {
	if mock.GetGroupRequestFunc == nil {
		panic("IAMAPIMock.GetGroupRequestFunc: method is nil but IAMAPI.GetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetGroupRequest.Lock()
	mock.calls.GetGroupRequest = append(mock.calls.GetGroupRequest, callInfo)
	lockIAMAPIMockGetGroupRequest.Unlock()
	return mock.GetGroupRequestFunc(in1)
}

// GetGroupRequestCalls gets all the calls that were made to GetGroupRequest.
// Check the length with:
//     len(mockedIAMAPI.GetGroupRequestCalls())
func (mock *IAMAPIMock) GetGroupRequestCalls() []struct {
	In1 *iam.GetGroupInput
} {
	var calls []struct {
		In1 *iam.GetGroupInput
	}
	lockIAMAPIMockGetGroupRequest.RLock()
	calls = mock.calls.GetGroupRequest
	lockIAMAPIMockGetGroupRequest.RUnlock()
	return calls
}

// GetGroupWithContext calls GetGroupWithContextFunc.
func (mock *IAMAPIMock) GetGroupWithContext(in1 context.Context, in2 *iam.GetGroupInput, in3 ...request.Option) (*iam.GetGroupOutput, error) {
	if mock.GetGroupWithContextFunc == nil {
		panic("IAMAPIMock.GetGroupWithContextFunc: method is nil but IAMAPI.GetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetGroupWithContext.Lock()
	mock.calls.GetGroupWithContext = append(mock.calls.GetGroupWithContext, callInfo)
	lockIAMAPIMockGetGroupWithContext.Unlock()
	return mock.GetGroupWithContextFunc(in1, in2, in3...)
}

// GetGroupWithContextCalls gets all the calls that were made to GetGroupWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetGroupWithContextCalls())
func (mock *IAMAPIMock) GetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetGroupInput
		In3 []request.Option
	}
	lockIAMAPIMockGetGroupWithContext.RLock()
	calls = mock.calls.GetGroupWithContext
	lockIAMAPIMockGetGroupWithContext.RUnlock()
	return calls
}

// GetInstanceProfile calls GetInstanceProfileFunc.
func (mock *IAMAPIMock) GetInstanceProfile(in1 *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	if mock.GetInstanceProfileFunc == nil {
		panic("IAMAPIMock.GetInstanceProfileFunc: method is nil but IAMAPI.GetInstanceProfile was just called")
	}
	callInfo := struct {
		In1 *iam.GetInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetInstanceProfile.Lock()
	mock.calls.GetInstanceProfile = append(mock.calls.GetInstanceProfile, callInfo)
	lockIAMAPIMockGetInstanceProfile.Unlock()
	return mock.GetInstanceProfileFunc(in1)
}

// GetInstanceProfileCalls gets all the calls that were made to GetInstanceProfile.
// Check the length with:
//     len(mockedIAMAPI.GetInstanceProfileCalls())
func (mock *IAMAPIMock) GetInstanceProfileCalls() []struct {
	In1 *iam.GetInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.GetInstanceProfileInput
	}
	lockIAMAPIMockGetInstanceProfile.RLock()
	calls = mock.calls.GetInstanceProfile
	lockIAMAPIMockGetInstanceProfile.RUnlock()
	return calls
}

// GetInstanceProfileRequest calls GetInstanceProfileRequestFunc.
func (mock *IAMAPIMock) GetInstanceProfileRequest(in1 *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput) {
	if mock.GetInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.GetInstanceProfileRequestFunc: method is nil but IAMAPI.GetInstanceProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetInstanceProfileRequest.Lock()
	mock.calls.GetInstanceProfileRequest = append(mock.calls.GetInstanceProfileRequest, callInfo)
	lockIAMAPIMockGetInstanceProfileRequest.Unlock()
	return mock.GetInstanceProfileRequestFunc(in1)
}

// GetInstanceProfileRequestCalls gets all the calls that were made to GetInstanceProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.GetInstanceProfileRequestCalls())
func (mock *IAMAPIMock) GetInstanceProfileRequestCalls() []struct {
	In1 *iam.GetInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.GetInstanceProfileInput
	}
	lockIAMAPIMockGetInstanceProfileRequest.RLock()
	calls = mock.calls.GetInstanceProfileRequest
	lockIAMAPIMockGetInstanceProfileRequest.RUnlock()
	return calls
}

// GetInstanceProfileWithContext calls GetInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) GetInstanceProfileWithContext(in1 context.Context, in2 *iam.GetInstanceProfileInput, in3 ...request.Option) (*iam.GetInstanceProfileOutput, error) {
	if mock.GetInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.GetInstanceProfileWithContextFunc: method is nil but IAMAPI.GetInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetInstanceProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetInstanceProfileWithContext.Lock()
	mock.calls.GetInstanceProfileWithContext = append(mock.calls.GetInstanceProfileWithContext, callInfo)
	lockIAMAPIMockGetInstanceProfileWithContext.Unlock()
	return mock.GetInstanceProfileWithContextFunc(in1, in2, in3...)
}

// GetInstanceProfileWithContextCalls gets all the calls that were made to GetInstanceProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) GetInstanceProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetInstanceProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetInstanceProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockGetInstanceProfileWithContext.RLock()
	calls = mock.calls.GetInstanceProfileWithContext
	lockIAMAPIMockGetInstanceProfileWithContext.RUnlock()
	return calls
}

// GetLoginProfile calls GetLoginProfileFunc.
func (mock *IAMAPIMock) GetLoginProfile(in1 *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	if mock.GetLoginProfileFunc == nil {
		panic("IAMAPIMock.GetLoginProfileFunc: method is nil but IAMAPI.GetLoginProfile was just called")
	}
	callInfo := struct {
		In1 *iam.GetLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetLoginProfile.Lock()
	mock.calls.GetLoginProfile = append(mock.calls.GetLoginProfile, callInfo)
	lockIAMAPIMockGetLoginProfile.Unlock()
	return mock.GetLoginProfileFunc(in1)
}

// GetLoginProfileCalls gets all the calls that were made to GetLoginProfile.
// Check the length with:
//     len(mockedIAMAPI.GetLoginProfileCalls())
func (mock *IAMAPIMock) GetLoginProfileCalls() []struct {
	In1 *iam.GetLoginProfileInput
} {
	var calls []struct {
		In1 *iam.GetLoginProfileInput
	}
	lockIAMAPIMockGetLoginProfile.RLock()
	calls = mock.calls.GetLoginProfile
	lockIAMAPIMockGetLoginProfile.RUnlock()
	return calls
}

// GetLoginProfileRequest calls GetLoginProfileRequestFunc.
func (mock *IAMAPIMock) GetLoginProfileRequest(in1 *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput) {
	if mock.GetLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.GetLoginProfileRequestFunc: method is nil but IAMAPI.GetLoginProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetLoginProfileRequest.Lock()
	mock.calls.GetLoginProfileRequest = append(mock.calls.GetLoginProfileRequest, callInfo)
	lockIAMAPIMockGetLoginProfileRequest.Unlock()
	return mock.GetLoginProfileRequestFunc(in1)
}

// GetLoginProfileRequestCalls gets all the calls that were made to GetLoginProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.GetLoginProfileRequestCalls())
func (mock *IAMAPIMock) GetLoginProfileRequestCalls() []struct {
	In1 *iam.GetLoginProfileInput
} {
	var calls []struct {
		In1 *iam.GetLoginProfileInput
	}
	lockIAMAPIMockGetLoginProfileRequest.RLock()
	calls = mock.calls.GetLoginProfileRequest
	lockIAMAPIMockGetLoginProfileRequest.RUnlock()
	return calls
}

// GetLoginProfileWithContext calls GetLoginProfileWithContextFunc.
func (mock *IAMAPIMock) GetLoginProfileWithContext(in1 context.Context, in2 *iam.GetLoginProfileInput, in3 ...request.Option) (*iam.GetLoginProfileOutput, error) {
	if mock.GetLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.GetLoginProfileWithContextFunc: method is nil but IAMAPI.GetLoginProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetLoginProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetLoginProfileWithContext.Lock()
	mock.calls.GetLoginProfileWithContext = append(mock.calls.GetLoginProfileWithContext, callInfo)
	lockIAMAPIMockGetLoginProfileWithContext.Unlock()
	return mock.GetLoginProfileWithContextFunc(in1, in2, in3...)
}

// GetLoginProfileWithContextCalls gets all the calls that were made to GetLoginProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetLoginProfileWithContextCalls())
func (mock *IAMAPIMock) GetLoginProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetLoginProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetLoginProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockGetLoginProfileWithContext.RLock()
	calls = mock.calls.GetLoginProfileWithContext
	lockIAMAPIMockGetLoginProfileWithContext.RUnlock()
	return calls
}

// GetOpenIDConnectProvider calls GetOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) GetOpenIDConnectProvider(in1 *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	if mock.GetOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.GetOpenIDConnectProviderFunc: method is nil but IAMAPI.GetOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		In1 *iam.GetOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetOpenIDConnectProvider.Lock()
	mock.calls.GetOpenIDConnectProvider = append(mock.calls.GetOpenIDConnectProvider, callInfo)
	lockIAMAPIMockGetOpenIDConnectProvider.Unlock()
	return mock.GetOpenIDConnectProviderFunc(in1)
}

// GetOpenIDConnectProviderCalls gets all the calls that were made to GetOpenIDConnectProvider.
// Check the length with:
//     len(mockedIAMAPI.GetOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) GetOpenIDConnectProviderCalls() []struct {
	In1 *iam.GetOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.GetOpenIDConnectProviderInput
	}
	lockIAMAPIMockGetOpenIDConnectProvider.RLock()
	calls = mock.calls.GetOpenIDConnectProvider
	lockIAMAPIMockGetOpenIDConnectProvider.RUnlock()
	return calls
}

// GetOpenIDConnectProviderRequest calls GetOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) GetOpenIDConnectProviderRequest(in1 *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput) {
	if mock.GetOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.GetOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.GetOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetOpenIDConnectProviderRequest.Lock()
	mock.calls.GetOpenIDConnectProviderRequest = append(mock.calls.GetOpenIDConnectProviderRequest, callInfo)
	lockIAMAPIMockGetOpenIDConnectProviderRequest.Unlock()
	return mock.GetOpenIDConnectProviderRequestFunc(in1)
}

// GetOpenIDConnectProviderRequestCalls gets all the calls that were made to GetOpenIDConnectProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.GetOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) GetOpenIDConnectProviderRequestCalls() []struct {
	In1 *iam.GetOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.GetOpenIDConnectProviderInput
	}
	lockIAMAPIMockGetOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.GetOpenIDConnectProviderRequest
	lockIAMAPIMockGetOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// GetOpenIDConnectProviderWithContext calls GetOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) GetOpenIDConnectProviderWithContext(in1 context.Context, in2 *iam.GetOpenIDConnectProviderInput, in3 ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
	if mock.GetOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.GetOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.GetOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetOpenIDConnectProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetOpenIDConnectProviderWithContext.Lock()
	mock.calls.GetOpenIDConnectProviderWithContext = append(mock.calls.GetOpenIDConnectProviderWithContext, callInfo)
	lockIAMAPIMockGetOpenIDConnectProviderWithContext.Unlock()
	return mock.GetOpenIDConnectProviderWithContextFunc(in1, in2, in3...)
}

// GetOpenIDConnectProviderWithContextCalls gets all the calls that were made to GetOpenIDConnectProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) GetOpenIDConnectProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetOpenIDConnectProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetOpenIDConnectProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockGetOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.GetOpenIDConnectProviderWithContext
	lockIAMAPIMockGetOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// GetOrganizationsAccessReport calls GetOrganizationsAccessReportFunc.
func (mock *IAMAPIMock) GetOrganizationsAccessReport(in1 *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
	if mock.GetOrganizationsAccessReportFunc == nil {
		panic("IAMAPIMock.GetOrganizationsAccessReportFunc: method is nil but IAMAPI.GetOrganizationsAccessReport was just called")
	}
	callInfo := struct {
		In1 *iam.GetOrganizationsAccessReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetOrganizationsAccessReport.Lock()
	mock.calls.GetOrganizationsAccessReport = append(mock.calls.GetOrganizationsAccessReport, callInfo)
	lockIAMAPIMockGetOrganizationsAccessReport.Unlock()
	return mock.GetOrganizationsAccessReportFunc(in1)
}

// GetOrganizationsAccessReportCalls gets all the calls that were made to GetOrganizationsAccessReport.
// Check the length with:
//     len(mockedIAMAPI.GetOrganizationsAccessReportCalls())
func (mock *IAMAPIMock) GetOrganizationsAccessReportCalls() []struct {
	In1 *iam.GetOrganizationsAccessReportInput
} {
	var calls []struct {
		In1 *iam.GetOrganizationsAccessReportInput
	}
	lockIAMAPIMockGetOrganizationsAccessReport.RLock()
	calls = mock.calls.GetOrganizationsAccessReport
	lockIAMAPIMockGetOrganizationsAccessReport.RUnlock()
	return calls
}

// GetOrganizationsAccessReportRequest calls GetOrganizationsAccessReportRequestFunc.
func (mock *IAMAPIMock) GetOrganizationsAccessReportRequest(in1 *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput) {
	if mock.GetOrganizationsAccessReportRequestFunc == nil {
		panic("IAMAPIMock.GetOrganizationsAccessReportRequestFunc: method is nil but IAMAPI.GetOrganizationsAccessReportRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetOrganizationsAccessReportInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetOrganizationsAccessReportRequest.Lock()
	mock.calls.GetOrganizationsAccessReportRequest = append(mock.calls.GetOrganizationsAccessReportRequest, callInfo)
	lockIAMAPIMockGetOrganizationsAccessReportRequest.Unlock()
	return mock.GetOrganizationsAccessReportRequestFunc(in1)
}

// GetOrganizationsAccessReportRequestCalls gets all the calls that were made to GetOrganizationsAccessReportRequest.
// Check the length with:
//     len(mockedIAMAPI.GetOrganizationsAccessReportRequestCalls())
func (mock *IAMAPIMock) GetOrganizationsAccessReportRequestCalls() []struct {
	In1 *iam.GetOrganizationsAccessReportInput
} {
	var calls []struct {
		In1 *iam.GetOrganizationsAccessReportInput
	}
	lockIAMAPIMockGetOrganizationsAccessReportRequest.RLock()
	calls = mock.calls.GetOrganizationsAccessReportRequest
	lockIAMAPIMockGetOrganizationsAccessReportRequest.RUnlock()
	return calls
}

// GetOrganizationsAccessReportWithContext calls GetOrganizationsAccessReportWithContextFunc.
func (mock *IAMAPIMock) GetOrganizationsAccessReportWithContext(in1 context.Context, in2 *iam.GetOrganizationsAccessReportInput, in3 ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {
	if mock.GetOrganizationsAccessReportWithContextFunc == nil {
		panic("IAMAPIMock.GetOrganizationsAccessReportWithContextFunc: method is nil but IAMAPI.GetOrganizationsAccessReportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetOrganizationsAccessReportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetOrganizationsAccessReportWithContext.Lock()
	mock.calls.GetOrganizationsAccessReportWithContext = append(mock.calls.GetOrganizationsAccessReportWithContext, callInfo)
	lockIAMAPIMockGetOrganizationsAccessReportWithContext.Unlock()
	return mock.GetOrganizationsAccessReportWithContextFunc(in1, in2, in3...)
}

// GetOrganizationsAccessReportWithContextCalls gets all the calls that were made to GetOrganizationsAccessReportWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetOrganizationsAccessReportWithContextCalls())
func (mock *IAMAPIMock) GetOrganizationsAccessReportWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetOrganizationsAccessReportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetOrganizationsAccessReportInput
		In3 []request.Option
	}
	lockIAMAPIMockGetOrganizationsAccessReportWithContext.RLock()
	calls = mock.calls.GetOrganizationsAccessReportWithContext
	lockIAMAPIMockGetOrganizationsAccessReportWithContext.RUnlock()
	return calls
}

// GetPolicy calls GetPolicyFunc.
func (mock *IAMAPIMock) GetPolicy(in1 *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	if mock.GetPolicyFunc == nil {
		panic("IAMAPIMock.GetPolicyFunc: method is nil but IAMAPI.GetPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.GetPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetPolicy.Lock()
	mock.calls.GetPolicy = append(mock.calls.GetPolicy, callInfo)
	lockIAMAPIMockGetPolicy.Unlock()
	return mock.GetPolicyFunc(in1)
}

// GetPolicyCalls gets all the calls that were made to GetPolicy.
// Check the length with:
//     len(mockedIAMAPI.GetPolicyCalls())
func (mock *IAMAPIMock) GetPolicyCalls() []struct {
	In1 *iam.GetPolicyInput
} {
	var calls []struct {
		In1 *iam.GetPolicyInput
	}
	lockIAMAPIMockGetPolicy.RLock()
	calls = mock.calls.GetPolicy
	lockIAMAPIMockGetPolicy.RUnlock()
	return calls
}

// GetPolicyRequest calls GetPolicyRequestFunc.
func (mock *IAMAPIMock) GetPolicyRequest(in1 *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput) {
	if mock.GetPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetPolicyRequestFunc: method is nil but IAMAPI.GetPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetPolicyRequest.Lock()
	mock.calls.GetPolicyRequest = append(mock.calls.GetPolicyRequest, callInfo)
	lockIAMAPIMockGetPolicyRequest.Unlock()
	return mock.GetPolicyRequestFunc(in1)
}

// GetPolicyRequestCalls gets all the calls that were made to GetPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetPolicyRequestCalls())
func (mock *IAMAPIMock) GetPolicyRequestCalls() []struct {
	In1 *iam.GetPolicyInput
} {
	var calls []struct {
		In1 *iam.GetPolicyInput
	}
	lockIAMAPIMockGetPolicyRequest.RLock()
	calls = mock.calls.GetPolicyRequest
	lockIAMAPIMockGetPolicyRequest.RUnlock()
	return calls
}

// GetPolicyVersion calls GetPolicyVersionFunc.
func (mock *IAMAPIMock) GetPolicyVersion(in1 *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	if mock.GetPolicyVersionFunc == nil {
		panic("IAMAPIMock.GetPolicyVersionFunc: method is nil but IAMAPI.GetPolicyVersion was just called")
	}
	callInfo := struct {
		In1 *iam.GetPolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetPolicyVersion.Lock()
	mock.calls.GetPolicyVersion = append(mock.calls.GetPolicyVersion, callInfo)
	lockIAMAPIMockGetPolicyVersion.Unlock()
	return mock.GetPolicyVersionFunc(in1)
}

// GetPolicyVersionCalls gets all the calls that were made to GetPolicyVersion.
// Check the length with:
//     len(mockedIAMAPI.GetPolicyVersionCalls())
func (mock *IAMAPIMock) GetPolicyVersionCalls() []struct {
	In1 *iam.GetPolicyVersionInput
} {
	var calls []struct {
		In1 *iam.GetPolicyVersionInput
	}
	lockIAMAPIMockGetPolicyVersion.RLock()
	calls = mock.calls.GetPolicyVersion
	lockIAMAPIMockGetPolicyVersion.RUnlock()
	return calls
}

// GetPolicyVersionRequest calls GetPolicyVersionRequestFunc.
func (mock *IAMAPIMock) GetPolicyVersionRequest(in1 *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput) {
	if mock.GetPolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.GetPolicyVersionRequestFunc: method is nil but IAMAPI.GetPolicyVersionRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetPolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetPolicyVersionRequest.Lock()
	mock.calls.GetPolicyVersionRequest = append(mock.calls.GetPolicyVersionRequest, callInfo)
	lockIAMAPIMockGetPolicyVersionRequest.Unlock()
	return mock.GetPolicyVersionRequestFunc(in1)
}

// GetPolicyVersionRequestCalls gets all the calls that were made to GetPolicyVersionRequest.
// Check the length with:
//     len(mockedIAMAPI.GetPolicyVersionRequestCalls())
func (mock *IAMAPIMock) GetPolicyVersionRequestCalls() []struct {
	In1 *iam.GetPolicyVersionInput
} {
	var calls []struct {
		In1 *iam.GetPolicyVersionInput
	}
	lockIAMAPIMockGetPolicyVersionRequest.RLock()
	calls = mock.calls.GetPolicyVersionRequest
	lockIAMAPIMockGetPolicyVersionRequest.RUnlock()
	return calls
}

// GetPolicyVersionWithContext calls GetPolicyVersionWithContextFunc.
func (mock *IAMAPIMock) GetPolicyVersionWithContext(in1 context.Context, in2 *iam.GetPolicyVersionInput, in3 ...request.Option) (*iam.GetPolicyVersionOutput, error) {
	if mock.GetPolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.GetPolicyVersionWithContextFunc: method is nil but IAMAPI.GetPolicyVersionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetPolicyVersionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetPolicyVersionWithContext.Lock()
	mock.calls.GetPolicyVersionWithContext = append(mock.calls.GetPolicyVersionWithContext, callInfo)
	lockIAMAPIMockGetPolicyVersionWithContext.Unlock()
	return mock.GetPolicyVersionWithContextFunc(in1, in2, in3...)
}

// GetPolicyVersionWithContextCalls gets all the calls that were made to GetPolicyVersionWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetPolicyVersionWithContextCalls())
func (mock *IAMAPIMock) GetPolicyVersionWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetPolicyVersionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetPolicyVersionInput
		In3 []request.Option
	}
	lockIAMAPIMockGetPolicyVersionWithContext.RLock()
	calls = mock.calls.GetPolicyVersionWithContext
	lockIAMAPIMockGetPolicyVersionWithContext.RUnlock()
	return calls
}

// GetPolicyWithContext calls GetPolicyWithContextFunc.
func (mock *IAMAPIMock) GetPolicyWithContext(in1 context.Context, in2 *iam.GetPolicyInput, in3 ...request.Option) (*iam.GetPolicyOutput, error) {
	if mock.GetPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetPolicyWithContextFunc: method is nil but IAMAPI.GetPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetPolicyWithContext.Lock()
	mock.calls.GetPolicyWithContext = append(mock.calls.GetPolicyWithContext, callInfo)
	lockIAMAPIMockGetPolicyWithContext.Unlock()
	return mock.GetPolicyWithContextFunc(in1, in2, in3...)
}

// GetPolicyWithContextCalls gets all the calls that were made to GetPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetPolicyWithContextCalls())
func (mock *IAMAPIMock) GetPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetPolicyWithContext.RLock()
	calls = mock.calls.GetPolicyWithContext
	lockIAMAPIMockGetPolicyWithContext.RUnlock()
	return calls
}

// GetRole calls GetRoleFunc.
func (mock *IAMAPIMock) GetRole(in1 *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	if mock.GetRoleFunc == nil {
		panic("IAMAPIMock.GetRoleFunc: method is nil but IAMAPI.GetRole was just called")
	}
	callInfo := struct {
		In1 *iam.GetRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetRole.Lock()
	mock.calls.GetRole = append(mock.calls.GetRole, callInfo)
	lockIAMAPIMockGetRole.Unlock()
	return mock.GetRoleFunc(in1)
}

// GetRoleCalls gets all the calls that were made to GetRole.
// Check the length with:
//     len(mockedIAMAPI.GetRoleCalls())
func (mock *IAMAPIMock) GetRoleCalls() []struct {
	In1 *iam.GetRoleInput
} {
	var calls []struct {
		In1 *iam.GetRoleInput
	}
	lockIAMAPIMockGetRole.RLock()
	calls = mock.calls.GetRole
	lockIAMAPIMockGetRole.RUnlock()
	return calls
}

// GetRolePolicy calls GetRolePolicyFunc.
func (mock *IAMAPIMock) GetRolePolicy(in1 *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	if mock.GetRolePolicyFunc == nil {
		panic("IAMAPIMock.GetRolePolicyFunc: method is nil but IAMAPI.GetRolePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.GetRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetRolePolicy.Lock()
	mock.calls.GetRolePolicy = append(mock.calls.GetRolePolicy, callInfo)
	lockIAMAPIMockGetRolePolicy.Unlock()
	return mock.GetRolePolicyFunc(in1)
}

// GetRolePolicyCalls gets all the calls that were made to GetRolePolicy.
// Check the length with:
//     len(mockedIAMAPI.GetRolePolicyCalls())
func (mock *IAMAPIMock) GetRolePolicyCalls() []struct {
	In1 *iam.GetRolePolicyInput
} {
	var calls []struct {
		In1 *iam.GetRolePolicyInput
	}
	lockIAMAPIMockGetRolePolicy.RLock()
	calls = mock.calls.GetRolePolicy
	lockIAMAPIMockGetRolePolicy.RUnlock()
	return calls
}

// GetRolePolicyRequest calls GetRolePolicyRequestFunc.
func (mock *IAMAPIMock) GetRolePolicyRequest(in1 *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput) {
	if mock.GetRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.GetRolePolicyRequestFunc: method is nil but IAMAPI.GetRolePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetRolePolicyRequest.Lock()
	mock.calls.GetRolePolicyRequest = append(mock.calls.GetRolePolicyRequest, callInfo)
	lockIAMAPIMockGetRolePolicyRequest.Unlock()
	return mock.GetRolePolicyRequestFunc(in1)
}

// GetRolePolicyRequestCalls gets all the calls that were made to GetRolePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetRolePolicyRequestCalls())
func (mock *IAMAPIMock) GetRolePolicyRequestCalls() []struct {
	In1 *iam.GetRolePolicyInput
} {
	var calls []struct {
		In1 *iam.GetRolePolicyInput
	}
	lockIAMAPIMockGetRolePolicyRequest.RLock()
	calls = mock.calls.GetRolePolicyRequest
	lockIAMAPIMockGetRolePolicyRequest.RUnlock()
	return calls
}

// GetRolePolicyWithContext calls GetRolePolicyWithContextFunc.
func (mock *IAMAPIMock) GetRolePolicyWithContext(in1 context.Context, in2 *iam.GetRolePolicyInput, in3 ...request.Option) (*iam.GetRolePolicyOutput, error) {
	if mock.GetRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetRolePolicyWithContextFunc: method is nil but IAMAPI.GetRolePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetRolePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetRolePolicyWithContext.Lock()
	mock.calls.GetRolePolicyWithContext = append(mock.calls.GetRolePolicyWithContext, callInfo)
	lockIAMAPIMockGetRolePolicyWithContext.Unlock()
	return mock.GetRolePolicyWithContextFunc(in1, in2, in3...)
}

// GetRolePolicyWithContextCalls gets all the calls that were made to GetRolePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetRolePolicyWithContextCalls())
func (mock *IAMAPIMock) GetRolePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetRolePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetRolePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetRolePolicyWithContext.RLock()
	calls = mock.calls.GetRolePolicyWithContext
	lockIAMAPIMockGetRolePolicyWithContext.RUnlock()
	return calls
}

// GetRoleRequest calls GetRoleRequestFunc.
func (mock *IAMAPIMock) GetRoleRequest(in1 *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput) {
	if mock.GetRoleRequestFunc == nil {
		panic("IAMAPIMock.GetRoleRequestFunc: method is nil but IAMAPI.GetRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetRoleRequest.Lock()
	mock.calls.GetRoleRequest = append(mock.calls.GetRoleRequest, callInfo)
	lockIAMAPIMockGetRoleRequest.Unlock()
	return mock.GetRoleRequestFunc(in1)
}

// GetRoleRequestCalls gets all the calls that were made to GetRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.GetRoleRequestCalls())
func (mock *IAMAPIMock) GetRoleRequestCalls() []struct {
	In1 *iam.GetRoleInput
} {
	var calls []struct {
		In1 *iam.GetRoleInput
	}
	lockIAMAPIMockGetRoleRequest.RLock()
	calls = mock.calls.GetRoleRequest
	lockIAMAPIMockGetRoleRequest.RUnlock()
	return calls
}

// GetRoleWithContext calls GetRoleWithContextFunc.
func (mock *IAMAPIMock) GetRoleWithContext(in1 context.Context, in2 *iam.GetRoleInput, in3 ...request.Option) (*iam.GetRoleOutput, error) {
	if mock.GetRoleWithContextFunc == nil {
		panic("IAMAPIMock.GetRoleWithContextFunc: method is nil but IAMAPI.GetRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetRoleWithContext.Lock()
	mock.calls.GetRoleWithContext = append(mock.calls.GetRoleWithContext, callInfo)
	lockIAMAPIMockGetRoleWithContext.Unlock()
	return mock.GetRoleWithContextFunc(in1, in2, in3...)
}

// GetRoleWithContextCalls gets all the calls that were made to GetRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetRoleWithContextCalls())
func (mock *IAMAPIMock) GetRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockGetRoleWithContext.RLock()
	calls = mock.calls.GetRoleWithContext
	lockIAMAPIMockGetRoleWithContext.RUnlock()
	return calls
}

// GetSAMLProvider calls GetSAMLProviderFunc.
func (mock *IAMAPIMock) GetSAMLProvider(in1 *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	if mock.GetSAMLProviderFunc == nil {
		panic("IAMAPIMock.GetSAMLProviderFunc: method is nil but IAMAPI.GetSAMLProvider was just called")
	}
	callInfo := struct {
		In1 *iam.GetSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetSAMLProvider.Lock()
	mock.calls.GetSAMLProvider = append(mock.calls.GetSAMLProvider, callInfo)
	lockIAMAPIMockGetSAMLProvider.Unlock()
	return mock.GetSAMLProviderFunc(in1)
}

// GetSAMLProviderCalls gets all the calls that were made to GetSAMLProvider.
// Check the length with:
//     len(mockedIAMAPI.GetSAMLProviderCalls())
func (mock *IAMAPIMock) GetSAMLProviderCalls() []struct {
	In1 *iam.GetSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.GetSAMLProviderInput
	}
	lockIAMAPIMockGetSAMLProvider.RLock()
	calls = mock.calls.GetSAMLProvider
	lockIAMAPIMockGetSAMLProvider.RUnlock()
	return calls
}

// GetSAMLProviderRequest calls GetSAMLProviderRequestFunc.
func (mock *IAMAPIMock) GetSAMLProviderRequest(in1 *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput) {
	if mock.GetSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.GetSAMLProviderRequestFunc: method is nil but IAMAPI.GetSAMLProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetSAMLProviderRequest.Lock()
	mock.calls.GetSAMLProviderRequest = append(mock.calls.GetSAMLProviderRequest, callInfo)
	lockIAMAPIMockGetSAMLProviderRequest.Unlock()
	return mock.GetSAMLProviderRequestFunc(in1)
}

// GetSAMLProviderRequestCalls gets all the calls that were made to GetSAMLProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.GetSAMLProviderRequestCalls())
func (mock *IAMAPIMock) GetSAMLProviderRequestCalls() []struct {
	In1 *iam.GetSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.GetSAMLProviderInput
	}
	lockIAMAPIMockGetSAMLProviderRequest.RLock()
	calls = mock.calls.GetSAMLProviderRequest
	lockIAMAPIMockGetSAMLProviderRequest.RUnlock()
	return calls
}

// GetSAMLProviderWithContext calls GetSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) GetSAMLProviderWithContext(in1 context.Context, in2 *iam.GetSAMLProviderInput, in3 ...request.Option) (*iam.GetSAMLProviderOutput, error) {
	if mock.GetSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.GetSAMLProviderWithContextFunc: method is nil but IAMAPI.GetSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetSAMLProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetSAMLProviderWithContext.Lock()
	mock.calls.GetSAMLProviderWithContext = append(mock.calls.GetSAMLProviderWithContext, callInfo)
	lockIAMAPIMockGetSAMLProviderWithContext.Unlock()
	return mock.GetSAMLProviderWithContextFunc(in1, in2, in3...)
}

// GetSAMLProviderWithContextCalls gets all the calls that were made to GetSAMLProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) GetSAMLProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetSAMLProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetSAMLProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockGetSAMLProviderWithContext.RLock()
	calls = mock.calls.GetSAMLProviderWithContext
	lockIAMAPIMockGetSAMLProviderWithContext.RUnlock()
	return calls
}

// GetSSHPublicKey calls GetSSHPublicKeyFunc.
func (mock *IAMAPIMock) GetSSHPublicKey(in1 *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	if mock.GetSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.GetSSHPublicKeyFunc: method is nil but IAMAPI.GetSSHPublicKey was just called")
	}
	callInfo := struct {
		In1 *iam.GetSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetSSHPublicKey.Lock()
	mock.calls.GetSSHPublicKey = append(mock.calls.GetSSHPublicKey, callInfo)
	lockIAMAPIMockGetSSHPublicKey.Unlock()
	return mock.GetSSHPublicKeyFunc(in1)
}

// GetSSHPublicKeyCalls gets all the calls that were made to GetSSHPublicKey.
// Check the length with:
//     len(mockedIAMAPI.GetSSHPublicKeyCalls())
func (mock *IAMAPIMock) GetSSHPublicKeyCalls() []struct {
	In1 *iam.GetSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.GetSSHPublicKeyInput
	}
	lockIAMAPIMockGetSSHPublicKey.RLock()
	calls = mock.calls.GetSSHPublicKey
	lockIAMAPIMockGetSSHPublicKey.RUnlock()
	return calls
}

// GetSSHPublicKeyRequest calls GetSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) GetSSHPublicKeyRequest(in1 *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput) {
	if mock.GetSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.GetSSHPublicKeyRequestFunc: method is nil but IAMAPI.GetSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetSSHPublicKeyRequest.Lock()
	mock.calls.GetSSHPublicKeyRequest = append(mock.calls.GetSSHPublicKeyRequest, callInfo)
	lockIAMAPIMockGetSSHPublicKeyRequest.Unlock()
	return mock.GetSSHPublicKeyRequestFunc(in1)
}

// GetSSHPublicKeyRequestCalls gets all the calls that were made to GetSSHPublicKeyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) GetSSHPublicKeyRequestCalls() []struct {
	In1 *iam.GetSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.GetSSHPublicKeyInput
	}
	lockIAMAPIMockGetSSHPublicKeyRequest.RLock()
	calls = mock.calls.GetSSHPublicKeyRequest
	lockIAMAPIMockGetSSHPublicKeyRequest.RUnlock()
	return calls
}

// GetSSHPublicKeyWithContext calls GetSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) GetSSHPublicKeyWithContext(in1 context.Context, in2 *iam.GetSSHPublicKeyInput, in3 ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
	if mock.GetSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.GetSSHPublicKeyWithContextFunc: method is nil but IAMAPI.GetSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetSSHPublicKeyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetSSHPublicKeyWithContext.Lock()
	mock.calls.GetSSHPublicKeyWithContext = append(mock.calls.GetSSHPublicKeyWithContext, callInfo)
	lockIAMAPIMockGetSSHPublicKeyWithContext.Unlock()
	return mock.GetSSHPublicKeyWithContextFunc(in1, in2, in3...)
}

// GetSSHPublicKeyWithContextCalls gets all the calls that were made to GetSSHPublicKeyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) GetSSHPublicKeyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetSSHPublicKeyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetSSHPublicKeyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetSSHPublicKeyWithContext.RLock()
	calls = mock.calls.GetSSHPublicKeyWithContext
	lockIAMAPIMockGetSSHPublicKeyWithContext.RUnlock()
	return calls
}

// GetServerCertificate calls GetServerCertificateFunc.
func (mock *IAMAPIMock) GetServerCertificate(in1 *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	if mock.GetServerCertificateFunc == nil {
		panic("IAMAPIMock.GetServerCertificateFunc: method is nil but IAMAPI.GetServerCertificate was just called")
	}
	callInfo := struct {
		In1 *iam.GetServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServerCertificate.Lock()
	mock.calls.GetServerCertificate = append(mock.calls.GetServerCertificate, callInfo)
	lockIAMAPIMockGetServerCertificate.Unlock()
	return mock.GetServerCertificateFunc(in1)
}

// GetServerCertificateCalls gets all the calls that were made to GetServerCertificate.
// Check the length with:
//     len(mockedIAMAPI.GetServerCertificateCalls())
func (mock *IAMAPIMock) GetServerCertificateCalls() []struct {
	In1 *iam.GetServerCertificateInput
} {
	var calls []struct {
		In1 *iam.GetServerCertificateInput
	}
	lockIAMAPIMockGetServerCertificate.RLock()
	calls = mock.calls.GetServerCertificate
	lockIAMAPIMockGetServerCertificate.RUnlock()
	return calls
}

// GetServerCertificateRequest calls GetServerCertificateRequestFunc.
func (mock *IAMAPIMock) GetServerCertificateRequest(in1 *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput) {
	if mock.GetServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.GetServerCertificateRequestFunc: method is nil but IAMAPI.GetServerCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServerCertificateRequest.Lock()
	mock.calls.GetServerCertificateRequest = append(mock.calls.GetServerCertificateRequest, callInfo)
	lockIAMAPIMockGetServerCertificateRequest.Unlock()
	return mock.GetServerCertificateRequestFunc(in1)
}

// GetServerCertificateRequestCalls gets all the calls that were made to GetServerCertificateRequest.
// Check the length with:
//     len(mockedIAMAPI.GetServerCertificateRequestCalls())
func (mock *IAMAPIMock) GetServerCertificateRequestCalls() []struct {
	In1 *iam.GetServerCertificateInput
} {
	var calls []struct {
		In1 *iam.GetServerCertificateInput
	}
	lockIAMAPIMockGetServerCertificateRequest.RLock()
	calls = mock.calls.GetServerCertificateRequest
	lockIAMAPIMockGetServerCertificateRequest.RUnlock()
	return calls
}

// GetServerCertificateWithContext calls GetServerCertificateWithContextFunc.
func (mock *IAMAPIMock) GetServerCertificateWithContext(in1 context.Context, in2 *iam.GetServerCertificateInput, in3 ...request.Option) (*iam.GetServerCertificateOutput, error) {
	if mock.GetServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.GetServerCertificateWithContextFunc: method is nil but IAMAPI.GetServerCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetServerCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetServerCertificateWithContext.Lock()
	mock.calls.GetServerCertificateWithContext = append(mock.calls.GetServerCertificateWithContext, callInfo)
	lockIAMAPIMockGetServerCertificateWithContext.Unlock()
	return mock.GetServerCertificateWithContextFunc(in1, in2, in3...)
}

// GetServerCertificateWithContextCalls gets all the calls that were made to GetServerCertificateWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetServerCertificateWithContextCalls())
func (mock *IAMAPIMock) GetServerCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetServerCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetServerCertificateInput
		In3 []request.Option
	}
	lockIAMAPIMockGetServerCertificateWithContext.RLock()
	calls = mock.calls.GetServerCertificateWithContext
	lockIAMAPIMockGetServerCertificateWithContext.RUnlock()
	return calls
}

// GetServiceLastAccessedDetails calls GetServiceLastAccessedDetailsFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetails(in1 *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	if mock.GetServiceLastAccessedDetailsFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsFunc: method is nil but IAMAPI.GetServiceLastAccessedDetails was just called")
	}
	callInfo := struct {
		In1 *iam.GetServiceLastAccessedDetailsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServiceLastAccessedDetails.Lock()
	mock.calls.GetServiceLastAccessedDetails = append(mock.calls.GetServiceLastAccessedDetails, callInfo)
	lockIAMAPIMockGetServiceLastAccessedDetails.Unlock()
	return mock.GetServiceLastAccessedDetailsFunc(in1)
}

// GetServiceLastAccessedDetailsCalls gets all the calls that were made to GetServiceLastAccessedDetails.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLastAccessedDetailsCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsCalls() []struct {
	In1 *iam.GetServiceLastAccessedDetailsInput
} {
	var calls []struct {
		In1 *iam.GetServiceLastAccessedDetailsInput
	}
	lockIAMAPIMockGetServiceLastAccessedDetails.RLock()
	calls = mock.calls.GetServiceLastAccessedDetails
	lockIAMAPIMockGetServiceLastAccessedDetails.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsRequest calls GetServiceLastAccessedDetailsRequestFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsRequest(in1 *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput) {
	if mock.GetServiceLastAccessedDetailsRequestFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsRequestFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetServiceLastAccessedDetailsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsRequest.Lock()
	mock.calls.GetServiceLastAccessedDetailsRequest = append(mock.calls.GetServiceLastAccessedDetailsRequest, callInfo)
	lockIAMAPIMockGetServiceLastAccessedDetailsRequest.Unlock()
	return mock.GetServiceLastAccessedDetailsRequestFunc(in1)
}

// GetServiceLastAccessedDetailsRequestCalls gets all the calls that were made to GetServiceLastAccessedDetailsRequest.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLastAccessedDetailsRequestCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsRequestCalls() []struct {
	In1 *iam.GetServiceLastAccessedDetailsInput
} {
	var calls []struct {
		In1 *iam.GetServiceLastAccessedDetailsInput
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsRequest.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsRequest
	lockIAMAPIMockGetServiceLastAccessedDetailsRequest.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithContext calls GetServiceLastAccessedDetailsWithContextFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithContext(in1 context.Context, in2 *iam.GetServiceLastAccessedDetailsInput, in3 ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	if mock.GetServiceLastAccessedDetailsWithContextFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithContextFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetServiceLastAccessedDetailsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithContext.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithContext = append(mock.calls.GetServiceLastAccessedDetailsWithContext, callInfo)
	lockIAMAPIMockGetServiceLastAccessedDetailsWithContext.Unlock()
	return mock.GetServiceLastAccessedDetailsWithContextFunc(in1, in2, in3...)
}

// GetServiceLastAccessedDetailsWithContextCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLastAccessedDetailsWithContextCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetServiceLastAccessedDetailsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetServiceLastAccessedDetailsInput
		In3 []request.Option
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithContext.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithContext
	lockIAMAPIMockGetServiceLastAccessedDetailsWithContext.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithEntities calls GetServiceLastAccessedDetailsWithEntitiesFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntities(in1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	if mock.GetServiceLastAccessedDetailsWithEntitiesFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithEntitiesFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithEntities was just called")
	}
	callInfo := struct {
		In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntities.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithEntities = append(mock.calls.GetServiceLastAccessedDetailsWithEntities, callInfo)
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntities.Unlock()
	return mock.GetServiceLastAccessedDetailsWithEntitiesFunc(in1)
}

// GetServiceLastAccessedDetailsWithEntitiesCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithEntities.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLastAccessedDetailsWithEntitiesCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesCalls() []struct {
	In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
} {
	var calls []struct {
		In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntities.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithEntities
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntities.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithEntitiesRequest calls GetServiceLastAccessedDetailsWithEntitiesRequestFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesRequest(in1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
	if mock.GetServiceLastAccessedDetailsWithEntitiesRequestFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithEntitiesRequestFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithEntitiesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesRequest.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithEntitiesRequest = append(mock.calls.GetServiceLastAccessedDetailsWithEntitiesRequest, callInfo)
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesRequest.Unlock()
	return mock.GetServiceLastAccessedDetailsWithEntitiesRequestFunc(in1)
}

// GetServiceLastAccessedDetailsWithEntitiesRequestCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithEntitiesRequest.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLastAccessedDetailsWithEntitiesRequestCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesRequestCalls() []struct {
	In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
} {
	var calls []struct {
		In1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesRequest.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithEntitiesRequest
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesRequest.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithEntitiesWithContext calls GetServiceLastAccessedDetailsWithEntitiesWithContextFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesWithContext(in1 context.Context, in2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput, in3 ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	if mock.GetServiceLastAccessedDetailsWithEntitiesWithContextFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithEntitiesWithContextFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithEntitiesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesWithContext.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithEntitiesWithContext = append(mock.calls.GetServiceLastAccessedDetailsWithEntitiesWithContext, callInfo)
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesWithContext.Unlock()
	return mock.GetServiceLastAccessedDetailsWithEntitiesWithContextFunc(in1, in2, in3...)
}

// GetServiceLastAccessedDetailsWithEntitiesWithContextCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithEntitiesWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLastAccessedDetailsWithEntitiesWithContextCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		In3 []request.Option
	}
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesWithContext.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithEntitiesWithContext
	lockIAMAPIMockGetServiceLastAccessedDetailsWithEntitiesWithContext.RUnlock()
	return calls
}

// GetServiceLinkedRoleDeletionStatus calls GetServiceLinkedRoleDeletionStatusFunc.
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatus(in1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	if mock.GetServiceLinkedRoleDeletionStatusFunc == nil {
		panic("IAMAPIMock.GetServiceLinkedRoleDeletionStatusFunc: method is nil but IAMAPI.GetServiceLinkedRoleDeletionStatus was just called")
	}
	callInfo := struct {
		In1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatus.Lock()
	mock.calls.GetServiceLinkedRoleDeletionStatus = append(mock.calls.GetServiceLinkedRoleDeletionStatus, callInfo)
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatus.Unlock()
	return mock.GetServiceLinkedRoleDeletionStatusFunc(in1)
}

// GetServiceLinkedRoleDeletionStatusCalls gets all the calls that were made to GetServiceLinkedRoleDeletionStatus.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLinkedRoleDeletionStatusCalls())
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusCalls() []struct {
	In1 *iam.GetServiceLinkedRoleDeletionStatusInput
} {
	var calls []struct {
		In1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatus.RLock()
	calls = mock.calls.GetServiceLinkedRoleDeletionStatus
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatus.RUnlock()
	return calls
}

// GetServiceLinkedRoleDeletionStatusRequest calls GetServiceLinkedRoleDeletionStatusRequestFunc.
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusRequest(in1 *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	if mock.GetServiceLinkedRoleDeletionStatusRequestFunc == nil {
		panic("IAMAPIMock.GetServiceLinkedRoleDeletionStatusRequestFunc: method is nil but IAMAPI.GetServiceLinkedRoleDeletionStatusRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusRequest.Lock()
	mock.calls.GetServiceLinkedRoleDeletionStatusRequest = append(mock.calls.GetServiceLinkedRoleDeletionStatusRequest, callInfo)
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusRequest.Unlock()
	return mock.GetServiceLinkedRoleDeletionStatusRequestFunc(in1)
}

// GetServiceLinkedRoleDeletionStatusRequestCalls gets all the calls that were made to GetServiceLinkedRoleDeletionStatusRequest.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLinkedRoleDeletionStatusRequestCalls())
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusRequestCalls() []struct {
	In1 *iam.GetServiceLinkedRoleDeletionStatusInput
} {
	var calls []struct {
		In1 *iam.GetServiceLinkedRoleDeletionStatusInput
	}
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusRequest.RLock()
	calls = mock.calls.GetServiceLinkedRoleDeletionStatusRequest
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusRequest.RUnlock()
	return calls
}

// GetServiceLinkedRoleDeletionStatusWithContext calls GetServiceLinkedRoleDeletionStatusWithContextFunc.
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusWithContext(in1 context.Context, in2 *iam.GetServiceLinkedRoleDeletionStatusInput, in3 ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	if mock.GetServiceLinkedRoleDeletionStatusWithContextFunc == nil {
		panic("IAMAPIMock.GetServiceLinkedRoleDeletionStatusWithContextFunc: method is nil but IAMAPI.GetServiceLinkedRoleDeletionStatusWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetServiceLinkedRoleDeletionStatusInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusWithContext.Lock()
	mock.calls.GetServiceLinkedRoleDeletionStatusWithContext = append(mock.calls.GetServiceLinkedRoleDeletionStatusWithContext, callInfo)
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusWithContext.Unlock()
	return mock.GetServiceLinkedRoleDeletionStatusWithContextFunc(in1, in2, in3...)
}

// GetServiceLinkedRoleDeletionStatusWithContextCalls gets all the calls that were made to GetServiceLinkedRoleDeletionStatusWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetServiceLinkedRoleDeletionStatusWithContextCalls())
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetServiceLinkedRoleDeletionStatusInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetServiceLinkedRoleDeletionStatusInput
		In3 []request.Option
	}
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusWithContext.RLock()
	calls = mock.calls.GetServiceLinkedRoleDeletionStatusWithContext
	lockIAMAPIMockGetServiceLinkedRoleDeletionStatusWithContext.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *IAMAPIMock) GetUser(in1 *iam.GetUserInput) (*iam.GetUserOutput, error) {
	if mock.GetUserFunc == nil {
		panic("IAMAPIMock.GetUserFunc: method is nil but IAMAPI.GetUser was just called")
	}
	callInfo := struct {
		In1 *iam.GetUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	lockIAMAPIMockGetUser.Unlock()
	return mock.GetUserFunc(in1)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedIAMAPI.GetUserCalls())
func (mock *IAMAPIMock) GetUserCalls() []struct {
	In1 *iam.GetUserInput
} {
	var calls []struct {
		In1 *iam.GetUserInput
	}
	lockIAMAPIMockGetUser.RLock()
	calls = mock.calls.GetUser
	lockIAMAPIMockGetUser.RUnlock()
	return calls
}

// GetUserPolicy calls GetUserPolicyFunc.
func (mock *IAMAPIMock) GetUserPolicy(in1 *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	if mock.GetUserPolicyFunc == nil {
		panic("IAMAPIMock.GetUserPolicyFunc: method is nil but IAMAPI.GetUserPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.GetUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetUserPolicy.Lock()
	mock.calls.GetUserPolicy = append(mock.calls.GetUserPolicy, callInfo)
	lockIAMAPIMockGetUserPolicy.Unlock()
	return mock.GetUserPolicyFunc(in1)
}

// GetUserPolicyCalls gets all the calls that were made to GetUserPolicy.
// Check the length with:
//     len(mockedIAMAPI.GetUserPolicyCalls())
func (mock *IAMAPIMock) GetUserPolicyCalls() []struct {
	In1 *iam.GetUserPolicyInput
} {
	var calls []struct {
		In1 *iam.GetUserPolicyInput
	}
	lockIAMAPIMockGetUserPolicy.RLock()
	calls = mock.calls.GetUserPolicy
	lockIAMAPIMockGetUserPolicy.RUnlock()
	return calls
}

// GetUserPolicyRequest calls GetUserPolicyRequestFunc.
func (mock *IAMAPIMock) GetUserPolicyRequest(in1 *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput) {
	if mock.GetUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetUserPolicyRequestFunc: method is nil but IAMAPI.GetUserPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetUserPolicyRequest.Lock()
	mock.calls.GetUserPolicyRequest = append(mock.calls.GetUserPolicyRequest, callInfo)
	lockIAMAPIMockGetUserPolicyRequest.Unlock()
	return mock.GetUserPolicyRequestFunc(in1)
}

// GetUserPolicyRequestCalls gets all the calls that were made to GetUserPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.GetUserPolicyRequestCalls())
func (mock *IAMAPIMock) GetUserPolicyRequestCalls() []struct {
	In1 *iam.GetUserPolicyInput
} {
	var calls []struct {
		In1 *iam.GetUserPolicyInput
	}
	lockIAMAPIMockGetUserPolicyRequest.RLock()
	calls = mock.calls.GetUserPolicyRequest
	lockIAMAPIMockGetUserPolicyRequest.RUnlock()
	return calls
}

// GetUserPolicyWithContext calls GetUserPolicyWithContextFunc.
func (mock *IAMAPIMock) GetUserPolicyWithContext(in1 context.Context, in2 *iam.GetUserPolicyInput, in3 ...request.Option) (*iam.GetUserPolicyOutput, error) {
	if mock.GetUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetUserPolicyWithContextFunc: method is nil but IAMAPI.GetUserPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetUserPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetUserPolicyWithContext.Lock()
	mock.calls.GetUserPolicyWithContext = append(mock.calls.GetUserPolicyWithContext, callInfo)
	lockIAMAPIMockGetUserPolicyWithContext.Unlock()
	return mock.GetUserPolicyWithContextFunc(in1, in2, in3...)
}

// GetUserPolicyWithContextCalls gets all the calls that were made to GetUserPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetUserPolicyWithContextCalls())
func (mock *IAMAPIMock) GetUserPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetUserPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetUserPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockGetUserPolicyWithContext.RLock()
	calls = mock.calls.GetUserPolicyWithContext
	lockIAMAPIMockGetUserPolicyWithContext.RUnlock()
	return calls
}

// GetUserRequest calls GetUserRequestFunc.
func (mock *IAMAPIMock) GetUserRequest(in1 *iam.GetUserInput) (*request.Request, *iam.GetUserOutput) {
	if mock.GetUserRequestFunc == nil {
		panic("IAMAPIMock.GetUserRequestFunc: method is nil but IAMAPI.GetUserRequest was just called")
	}
	callInfo := struct {
		In1 *iam.GetUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockGetUserRequest.Lock()
	mock.calls.GetUserRequest = append(mock.calls.GetUserRequest, callInfo)
	lockIAMAPIMockGetUserRequest.Unlock()
	return mock.GetUserRequestFunc(in1)
}

// GetUserRequestCalls gets all the calls that were made to GetUserRequest.
// Check the length with:
//     len(mockedIAMAPI.GetUserRequestCalls())
func (mock *IAMAPIMock) GetUserRequestCalls() []struct {
	In1 *iam.GetUserInput
} {
	var calls []struct {
		In1 *iam.GetUserInput
	}
	lockIAMAPIMockGetUserRequest.RLock()
	calls = mock.calls.GetUserRequest
	lockIAMAPIMockGetUserRequest.RUnlock()
	return calls
}

// GetUserWithContext calls GetUserWithContextFunc.
func (mock *IAMAPIMock) GetUserWithContext(in1 context.Context, in2 *iam.GetUserInput, in3 ...request.Option) (*iam.GetUserOutput, error) {
	if mock.GetUserWithContextFunc == nil {
		panic("IAMAPIMock.GetUserWithContextFunc: method is nil but IAMAPI.GetUserWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetUserInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockGetUserWithContext.Lock()
	mock.calls.GetUserWithContext = append(mock.calls.GetUserWithContext, callInfo)
	lockIAMAPIMockGetUserWithContext.Unlock()
	return mock.GetUserWithContextFunc(in1, in2, in3...)
}

// GetUserWithContextCalls gets all the calls that were made to GetUserWithContext.
// Check the length with:
//     len(mockedIAMAPI.GetUserWithContextCalls())
func (mock *IAMAPIMock) GetUserWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetUserInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetUserInput
		In3 []request.Option
	}
	lockIAMAPIMockGetUserWithContext.RLock()
	calls = mock.calls.GetUserWithContext
	lockIAMAPIMockGetUserWithContext.RUnlock()
	return calls
}

// ListAccessKeys calls ListAccessKeysFunc.
func (mock *IAMAPIMock) ListAccessKeys(in1 *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	if mock.ListAccessKeysFunc == nil {
		panic("IAMAPIMock.ListAccessKeysFunc: method is nil but IAMAPI.ListAccessKeys was just called")
	}
	callInfo := struct {
		In1 *iam.ListAccessKeysInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAccessKeys.Lock()
	mock.calls.ListAccessKeys = append(mock.calls.ListAccessKeys, callInfo)
	lockIAMAPIMockListAccessKeys.Unlock()
	return mock.ListAccessKeysFunc(in1)
}

// ListAccessKeysCalls gets all the calls that were made to ListAccessKeys.
// Check the length with:
//     len(mockedIAMAPI.ListAccessKeysCalls())
func (mock *IAMAPIMock) ListAccessKeysCalls() []struct {
	In1 *iam.ListAccessKeysInput
} {
	var calls []struct {
		In1 *iam.ListAccessKeysInput
	}
	lockIAMAPIMockListAccessKeys.RLock()
	calls = mock.calls.ListAccessKeys
	lockIAMAPIMockListAccessKeys.RUnlock()
	return calls
}

// ListAccessKeysPages calls ListAccessKeysPagesFunc.
func (mock *IAMAPIMock) ListAccessKeysPages(in1 *iam.ListAccessKeysInput, in2 func(*iam.ListAccessKeysOutput, bool) bool) error {
	if mock.ListAccessKeysPagesFunc == nil {
		panic("IAMAPIMock.ListAccessKeysPagesFunc: method is nil but IAMAPI.ListAccessKeysPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListAccessKeysInput
		In2 func(*iam.ListAccessKeysOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListAccessKeysPages.Lock()
	mock.calls.ListAccessKeysPages = append(mock.calls.ListAccessKeysPages, callInfo)
	lockIAMAPIMockListAccessKeysPages.Unlock()
	return mock.ListAccessKeysPagesFunc(in1, in2)
}

// ListAccessKeysPagesCalls gets all the calls that were made to ListAccessKeysPages.
// Check the length with:
//     len(mockedIAMAPI.ListAccessKeysPagesCalls())
func (mock *IAMAPIMock) ListAccessKeysPagesCalls() []struct {
	In1 *iam.ListAccessKeysInput
	In2 func(*iam.ListAccessKeysOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListAccessKeysInput
		In2 func(*iam.ListAccessKeysOutput, bool) bool
	}
	lockIAMAPIMockListAccessKeysPages.RLock()
	calls = mock.calls.ListAccessKeysPages
	lockIAMAPIMockListAccessKeysPages.RUnlock()
	return calls
}

// ListAccessKeysPagesWithContext calls ListAccessKeysPagesWithContextFunc.
func (mock *IAMAPIMock) ListAccessKeysPagesWithContext(in1 context.Context, in2 *iam.ListAccessKeysInput, in3 func(*iam.ListAccessKeysOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListAccessKeysPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAccessKeysPagesWithContextFunc: method is nil but IAMAPI.ListAccessKeysPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAccessKeysInput
		In3 func(*iam.ListAccessKeysOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListAccessKeysPagesWithContext.Lock()
	mock.calls.ListAccessKeysPagesWithContext = append(mock.calls.ListAccessKeysPagesWithContext, callInfo)
	lockIAMAPIMockListAccessKeysPagesWithContext.Unlock()
	return mock.ListAccessKeysPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListAccessKeysPagesWithContextCalls gets all the calls that were made to ListAccessKeysPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAccessKeysPagesWithContextCalls())
func (mock *IAMAPIMock) ListAccessKeysPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAccessKeysInput
	In3 func(*iam.ListAccessKeysOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAccessKeysInput
		In3 func(*iam.ListAccessKeysOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListAccessKeysPagesWithContext.RLock()
	calls = mock.calls.ListAccessKeysPagesWithContext
	lockIAMAPIMockListAccessKeysPagesWithContext.RUnlock()
	return calls
}

// ListAccessKeysRequest calls ListAccessKeysRequestFunc.
func (mock *IAMAPIMock) ListAccessKeysRequest(in1 *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput) {
	if mock.ListAccessKeysRequestFunc == nil {
		panic("IAMAPIMock.ListAccessKeysRequestFunc: method is nil but IAMAPI.ListAccessKeysRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListAccessKeysInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAccessKeysRequest.Lock()
	mock.calls.ListAccessKeysRequest = append(mock.calls.ListAccessKeysRequest, callInfo)
	lockIAMAPIMockListAccessKeysRequest.Unlock()
	return mock.ListAccessKeysRequestFunc(in1)
}

// ListAccessKeysRequestCalls gets all the calls that were made to ListAccessKeysRequest.
// Check the length with:
//     len(mockedIAMAPI.ListAccessKeysRequestCalls())
func (mock *IAMAPIMock) ListAccessKeysRequestCalls() []struct {
	In1 *iam.ListAccessKeysInput
} {
	var calls []struct {
		In1 *iam.ListAccessKeysInput
	}
	lockIAMAPIMockListAccessKeysRequest.RLock()
	calls = mock.calls.ListAccessKeysRequest
	lockIAMAPIMockListAccessKeysRequest.RUnlock()
	return calls
}

// ListAccessKeysWithContext calls ListAccessKeysWithContextFunc.
func (mock *IAMAPIMock) ListAccessKeysWithContext(in1 context.Context, in2 *iam.ListAccessKeysInput, in3 ...request.Option) (*iam.ListAccessKeysOutput, error) {
	if mock.ListAccessKeysWithContextFunc == nil {
		panic("IAMAPIMock.ListAccessKeysWithContextFunc: method is nil but IAMAPI.ListAccessKeysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAccessKeysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListAccessKeysWithContext.Lock()
	mock.calls.ListAccessKeysWithContext = append(mock.calls.ListAccessKeysWithContext, callInfo)
	lockIAMAPIMockListAccessKeysWithContext.Unlock()
	return mock.ListAccessKeysWithContextFunc(in1, in2, in3...)
}

// ListAccessKeysWithContextCalls gets all the calls that were made to ListAccessKeysWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAccessKeysWithContextCalls())
func (mock *IAMAPIMock) ListAccessKeysWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAccessKeysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAccessKeysInput
		In3 []request.Option
	}
	lockIAMAPIMockListAccessKeysWithContext.RLock()
	calls = mock.calls.ListAccessKeysWithContext
	lockIAMAPIMockListAccessKeysWithContext.RUnlock()
	return calls
}

// ListAccountAliases calls ListAccountAliasesFunc.
func (mock *IAMAPIMock) ListAccountAliases(in1 *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	if mock.ListAccountAliasesFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesFunc: method is nil but IAMAPI.ListAccountAliases was just called")
	}
	callInfo := struct {
		In1 *iam.ListAccountAliasesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAccountAliases.Lock()
	mock.calls.ListAccountAliases = append(mock.calls.ListAccountAliases, callInfo)
	lockIAMAPIMockListAccountAliases.Unlock()
	return mock.ListAccountAliasesFunc(in1)
}

// ListAccountAliasesCalls gets all the calls that were made to ListAccountAliases.
// Check the length with:
//     len(mockedIAMAPI.ListAccountAliasesCalls())
func (mock *IAMAPIMock) ListAccountAliasesCalls() []struct {
	In1 *iam.ListAccountAliasesInput
} {
	var calls []struct {
		In1 *iam.ListAccountAliasesInput
	}
	lockIAMAPIMockListAccountAliases.RLock()
	calls = mock.calls.ListAccountAliases
	lockIAMAPIMockListAccountAliases.RUnlock()
	return calls
}

// ListAccountAliasesPages calls ListAccountAliasesPagesFunc.
func (mock *IAMAPIMock) ListAccountAliasesPages(in1 *iam.ListAccountAliasesInput, in2 func(*iam.ListAccountAliasesOutput, bool) bool) error {
	if mock.ListAccountAliasesPagesFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesPagesFunc: method is nil but IAMAPI.ListAccountAliasesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListAccountAliasesInput
		In2 func(*iam.ListAccountAliasesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListAccountAliasesPages.Lock()
	mock.calls.ListAccountAliasesPages = append(mock.calls.ListAccountAliasesPages, callInfo)
	lockIAMAPIMockListAccountAliasesPages.Unlock()
	return mock.ListAccountAliasesPagesFunc(in1, in2)
}

// ListAccountAliasesPagesCalls gets all the calls that were made to ListAccountAliasesPages.
// Check the length with:
//     len(mockedIAMAPI.ListAccountAliasesPagesCalls())
func (mock *IAMAPIMock) ListAccountAliasesPagesCalls() []struct {
	In1 *iam.ListAccountAliasesInput
	In2 func(*iam.ListAccountAliasesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListAccountAliasesInput
		In2 func(*iam.ListAccountAliasesOutput, bool) bool
	}
	lockIAMAPIMockListAccountAliasesPages.RLock()
	calls = mock.calls.ListAccountAliasesPages
	lockIAMAPIMockListAccountAliasesPages.RUnlock()
	return calls
}

// ListAccountAliasesPagesWithContext calls ListAccountAliasesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAccountAliasesPagesWithContext(in1 context.Context, in2 *iam.ListAccountAliasesInput, in3 func(*iam.ListAccountAliasesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListAccountAliasesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesPagesWithContextFunc: method is nil but IAMAPI.ListAccountAliasesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAccountAliasesInput
		In3 func(*iam.ListAccountAliasesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListAccountAliasesPagesWithContext.Lock()
	mock.calls.ListAccountAliasesPagesWithContext = append(mock.calls.ListAccountAliasesPagesWithContext, callInfo)
	lockIAMAPIMockListAccountAliasesPagesWithContext.Unlock()
	return mock.ListAccountAliasesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListAccountAliasesPagesWithContextCalls gets all the calls that were made to ListAccountAliasesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAccountAliasesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAccountAliasesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAccountAliasesInput
	In3 func(*iam.ListAccountAliasesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAccountAliasesInput
		In3 func(*iam.ListAccountAliasesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListAccountAliasesPagesWithContext.RLock()
	calls = mock.calls.ListAccountAliasesPagesWithContext
	lockIAMAPIMockListAccountAliasesPagesWithContext.RUnlock()
	return calls
}

// ListAccountAliasesRequest calls ListAccountAliasesRequestFunc.
func (mock *IAMAPIMock) ListAccountAliasesRequest(in1 *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput) {
	if mock.ListAccountAliasesRequestFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesRequestFunc: method is nil but IAMAPI.ListAccountAliasesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListAccountAliasesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAccountAliasesRequest.Lock()
	mock.calls.ListAccountAliasesRequest = append(mock.calls.ListAccountAliasesRequest, callInfo)
	lockIAMAPIMockListAccountAliasesRequest.Unlock()
	return mock.ListAccountAliasesRequestFunc(in1)
}

// ListAccountAliasesRequestCalls gets all the calls that were made to ListAccountAliasesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListAccountAliasesRequestCalls())
func (mock *IAMAPIMock) ListAccountAliasesRequestCalls() []struct {
	In1 *iam.ListAccountAliasesInput
} {
	var calls []struct {
		In1 *iam.ListAccountAliasesInput
	}
	lockIAMAPIMockListAccountAliasesRequest.RLock()
	calls = mock.calls.ListAccountAliasesRequest
	lockIAMAPIMockListAccountAliasesRequest.RUnlock()
	return calls
}

// ListAccountAliasesWithContext calls ListAccountAliasesWithContextFunc.
func (mock *IAMAPIMock) ListAccountAliasesWithContext(in1 context.Context, in2 *iam.ListAccountAliasesInput, in3 ...request.Option) (*iam.ListAccountAliasesOutput, error) {
	if mock.ListAccountAliasesWithContextFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesWithContextFunc: method is nil but IAMAPI.ListAccountAliasesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAccountAliasesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListAccountAliasesWithContext.Lock()
	mock.calls.ListAccountAliasesWithContext = append(mock.calls.ListAccountAliasesWithContext, callInfo)
	lockIAMAPIMockListAccountAliasesWithContext.Unlock()
	return mock.ListAccountAliasesWithContextFunc(in1, in2, in3...)
}

// ListAccountAliasesWithContextCalls gets all the calls that were made to ListAccountAliasesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAccountAliasesWithContextCalls())
func (mock *IAMAPIMock) ListAccountAliasesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAccountAliasesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAccountAliasesInput
		In3 []request.Option
	}
	lockIAMAPIMockListAccountAliasesWithContext.RLock()
	calls = mock.calls.ListAccountAliasesWithContext
	lockIAMAPIMockListAccountAliasesWithContext.RUnlock()
	return calls
}

// ListAttachedGroupPolicies calls ListAttachedGroupPoliciesFunc.
func (mock *IAMAPIMock) ListAttachedGroupPolicies(in1 *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	if mock.ListAttachedGroupPoliciesFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesFunc: method is nil but IAMAPI.ListAttachedGroupPolicies was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedGroupPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAttachedGroupPolicies.Lock()
	mock.calls.ListAttachedGroupPolicies = append(mock.calls.ListAttachedGroupPolicies, callInfo)
	lockIAMAPIMockListAttachedGroupPolicies.Unlock()
	return mock.ListAttachedGroupPoliciesFunc(in1)
}

// ListAttachedGroupPoliciesCalls gets all the calls that were made to ListAttachedGroupPolicies.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedGroupPoliciesCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesCalls() []struct {
	In1 *iam.ListAttachedGroupPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListAttachedGroupPoliciesInput
	}
	lockIAMAPIMockListAttachedGroupPolicies.RLock()
	calls = mock.calls.ListAttachedGroupPolicies
	lockIAMAPIMockListAttachedGroupPolicies.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesPages calls ListAttachedGroupPoliciesPagesFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPages(in1 *iam.ListAttachedGroupPoliciesInput, in2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
	if mock.ListAttachedGroupPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesPagesFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedGroupPoliciesInput
		In2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListAttachedGroupPoliciesPages.Lock()
	mock.calls.ListAttachedGroupPoliciesPages = append(mock.calls.ListAttachedGroupPoliciesPages, callInfo)
	lockIAMAPIMockListAttachedGroupPoliciesPages.Unlock()
	return mock.ListAttachedGroupPoliciesPagesFunc(in1, in2)
}

// ListAttachedGroupPoliciesPagesCalls gets all the calls that were made to ListAttachedGroupPoliciesPages.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedGroupPoliciesPagesCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPagesCalls() []struct {
	In1 *iam.ListAttachedGroupPoliciesInput
	In2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListAttachedGroupPoliciesInput
		In2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	}
	lockIAMAPIMockListAttachedGroupPoliciesPages.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesPages
	lockIAMAPIMockListAttachedGroupPoliciesPages.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesPagesWithContext calls ListAttachedGroupPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPagesWithContext(in1 context.Context, in2 *iam.ListAttachedGroupPoliciesInput, in3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListAttachedGroupPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAttachedGroupPoliciesInput
		In3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListAttachedGroupPoliciesPagesWithContext.Lock()
	mock.calls.ListAttachedGroupPoliciesPagesWithContext = append(mock.calls.ListAttachedGroupPoliciesPagesWithContext, callInfo)
	lockIAMAPIMockListAttachedGroupPoliciesPagesWithContext.Unlock()
	return mock.ListAttachedGroupPoliciesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListAttachedGroupPoliciesPagesWithContextCalls gets all the calls that were made to ListAttachedGroupPoliciesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedGroupPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAttachedGroupPoliciesInput
	In3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAttachedGroupPoliciesInput
		In3 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListAttachedGroupPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesPagesWithContext
	lockIAMAPIMockListAttachedGroupPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesRequest calls ListAttachedGroupPoliciesRequestFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesRequest(in1 *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput) {
	if mock.ListAttachedGroupPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesRequestFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedGroupPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAttachedGroupPoliciesRequest.Lock()
	mock.calls.ListAttachedGroupPoliciesRequest = append(mock.calls.ListAttachedGroupPoliciesRequest, callInfo)
	lockIAMAPIMockListAttachedGroupPoliciesRequest.Unlock()
	return mock.ListAttachedGroupPoliciesRequestFunc(in1)
}

// ListAttachedGroupPoliciesRequestCalls gets all the calls that were made to ListAttachedGroupPoliciesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedGroupPoliciesRequestCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesRequestCalls() []struct {
	In1 *iam.ListAttachedGroupPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListAttachedGroupPoliciesInput
	}
	lockIAMAPIMockListAttachedGroupPoliciesRequest.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesRequest
	lockIAMAPIMockListAttachedGroupPoliciesRequest.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesWithContext calls ListAttachedGroupPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesWithContext(in1 context.Context, in2 *iam.ListAttachedGroupPoliciesInput, in3 ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
	if mock.ListAttachedGroupPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesWithContextFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAttachedGroupPoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListAttachedGroupPoliciesWithContext.Lock()
	mock.calls.ListAttachedGroupPoliciesWithContext = append(mock.calls.ListAttachedGroupPoliciesWithContext, callInfo)
	lockIAMAPIMockListAttachedGroupPoliciesWithContext.Unlock()
	return mock.ListAttachedGroupPoliciesWithContextFunc(in1, in2, in3...)
}

// ListAttachedGroupPoliciesWithContextCalls gets all the calls that were made to ListAttachedGroupPoliciesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedGroupPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAttachedGroupPoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAttachedGroupPoliciesInput
		In3 []request.Option
	}
	lockIAMAPIMockListAttachedGroupPoliciesWithContext.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesWithContext
	lockIAMAPIMockListAttachedGroupPoliciesWithContext.RUnlock()
	return calls
}

// ListAttachedRolePolicies calls ListAttachedRolePoliciesFunc.
func (mock *IAMAPIMock) ListAttachedRolePolicies(in1 *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	if mock.ListAttachedRolePoliciesFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesFunc: method is nil but IAMAPI.ListAttachedRolePolicies was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedRolePoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAttachedRolePolicies.Lock()
	mock.calls.ListAttachedRolePolicies = append(mock.calls.ListAttachedRolePolicies, callInfo)
	lockIAMAPIMockListAttachedRolePolicies.Unlock()
	return mock.ListAttachedRolePoliciesFunc(in1)
}

// ListAttachedRolePoliciesCalls gets all the calls that were made to ListAttachedRolePolicies.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedRolePoliciesCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesCalls() []struct {
	In1 *iam.ListAttachedRolePoliciesInput
} {
	var calls []struct {
		In1 *iam.ListAttachedRolePoliciesInput
	}
	lockIAMAPIMockListAttachedRolePolicies.RLock()
	calls = mock.calls.ListAttachedRolePolicies
	lockIAMAPIMockListAttachedRolePolicies.RUnlock()
	return calls
}

// ListAttachedRolePoliciesPages calls ListAttachedRolePoliciesPagesFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesPages(in1 *iam.ListAttachedRolePoliciesInput, in2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	if mock.ListAttachedRolePoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesPagesFunc: method is nil but IAMAPI.ListAttachedRolePoliciesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedRolePoliciesInput
		In2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListAttachedRolePoliciesPages.Lock()
	mock.calls.ListAttachedRolePoliciesPages = append(mock.calls.ListAttachedRolePoliciesPages, callInfo)
	lockIAMAPIMockListAttachedRolePoliciesPages.Unlock()
	return mock.ListAttachedRolePoliciesPagesFunc(in1, in2)
}

// ListAttachedRolePoliciesPagesCalls gets all the calls that were made to ListAttachedRolePoliciesPages.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedRolePoliciesPagesCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesPagesCalls() []struct {
	In1 *iam.ListAttachedRolePoliciesInput
	In2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListAttachedRolePoliciesInput
		In2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	}
	lockIAMAPIMockListAttachedRolePoliciesPages.RLock()
	calls = mock.calls.ListAttachedRolePoliciesPages
	lockIAMAPIMockListAttachedRolePoliciesPages.RUnlock()
	return calls
}

// ListAttachedRolePoliciesPagesWithContext calls ListAttachedRolePoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesPagesWithContext(in1 context.Context, in2 *iam.ListAttachedRolePoliciesInput, in3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListAttachedRolePoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesPagesWithContextFunc: method is nil but IAMAPI.ListAttachedRolePoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAttachedRolePoliciesInput
		In3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListAttachedRolePoliciesPagesWithContext.Lock()
	mock.calls.ListAttachedRolePoliciesPagesWithContext = append(mock.calls.ListAttachedRolePoliciesPagesWithContext, callInfo)
	lockIAMAPIMockListAttachedRolePoliciesPagesWithContext.Unlock()
	return mock.ListAttachedRolePoliciesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListAttachedRolePoliciesPagesWithContextCalls gets all the calls that were made to ListAttachedRolePoliciesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedRolePoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAttachedRolePoliciesInput
	In3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAttachedRolePoliciesInput
		In3 func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListAttachedRolePoliciesPagesWithContext.RLock()
	calls = mock.calls.ListAttachedRolePoliciesPagesWithContext
	lockIAMAPIMockListAttachedRolePoliciesPagesWithContext.RUnlock()
	return calls
}

// ListAttachedRolePoliciesRequest calls ListAttachedRolePoliciesRequestFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesRequest(in1 *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput) {
	if mock.ListAttachedRolePoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesRequestFunc: method is nil but IAMAPI.ListAttachedRolePoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedRolePoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAttachedRolePoliciesRequest.Lock()
	mock.calls.ListAttachedRolePoliciesRequest = append(mock.calls.ListAttachedRolePoliciesRequest, callInfo)
	lockIAMAPIMockListAttachedRolePoliciesRequest.Unlock()
	return mock.ListAttachedRolePoliciesRequestFunc(in1)
}

// ListAttachedRolePoliciesRequestCalls gets all the calls that were made to ListAttachedRolePoliciesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedRolePoliciesRequestCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesRequestCalls() []struct {
	In1 *iam.ListAttachedRolePoliciesInput
} {
	var calls []struct {
		In1 *iam.ListAttachedRolePoliciesInput
	}
	lockIAMAPIMockListAttachedRolePoliciesRequest.RLock()
	calls = mock.calls.ListAttachedRolePoliciesRequest
	lockIAMAPIMockListAttachedRolePoliciesRequest.RUnlock()
	return calls
}

// ListAttachedRolePoliciesWithContext calls ListAttachedRolePoliciesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesWithContext(in1 context.Context, in2 *iam.ListAttachedRolePoliciesInput, in3 ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
	if mock.ListAttachedRolePoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesWithContextFunc: method is nil but IAMAPI.ListAttachedRolePoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAttachedRolePoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListAttachedRolePoliciesWithContext.Lock()
	mock.calls.ListAttachedRolePoliciesWithContext = append(mock.calls.ListAttachedRolePoliciesWithContext, callInfo)
	lockIAMAPIMockListAttachedRolePoliciesWithContext.Unlock()
	return mock.ListAttachedRolePoliciesWithContextFunc(in1, in2, in3...)
}

// ListAttachedRolePoliciesWithContextCalls gets all the calls that were made to ListAttachedRolePoliciesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedRolePoliciesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAttachedRolePoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAttachedRolePoliciesInput
		In3 []request.Option
	}
	lockIAMAPIMockListAttachedRolePoliciesWithContext.RLock()
	calls = mock.calls.ListAttachedRolePoliciesWithContext
	lockIAMAPIMockListAttachedRolePoliciesWithContext.RUnlock()
	return calls
}

// ListAttachedUserPolicies calls ListAttachedUserPoliciesFunc.
func (mock *IAMAPIMock) ListAttachedUserPolicies(in1 *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	if mock.ListAttachedUserPoliciesFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesFunc: method is nil but IAMAPI.ListAttachedUserPolicies was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedUserPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAttachedUserPolicies.Lock()
	mock.calls.ListAttachedUserPolicies = append(mock.calls.ListAttachedUserPolicies, callInfo)
	lockIAMAPIMockListAttachedUserPolicies.Unlock()
	return mock.ListAttachedUserPoliciesFunc(in1)
}

// ListAttachedUserPoliciesCalls gets all the calls that were made to ListAttachedUserPolicies.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedUserPoliciesCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesCalls() []struct {
	In1 *iam.ListAttachedUserPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListAttachedUserPoliciesInput
	}
	lockIAMAPIMockListAttachedUserPolicies.RLock()
	calls = mock.calls.ListAttachedUserPolicies
	lockIAMAPIMockListAttachedUserPolicies.RUnlock()
	return calls
}

// ListAttachedUserPoliciesPages calls ListAttachedUserPoliciesPagesFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesPages(in1 *iam.ListAttachedUserPoliciesInput, in2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
	if mock.ListAttachedUserPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesPagesFunc: method is nil but IAMAPI.ListAttachedUserPoliciesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedUserPoliciesInput
		In2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListAttachedUserPoliciesPages.Lock()
	mock.calls.ListAttachedUserPoliciesPages = append(mock.calls.ListAttachedUserPoliciesPages, callInfo)
	lockIAMAPIMockListAttachedUserPoliciesPages.Unlock()
	return mock.ListAttachedUserPoliciesPagesFunc(in1, in2)
}

// ListAttachedUserPoliciesPagesCalls gets all the calls that were made to ListAttachedUserPoliciesPages.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedUserPoliciesPagesCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesPagesCalls() []struct {
	In1 *iam.ListAttachedUserPoliciesInput
	In2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListAttachedUserPoliciesInput
		In2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	}
	lockIAMAPIMockListAttachedUserPoliciesPages.RLock()
	calls = mock.calls.ListAttachedUserPoliciesPages
	lockIAMAPIMockListAttachedUserPoliciesPages.RUnlock()
	return calls
}

// ListAttachedUserPoliciesPagesWithContext calls ListAttachedUserPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesPagesWithContext(in1 context.Context, in2 *iam.ListAttachedUserPoliciesInput, in3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListAttachedUserPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListAttachedUserPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAttachedUserPoliciesInput
		In3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListAttachedUserPoliciesPagesWithContext.Lock()
	mock.calls.ListAttachedUserPoliciesPagesWithContext = append(mock.calls.ListAttachedUserPoliciesPagesWithContext, callInfo)
	lockIAMAPIMockListAttachedUserPoliciesPagesWithContext.Unlock()
	return mock.ListAttachedUserPoliciesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListAttachedUserPoliciesPagesWithContextCalls gets all the calls that were made to ListAttachedUserPoliciesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedUserPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAttachedUserPoliciesInput
	In3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAttachedUserPoliciesInput
		In3 func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListAttachedUserPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListAttachedUserPoliciesPagesWithContext
	lockIAMAPIMockListAttachedUserPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListAttachedUserPoliciesRequest calls ListAttachedUserPoliciesRequestFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesRequest(in1 *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput) {
	if mock.ListAttachedUserPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesRequestFunc: method is nil but IAMAPI.ListAttachedUserPoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListAttachedUserPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListAttachedUserPoliciesRequest.Lock()
	mock.calls.ListAttachedUserPoliciesRequest = append(mock.calls.ListAttachedUserPoliciesRequest, callInfo)
	lockIAMAPIMockListAttachedUserPoliciesRequest.Unlock()
	return mock.ListAttachedUserPoliciesRequestFunc(in1)
}

// ListAttachedUserPoliciesRequestCalls gets all the calls that were made to ListAttachedUserPoliciesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedUserPoliciesRequestCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesRequestCalls() []struct {
	In1 *iam.ListAttachedUserPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListAttachedUserPoliciesInput
	}
	lockIAMAPIMockListAttachedUserPoliciesRequest.RLock()
	calls = mock.calls.ListAttachedUserPoliciesRequest
	lockIAMAPIMockListAttachedUserPoliciesRequest.RUnlock()
	return calls
}

// ListAttachedUserPoliciesWithContext calls ListAttachedUserPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesWithContext(in1 context.Context, in2 *iam.ListAttachedUserPoliciesInput, in3 ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
	if mock.ListAttachedUserPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesWithContextFunc: method is nil but IAMAPI.ListAttachedUserPoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListAttachedUserPoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListAttachedUserPoliciesWithContext.Lock()
	mock.calls.ListAttachedUserPoliciesWithContext = append(mock.calls.ListAttachedUserPoliciesWithContext, callInfo)
	lockIAMAPIMockListAttachedUserPoliciesWithContext.Unlock()
	return mock.ListAttachedUserPoliciesWithContextFunc(in1, in2, in3...)
}

// ListAttachedUserPoliciesWithContextCalls gets all the calls that were made to ListAttachedUserPoliciesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListAttachedUserPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListAttachedUserPoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListAttachedUserPoliciesInput
		In3 []request.Option
	}
	lockIAMAPIMockListAttachedUserPoliciesWithContext.RLock()
	calls = mock.calls.ListAttachedUserPoliciesWithContext
	lockIAMAPIMockListAttachedUserPoliciesWithContext.RUnlock()
	return calls
}

// ListEntitiesForPolicy calls ListEntitiesForPolicyFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicy(in1 *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	if mock.ListEntitiesForPolicyFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyFunc: method is nil but IAMAPI.ListEntitiesForPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.ListEntitiesForPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListEntitiesForPolicy.Lock()
	mock.calls.ListEntitiesForPolicy = append(mock.calls.ListEntitiesForPolicy, callInfo)
	lockIAMAPIMockListEntitiesForPolicy.Unlock()
	return mock.ListEntitiesForPolicyFunc(in1)
}

// ListEntitiesForPolicyCalls gets all the calls that were made to ListEntitiesForPolicy.
// Check the length with:
//     len(mockedIAMAPI.ListEntitiesForPolicyCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyCalls() []struct {
	In1 *iam.ListEntitiesForPolicyInput
} {
	var calls []struct {
		In1 *iam.ListEntitiesForPolicyInput
	}
	lockIAMAPIMockListEntitiesForPolicy.RLock()
	calls = mock.calls.ListEntitiesForPolicy
	lockIAMAPIMockListEntitiesForPolicy.RUnlock()
	return calls
}

// ListEntitiesForPolicyPages calls ListEntitiesForPolicyPagesFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyPages(in1 *iam.ListEntitiesForPolicyInput, in2 func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
	if mock.ListEntitiesForPolicyPagesFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyPagesFunc: method is nil but IAMAPI.ListEntitiesForPolicyPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListEntitiesForPolicyInput
		In2 func(*iam.ListEntitiesForPolicyOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListEntitiesForPolicyPages.Lock()
	mock.calls.ListEntitiesForPolicyPages = append(mock.calls.ListEntitiesForPolicyPages, callInfo)
	lockIAMAPIMockListEntitiesForPolicyPages.Unlock()
	return mock.ListEntitiesForPolicyPagesFunc(in1, in2)
}

// ListEntitiesForPolicyPagesCalls gets all the calls that were made to ListEntitiesForPolicyPages.
// Check the length with:
//     len(mockedIAMAPI.ListEntitiesForPolicyPagesCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyPagesCalls() []struct {
	In1 *iam.ListEntitiesForPolicyInput
	In2 func(*iam.ListEntitiesForPolicyOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListEntitiesForPolicyInput
		In2 func(*iam.ListEntitiesForPolicyOutput, bool) bool
	}
	lockIAMAPIMockListEntitiesForPolicyPages.RLock()
	calls = mock.calls.ListEntitiesForPolicyPages
	lockIAMAPIMockListEntitiesForPolicyPages.RUnlock()
	return calls
}

// ListEntitiesForPolicyPagesWithContext calls ListEntitiesForPolicyPagesWithContextFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyPagesWithContext(in1 context.Context, in2 *iam.ListEntitiesForPolicyInput, in3 func(*iam.ListEntitiesForPolicyOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListEntitiesForPolicyPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyPagesWithContextFunc: method is nil but IAMAPI.ListEntitiesForPolicyPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListEntitiesForPolicyInput
		In3 func(*iam.ListEntitiesForPolicyOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListEntitiesForPolicyPagesWithContext.Lock()
	mock.calls.ListEntitiesForPolicyPagesWithContext = append(mock.calls.ListEntitiesForPolicyPagesWithContext, callInfo)
	lockIAMAPIMockListEntitiesForPolicyPagesWithContext.Unlock()
	return mock.ListEntitiesForPolicyPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListEntitiesForPolicyPagesWithContextCalls gets all the calls that were made to ListEntitiesForPolicyPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListEntitiesForPolicyPagesWithContextCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListEntitiesForPolicyInput
	In3 func(*iam.ListEntitiesForPolicyOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListEntitiesForPolicyInput
		In3 func(*iam.ListEntitiesForPolicyOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListEntitiesForPolicyPagesWithContext.RLock()
	calls = mock.calls.ListEntitiesForPolicyPagesWithContext
	lockIAMAPIMockListEntitiesForPolicyPagesWithContext.RUnlock()
	return calls
}

// ListEntitiesForPolicyRequest calls ListEntitiesForPolicyRequestFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyRequest(in1 *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput) {
	if mock.ListEntitiesForPolicyRequestFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyRequestFunc: method is nil but IAMAPI.ListEntitiesForPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListEntitiesForPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListEntitiesForPolicyRequest.Lock()
	mock.calls.ListEntitiesForPolicyRequest = append(mock.calls.ListEntitiesForPolicyRequest, callInfo)
	lockIAMAPIMockListEntitiesForPolicyRequest.Unlock()
	return mock.ListEntitiesForPolicyRequestFunc(in1)
}

// ListEntitiesForPolicyRequestCalls gets all the calls that were made to ListEntitiesForPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.ListEntitiesForPolicyRequestCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyRequestCalls() []struct {
	In1 *iam.ListEntitiesForPolicyInput
} {
	var calls []struct {
		In1 *iam.ListEntitiesForPolicyInput
	}
	lockIAMAPIMockListEntitiesForPolicyRequest.RLock()
	calls = mock.calls.ListEntitiesForPolicyRequest
	lockIAMAPIMockListEntitiesForPolicyRequest.RUnlock()
	return calls
}

// ListEntitiesForPolicyWithContext calls ListEntitiesForPolicyWithContextFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyWithContext(in1 context.Context, in2 *iam.ListEntitiesForPolicyInput, in3 ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
	if mock.ListEntitiesForPolicyWithContextFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyWithContextFunc: method is nil but IAMAPI.ListEntitiesForPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListEntitiesForPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListEntitiesForPolicyWithContext.Lock()
	mock.calls.ListEntitiesForPolicyWithContext = append(mock.calls.ListEntitiesForPolicyWithContext, callInfo)
	lockIAMAPIMockListEntitiesForPolicyWithContext.Unlock()
	return mock.ListEntitiesForPolicyWithContextFunc(in1, in2, in3...)
}

// ListEntitiesForPolicyWithContextCalls gets all the calls that were made to ListEntitiesForPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListEntitiesForPolicyWithContextCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListEntitiesForPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListEntitiesForPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockListEntitiesForPolicyWithContext.RLock()
	calls = mock.calls.ListEntitiesForPolicyWithContext
	lockIAMAPIMockListEntitiesForPolicyWithContext.RUnlock()
	return calls
}

// ListGroupPolicies calls ListGroupPoliciesFunc.
func (mock *IAMAPIMock) ListGroupPolicies(in1 *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	if mock.ListGroupPoliciesFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesFunc: method is nil but IAMAPI.ListGroupPolicies was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListGroupPolicies.Lock()
	mock.calls.ListGroupPolicies = append(mock.calls.ListGroupPolicies, callInfo)
	lockIAMAPIMockListGroupPolicies.Unlock()
	return mock.ListGroupPoliciesFunc(in1)
}

// ListGroupPoliciesCalls gets all the calls that were made to ListGroupPolicies.
// Check the length with:
//     len(mockedIAMAPI.ListGroupPoliciesCalls())
func (mock *IAMAPIMock) ListGroupPoliciesCalls() []struct {
	In1 *iam.ListGroupPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListGroupPoliciesInput
	}
	lockIAMAPIMockListGroupPolicies.RLock()
	calls = mock.calls.ListGroupPolicies
	lockIAMAPIMockListGroupPolicies.RUnlock()
	return calls
}

// ListGroupPoliciesPages calls ListGroupPoliciesPagesFunc.
func (mock *IAMAPIMock) ListGroupPoliciesPages(in1 *iam.ListGroupPoliciesInput, in2 func(*iam.ListGroupPoliciesOutput, bool) bool) error {
	if mock.ListGroupPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesPagesFunc: method is nil but IAMAPI.ListGroupPoliciesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupPoliciesInput
		In2 func(*iam.ListGroupPoliciesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListGroupPoliciesPages.Lock()
	mock.calls.ListGroupPoliciesPages = append(mock.calls.ListGroupPoliciesPages, callInfo)
	lockIAMAPIMockListGroupPoliciesPages.Unlock()
	return mock.ListGroupPoliciesPagesFunc(in1, in2)
}

// ListGroupPoliciesPagesCalls gets all the calls that were made to ListGroupPoliciesPages.
// Check the length with:
//     len(mockedIAMAPI.ListGroupPoliciesPagesCalls())
func (mock *IAMAPIMock) ListGroupPoliciesPagesCalls() []struct {
	In1 *iam.ListGroupPoliciesInput
	In2 func(*iam.ListGroupPoliciesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListGroupPoliciesInput
		In2 func(*iam.ListGroupPoliciesOutput, bool) bool
	}
	lockIAMAPIMockListGroupPoliciesPages.RLock()
	calls = mock.calls.ListGroupPoliciesPages
	lockIAMAPIMockListGroupPoliciesPages.RUnlock()
	return calls
}

// ListGroupPoliciesPagesWithContext calls ListGroupPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListGroupPoliciesPagesWithContext(in1 context.Context, in2 *iam.ListGroupPoliciesInput, in3 func(*iam.ListGroupPoliciesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListGroupPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListGroupPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListGroupPoliciesInput
		In3 func(*iam.ListGroupPoliciesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListGroupPoliciesPagesWithContext.Lock()
	mock.calls.ListGroupPoliciesPagesWithContext = append(mock.calls.ListGroupPoliciesPagesWithContext, callInfo)
	lockIAMAPIMockListGroupPoliciesPagesWithContext.Unlock()
	return mock.ListGroupPoliciesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListGroupPoliciesPagesWithContextCalls gets all the calls that were made to ListGroupPoliciesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListGroupPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListGroupPoliciesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListGroupPoliciesInput
	In3 func(*iam.ListGroupPoliciesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListGroupPoliciesInput
		In3 func(*iam.ListGroupPoliciesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListGroupPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListGroupPoliciesPagesWithContext
	lockIAMAPIMockListGroupPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListGroupPoliciesRequest calls ListGroupPoliciesRequestFunc.
func (mock *IAMAPIMock) ListGroupPoliciesRequest(in1 *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput) {
	if mock.ListGroupPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesRequestFunc: method is nil but IAMAPI.ListGroupPoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListGroupPoliciesRequest.Lock()
	mock.calls.ListGroupPoliciesRequest = append(mock.calls.ListGroupPoliciesRequest, callInfo)
	lockIAMAPIMockListGroupPoliciesRequest.Unlock()
	return mock.ListGroupPoliciesRequestFunc(in1)
}

// ListGroupPoliciesRequestCalls gets all the calls that were made to ListGroupPoliciesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListGroupPoliciesRequestCalls())
func (mock *IAMAPIMock) ListGroupPoliciesRequestCalls() []struct {
	In1 *iam.ListGroupPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListGroupPoliciesInput
	}
	lockIAMAPIMockListGroupPoliciesRequest.RLock()
	calls = mock.calls.ListGroupPoliciesRequest
	lockIAMAPIMockListGroupPoliciesRequest.RUnlock()
	return calls
}

// ListGroupPoliciesWithContext calls ListGroupPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListGroupPoliciesWithContext(in1 context.Context, in2 *iam.ListGroupPoliciesInput, in3 ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
	if mock.ListGroupPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesWithContextFunc: method is nil but IAMAPI.ListGroupPoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListGroupPoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListGroupPoliciesWithContext.Lock()
	mock.calls.ListGroupPoliciesWithContext = append(mock.calls.ListGroupPoliciesWithContext, callInfo)
	lockIAMAPIMockListGroupPoliciesWithContext.Unlock()
	return mock.ListGroupPoliciesWithContextFunc(in1, in2, in3...)
}

// ListGroupPoliciesWithContextCalls gets all the calls that were made to ListGroupPoliciesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListGroupPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListGroupPoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListGroupPoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListGroupPoliciesInput
		In3 []request.Option
	}
	lockIAMAPIMockListGroupPoliciesWithContext.RLock()
	calls = mock.calls.ListGroupPoliciesWithContext
	lockIAMAPIMockListGroupPoliciesWithContext.RUnlock()
	return calls
}

// ListGroups calls ListGroupsFunc.
func (mock *IAMAPIMock) ListGroups(in1 *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	if mock.ListGroupsFunc == nil {
		panic("IAMAPIMock.ListGroupsFunc: method is nil but IAMAPI.ListGroups was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListGroups.Lock()
	mock.calls.ListGroups = append(mock.calls.ListGroups, callInfo)
	lockIAMAPIMockListGroups.Unlock()
	return mock.ListGroupsFunc(in1)
}

// ListGroupsCalls gets all the calls that were made to ListGroups.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsCalls())
func (mock *IAMAPIMock) ListGroupsCalls() []struct {
	In1 *iam.ListGroupsInput
} {
	var calls []struct {
		In1 *iam.ListGroupsInput
	}
	lockIAMAPIMockListGroups.RLock()
	calls = mock.calls.ListGroups
	lockIAMAPIMockListGroups.RUnlock()
	return calls
}

// ListGroupsForUser calls ListGroupsForUserFunc.
func (mock *IAMAPIMock) ListGroupsForUser(in1 *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	if mock.ListGroupsForUserFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserFunc: method is nil but IAMAPI.ListGroupsForUser was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupsForUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListGroupsForUser.Lock()
	mock.calls.ListGroupsForUser = append(mock.calls.ListGroupsForUser, callInfo)
	lockIAMAPIMockListGroupsForUser.Unlock()
	return mock.ListGroupsForUserFunc(in1)
}

// ListGroupsForUserCalls gets all the calls that were made to ListGroupsForUser.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsForUserCalls())
func (mock *IAMAPIMock) ListGroupsForUserCalls() []struct {
	In1 *iam.ListGroupsForUserInput
} {
	var calls []struct {
		In1 *iam.ListGroupsForUserInput
	}
	lockIAMAPIMockListGroupsForUser.RLock()
	calls = mock.calls.ListGroupsForUser
	lockIAMAPIMockListGroupsForUser.RUnlock()
	return calls
}

// ListGroupsForUserPages calls ListGroupsForUserPagesFunc.
func (mock *IAMAPIMock) ListGroupsForUserPages(in1 *iam.ListGroupsForUserInput, in2 func(*iam.ListGroupsForUserOutput, bool) bool) error {
	if mock.ListGroupsForUserPagesFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserPagesFunc: method is nil but IAMAPI.ListGroupsForUserPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupsForUserInput
		In2 func(*iam.ListGroupsForUserOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListGroupsForUserPages.Lock()
	mock.calls.ListGroupsForUserPages = append(mock.calls.ListGroupsForUserPages, callInfo)
	lockIAMAPIMockListGroupsForUserPages.Unlock()
	return mock.ListGroupsForUserPagesFunc(in1, in2)
}

// ListGroupsForUserPagesCalls gets all the calls that were made to ListGroupsForUserPages.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsForUserPagesCalls())
func (mock *IAMAPIMock) ListGroupsForUserPagesCalls() []struct {
	In1 *iam.ListGroupsForUserInput
	In2 func(*iam.ListGroupsForUserOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListGroupsForUserInput
		In2 func(*iam.ListGroupsForUserOutput, bool) bool
	}
	lockIAMAPIMockListGroupsForUserPages.RLock()
	calls = mock.calls.ListGroupsForUserPages
	lockIAMAPIMockListGroupsForUserPages.RUnlock()
	return calls
}

// ListGroupsForUserPagesWithContext calls ListGroupsForUserPagesWithContextFunc.
func (mock *IAMAPIMock) ListGroupsForUserPagesWithContext(in1 context.Context, in2 *iam.ListGroupsForUserInput, in3 func(*iam.ListGroupsForUserOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListGroupsForUserPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserPagesWithContextFunc: method is nil but IAMAPI.ListGroupsForUserPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListGroupsForUserInput
		In3 func(*iam.ListGroupsForUserOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListGroupsForUserPagesWithContext.Lock()
	mock.calls.ListGroupsForUserPagesWithContext = append(mock.calls.ListGroupsForUserPagesWithContext, callInfo)
	lockIAMAPIMockListGroupsForUserPagesWithContext.Unlock()
	return mock.ListGroupsForUserPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListGroupsForUserPagesWithContextCalls gets all the calls that were made to ListGroupsForUserPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsForUserPagesWithContextCalls())
func (mock *IAMAPIMock) ListGroupsForUserPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListGroupsForUserInput
	In3 func(*iam.ListGroupsForUserOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListGroupsForUserInput
		In3 func(*iam.ListGroupsForUserOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListGroupsForUserPagesWithContext.RLock()
	calls = mock.calls.ListGroupsForUserPagesWithContext
	lockIAMAPIMockListGroupsForUserPagesWithContext.RUnlock()
	return calls
}

// ListGroupsForUserRequest calls ListGroupsForUserRequestFunc.
func (mock *IAMAPIMock) ListGroupsForUserRequest(in1 *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput) {
	if mock.ListGroupsForUserRequestFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserRequestFunc: method is nil but IAMAPI.ListGroupsForUserRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupsForUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListGroupsForUserRequest.Lock()
	mock.calls.ListGroupsForUserRequest = append(mock.calls.ListGroupsForUserRequest, callInfo)
	lockIAMAPIMockListGroupsForUserRequest.Unlock()
	return mock.ListGroupsForUserRequestFunc(in1)
}

// ListGroupsForUserRequestCalls gets all the calls that were made to ListGroupsForUserRequest.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsForUserRequestCalls())
func (mock *IAMAPIMock) ListGroupsForUserRequestCalls() []struct {
	In1 *iam.ListGroupsForUserInput
} {
	var calls []struct {
		In1 *iam.ListGroupsForUserInput
	}
	lockIAMAPIMockListGroupsForUserRequest.RLock()
	calls = mock.calls.ListGroupsForUserRequest
	lockIAMAPIMockListGroupsForUserRequest.RUnlock()
	return calls
}

// ListGroupsForUserWithContext calls ListGroupsForUserWithContextFunc.
func (mock *IAMAPIMock) ListGroupsForUserWithContext(in1 context.Context, in2 *iam.ListGroupsForUserInput, in3 ...request.Option) (*iam.ListGroupsForUserOutput, error) {
	if mock.ListGroupsForUserWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserWithContextFunc: method is nil but IAMAPI.ListGroupsForUserWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListGroupsForUserInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListGroupsForUserWithContext.Lock()
	mock.calls.ListGroupsForUserWithContext = append(mock.calls.ListGroupsForUserWithContext, callInfo)
	lockIAMAPIMockListGroupsForUserWithContext.Unlock()
	return mock.ListGroupsForUserWithContextFunc(in1, in2, in3...)
}

// ListGroupsForUserWithContextCalls gets all the calls that were made to ListGroupsForUserWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsForUserWithContextCalls())
func (mock *IAMAPIMock) ListGroupsForUserWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListGroupsForUserInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListGroupsForUserInput
		In3 []request.Option
	}
	lockIAMAPIMockListGroupsForUserWithContext.RLock()
	calls = mock.calls.ListGroupsForUserWithContext
	lockIAMAPIMockListGroupsForUserWithContext.RUnlock()
	return calls
}

// ListGroupsPages calls ListGroupsPagesFunc.
func (mock *IAMAPIMock) ListGroupsPages(in1 *iam.ListGroupsInput, in2 func(*iam.ListGroupsOutput, bool) bool) error {
	if mock.ListGroupsPagesFunc == nil {
		panic("IAMAPIMock.ListGroupsPagesFunc: method is nil but IAMAPI.ListGroupsPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupsInput
		In2 func(*iam.ListGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListGroupsPages.Lock()
	mock.calls.ListGroupsPages = append(mock.calls.ListGroupsPages, callInfo)
	lockIAMAPIMockListGroupsPages.Unlock()
	return mock.ListGroupsPagesFunc(in1, in2)
}

// ListGroupsPagesCalls gets all the calls that were made to ListGroupsPages.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsPagesCalls())
func (mock *IAMAPIMock) ListGroupsPagesCalls() []struct {
	In1 *iam.ListGroupsInput
	In2 func(*iam.ListGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListGroupsInput
		In2 func(*iam.ListGroupsOutput, bool) bool
	}
	lockIAMAPIMockListGroupsPages.RLock()
	calls = mock.calls.ListGroupsPages
	lockIAMAPIMockListGroupsPages.RUnlock()
	return calls
}

// ListGroupsPagesWithContext calls ListGroupsPagesWithContextFunc.
func (mock *IAMAPIMock) ListGroupsPagesWithContext(in1 context.Context, in2 *iam.ListGroupsInput, in3 func(*iam.ListGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListGroupsPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsPagesWithContextFunc: method is nil but IAMAPI.ListGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListGroupsInput
		In3 func(*iam.ListGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListGroupsPagesWithContext.Lock()
	mock.calls.ListGroupsPagesWithContext = append(mock.calls.ListGroupsPagesWithContext, callInfo)
	lockIAMAPIMockListGroupsPagesWithContext.Unlock()
	return mock.ListGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListGroupsPagesWithContextCalls gets all the calls that were made to ListGroupsPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsPagesWithContextCalls())
func (mock *IAMAPIMock) ListGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListGroupsInput
	In3 func(*iam.ListGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListGroupsInput
		In3 func(*iam.ListGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListGroupsPagesWithContext.RLock()
	calls = mock.calls.ListGroupsPagesWithContext
	lockIAMAPIMockListGroupsPagesWithContext.RUnlock()
	return calls
}

// ListGroupsRequest calls ListGroupsRequestFunc.
func (mock *IAMAPIMock) ListGroupsRequest(in1 *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput) {
	if mock.ListGroupsRequestFunc == nil {
		panic("IAMAPIMock.ListGroupsRequestFunc: method is nil but IAMAPI.ListGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListGroupsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListGroupsRequest.Lock()
	mock.calls.ListGroupsRequest = append(mock.calls.ListGroupsRequest, callInfo)
	lockIAMAPIMockListGroupsRequest.Unlock()
	return mock.ListGroupsRequestFunc(in1)
}

// ListGroupsRequestCalls gets all the calls that were made to ListGroupsRequest.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsRequestCalls())
func (mock *IAMAPIMock) ListGroupsRequestCalls() []struct {
	In1 *iam.ListGroupsInput
} {
	var calls []struct {
		In1 *iam.ListGroupsInput
	}
	lockIAMAPIMockListGroupsRequest.RLock()
	calls = mock.calls.ListGroupsRequest
	lockIAMAPIMockListGroupsRequest.RUnlock()
	return calls
}

// ListGroupsWithContext calls ListGroupsWithContextFunc.
func (mock *IAMAPIMock) ListGroupsWithContext(in1 context.Context, in2 *iam.ListGroupsInput, in3 ...request.Option) (*iam.ListGroupsOutput, error) {
	if mock.ListGroupsWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsWithContextFunc: method is nil but IAMAPI.ListGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListGroupsWithContext.Lock()
	mock.calls.ListGroupsWithContext = append(mock.calls.ListGroupsWithContext, callInfo)
	lockIAMAPIMockListGroupsWithContext.Unlock()
	return mock.ListGroupsWithContextFunc(in1, in2, in3...)
}

// ListGroupsWithContextCalls gets all the calls that were made to ListGroupsWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListGroupsWithContextCalls())
func (mock *IAMAPIMock) ListGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListGroupsInput
		In3 []request.Option
	}
	lockIAMAPIMockListGroupsWithContext.RLock()
	calls = mock.calls.ListGroupsWithContext
	lockIAMAPIMockListGroupsWithContext.RUnlock()
	return calls
}

// ListInstanceProfiles calls ListInstanceProfilesFunc.
func (mock *IAMAPIMock) ListInstanceProfiles(in1 *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	if mock.ListInstanceProfilesFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesFunc: method is nil but IAMAPI.ListInstanceProfiles was just called")
	}
	callInfo := struct {
		In1 *iam.ListInstanceProfilesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListInstanceProfiles.Lock()
	mock.calls.ListInstanceProfiles = append(mock.calls.ListInstanceProfiles, callInfo)
	lockIAMAPIMockListInstanceProfiles.Unlock()
	return mock.ListInstanceProfilesFunc(in1)
}

// ListInstanceProfilesCalls gets all the calls that were made to ListInstanceProfiles.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesCalls())
func (mock *IAMAPIMock) ListInstanceProfilesCalls() []struct {
	In1 *iam.ListInstanceProfilesInput
} {
	var calls []struct {
		In1 *iam.ListInstanceProfilesInput
	}
	lockIAMAPIMockListInstanceProfiles.RLock()
	calls = mock.calls.ListInstanceProfiles
	lockIAMAPIMockListInstanceProfiles.RUnlock()
	return calls
}

// ListInstanceProfilesForRole calls ListInstanceProfilesForRoleFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRole(in1 *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	if mock.ListInstanceProfilesForRoleFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRoleFunc: method is nil but IAMAPI.ListInstanceProfilesForRole was just called")
	}
	callInfo := struct {
		In1 *iam.ListInstanceProfilesForRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListInstanceProfilesForRole.Lock()
	mock.calls.ListInstanceProfilesForRole = append(mock.calls.ListInstanceProfilesForRole, callInfo)
	lockIAMAPIMockListInstanceProfilesForRole.Unlock()
	return mock.ListInstanceProfilesForRoleFunc(in1)
}

// ListInstanceProfilesForRoleCalls gets all the calls that were made to ListInstanceProfilesForRole.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesForRoleCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRoleCalls() []struct {
	In1 *iam.ListInstanceProfilesForRoleInput
} {
	var calls []struct {
		In1 *iam.ListInstanceProfilesForRoleInput
	}
	lockIAMAPIMockListInstanceProfilesForRole.RLock()
	calls = mock.calls.ListInstanceProfilesForRole
	lockIAMAPIMockListInstanceProfilesForRole.RUnlock()
	return calls
}

// ListInstanceProfilesForRolePages calls ListInstanceProfilesForRolePagesFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRolePages(in1 *iam.ListInstanceProfilesForRoleInput, in2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
	if mock.ListInstanceProfilesForRolePagesFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRolePagesFunc: method is nil but IAMAPI.ListInstanceProfilesForRolePages was just called")
	}
	callInfo := struct {
		In1 *iam.ListInstanceProfilesForRoleInput
		In2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListInstanceProfilesForRolePages.Lock()
	mock.calls.ListInstanceProfilesForRolePages = append(mock.calls.ListInstanceProfilesForRolePages, callInfo)
	lockIAMAPIMockListInstanceProfilesForRolePages.Unlock()
	return mock.ListInstanceProfilesForRolePagesFunc(in1, in2)
}

// ListInstanceProfilesForRolePagesCalls gets all the calls that were made to ListInstanceProfilesForRolePages.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesForRolePagesCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRolePagesCalls() []struct {
	In1 *iam.ListInstanceProfilesForRoleInput
	In2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListInstanceProfilesForRoleInput
		In2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	}
	lockIAMAPIMockListInstanceProfilesForRolePages.RLock()
	calls = mock.calls.ListInstanceProfilesForRolePages
	lockIAMAPIMockListInstanceProfilesForRolePages.RUnlock()
	return calls
}

// ListInstanceProfilesForRolePagesWithContext calls ListInstanceProfilesForRolePagesWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRolePagesWithContext(in1 context.Context, in2 *iam.ListInstanceProfilesForRoleInput, in3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListInstanceProfilesForRolePagesWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRolePagesWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesForRolePagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesForRoleInput
		In3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListInstanceProfilesForRolePagesWithContext.Lock()
	mock.calls.ListInstanceProfilesForRolePagesWithContext = append(mock.calls.ListInstanceProfilesForRolePagesWithContext, callInfo)
	lockIAMAPIMockListInstanceProfilesForRolePagesWithContext.Unlock()
	return mock.ListInstanceProfilesForRolePagesWithContextFunc(in1, in2, in3, in4...)
}

// ListInstanceProfilesForRolePagesWithContextCalls gets all the calls that were made to ListInstanceProfilesForRolePagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesForRolePagesWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRolePagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListInstanceProfilesForRoleInput
	In3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesForRoleInput
		In3 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListInstanceProfilesForRolePagesWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesForRolePagesWithContext
	lockIAMAPIMockListInstanceProfilesForRolePagesWithContext.RUnlock()
	return calls
}

// ListInstanceProfilesForRoleRequest calls ListInstanceProfilesForRoleRequestFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRoleRequest(in1 *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput) {
	if mock.ListInstanceProfilesForRoleRequestFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRoleRequestFunc: method is nil but IAMAPI.ListInstanceProfilesForRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListInstanceProfilesForRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListInstanceProfilesForRoleRequest.Lock()
	mock.calls.ListInstanceProfilesForRoleRequest = append(mock.calls.ListInstanceProfilesForRoleRequest, callInfo)
	lockIAMAPIMockListInstanceProfilesForRoleRequest.Unlock()
	return mock.ListInstanceProfilesForRoleRequestFunc(in1)
}

// ListInstanceProfilesForRoleRequestCalls gets all the calls that were made to ListInstanceProfilesForRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesForRoleRequestCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRoleRequestCalls() []struct {
	In1 *iam.ListInstanceProfilesForRoleInput
} {
	var calls []struct {
		In1 *iam.ListInstanceProfilesForRoleInput
	}
	lockIAMAPIMockListInstanceProfilesForRoleRequest.RLock()
	calls = mock.calls.ListInstanceProfilesForRoleRequest
	lockIAMAPIMockListInstanceProfilesForRoleRequest.RUnlock()
	return calls
}

// ListInstanceProfilesForRoleWithContext calls ListInstanceProfilesForRoleWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRoleWithContext(in1 context.Context, in2 *iam.ListInstanceProfilesForRoleInput, in3 ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
	if mock.ListInstanceProfilesForRoleWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRoleWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesForRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesForRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListInstanceProfilesForRoleWithContext.Lock()
	mock.calls.ListInstanceProfilesForRoleWithContext = append(mock.calls.ListInstanceProfilesForRoleWithContext, callInfo)
	lockIAMAPIMockListInstanceProfilesForRoleWithContext.Unlock()
	return mock.ListInstanceProfilesForRoleWithContextFunc(in1, in2, in3...)
}

// ListInstanceProfilesForRoleWithContextCalls gets all the calls that were made to ListInstanceProfilesForRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesForRoleWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListInstanceProfilesForRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesForRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockListInstanceProfilesForRoleWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesForRoleWithContext
	lockIAMAPIMockListInstanceProfilesForRoleWithContext.RUnlock()
	return calls
}

// ListInstanceProfilesPages calls ListInstanceProfilesPagesFunc.
func (mock *IAMAPIMock) ListInstanceProfilesPages(in1 *iam.ListInstanceProfilesInput, in2 func(*iam.ListInstanceProfilesOutput, bool) bool) error {
	if mock.ListInstanceProfilesPagesFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesPagesFunc: method is nil but IAMAPI.ListInstanceProfilesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListInstanceProfilesInput
		In2 func(*iam.ListInstanceProfilesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListInstanceProfilesPages.Lock()
	mock.calls.ListInstanceProfilesPages = append(mock.calls.ListInstanceProfilesPages, callInfo)
	lockIAMAPIMockListInstanceProfilesPages.Unlock()
	return mock.ListInstanceProfilesPagesFunc(in1, in2)
}

// ListInstanceProfilesPagesCalls gets all the calls that were made to ListInstanceProfilesPages.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesPagesCalls())
func (mock *IAMAPIMock) ListInstanceProfilesPagesCalls() []struct {
	In1 *iam.ListInstanceProfilesInput
	In2 func(*iam.ListInstanceProfilesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListInstanceProfilesInput
		In2 func(*iam.ListInstanceProfilesOutput, bool) bool
	}
	lockIAMAPIMockListInstanceProfilesPages.RLock()
	calls = mock.calls.ListInstanceProfilesPages
	lockIAMAPIMockListInstanceProfilesPages.RUnlock()
	return calls
}

// ListInstanceProfilesPagesWithContext calls ListInstanceProfilesPagesWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesPagesWithContext(in1 context.Context, in2 *iam.ListInstanceProfilesInput, in3 func(*iam.ListInstanceProfilesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListInstanceProfilesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesPagesWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesInput
		In3 func(*iam.ListInstanceProfilesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListInstanceProfilesPagesWithContext.Lock()
	mock.calls.ListInstanceProfilesPagesWithContext = append(mock.calls.ListInstanceProfilesPagesWithContext, callInfo)
	lockIAMAPIMockListInstanceProfilesPagesWithContext.Unlock()
	return mock.ListInstanceProfilesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListInstanceProfilesPagesWithContextCalls gets all the calls that were made to ListInstanceProfilesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesPagesWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListInstanceProfilesInput
	In3 func(*iam.ListInstanceProfilesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesInput
		In3 func(*iam.ListInstanceProfilesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListInstanceProfilesPagesWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesPagesWithContext
	lockIAMAPIMockListInstanceProfilesPagesWithContext.RUnlock()
	return calls
}

// ListInstanceProfilesRequest calls ListInstanceProfilesRequestFunc.
func (mock *IAMAPIMock) ListInstanceProfilesRequest(in1 *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput) {
	if mock.ListInstanceProfilesRequestFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesRequestFunc: method is nil but IAMAPI.ListInstanceProfilesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListInstanceProfilesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListInstanceProfilesRequest.Lock()
	mock.calls.ListInstanceProfilesRequest = append(mock.calls.ListInstanceProfilesRequest, callInfo)
	lockIAMAPIMockListInstanceProfilesRequest.Unlock()
	return mock.ListInstanceProfilesRequestFunc(in1)
}

// ListInstanceProfilesRequestCalls gets all the calls that were made to ListInstanceProfilesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesRequestCalls())
func (mock *IAMAPIMock) ListInstanceProfilesRequestCalls() []struct {
	In1 *iam.ListInstanceProfilesInput
} {
	var calls []struct {
		In1 *iam.ListInstanceProfilesInput
	}
	lockIAMAPIMockListInstanceProfilesRequest.RLock()
	calls = mock.calls.ListInstanceProfilesRequest
	lockIAMAPIMockListInstanceProfilesRequest.RUnlock()
	return calls
}

// ListInstanceProfilesWithContext calls ListInstanceProfilesWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesWithContext(in1 context.Context, in2 *iam.ListInstanceProfilesInput, in3 ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
	if mock.ListInstanceProfilesWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListInstanceProfilesWithContext.Lock()
	mock.calls.ListInstanceProfilesWithContext = append(mock.calls.ListInstanceProfilesWithContext, callInfo)
	lockIAMAPIMockListInstanceProfilesWithContext.Unlock()
	return mock.ListInstanceProfilesWithContextFunc(in1, in2, in3...)
}

// ListInstanceProfilesWithContextCalls gets all the calls that were made to ListInstanceProfilesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListInstanceProfilesWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListInstanceProfilesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListInstanceProfilesInput
		In3 []request.Option
	}
	lockIAMAPIMockListInstanceProfilesWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesWithContext
	lockIAMAPIMockListInstanceProfilesWithContext.RUnlock()
	return calls
}

// ListMFADevices calls ListMFADevicesFunc.
func (mock *IAMAPIMock) ListMFADevices(in1 *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	if mock.ListMFADevicesFunc == nil {
		panic("IAMAPIMock.ListMFADevicesFunc: method is nil but IAMAPI.ListMFADevices was just called")
	}
	callInfo := struct {
		In1 *iam.ListMFADevicesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListMFADevices.Lock()
	mock.calls.ListMFADevices = append(mock.calls.ListMFADevices, callInfo)
	lockIAMAPIMockListMFADevices.Unlock()
	return mock.ListMFADevicesFunc(in1)
}

// ListMFADevicesCalls gets all the calls that were made to ListMFADevices.
// Check the length with:
//     len(mockedIAMAPI.ListMFADevicesCalls())
func (mock *IAMAPIMock) ListMFADevicesCalls() []struct {
	In1 *iam.ListMFADevicesInput
} {
	var calls []struct {
		In1 *iam.ListMFADevicesInput
	}
	lockIAMAPIMockListMFADevices.RLock()
	calls = mock.calls.ListMFADevices
	lockIAMAPIMockListMFADevices.RUnlock()
	return calls
}

// ListMFADevicesPages calls ListMFADevicesPagesFunc.
func (mock *IAMAPIMock) ListMFADevicesPages(in1 *iam.ListMFADevicesInput, in2 func(*iam.ListMFADevicesOutput, bool) bool) error {
	if mock.ListMFADevicesPagesFunc == nil {
		panic("IAMAPIMock.ListMFADevicesPagesFunc: method is nil but IAMAPI.ListMFADevicesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListMFADevicesInput
		In2 func(*iam.ListMFADevicesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListMFADevicesPages.Lock()
	mock.calls.ListMFADevicesPages = append(mock.calls.ListMFADevicesPages, callInfo)
	lockIAMAPIMockListMFADevicesPages.Unlock()
	return mock.ListMFADevicesPagesFunc(in1, in2)
}

// ListMFADevicesPagesCalls gets all the calls that were made to ListMFADevicesPages.
// Check the length with:
//     len(mockedIAMAPI.ListMFADevicesPagesCalls())
func (mock *IAMAPIMock) ListMFADevicesPagesCalls() []struct {
	In1 *iam.ListMFADevicesInput
	In2 func(*iam.ListMFADevicesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListMFADevicesInput
		In2 func(*iam.ListMFADevicesOutput, bool) bool
	}
	lockIAMAPIMockListMFADevicesPages.RLock()
	calls = mock.calls.ListMFADevicesPages
	lockIAMAPIMockListMFADevicesPages.RUnlock()
	return calls
}

// ListMFADevicesPagesWithContext calls ListMFADevicesPagesWithContextFunc.
func (mock *IAMAPIMock) ListMFADevicesPagesWithContext(in1 context.Context, in2 *iam.ListMFADevicesInput, in3 func(*iam.ListMFADevicesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListMFADevicesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListMFADevicesPagesWithContextFunc: method is nil but IAMAPI.ListMFADevicesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListMFADevicesInput
		In3 func(*iam.ListMFADevicesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListMFADevicesPagesWithContext.Lock()
	mock.calls.ListMFADevicesPagesWithContext = append(mock.calls.ListMFADevicesPagesWithContext, callInfo)
	lockIAMAPIMockListMFADevicesPagesWithContext.Unlock()
	return mock.ListMFADevicesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListMFADevicesPagesWithContextCalls gets all the calls that were made to ListMFADevicesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListMFADevicesPagesWithContextCalls())
func (mock *IAMAPIMock) ListMFADevicesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListMFADevicesInput
	In3 func(*iam.ListMFADevicesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListMFADevicesInput
		In3 func(*iam.ListMFADevicesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListMFADevicesPagesWithContext.RLock()
	calls = mock.calls.ListMFADevicesPagesWithContext
	lockIAMAPIMockListMFADevicesPagesWithContext.RUnlock()
	return calls
}

// ListMFADevicesRequest calls ListMFADevicesRequestFunc.
func (mock *IAMAPIMock) ListMFADevicesRequest(in1 *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput) {
	if mock.ListMFADevicesRequestFunc == nil {
		panic("IAMAPIMock.ListMFADevicesRequestFunc: method is nil but IAMAPI.ListMFADevicesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListMFADevicesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListMFADevicesRequest.Lock()
	mock.calls.ListMFADevicesRequest = append(mock.calls.ListMFADevicesRequest, callInfo)
	lockIAMAPIMockListMFADevicesRequest.Unlock()
	return mock.ListMFADevicesRequestFunc(in1)
}

// ListMFADevicesRequestCalls gets all the calls that were made to ListMFADevicesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListMFADevicesRequestCalls())
func (mock *IAMAPIMock) ListMFADevicesRequestCalls() []struct {
	In1 *iam.ListMFADevicesInput
} {
	var calls []struct {
		In1 *iam.ListMFADevicesInput
	}
	lockIAMAPIMockListMFADevicesRequest.RLock()
	calls = mock.calls.ListMFADevicesRequest
	lockIAMAPIMockListMFADevicesRequest.RUnlock()
	return calls
}

// ListMFADevicesWithContext calls ListMFADevicesWithContextFunc.
func (mock *IAMAPIMock) ListMFADevicesWithContext(in1 context.Context, in2 *iam.ListMFADevicesInput, in3 ...request.Option) (*iam.ListMFADevicesOutput, error) {
	if mock.ListMFADevicesWithContextFunc == nil {
		panic("IAMAPIMock.ListMFADevicesWithContextFunc: method is nil but IAMAPI.ListMFADevicesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListMFADevicesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListMFADevicesWithContext.Lock()
	mock.calls.ListMFADevicesWithContext = append(mock.calls.ListMFADevicesWithContext, callInfo)
	lockIAMAPIMockListMFADevicesWithContext.Unlock()
	return mock.ListMFADevicesWithContextFunc(in1, in2, in3...)
}

// ListMFADevicesWithContextCalls gets all the calls that were made to ListMFADevicesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListMFADevicesWithContextCalls())
func (mock *IAMAPIMock) ListMFADevicesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListMFADevicesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListMFADevicesInput
		In3 []request.Option
	}
	lockIAMAPIMockListMFADevicesWithContext.RLock()
	calls = mock.calls.ListMFADevicesWithContext
	lockIAMAPIMockListMFADevicesWithContext.RUnlock()
	return calls
}

// ListOpenIDConnectProviders calls ListOpenIDConnectProvidersFunc.
func (mock *IAMAPIMock) ListOpenIDConnectProviders(in1 *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	if mock.ListOpenIDConnectProvidersFunc == nil {
		panic("IAMAPIMock.ListOpenIDConnectProvidersFunc: method is nil but IAMAPI.ListOpenIDConnectProviders was just called")
	}
	callInfo := struct {
		In1 *iam.ListOpenIDConnectProvidersInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListOpenIDConnectProviders.Lock()
	mock.calls.ListOpenIDConnectProviders = append(mock.calls.ListOpenIDConnectProviders, callInfo)
	lockIAMAPIMockListOpenIDConnectProviders.Unlock()
	return mock.ListOpenIDConnectProvidersFunc(in1)
}

// ListOpenIDConnectProvidersCalls gets all the calls that were made to ListOpenIDConnectProviders.
// Check the length with:
//     len(mockedIAMAPI.ListOpenIDConnectProvidersCalls())
func (mock *IAMAPIMock) ListOpenIDConnectProvidersCalls() []struct {
	In1 *iam.ListOpenIDConnectProvidersInput
} {
	var calls []struct {
		In1 *iam.ListOpenIDConnectProvidersInput
	}
	lockIAMAPIMockListOpenIDConnectProviders.RLock()
	calls = mock.calls.ListOpenIDConnectProviders
	lockIAMAPIMockListOpenIDConnectProviders.RUnlock()
	return calls
}

// ListOpenIDConnectProvidersRequest calls ListOpenIDConnectProvidersRequestFunc.
func (mock *IAMAPIMock) ListOpenIDConnectProvidersRequest(in1 *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput) {
	if mock.ListOpenIDConnectProvidersRequestFunc == nil {
		panic("IAMAPIMock.ListOpenIDConnectProvidersRequestFunc: method is nil but IAMAPI.ListOpenIDConnectProvidersRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListOpenIDConnectProvidersInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListOpenIDConnectProvidersRequest.Lock()
	mock.calls.ListOpenIDConnectProvidersRequest = append(mock.calls.ListOpenIDConnectProvidersRequest, callInfo)
	lockIAMAPIMockListOpenIDConnectProvidersRequest.Unlock()
	return mock.ListOpenIDConnectProvidersRequestFunc(in1)
}

// ListOpenIDConnectProvidersRequestCalls gets all the calls that were made to ListOpenIDConnectProvidersRequest.
// Check the length with:
//     len(mockedIAMAPI.ListOpenIDConnectProvidersRequestCalls())
func (mock *IAMAPIMock) ListOpenIDConnectProvidersRequestCalls() []struct {
	In1 *iam.ListOpenIDConnectProvidersInput
} {
	var calls []struct {
		In1 *iam.ListOpenIDConnectProvidersInput
	}
	lockIAMAPIMockListOpenIDConnectProvidersRequest.RLock()
	calls = mock.calls.ListOpenIDConnectProvidersRequest
	lockIAMAPIMockListOpenIDConnectProvidersRequest.RUnlock()
	return calls
}

// ListOpenIDConnectProvidersWithContext calls ListOpenIDConnectProvidersWithContextFunc.
func (mock *IAMAPIMock) ListOpenIDConnectProvidersWithContext(in1 context.Context, in2 *iam.ListOpenIDConnectProvidersInput, in3 ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
	if mock.ListOpenIDConnectProvidersWithContextFunc == nil {
		panic("IAMAPIMock.ListOpenIDConnectProvidersWithContextFunc: method is nil but IAMAPI.ListOpenIDConnectProvidersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListOpenIDConnectProvidersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListOpenIDConnectProvidersWithContext.Lock()
	mock.calls.ListOpenIDConnectProvidersWithContext = append(mock.calls.ListOpenIDConnectProvidersWithContext, callInfo)
	lockIAMAPIMockListOpenIDConnectProvidersWithContext.Unlock()
	return mock.ListOpenIDConnectProvidersWithContextFunc(in1, in2, in3...)
}

// ListOpenIDConnectProvidersWithContextCalls gets all the calls that were made to ListOpenIDConnectProvidersWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListOpenIDConnectProvidersWithContextCalls())
func (mock *IAMAPIMock) ListOpenIDConnectProvidersWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListOpenIDConnectProvidersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListOpenIDConnectProvidersInput
		In3 []request.Option
	}
	lockIAMAPIMockListOpenIDConnectProvidersWithContext.RLock()
	calls = mock.calls.ListOpenIDConnectProvidersWithContext
	lockIAMAPIMockListOpenIDConnectProvidersWithContext.RUnlock()
	return calls
}

// ListPolicies calls ListPoliciesFunc.
func (mock *IAMAPIMock) ListPolicies(in1 *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	if mock.ListPoliciesFunc == nil {
		panic("IAMAPIMock.ListPoliciesFunc: method is nil but IAMAPI.ListPolicies was just called")
	}
	callInfo := struct {
		In1 *iam.ListPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListPolicies.Lock()
	mock.calls.ListPolicies = append(mock.calls.ListPolicies, callInfo)
	lockIAMAPIMockListPolicies.Unlock()
	return mock.ListPoliciesFunc(in1)
}

// ListPoliciesCalls gets all the calls that were made to ListPolicies.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesCalls())
func (mock *IAMAPIMock) ListPoliciesCalls() []struct {
	In1 *iam.ListPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListPoliciesInput
	}
	lockIAMAPIMockListPolicies.RLock()
	calls = mock.calls.ListPolicies
	lockIAMAPIMockListPolicies.RUnlock()
	return calls
}

// ListPoliciesGrantingServiceAccess calls ListPoliciesGrantingServiceAccessFunc.
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccess(in1 *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	if mock.ListPoliciesGrantingServiceAccessFunc == nil {
		panic("IAMAPIMock.ListPoliciesGrantingServiceAccessFunc: method is nil but IAMAPI.ListPoliciesGrantingServiceAccess was just called")
	}
	callInfo := struct {
		In1 *iam.ListPoliciesGrantingServiceAccessInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListPoliciesGrantingServiceAccess.Lock()
	mock.calls.ListPoliciesGrantingServiceAccess = append(mock.calls.ListPoliciesGrantingServiceAccess, callInfo)
	lockIAMAPIMockListPoliciesGrantingServiceAccess.Unlock()
	return mock.ListPoliciesGrantingServiceAccessFunc(in1)
}

// ListPoliciesGrantingServiceAccessCalls gets all the calls that were made to ListPoliciesGrantingServiceAccess.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesGrantingServiceAccessCalls())
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessCalls() []struct {
	In1 *iam.ListPoliciesGrantingServiceAccessInput
} {
	var calls []struct {
		In1 *iam.ListPoliciesGrantingServiceAccessInput
	}
	lockIAMAPIMockListPoliciesGrantingServiceAccess.RLock()
	calls = mock.calls.ListPoliciesGrantingServiceAccess
	lockIAMAPIMockListPoliciesGrantingServiceAccess.RUnlock()
	return calls
}

// ListPoliciesGrantingServiceAccessRequest calls ListPoliciesGrantingServiceAccessRequestFunc.
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessRequest(in1 *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput) {
	if mock.ListPoliciesGrantingServiceAccessRequestFunc == nil {
		panic("IAMAPIMock.ListPoliciesGrantingServiceAccessRequestFunc: method is nil but IAMAPI.ListPoliciesGrantingServiceAccessRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListPoliciesGrantingServiceAccessInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListPoliciesGrantingServiceAccessRequest.Lock()
	mock.calls.ListPoliciesGrantingServiceAccessRequest = append(mock.calls.ListPoliciesGrantingServiceAccessRequest, callInfo)
	lockIAMAPIMockListPoliciesGrantingServiceAccessRequest.Unlock()
	return mock.ListPoliciesGrantingServiceAccessRequestFunc(in1)
}

// ListPoliciesGrantingServiceAccessRequestCalls gets all the calls that were made to ListPoliciesGrantingServiceAccessRequest.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesGrantingServiceAccessRequestCalls())
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessRequestCalls() []struct {
	In1 *iam.ListPoliciesGrantingServiceAccessInput
} {
	var calls []struct {
		In1 *iam.ListPoliciesGrantingServiceAccessInput
	}
	lockIAMAPIMockListPoliciesGrantingServiceAccessRequest.RLock()
	calls = mock.calls.ListPoliciesGrantingServiceAccessRequest
	lockIAMAPIMockListPoliciesGrantingServiceAccessRequest.RUnlock()
	return calls
}

// ListPoliciesGrantingServiceAccessWithContext calls ListPoliciesGrantingServiceAccessWithContextFunc.
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessWithContext(in1 context.Context, in2 *iam.ListPoliciesGrantingServiceAccessInput, in3 ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	if mock.ListPoliciesGrantingServiceAccessWithContextFunc == nil {
		panic("IAMAPIMock.ListPoliciesGrantingServiceAccessWithContextFunc: method is nil but IAMAPI.ListPoliciesGrantingServiceAccessWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListPoliciesGrantingServiceAccessInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListPoliciesGrantingServiceAccessWithContext.Lock()
	mock.calls.ListPoliciesGrantingServiceAccessWithContext = append(mock.calls.ListPoliciesGrantingServiceAccessWithContext, callInfo)
	lockIAMAPIMockListPoliciesGrantingServiceAccessWithContext.Unlock()
	return mock.ListPoliciesGrantingServiceAccessWithContextFunc(in1, in2, in3...)
}

// ListPoliciesGrantingServiceAccessWithContextCalls gets all the calls that were made to ListPoliciesGrantingServiceAccessWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesGrantingServiceAccessWithContextCalls())
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListPoliciesGrantingServiceAccessInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListPoliciesGrantingServiceAccessInput
		In3 []request.Option
	}
	lockIAMAPIMockListPoliciesGrantingServiceAccessWithContext.RLock()
	calls = mock.calls.ListPoliciesGrantingServiceAccessWithContext
	lockIAMAPIMockListPoliciesGrantingServiceAccessWithContext.RUnlock()
	return calls
}

// ListPoliciesPages calls ListPoliciesPagesFunc.
func (mock *IAMAPIMock) ListPoliciesPages(in1 *iam.ListPoliciesInput, in2 func(*iam.ListPoliciesOutput, bool) bool) error {
	if mock.ListPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListPoliciesPagesFunc: method is nil but IAMAPI.ListPoliciesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListPoliciesInput
		In2 func(*iam.ListPoliciesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListPoliciesPages.Lock()
	mock.calls.ListPoliciesPages = append(mock.calls.ListPoliciesPages, callInfo)
	lockIAMAPIMockListPoliciesPages.Unlock()
	return mock.ListPoliciesPagesFunc(in1, in2)
}

// ListPoliciesPagesCalls gets all the calls that were made to ListPoliciesPages.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesPagesCalls())
func (mock *IAMAPIMock) ListPoliciesPagesCalls() []struct {
	In1 *iam.ListPoliciesInput
	In2 func(*iam.ListPoliciesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListPoliciesInput
		In2 func(*iam.ListPoliciesOutput, bool) bool
	}
	lockIAMAPIMockListPoliciesPages.RLock()
	calls = mock.calls.ListPoliciesPages
	lockIAMAPIMockListPoliciesPages.RUnlock()
	return calls
}

// ListPoliciesPagesWithContext calls ListPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListPoliciesPagesWithContext(in1 context.Context, in2 *iam.ListPoliciesInput, in3 func(*iam.ListPoliciesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListPoliciesInput
		In3 func(*iam.ListPoliciesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListPoliciesPagesWithContext.Lock()
	mock.calls.ListPoliciesPagesWithContext = append(mock.calls.ListPoliciesPagesWithContext, callInfo)
	lockIAMAPIMockListPoliciesPagesWithContext.Unlock()
	return mock.ListPoliciesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListPoliciesPagesWithContextCalls gets all the calls that were made to ListPoliciesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListPoliciesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListPoliciesInput
	In3 func(*iam.ListPoliciesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListPoliciesInput
		In3 func(*iam.ListPoliciesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListPoliciesPagesWithContext
	lockIAMAPIMockListPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListPoliciesRequest calls ListPoliciesRequestFunc.
func (mock *IAMAPIMock) ListPoliciesRequest(in1 *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput) {
	if mock.ListPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListPoliciesRequestFunc: method is nil but IAMAPI.ListPoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListPoliciesRequest.Lock()
	mock.calls.ListPoliciesRequest = append(mock.calls.ListPoliciesRequest, callInfo)
	lockIAMAPIMockListPoliciesRequest.Unlock()
	return mock.ListPoliciesRequestFunc(in1)
}

// ListPoliciesRequestCalls gets all the calls that were made to ListPoliciesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesRequestCalls())
func (mock *IAMAPIMock) ListPoliciesRequestCalls() []struct {
	In1 *iam.ListPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListPoliciesInput
	}
	lockIAMAPIMockListPoliciesRequest.RLock()
	calls = mock.calls.ListPoliciesRequest
	lockIAMAPIMockListPoliciesRequest.RUnlock()
	return calls
}

// ListPoliciesWithContext calls ListPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListPoliciesWithContext(in1 context.Context, in2 *iam.ListPoliciesInput, in3 ...request.Option) (*iam.ListPoliciesOutput, error) {
	if mock.ListPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListPoliciesWithContextFunc: method is nil but IAMAPI.ListPoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListPoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListPoliciesWithContext.Lock()
	mock.calls.ListPoliciesWithContext = append(mock.calls.ListPoliciesWithContext, callInfo)
	lockIAMAPIMockListPoliciesWithContext.Unlock()
	return mock.ListPoliciesWithContextFunc(in1, in2, in3...)
}

// ListPoliciesWithContextCalls gets all the calls that were made to ListPoliciesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListPoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListPoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListPoliciesInput
		In3 []request.Option
	}
	lockIAMAPIMockListPoliciesWithContext.RLock()
	calls = mock.calls.ListPoliciesWithContext
	lockIAMAPIMockListPoliciesWithContext.RUnlock()
	return calls
}

// ListPolicyVersions calls ListPolicyVersionsFunc.
func (mock *IAMAPIMock) ListPolicyVersions(in1 *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	if mock.ListPolicyVersionsFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsFunc: method is nil but IAMAPI.ListPolicyVersions was just called")
	}
	callInfo := struct {
		In1 *iam.ListPolicyVersionsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListPolicyVersions.Lock()
	mock.calls.ListPolicyVersions = append(mock.calls.ListPolicyVersions, callInfo)
	lockIAMAPIMockListPolicyVersions.Unlock()
	return mock.ListPolicyVersionsFunc(in1)
}

// ListPolicyVersionsCalls gets all the calls that were made to ListPolicyVersions.
// Check the length with:
//     len(mockedIAMAPI.ListPolicyVersionsCalls())
func (mock *IAMAPIMock) ListPolicyVersionsCalls() []struct {
	In1 *iam.ListPolicyVersionsInput
} {
	var calls []struct {
		In1 *iam.ListPolicyVersionsInput
	}
	lockIAMAPIMockListPolicyVersions.RLock()
	calls = mock.calls.ListPolicyVersions
	lockIAMAPIMockListPolicyVersions.RUnlock()
	return calls
}

// ListPolicyVersionsPages calls ListPolicyVersionsPagesFunc.
func (mock *IAMAPIMock) ListPolicyVersionsPages(in1 *iam.ListPolicyVersionsInput, in2 func(*iam.ListPolicyVersionsOutput, bool) bool) error {
	if mock.ListPolicyVersionsPagesFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsPagesFunc: method is nil but IAMAPI.ListPolicyVersionsPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListPolicyVersionsInput
		In2 func(*iam.ListPolicyVersionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListPolicyVersionsPages.Lock()
	mock.calls.ListPolicyVersionsPages = append(mock.calls.ListPolicyVersionsPages, callInfo)
	lockIAMAPIMockListPolicyVersionsPages.Unlock()
	return mock.ListPolicyVersionsPagesFunc(in1, in2)
}

// ListPolicyVersionsPagesCalls gets all the calls that were made to ListPolicyVersionsPages.
// Check the length with:
//     len(mockedIAMAPI.ListPolicyVersionsPagesCalls())
func (mock *IAMAPIMock) ListPolicyVersionsPagesCalls() []struct {
	In1 *iam.ListPolicyVersionsInput
	In2 func(*iam.ListPolicyVersionsOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListPolicyVersionsInput
		In2 func(*iam.ListPolicyVersionsOutput, bool) bool
	}
	lockIAMAPIMockListPolicyVersionsPages.RLock()
	calls = mock.calls.ListPolicyVersionsPages
	lockIAMAPIMockListPolicyVersionsPages.RUnlock()
	return calls
}

// ListPolicyVersionsPagesWithContext calls ListPolicyVersionsPagesWithContextFunc.
func (mock *IAMAPIMock) ListPolicyVersionsPagesWithContext(in1 context.Context, in2 *iam.ListPolicyVersionsInput, in3 func(*iam.ListPolicyVersionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListPolicyVersionsPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsPagesWithContextFunc: method is nil but IAMAPI.ListPolicyVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListPolicyVersionsInput
		In3 func(*iam.ListPolicyVersionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListPolicyVersionsPagesWithContext.Lock()
	mock.calls.ListPolicyVersionsPagesWithContext = append(mock.calls.ListPolicyVersionsPagesWithContext, callInfo)
	lockIAMAPIMockListPolicyVersionsPagesWithContext.Unlock()
	return mock.ListPolicyVersionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListPolicyVersionsPagesWithContextCalls gets all the calls that were made to ListPolicyVersionsPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListPolicyVersionsPagesWithContextCalls())
func (mock *IAMAPIMock) ListPolicyVersionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListPolicyVersionsInput
	In3 func(*iam.ListPolicyVersionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListPolicyVersionsInput
		In3 func(*iam.ListPolicyVersionsOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListPolicyVersionsPagesWithContext.RLock()
	calls = mock.calls.ListPolicyVersionsPagesWithContext
	lockIAMAPIMockListPolicyVersionsPagesWithContext.RUnlock()
	return calls
}

// ListPolicyVersionsRequest calls ListPolicyVersionsRequestFunc.
func (mock *IAMAPIMock) ListPolicyVersionsRequest(in1 *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput) {
	if mock.ListPolicyVersionsRequestFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsRequestFunc: method is nil but IAMAPI.ListPolicyVersionsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListPolicyVersionsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListPolicyVersionsRequest.Lock()
	mock.calls.ListPolicyVersionsRequest = append(mock.calls.ListPolicyVersionsRequest, callInfo)
	lockIAMAPIMockListPolicyVersionsRequest.Unlock()
	return mock.ListPolicyVersionsRequestFunc(in1)
}

// ListPolicyVersionsRequestCalls gets all the calls that were made to ListPolicyVersionsRequest.
// Check the length with:
//     len(mockedIAMAPI.ListPolicyVersionsRequestCalls())
func (mock *IAMAPIMock) ListPolicyVersionsRequestCalls() []struct {
	In1 *iam.ListPolicyVersionsInput
} {
	var calls []struct {
		In1 *iam.ListPolicyVersionsInput
	}
	lockIAMAPIMockListPolicyVersionsRequest.RLock()
	calls = mock.calls.ListPolicyVersionsRequest
	lockIAMAPIMockListPolicyVersionsRequest.RUnlock()
	return calls
}

// ListPolicyVersionsWithContext calls ListPolicyVersionsWithContextFunc.
func (mock *IAMAPIMock) ListPolicyVersionsWithContext(in1 context.Context, in2 *iam.ListPolicyVersionsInput, in3 ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
	if mock.ListPolicyVersionsWithContextFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsWithContextFunc: method is nil but IAMAPI.ListPolicyVersionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListPolicyVersionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListPolicyVersionsWithContext.Lock()
	mock.calls.ListPolicyVersionsWithContext = append(mock.calls.ListPolicyVersionsWithContext, callInfo)
	lockIAMAPIMockListPolicyVersionsWithContext.Unlock()
	return mock.ListPolicyVersionsWithContextFunc(in1, in2, in3...)
}

// ListPolicyVersionsWithContextCalls gets all the calls that were made to ListPolicyVersionsWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListPolicyVersionsWithContextCalls())
func (mock *IAMAPIMock) ListPolicyVersionsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListPolicyVersionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListPolicyVersionsInput
		In3 []request.Option
	}
	lockIAMAPIMockListPolicyVersionsWithContext.RLock()
	calls = mock.calls.ListPolicyVersionsWithContext
	lockIAMAPIMockListPolicyVersionsWithContext.RUnlock()
	return calls
}

// ListRolePolicies calls ListRolePoliciesFunc.
func (mock *IAMAPIMock) ListRolePolicies(in1 *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	if mock.ListRolePoliciesFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesFunc: method is nil but IAMAPI.ListRolePolicies was just called")
	}
	callInfo := struct {
		In1 *iam.ListRolePoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListRolePolicies.Lock()
	mock.calls.ListRolePolicies = append(mock.calls.ListRolePolicies, callInfo)
	lockIAMAPIMockListRolePolicies.Unlock()
	return mock.ListRolePoliciesFunc(in1)
}

// ListRolePoliciesCalls gets all the calls that were made to ListRolePolicies.
// Check the length with:
//     len(mockedIAMAPI.ListRolePoliciesCalls())
func (mock *IAMAPIMock) ListRolePoliciesCalls() []struct {
	In1 *iam.ListRolePoliciesInput
} {
	var calls []struct {
		In1 *iam.ListRolePoliciesInput
	}
	lockIAMAPIMockListRolePolicies.RLock()
	calls = mock.calls.ListRolePolicies
	lockIAMAPIMockListRolePolicies.RUnlock()
	return calls
}

// ListRolePoliciesPages calls ListRolePoliciesPagesFunc.
func (mock *IAMAPIMock) ListRolePoliciesPages(in1 *iam.ListRolePoliciesInput, in2 func(*iam.ListRolePoliciesOutput, bool) bool) error {
	if mock.ListRolePoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesPagesFunc: method is nil but IAMAPI.ListRolePoliciesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListRolePoliciesInput
		In2 func(*iam.ListRolePoliciesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListRolePoliciesPages.Lock()
	mock.calls.ListRolePoliciesPages = append(mock.calls.ListRolePoliciesPages, callInfo)
	lockIAMAPIMockListRolePoliciesPages.Unlock()
	return mock.ListRolePoliciesPagesFunc(in1, in2)
}

// ListRolePoliciesPagesCalls gets all the calls that were made to ListRolePoliciesPages.
// Check the length with:
//     len(mockedIAMAPI.ListRolePoliciesPagesCalls())
func (mock *IAMAPIMock) ListRolePoliciesPagesCalls() []struct {
	In1 *iam.ListRolePoliciesInput
	In2 func(*iam.ListRolePoliciesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListRolePoliciesInput
		In2 func(*iam.ListRolePoliciesOutput, bool) bool
	}
	lockIAMAPIMockListRolePoliciesPages.RLock()
	calls = mock.calls.ListRolePoliciesPages
	lockIAMAPIMockListRolePoliciesPages.RUnlock()
	return calls
}

// ListRolePoliciesPagesWithContext calls ListRolePoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListRolePoliciesPagesWithContext(in1 context.Context, in2 *iam.ListRolePoliciesInput, in3 func(*iam.ListRolePoliciesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListRolePoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesPagesWithContextFunc: method is nil but IAMAPI.ListRolePoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListRolePoliciesInput
		In3 func(*iam.ListRolePoliciesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListRolePoliciesPagesWithContext.Lock()
	mock.calls.ListRolePoliciesPagesWithContext = append(mock.calls.ListRolePoliciesPagesWithContext, callInfo)
	lockIAMAPIMockListRolePoliciesPagesWithContext.Unlock()
	return mock.ListRolePoliciesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListRolePoliciesPagesWithContextCalls gets all the calls that were made to ListRolePoliciesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListRolePoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListRolePoliciesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListRolePoliciesInput
	In3 func(*iam.ListRolePoliciesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListRolePoliciesInput
		In3 func(*iam.ListRolePoliciesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListRolePoliciesPagesWithContext.RLock()
	calls = mock.calls.ListRolePoliciesPagesWithContext
	lockIAMAPIMockListRolePoliciesPagesWithContext.RUnlock()
	return calls
}

// ListRolePoliciesRequest calls ListRolePoliciesRequestFunc.
func (mock *IAMAPIMock) ListRolePoliciesRequest(in1 *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput) {
	if mock.ListRolePoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesRequestFunc: method is nil but IAMAPI.ListRolePoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListRolePoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListRolePoliciesRequest.Lock()
	mock.calls.ListRolePoliciesRequest = append(mock.calls.ListRolePoliciesRequest, callInfo)
	lockIAMAPIMockListRolePoliciesRequest.Unlock()
	return mock.ListRolePoliciesRequestFunc(in1)
}

// ListRolePoliciesRequestCalls gets all the calls that were made to ListRolePoliciesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListRolePoliciesRequestCalls())
func (mock *IAMAPIMock) ListRolePoliciesRequestCalls() []struct {
	In1 *iam.ListRolePoliciesInput
} {
	var calls []struct {
		In1 *iam.ListRolePoliciesInput
	}
	lockIAMAPIMockListRolePoliciesRequest.RLock()
	calls = mock.calls.ListRolePoliciesRequest
	lockIAMAPIMockListRolePoliciesRequest.RUnlock()
	return calls
}

// ListRolePoliciesWithContext calls ListRolePoliciesWithContextFunc.
func (mock *IAMAPIMock) ListRolePoliciesWithContext(in1 context.Context, in2 *iam.ListRolePoliciesInput, in3 ...request.Option) (*iam.ListRolePoliciesOutput, error) {
	if mock.ListRolePoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesWithContextFunc: method is nil but IAMAPI.ListRolePoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListRolePoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListRolePoliciesWithContext.Lock()
	mock.calls.ListRolePoliciesWithContext = append(mock.calls.ListRolePoliciesWithContext, callInfo)
	lockIAMAPIMockListRolePoliciesWithContext.Unlock()
	return mock.ListRolePoliciesWithContextFunc(in1, in2, in3...)
}

// ListRolePoliciesWithContextCalls gets all the calls that were made to ListRolePoliciesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListRolePoliciesWithContextCalls())
func (mock *IAMAPIMock) ListRolePoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListRolePoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListRolePoliciesInput
		In3 []request.Option
	}
	lockIAMAPIMockListRolePoliciesWithContext.RLock()
	calls = mock.calls.ListRolePoliciesWithContext
	lockIAMAPIMockListRolePoliciesWithContext.RUnlock()
	return calls
}

// ListRoleTags calls ListRoleTagsFunc.
func (mock *IAMAPIMock) ListRoleTags(in1 *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
	if mock.ListRoleTagsFunc == nil {
		panic("IAMAPIMock.ListRoleTagsFunc: method is nil but IAMAPI.ListRoleTags was just called")
	}
	callInfo := struct {
		In1 *iam.ListRoleTagsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListRoleTags.Lock()
	mock.calls.ListRoleTags = append(mock.calls.ListRoleTags, callInfo)
	lockIAMAPIMockListRoleTags.Unlock()
	return mock.ListRoleTagsFunc(in1)
}

// ListRoleTagsCalls gets all the calls that were made to ListRoleTags.
// Check the length with:
//     len(mockedIAMAPI.ListRoleTagsCalls())
func (mock *IAMAPIMock) ListRoleTagsCalls() []struct {
	In1 *iam.ListRoleTagsInput
} {
	var calls []struct {
		In1 *iam.ListRoleTagsInput
	}
	lockIAMAPIMockListRoleTags.RLock()
	calls = mock.calls.ListRoleTags
	lockIAMAPIMockListRoleTags.RUnlock()
	return calls
}

// ListRoleTagsRequest calls ListRoleTagsRequestFunc.
func (mock *IAMAPIMock) ListRoleTagsRequest(in1 *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput) {
	if mock.ListRoleTagsRequestFunc == nil {
		panic("IAMAPIMock.ListRoleTagsRequestFunc: method is nil but IAMAPI.ListRoleTagsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListRoleTagsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListRoleTagsRequest.Lock()
	mock.calls.ListRoleTagsRequest = append(mock.calls.ListRoleTagsRequest, callInfo)
	lockIAMAPIMockListRoleTagsRequest.Unlock()
	return mock.ListRoleTagsRequestFunc(in1)
}

// ListRoleTagsRequestCalls gets all the calls that were made to ListRoleTagsRequest.
// Check the length with:
//     len(mockedIAMAPI.ListRoleTagsRequestCalls())
func (mock *IAMAPIMock) ListRoleTagsRequestCalls() []struct {
	In1 *iam.ListRoleTagsInput
} {
	var calls []struct {
		In1 *iam.ListRoleTagsInput
	}
	lockIAMAPIMockListRoleTagsRequest.RLock()
	calls = mock.calls.ListRoleTagsRequest
	lockIAMAPIMockListRoleTagsRequest.RUnlock()
	return calls
}

// ListRoleTagsWithContext calls ListRoleTagsWithContextFunc.
func (mock *IAMAPIMock) ListRoleTagsWithContext(in1 context.Context, in2 *iam.ListRoleTagsInput, in3 ...request.Option) (*iam.ListRoleTagsOutput, error) {
	if mock.ListRoleTagsWithContextFunc == nil {
		panic("IAMAPIMock.ListRoleTagsWithContextFunc: method is nil but IAMAPI.ListRoleTagsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListRoleTagsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListRoleTagsWithContext.Lock()
	mock.calls.ListRoleTagsWithContext = append(mock.calls.ListRoleTagsWithContext, callInfo)
	lockIAMAPIMockListRoleTagsWithContext.Unlock()
	return mock.ListRoleTagsWithContextFunc(in1, in2, in3...)
}

// ListRoleTagsWithContextCalls gets all the calls that were made to ListRoleTagsWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListRoleTagsWithContextCalls())
func (mock *IAMAPIMock) ListRoleTagsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListRoleTagsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListRoleTagsInput
		In3 []request.Option
	}
	lockIAMAPIMockListRoleTagsWithContext.RLock()
	calls = mock.calls.ListRoleTagsWithContext
	lockIAMAPIMockListRoleTagsWithContext.RUnlock()
	return calls
}

// ListRoles calls ListRolesFunc.
func (mock *IAMAPIMock) ListRoles(in1 *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	if mock.ListRolesFunc == nil {
		panic("IAMAPIMock.ListRolesFunc: method is nil but IAMAPI.ListRoles was just called")
	}
	callInfo := struct {
		In1 *iam.ListRolesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListRoles.Lock()
	mock.calls.ListRoles = append(mock.calls.ListRoles, callInfo)
	lockIAMAPIMockListRoles.Unlock()
	return mock.ListRolesFunc(in1)
}

// ListRolesCalls gets all the calls that were made to ListRoles.
// Check the length with:
//     len(mockedIAMAPI.ListRolesCalls())
func (mock *IAMAPIMock) ListRolesCalls() []struct {
	In1 *iam.ListRolesInput
} {
	var calls []struct {
		In1 *iam.ListRolesInput
	}
	lockIAMAPIMockListRoles.RLock()
	calls = mock.calls.ListRoles
	lockIAMAPIMockListRoles.RUnlock()
	return calls
}

// ListRolesPages calls ListRolesPagesFunc.
func (mock *IAMAPIMock) ListRolesPages(in1 *iam.ListRolesInput, in2 func(*iam.ListRolesOutput, bool) bool) error {
	if mock.ListRolesPagesFunc == nil {
		panic("IAMAPIMock.ListRolesPagesFunc: method is nil but IAMAPI.ListRolesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListRolesInput
		In2 func(*iam.ListRolesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListRolesPages.Lock()
	mock.calls.ListRolesPages = append(mock.calls.ListRolesPages, callInfo)
	lockIAMAPIMockListRolesPages.Unlock()
	return mock.ListRolesPagesFunc(in1, in2)
}

// ListRolesPagesCalls gets all the calls that were made to ListRolesPages.
// Check the length with:
//     len(mockedIAMAPI.ListRolesPagesCalls())
func (mock *IAMAPIMock) ListRolesPagesCalls() []struct {
	In1 *iam.ListRolesInput
	In2 func(*iam.ListRolesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListRolesInput
		In2 func(*iam.ListRolesOutput, bool) bool
	}
	lockIAMAPIMockListRolesPages.RLock()
	calls = mock.calls.ListRolesPages
	lockIAMAPIMockListRolesPages.RUnlock()
	return calls
}

// ListRolesPagesWithContext calls ListRolesPagesWithContextFunc.
func (mock *IAMAPIMock) ListRolesPagesWithContext(in1 context.Context, in2 *iam.ListRolesInput, in3 func(*iam.ListRolesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListRolesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolesPagesWithContextFunc: method is nil but IAMAPI.ListRolesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListRolesInput
		In3 func(*iam.ListRolesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListRolesPagesWithContext.Lock()
	mock.calls.ListRolesPagesWithContext = append(mock.calls.ListRolesPagesWithContext, callInfo)
	lockIAMAPIMockListRolesPagesWithContext.Unlock()
	return mock.ListRolesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListRolesPagesWithContextCalls gets all the calls that were made to ListRolesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListRolesPagesWithContextCalls())
func (mock *IAMAPIMock) ListRolesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListRolesInput
	In3 func(*iam.ListRolesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListRolesInput
		In3 func(*iam.ListRolesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListRolesPagesWithContext.RLock()
	calls = mock.calls.ListRolesPagesWithContext
	lockIAMAPIMockListRolesPagesWithContext.RUnlock()
	return calls
}

// ListRolesRequest calls ListRolesRequestFunc.
func (mock *IAMAPIMock) ListRolesRequest(in1 *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput) {
	if mock.ListRolesRequestFunc == nil {
		panic("IAMAPIMock.ListRolesRequestFunc: method is nil but IAMAPI.ListRolesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListRolesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListRolesRequest.Lock()
	mock.calls.ListRolesRequest = append(mock.calls.ListRolesRequest, callInfo)
	lockIAMAPIMockListRolesRequest.Unlock()
	return mock.ListRolesRequestFunc(in1)
}

// ListRolesRequestCalls gets all the calls that were made to ListRolesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListRolesRequestCalls())
func (mock *IAMAPIMock) ListRolesRequestCalls() []struct {
	In1 *iam.ListRolesInput
} {
	var calls []struct {
		In1 *iam.ListRolesInput
	}
	lockIAMAPIMockListRolesRequest.RLock()
	calls = mock.calls.ListRolesRequest
	lockIAMAPIMockListRolesRequest.RUnlock()
	return calls
}

// ListRolesWithContext calls ListRolesWithContextFunc.
func (mock *IAMAPIMock) ListRolesWithContext(in1 context.Context, in2 *iam.ListRolesInput, in3 ...request.Option) (*iam.ListRolesOutput, error) {
	if mock.ListRolesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolesWithContextFunc: method is nil but IAMAPI.ListRolesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListRolesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListRolesWithContext.Lock()
	mock.calls.ListRolesWithContext = append(mock.calls.ListRolesWithContext, callInfo)
	lockIAMAPIMockListRolesWithContext.Unlock()
	return mock.ListRolesWithContextFunc(in1, in2, in3...)
}

// ListRolesWithContextCalls gets all the calls that were made to ListRolesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListRolesWithContextCalls())
func (mock *IAMAPIMock) ListRolesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListRolesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListRolesInput
		In3 []request.Option
	}
	lockIAMAPIMockListRolesWithContext.RLock()
	calls = mock.calls.ListRolesWithContext
	lockIAMAPIMockListRolesWithContext.RUnlock()
	return calls
}

// ListSAMLProviders calls ListSAMLProvidersFunc.
func (mock *IAMAPIMock) ListSAMLProviders(in1 *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	if mock.ListSAMLProvidersFunc == nil {
		panic("IAMAPIMock.ListSAMLProvidersFunc: method is nil but IAMAPI.ListSAMLProviders was just called")
	}
	callInfo := struct {
		In1 *iam.ListSAMLProvidersInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListSAMLProviders.Lock()
	mock.calls.ListSAMLProviders = append(mock.calls.ListSAMLProviders, callInfo)
	lockIAMAPIMockListSAMLProviders.Unlock()
	return mock.ListSAMLProvidersFunc(in1)
}

// ListSAMLProvidersCalls gets all the calls that were made to ListSAMLProviders.
// Check the length with:
//     len(mockedIAMAPI.ListSAMLProvidersCalls())
func (mock *IAMAPIMock) ListSAMLProvidersCalls() []struct {
	In1 *iam.ListSAMLProvidersInput
} {
	var calls []struct {
		In1 *iam.ListSAMLProvidersInput
	}
	lockIAMAPIMockListSAMLProviders.RLock()
	calls = mock.calls.ListSAMLProviders
	lockIAMAPIMockListSAMLProviders.RUnlock()
	return calls
}

// ListSAMLProvidersRequest calls ListSAMLProvidersRequestFunc.
func (mock *IAMAPIMock) ListSAMLProvidersRequest(in1 *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput) {
	if mock.ListSAMLProvidersRequestFunc == nil {
		panic("IAMAPIMock.ListSAMLProvidersRequestFunc: method is nil but IAMAPI.ListSAMLProvidersRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListSAMLProvidersInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListSAMLProvidersRequest.Lock()
	mock.calls.ListSAMLProvidersRequest = append(mock.calls.ListSAMLProvidersRequest, callInfo)
	lockIAMAPIMockListSAMLProvidersRequest.Unlock()
	return mock.ListSAMLProvidersRequestFunc(in1)
}

// ListSAMLProvidersRequestCalls gets all the calls that were made to ListSAMLProvidersRequest.
// Check the length with:
//     len(mockedIAMAPI.ListSAMLProvidersRequestCalls())
func (mock *IAMAPIMock) ListSAMLProvidersRequestCalls() []struct {
	In1 *iam.ListSAMLProvidersInput
} {
	var calls []struct {
		In1 *iam.ListSAMLProvidersInput
	}
	lockIAMAPIMockListSAMLProvidersRequest.RLock()
	calls = mock.calls.ListSAMLProvidersRequest
	lockIAMAPIMockListSAMLProvidersRequest.RUnlock()
	return calls
}

// ListSAMLProvidersWithContext calls ListSAMLProvidersWithContextFunc.
func (mock *IAMAPIMock) ListSAMLProvidersWithContext(in1 context.Context, in2 *iam.ListSAMLProvidersInput, in3 ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
	if mock.ListSAMLProvidersWithContextFunc == nil {
		panic("IAMAPIMock.ListSAMLProvidersWithContextFunc: method is nil but IAMAPI.ListSAMLProvidersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListSAMLProvidersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListSAMLProvidersWithContext.Lock()
	mock.calls.ListSAMLProvidersWithContext = append(mock.calls.ListSAMLProvidersWithContext, callInfo)
	lockIAMAPIMockListSAMLProvidersWithContext.Unlock()
	return mock.ListSAMLProvidersWithContextFunc(in1, in2, in3...)
}

// ListSAMLProvidersWithContextCalls gets all the calls that were made to ListSAMLProvidersWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListSAMLProvidersWithContextCalls())
func (mock *IAMAPIMock) ListSAMLProvidersWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListSAMLProvidersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListSAMLProvidersInput
		In3 []request.Option
	}
	lockIAMAPIMockListSAMLProvidersWithContext.RLock()
	calls = mock.calls.ListSAMLProvidersWithContext
	lockIAMAPIMockListSAMLProvidersWithContext.RUnlock()
	return calls
}

// ListSSHPublicKeys calls ListSSHPublicKeysFunc.
func (mock *IAMAPIMock) ListSSHPublicKeys(in1 *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	if mock.ListSSHPublicKeysFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysFunc: method is nil but IAMAPI.ListSSHPublicKeys was just called")
	}
	callInfo := struct {
		In1 *iam.ListSSHPublicKeysInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListSSHPublicKeys.Lock()
	mock.calls.ListSSHPublicKeys = append(mock.calls.ListSSHPublicKeys, callInfo)
	lockIAMAPIMockListSSHPublicKeys.Unlock()
	return mock.ListSSHPublicKeysFunc(in1)
}

// ListSSHPublicKeysCalls gets all the calls that were made to ListSSHPublicKeys.
// Check the length with:
//     len(mockedIAMAPI.ListSSHPublicKeysCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysCalls() []struct {
	In1 *iam.ListSSHPublicKeysInput
} {
	var calls []struct {
		In1 *iam.ListSSHPublicKeysInput
	}
	lockIAMAPIMockListSSHPublicKeys.RLock()
	calls = mock.calls.ListSSHPublicKeys
	lockIAMAPIMockListSSHPublicKeys.RUnlock()
	return calls
}

// ListSSHPublicKeysPages calls ListSSHPublicKeysPagesFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysPages(in1 *iam.ListSSHPublicKeysInput, in2 func(*iam.ListSSHPublicKeysOutput, bool) bool) error {
	if mock.ListSSHPublicKeysPagesFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysPagesFunc: method is nil but IAMAPI.ListSSHPublicKeysPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListSSHPublicKeysInput
		In2 func(*iam.ListSSHPublicKeysOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListSSHPublicKeysPages.Lock()
	mock.calls.ListSSHPublicKeysPages = append(mock.calls.ListSSHPublicKeysPages, callInfo)
	lockIAMAPIMockListSSHPublicKeysPages.Unlock()
	return mock.ListSSHPublicKeysPagesFunc(in1, in2)
}

// ListSSHPublicKeysPagesCalls gets all the calls that were made to ListSSHPublicKeysPages.
// Check the length with:
//     len(mockedIAMAPI.ListSSHPublicKeysPagesCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysPagesCalls() []struct {
	In1 *iam.ListSSHPublicKeysInput
	In2 func(*iam.ListSSHPublicKeysOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListSSHPublicKeysInput
		In2 func(*iam.ListSSHPublicKeysOutput, bool) bool
	}
	lockIAMAPIMockListSSHPublicKeysPages.RLock()
	calls = mock.calls.ListSSHPublicKeysPages
	lockIAMAPIMockListSSHPublicKeysPages.RUnlock()
	return calls
}

// ListSSHPublicKeysPagesWithContext calls ListSSHPublicKeysPagesWithContextFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysPagesWithContext(in1 context.Context, in2 *iam.ListSSHPublicKeysInput, in3 func(*iam.ListSSHPublicKeysOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListSSHPublicKeysPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysPagesWithContextFunc: method is nil but IAMAPI.ListSSHPublicKeysPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListSSHPublicKeysInput
		In3 func(*iam.ListSSHPublicKeysOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListSSHPublicKeysPagesWithContext.Lock()
	mock.calls.ListSSHPublicKeysPagesWithContext = append(mock.calls.ListSSHPublicKeysPagesWithContext, callInfo)
	lockIAMAPIMockListSSHPublicKeysPagesWithContext.Unlock()
	return mock.ListSSHPublicKeysPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListSSHPublicKeysPagesWithContextCalls gets all the calls that were made to ListSSHPublicKeysPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListSSHPublicKeysPagesWithContextCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListSSHPublicKeysInput
	In3 func(*iam.ListSSHPublicKeysOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListSSHPublicKeysInput
		In3 func(*iam.ListSSHPublicKeysOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListSSHPublicKeysPagesWithContext.RLock()
	calls = mock.calls.ListSSHPublicKeysPagesWithContext
	lockIAMAPIMockListSSHPublicKeysPagesWithContext.RUnlock()
	return calls
}

// ListSSHPublicKeysRequest calls ListSSHPublicKeysRequestFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysRequest(in1 *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput) {
	if mock.ListSSHPublicKeysRequestFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysRequestFunc: method is nil but IAMAPI.ListSSHPublicKeysRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListSSHPublicKeysInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListSSHPublicKeysRequest.Lock()
	mock.calls.ListSSHPublicKeysRequest = append(mock.calls.ListSSHPublicKeysRequest, callInfo)
	lockIAMAPIMockListSSHPublicKeysRequest.Unlock()
	return mock.ListSSHPublicKeysRequestFunc(in1)
}

// ListSSHPublicKeysRequestCalls gets all the calls that were made to ListSSHPublicKeysRequest.
// Check the length with:
//     len(mockedIAMAPI.ListSSHPublicKeysRequestCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysRequestCalls() []struct {
	In1 *iam.ListSSHPublicKeysInput
} {
	var calls []struct {
		In1 *iam.ListSSHPublicKeysInput
	}
	lockIAMAPIMockListSSHPublicKeysRequest.RLock()
	calls = mock.calls.ListSSHPublicKeysRequest
	lockIAMAPIMockListSSHPublicKeysRequest.RUnlock()
	return calls
}

// ListSSHPublicKeysWithContext calls ListSSHPublicKeysWithContextFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysWithContext(in1 context.Context, in2 *iam.ListSSHPublicKeysInput, in3 ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
	if mock.ListSSHPublicKeysWithContextFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysWithContextFunc: method is nil but IAMAPI.ListSSHPublicKeysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListSSHPublicKeysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListSSHPublicKeysWithContext.Lock()
	mock.calls.ListSSHPublicKeysWithContext = append(mock.calls.ListSSHPublicKeysWithContext, callInfo)
	lockIAMAPIMockListSSHPublicKeysWithContext.Unlock()
	return mock.ListSSHPublicKeysWithContextFunc(in1, in2, in3...)
}

// ListSSHPublicKeysWithContextCalls gets all the calls that were made to ListSSHPublicKeysWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListSSHPublicKeysWithContextCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListSSHPublicKeysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListSSHPublicKeysInput
		In3 []request.Option
	}
	lockIAMAPIMockListSSHPublicKeysWithContext.RLock()
	calls = mock.calls.ListSSHPublicKeysWithContext
	lockIAMAPIMockListSSHPublicKeysWithContext.RUnlock()
	return calls
}

// ListServerCertificates calls ListServerCertificatesFunc.
func (mock *IAMAPIMock) ListServerCertificates(in1 *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	if mock.ListServerCertificatesFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesFunc: method is nil but IAMAPI.ListServerCertificates was just called")
	}
	callInfo := struct {
		In1 *iam.ListServerCertificatesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListServerCertificates.Lock()
	mock.calls.ListServerCertificates = append(mock.calls.ListServerCertificates, callInfo)
	lockIAMAPIMockListServerCertificates.Unlock()
	return mock.ListServerCertificatesFunc(in1)
}

// ListServerCertificatesCalls gets all the calls that were made to ListServerCertificates.
// Check the length with:
//     len(mockedIAMAPI.ListServerCertificatesCalls())
func (mock *IAMAPIMock) ListServerCertificatesCalls() []struct {
	In1 *iam.ListServerCertificatesInput
} {
	var calls []struct {
		In1 *iam.ListServerCertificatesInput
	}
	lockIAMAPIMockListServerCertificates.RLock()
	calls = mock.calls.ListServerCertificates
	lockIAMAPIMockListServerCertificates.RUnlock()
	return calls
}

// ListServerCertificatesPages calls ListServerCertificatesPagesFunc.
func (mock *IAMAPIMock) ListServerCertificatesPages(in1 *iam.ListServerCertificatesInput, in2 func(*iam.ListServerCertificatesOutput, bool) bool) error {
	if mock.ListServerCertificatesPagesFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesPagesFunc: method is nil but IAMAPI.ListServerCertificatesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListServerCertificatesInput
		In2 func(*iam.ListServerCertificatesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListServerCertificatesPages.Lock()
	mock.calls.ListServerCertificatesPages = append(mock.calls.ListServerCertificatesPages, callInfo)
	lockIAMAPIMockListServerCertificatesPages.Unlock()
	return mock.ListServerCertificatesPagesFunc(in1, in2)
}

// ListServerCertificatesPagesCalls gets all the calls that were made to ListServerCertificatesPages.
// Check the length with:
//     len(mockedIAMAPI.ListServerCertificatesPagesCalls())
func (mock *IAMAPIMock) ListServerCertificatesPagesCalls() []struct {
	In1 *iam.ListServerCertificatesInput
	In2 func(*iam.ListServerCertificatesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListServerCertificatesInput
		In2 func(*iam.ListServerCertificatesOutput, bool) bool
	}
	lockIAMAPIMockListServerCertificatesPages.RLock()
	calls = mock.calls.ListServerCertificatesPages
	lockIAMAPIMockListServerCertificatesPages.RUnlock()
	return calls
}

// ListServerCertificatesPagesWithContext calls ListServerCertificatesPagesWithContextFunc.
func (mock *IAMAPIMock) ListServerCertificatesPagesWithContext(in1 context.Context, in2 *iam.ListServerCertificatesInput, in3 func(*iam.ListServerCertificatesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListServerCertificatesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesPagesWithContextFunc: method is nil but IAMAPI.ListServerCertificatesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListServerCertificatesInput
		In3 func(*iam.ListServerCertificatesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListServerCertificatesPagesWithContext.Lock()
	mock.calls.ListServerCertificatesPagesWithContext = append(mock.calls.ListServerCertificatesPagesWithContext, callInfo)
	lockIAMAPIMockListServerCertificatesPagesWithContext.Unlock()
	return mock.ListServerCertificatesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListServerCertificatesPagesWithContextCalls gets all the calls that were made to ListServerCertificatesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListServerCertificatesPagesWithContextCalls())
func (mock *IAMAPIMock) ListServerCertificatesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListServerCertificatesInput
	In3 func(*iam.ListServerCertificatesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListServerCertificatesInput
		In3 func(*iam.ListServerCertificatesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListServerCertificatesPagesWithContext.RLock()
	calls = mock.calls.ListServerCertificatesPagesWithContext
	lockIAMAPIMockListServerCertificatesPagesWithContext.RUnlock()
	return calls
}

// ListServerCertificatesRequest calls ListServerCertificatesRequestFunc.
func (mock *IAMAPIMock) ListServerCertificatesRequest(in1 *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput) {
	if mock.ListServerCertificatesRequestFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesRequestFunc: method is nil but IAMAPI.ListServerCertificatesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListServerCertificatesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListServerCertificatesRequest.Lock()
	mock.calls.ListServerCertificatesRequest = append(mock.calls.ListServerCertificatesRequest, callInfo)
	lockIAMAPIMockListServerCertificatesRequest.Unlock()
	return mock.ListServerCertificatesRequestFunc(in1)
}

// ListServerCertificatesRequestCalls gets all the calls that were made to ListServerCertificatesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListServerCertificatesRequestCalls())
func (mock *IAMAPIMock) ListServerCertificatesRequestCalls() []struct {
	In1 *iam.ListServerCertificatesInput
} {
	var calls []struct {
		In1 *iam.ListServerCertificatesInput
	}
	lockIAMAPIMockListServerCertificatesRequest.RLock()
	calls = mock.calls.ListServerCertificatesRequest
	lockIAMAPIMockListServerCertificatesRequest.RUnlock()
	return calls
}

// ListServerCertificatesWithContext calls ListServerCertificatesWithContextFunc.
func (mock *IAMAPIMock) ListServerCertificatesWithContext(in1 context.Context, in2 *iam.ListServerCertificatesInput, in3 ...request.Option) (*iam.ListServerCertificatesOutput, error) {
	if mock.ListServerCertificatesWithContextFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesWithContextFunc: method is nil but IAMAPI.ListServerCertificatesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListServerCertificatesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListServerCertificatesWithContext.Lock()
	mock.calls.ListServerCertificatesWithContext = append(mock.calls.ListServerCertificatesWithContext, callInfo)
	lockIAMAPIMockListServerCertificatesWithContext.Unlock()
	return mock.ListServerCertificatesWithContextFunc(in1, in2, in3...)
}

// ListServerCertificatesWithContextCalls gets all the calls that were made to ListServerCertificatesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListServerCertificatesWithContextCalls())
func (mock *IAMAPIMock) ListServerCertificatesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListServerCertificatesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListServerCertificatesInput
		In3 []request.Option
	}
	lockIAMAPIMockListServerCertificatesWithContext.RLock()
	calls = mock.calls.ListServerCertificatesWithContext
	lockIAMAPIMockListServerCertificatesWithContext.RUnlock()
	return calls
}

// ListServiceSpecificCredentials calls ListServiceSpecificCredentialsFunc.
func (mock *IAMAPIMock) ListServiceSpecificCredentials(in1 *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	if mock.ListServiceSpecificCredentialsFunc == nil {
		panic("IAMAPIMock.ListServiceSpecificCredentialsFunc: method is nil but IAMAPI.ListServiceSpecificCredentials was just called")
	}
	callInfo := struct {
		In1 *iam.ListServiceSpecificCredentialsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListServiceSpecificCredentials.Lock()
	mock.calls.ListServiceSpecificCredentials = append(mock.calls.ListServiceSpecificCredentials, callInfo)
	lockIAMAPIMockListServiceSpecificCredentials.Unlock()
	return mock.ListServiceSpecificCredentialsFunc(in1)
}

// ListServiceSpecificCredentialsCalls gets all the calls that were made to ListServiceSpecificCredentials.
// Check the length with:
//     len(mockedIAMAPI.ListServiceSpecificCredentialsCalls())
func (mock *IAMAPIMock) ListServiceSpecificCredentialsCalls() []struct {
	In1 *iam.ListServiceSpecificCredentialsInput
} {
	var calls []struct {
		In1 *iam.ListServiceSpecificCredentialsInput
	}
	lockIAMAPIMockListServiceSpecificCredentials.RLock()
	calls = mock.calls.ListServiceSpecificCredentials
	lockIAMAPIMockListServiceSpecificCredentials.RUnlock()
	return calls
}

// ListServiceSpecificCredentialsRequest calls ListServiceSpecificCredentialsRequestFunc.
func (mock *IAMAPIMock) ListServiceSpecificCredentialsRequest(in1 *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput) {
	if mock.ListServiceSpecificCredentialsRequestFunc == nil {
		panic("IAMAPIMock.ListServiceSpecificCredentialsRequestFunc: method is nil but IAMAPI.ListServiceSpecificCredentialsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListServiceSpecificCredentialsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListServiceSpecificCredentialsRequest.Lock()
	mock.calls.ListServiceSpecificCredentialsRequest = append(mock.calls.ListServiceSpecificCredentialsRequest, callInfo)
	lockIAMAPIMockListServiceSpecificCredentialsRequest.Unlock()
	return mock.ListServiceSpecificCredentialsRequestFunc(in1)
}

// ListServiceSpecificCredentialsRequestCalls gets all the calls that were made to ListServiceSpecificCredentialsRequest.
// Check the length with:
//     len(mockedIAMAPI.ListServiceSpecificCredentialsRequestCalls())
func (mock *IAMAPIMock) ListServiceSpecificCredentialsRequestCalls() []struct {
	In1 *iam.ListServiceSpecificCredentialsInput
} {
	var calls []struct {
		In1 *iam.ListServiceSpecificCredentialsInput
	}
	lockIAMAPIMockListServiceSpecificCredentialsRequest.RLock()
	calls = mock.calls.ListServiceSpecificCredentialsRequest
	lockIAMAPIMockListServiceSpecificCredentialsRequest.RUnlock()
	return calls
}

// ListServiceSpecificCredentialsWithContext calls ListServiceSpecificCredentialsWithContextFunc.
func (mock *IAMAPIMock) ListServiceSpecificCredentialsWithContext(in1 context.Context, in2 *iam.ListServiceSpecificCredentialsInput, in3 ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
	if mock.ListServiceSpecificCredentialsWithContextFunc == nil {
		panic("IAMAPIMock.ListServiceSpecificCredentialsWithContextFunc: method is nil but IAMAPI.ListServiceSpecificCredentialsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListServiceSpecificCredentialsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListServiceSpecificCredentialsWithContext.Lock()
	mock.calls.ListServiceSpecificCredentialsWithContext = append(mock.calls.ListServiceSpecificCredentialsWithContext, callInfo)
	lockIAMAPIMockListServiceSpecificCredentialsWithContext.Unlock()
	return mock.ListServiceSpecificCredentialsWithContextFunc(in1, in2, in3...)
}

// ListServiceSpecificCredentialsWithContextCalls gets all the calls that were made to ListServiceSpecificCredentialsWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListServiceSpecificCredentialsWithContextCalls())
func (mock *IAMAPIMock) ListServiceSpecificCredentialsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListServiceSpecificCredentialsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListServiceSpecificCredentialsInput
		In3 []request.Option
	}
	lockIAMAPIMockListServiceSpecificCredentialsWithContext.RLock()
	calls = mock.calls.ListServiceSpecificCredentialsWithContext
	lockIAMAPIMockListServiceSpecificCredentialsWithContext.RUnlock()
	return calls
}

// ListSigningCertificates calls ListSigningCertificatesFunc.
func (mock *IAMAPIMock) ListSigningCertificates(in1 *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	if mock.ListSigningCertificatesFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesFunc: method is nil but IAMAPI.ListSigningCertificates was just called")
	}
	callInfo := struct {
		In1 *iam.ListSigningCertificatesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListSigningCertificates.Lock()
	mock.calls.ListSigningCertificates = append(mock.calls.ListSigningCertificates, callInfo)
	lockIAMAPIMockListSigningCertificates.Unlock()
	return mock.ListSigningCertificatesFunc(in1)
}

// ListSigningCertificatesCalls gets all the calls that were made to ListSigningCertificates.
// Check the length with:
//     len(mockedIAMAPI.ListSigningCertificatesCalls())
func (mock *IAMAPIMock) ListSigningCertificatesCalls() []struct {
	In1 *iam.ListSigningCertificatesInput
} {
	var calls []struct {
		In1 *iam.ListSigningCertificatesInput
	}
	lockIAMAPIMockListSigningCertificates.RLock()
	calls = mock.calls.ListSigningCertificates
	lockIAMAPIMockListSigningCertificates.RUnlock()
	return calls
}

// ListSigningCertificatesPages calls ListSigningCertificatesPagesFunc.
func (mock *IAMAPIMock) ListSigningCertificatesPages(in1 *iam.ListSigningCertificatesInput, in2 func(*iam.ListSigningCertificatesOutput, bool) bool) error {
	if mock.ListSigningCertificatesPagesFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesPagesFunc: method is nil but IAMAPI.ListSigningCertificatesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListSigningCertificatesInput
		In2 func(*iam.ListSigningCertificatesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListSigningCertificatesPages.Lock()
	mock.calls.ListSigningCertificatesPages = append(mock.calls.ListSigningCertificatesPages, callInfo)
	lockIAMAPIMockListSigningCertificatesPages.Unlock()
	return mock.ListSigningCertificatesPagesFunc(in1, in2)
}

// ListSigningCertificatesPagesCalls gets all the calls that were made to ListSigningCertificatesPages.
// Check the length with:
//     len(mockedIAMAPI.ListSigningCertificatesPagesCalls())
func (mock *IAMAPIMock) ListSigningCertificatesPagesCalls() []struct {
	In1 *iam.ListSigningCertificatesInput
	In2 func(*iam.ListSigningCertificatesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListSigningCertificatesInput
		In2 func(*iam.ListSigningCertificatesOutput, bool) bool
	}
	lockIAMAPIMockListSigningCertificatesPages.RLock()
	calls = mock.calls.ListSigningCertificatesPages
	lockIAMAPIMockListSigningCertificatesPages.RUnlock()
	return calls
}

// ListSigningCertificatesPagesWithContext calls ListSigningCertificatesPagesWithContextFunc.
func (mock *IAMAPIMock) ListSigningCertificatesPagesWithContext(in1 context.Context, in2 *iam.ListSigningCertificatesInput, in3 func(*iam.ListSigningCertificatesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListSigningCertificatesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesPagesWithContextFunc: method is nil but IAMAPI.ListSigningCertificatesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListSigningCertificatesInput
		In3 func(*iam.ListSigningCertificatesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListSigningCertificatesPagesWithContext.Lock()
	mock.calls.ListSigningCertificatesPagesWithContext = append(mock.calls.ListSigningCertificatesPagesWithContext, callInfo)
	lockIAMAPIMockListSigningCertificatesPagesWithContext.Unlock()
	return mock.ListSigningCertificatesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListSigningCertificatesPagesWithContextCalls gets all the calls that were made to ListSigningCertificatesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListSigningCertificatesPagesWithContextCalls())
func (mock *IAMAPIMock) ListSigningCertificatesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListSigningCertificatesInput
	In3 func(*iam.ListSigningCertificatesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListSigningCertificatesInput
		In3 func(*iam.ListSigningCertificatesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListSigningCertificatesPagesWithContext.RLock()
	calls = mock.calls.ListSigningCertificatesPagesWithContext
	lockIAMAPIMockListSigningCertificatesPagesWithContext.RUnlock()
	return calls
}

// ListSigningCertificatesRequest calls ListSigningCertificatesRequestFunc.
func (mock *IAMAPIMock) ListSigningCertificatesRequest(in1 *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput) {
	if mock.ListSigningCertificatesRequestFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesRequestFunc: method is nil but IAMAPI.ListSigningCertificatesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListSigningCertificatesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListSigningCertificatesRequest.Lock()
	mock.calls.ListSigningCertificatesRequest = append(mock.calls.ListSigningCertificatesRequest, callInfo)
	lockIAMAPIMockListSigningCertificatesRequest.Unlock()
	return mock.ListSigningCertificatesRequestFunc(in1)
}

// ListSigningCertificatesRequestCalls gets all the calls that were made to ListSigningCertificatesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListSigningCertificatesRequestCalls())
func (mock *IAMAPIMock) ListSigningCertificatesRequestCalls() []struct {
	In1 *iam.ListSigningCertificatesInput
} {
	var calls []struct {
		In1 *iam.ListSigningCertificatesInput
	}
	lockIAMAPIMockListSigningCertificatesRequest.RLock()
	calls = mock.calls.ListSigningCertificatesRequest
	lockIAMAPIMockListSigningCertificatesRequest.RUnlock()
	return calls
}

// ListSigningCertificatesWithContext calls ListSigningCertificatesWithContextFunc.
func (mock *IAMAPIMock) ListSigningCertificatesWithContext(in1 context.Context, in2 *iam.ListSigningCertificatesInput, in3 ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
	if mock.ListSigningCertificatesWithContextFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesWithContextFunc: method is nil but IAMAPI.ListSigningCertificatesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListSigningCertificatesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListSigningCertificatesWithContext.Lock()
	mock.calls.ListSigningCertificatesWithContext = append(mock.calls.ListSigningCertificatesWithContext, callInfo)
	lockIAMAPIMockListSigningCertificatesWithContext.Unlock()
	return mock.ListSigningCertificatesWithContextFunc(in1, in2, in3...)
}

// ListSigningCertificatesWithContextCalls gets all the calls that were made to ListSigningCertificatesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListSigningCertificatesWithContextCalls())
func (mock *IAMAPIMock) ListSigningCertificatesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListSigningCertificatesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListSigningCertificatesInput
		In3 []request.Option
	}
	lockIAMAPIMockListSigningCertificatesWithContext.RLock()
	calls = mock.calls.ListSigningCertificatesWithContext
	lockIAMAPIMockListSigningCertificatesWithContext.RUnlock()
	return calls
}

// ListUserPolicies calls ListUserPoliciesFunc.
func (mock *IAMAPIMock) ListUserPolicies(in1 *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	if mock.ListUserPoliciesFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesFunc: method is nil but IAMAPI.ListUserPolicies was just called")
	}
	callInfo := struct {
		In1 *iam.ListUserPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListUserPolicies.Lock()
	mock.calls.ListUserPolicies = append(mock.calls.ListUserPolicies, callInfo)
	lockIAMAPIMockListUserPolicies.Unlock()
	return mock.ListUserPoliciesFunc(in1)
}

// ListUserPoliciesCalls gets all the calls that were made to ListUserPolicies.
// Check the length with:
//     len(mockedIAMAPI.ListUserPoliciesCalls())
func (mock *IAMAPIMock) ListUserPoliciesCalls() []struct {
	In1 *iam.ListUserPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListUserPoliciesInput
	}
	lockIAMAPIMockListUserPolicies.RLock()
	calls = mock.calls.ListUserPolicies
	lockIAMAPIMockListUserPolicies.RUnlock()
	return calls
}

// ListUserPoliciesPages calls ListUserPoliciesPagesFunc.
func (mock *IAMAPIMock) ListUserPoliciesPages(in1 *iam.ListUserPoliciesInput, in2 func(*iam.ListUserPoliciesOutput, bool) bool) error {
	if mock.ListUserPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesPagesFunc: method is nil but IAMAPI.ListUserPoliciesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListUserPoliciesInput
		In2 func(*iam.ListUserPoliciesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListUserPoliciesPages.Lock()
	mock.calls.ListUserPoliciesPages = append(mock.calls.ListUserPoliciesPages, callInfo)
	lockIAMAPIMockListUserPoliciesPages.Unlock()
	return mock.ListUserPoliciesPagesFunc(in1, in2)
}

// ListUserPoliciesPagesCalls gets all the calls that were made to ListUserPoliciesPages.
// Check the length with:
//     len(mockedIAMAPI.ListUserPoliciesPagesCalls())
func (mock *IAMAPIMock) ListUserPoliciesPagesCalls() []struct {
	In1 *iam.ListUserPoliciesInput
	In2 func(*iam.ListUserPoliciesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListUserPoliciesInput
		In2 func(*iam.ListUserPoliciesOutput, bool) bool
	}
	lockIAMAPIMockListUserPoliciesPages.RLock()
	calls = mock.calls.ListUserPoliciesPages
	lockIAMAPIMockListUserPoliciesPages.RUnlock()
	return calls
}

// ListUserPoliciesPagesWithContext calls ListUserPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListUserPoliciesPagesWithContext(in1 context.Context, in2 *iam.ListUserPoliciesInput, in3 func(*iam.ListUserPoliciesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListUserPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListUserPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListUserPoliciesInput
		In3 func(*iam.ListUserPoliciesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListUserPoliciesPagesWithContext.Lock()
	mock.calls.ListUserPoliciesPagesWithContext = append(mock.calls.ListUserPoliciesPagesWithContext, callInfo)
	lockIAMAPIMockListUserPoliciesPagesWithContext.Unlock()
	return mock.ListUserPoliciesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListUserPoliciesPagesWithContextCalls gets all the calls that were made to ListUserPoliciesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListUserPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListUserPoliciesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListUserPoliciesInput
	In3 func(*iam.ListUserPoliciesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListUserPoliciesInput
		In3 func(*iam.ListUserPoliciesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListUserPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListUserPoliciesPagesWithContext
	lockIAMAPIMockListUserPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListUserPoliciesRequest calls ListUserPoliciesRequestFunc.
func (mock *IAMAPIMock) ListUserPoliciesRequest(in1 *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput) {
	if mock.ListUserPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesRequestFunc: method is nil but IAMAPI.ListUserPoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListUserPoliciesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListUserPoliciesRequest.Lock()
	mock.calls.ListUserPoliciesRequest = append(mock.calls.ListUserPoliciesRequest, callInfo)
	lockIAMAPIMockListUserPoliciesRequest.Unlock()
	return mock.ListUserPoliciesRequestFunc(in1)
}

// ListUserPoliciesRequestCalls gets all the calls that were made to ListUserPoliciesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListUserPoliciesRequestCalls())
func (mock *IAMAPIMock) ListUserPoliciesRequestCalls() []struct {
	In1 *iam.ListUserPoliciesInput
} {
	var calls []struct {
		In1 *iam.ListUserPoliciesInput
	}
	lockIAMAPIMockListUserPoliciesRequest.RLock()
	calls = mock.calls.ListUserPoliciesRequest
	lockIAMAPIMockListUserPoliciesRequest.RUnlock()
	return calls
}

// ListUserPoliciesWithContext calls ListUserPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListUserPoliciesWithContext(in1 context.Context, in2 *iam.ListUserPoliciesInput, in3 ...request.Option) (*iam.ListUserPoliciesOutput, error) {
	if mock.ListUserPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesWithContextFunc: method is nil but IAMAPI.ListUserPoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListUserPoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListUserPoliciesWithContext.Lock()
	mock.calls.ListUserPoliciesWithContext = append(mock.calls.ListUserPoliciesWithContext, callInfo)
	lockIAMAPIMockListUserPoliciesWithContext.Unlock()
	return mock.ListUserPoliciesWithContextFunc(in1, in2, in3...)
}

// ListUserPoliciesWithContextCalls gets all the calls that were made to ListUserPoliciesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListUserPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListUserPoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListUserPoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListUserPoliciesInput
		In3 []request.Option
	}
	lockIAMAPIMockListUserPoliciesWithContext.RLock()
	calls = mock.calls.ListUserPoliciesWithContext
	lockIAMAPIMockListUserPoliciesWithContext.RUnlock()
	return calls
}

// ListUserTags calls ListUserTagsFunc.
func (mock *IAMAPIMock) ListUserTags(in1 *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
	if mock.ListUserTagsFunc == nil {
		panic("IAMAPIMock.ListUserTagsFunc: method is nil but IAMAPI.ListUserTags was just called")
	}
	callInfo := struct {
		In1 *iam.ListUserTagsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListUserTags.Lock()
	mock.calls.ListUserTags = append(mock.calls.ListUserTags, callInfo)
	lockIAMAPIMockListUserTags.Unlock()
	return mock.ListUserTagsFunc(in1)
}

// ListUserTagsCalls gets all the calls that were made to ListUserTags.
// Check the length with:
//     len(mockedIAMAPI.ListUserTagsCalls())
func (mock *IAMAPIMock) ListUserTagsCalls() []struct {
	In1 *iam.ListUserTagsInput
} {
	var calls []struct {
		In1 *iam.ListUserTagsInput
	}
	lockIAMAPIMockListUserTags.RLock()
	calls = mock.calls.ListUserTags
	lockIAMAPIMockListUserTags.RUnlock()
	return calls
}

// ListUserTagsRequest calls ListUserTagsRequestFunc.
func (mock *IAMAPIMock) ListUserTagsRequest(in1 *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput) {
	if mock.ListUserTagsRequestFunc == nil {
		panic("IAMAPIMock.ListUserTagsRequestFunc: method is nil but IAMAPI.ListUserTagsRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListUserTagsInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListUserTagsRequest.Lock()
	mock.calls.ListUserTagsRequest = append(mock.calls.ListUserTagsRequest, callInfo)
	lockIAMAPIMockListUserTagsRequest.Unlock()
	return mock.ListUserTagsRequestFunc(in1)
}

// ListUserTagsRequestCalls gets all the calls that were made to ListUserTagsRequest.
// Check the length with:
//     len(mockedIAMAPI.ListUserTagsRequestCalls())
func (mock *IAMAPIMock) ListUserTagsRequestCalls() []struct {
	In1 *iam.ListUserTagsInput
} {
	var calls []struct {
		In1 *iam.ListUserTagsInput
	}
	lockIAMAPIMockListUserTagsRequest.RLock()
	calls = mock.calls.ListUserTagsRequest
	lockIAMAPIMockListUserTagsRequest.RUnlock()
	return calls
}

// ListUserTagsWithContext calls ListUserTagsWithContextFunc.
func (mock *IAMAPIMock) ListUserTagsWithContext(in1 context.Context, in2 *iam.ListUserTagsInput, in3 ...request.Option) (*iam.ListUserTagsOutput, error) {
	if mock.ListUserTagsWithContextFunc == nil {
		panic("IAMAPIMock.ListUserTagsWithContextFunc: method is nil but IAMAPI.ListUserTagsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListUserTagsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListUserTagsWithContext.Lock()
	mock.calls.ListUserTagsWithContext = append(mock.calls.ListUserTagsWithContext, callInfo)
	lockIAMAPIMockListUserTagsWithContext.Unlock()
	return mock.ListUserTagsWithContextFunc(in1, in2, in3...)
}

// ListUserTagsWithContextCalls gets all the calls that were made to ListUserTagsWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListUserTagsWithContextCalls())
func (mock *IAMAPIMock) ListUserTagsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListUserTagsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListUserTagsInput
		In3 []request.Option
	}
	lockIAMAPIMockListUserTagsWithContext.RLock()
	calls = mock.calls.ListUserTagsWithContext
	lockIAMAPIMockListUserTagsWithContext.RUnlock()
	return calls
}

// ListUsers calls ListUsersFunc.
func (mock *IAMAPIMock) ListUsers(in1 *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	if mock.ListUsersFunc == nil {
		panic("IAMAPIMock.ListUsersFunc: method is nil but IAMAPI.ListUsers was just called")
	}
	callInfo := struct {
		In1 *iam.ListUsersInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListUsers.Lock()
	mock.calls.ListUsers = append(mock.calls.ListUsers, callInfo)
	lockIAMAPIMockListUsers.Unlock()
	return mock.ListUsersFunc(in1)
}

// ListUsersCalls gets all the calls that were made to ListUsers.
// Check the length with:
//     len(mockedIAMAPI.ListUsersCalls())
func (mock *IAMAPIMock) ListUsersCalls() []struct {
	In1 *iam.ListUsersInput
} {
	var calls []struct {
		In1 *iam.ListUsersInput
	}
	lockIAMAPIMockListUsers.RLock()
	calls = mock.calls.ListUsers
	lockIAMAPIMockListUsers.RUnlock()
	return calls
}

// ListUsersPages calls ListUsersPagesFunc.
func (mock *IAMAPIMock) ListUsersPages(in1 *iam.ListUsersInput, in2 func(*iam.ListUsersOutput, bool) bool) error {
	if mock.ListUsersPagesFunc == nil {
		panic("IAMAPIMock.ListUsersPagesFunc: method is nil but IAMAPI.ListUsersPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListUsersInput
		In2 func(*iam.ListUsersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListUsersPages.Lock()
	mock.calls.ListUsersPages = append(mock.calls.ListUsersPages, callInfo)
	lockIAMAPIMockListUsersPages.Unlock()
	return mock.ListUsersPagesFunc(in1, in2)
}

// ListUsersPagesCalls gets all the calls that were made to ListUsersPages.
// Check the length with:
//     len(mockedIAMAPI.ListUsersPagesCalls())
func (mock *IAMAPIMock) ListUsersPagesCalls() []struct {
	In1 *iam.ListUsersInput
	In2 func(*iam.ListUsersOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListUsersInput
		In2 func(*iam.ListUsersOutput, bool) bool
	}
	lockIAMAPIMockListUsersPages.RLock()
	calls = mock.calls.ListUsersPages
	lockIAMAPIMockListUsersPages.RUnlock()
	return calls
}

// ListUsersPagesWithContext calls ListUsersPagesWithContextFunc.
func (mock *IAMAPIMock) ListUsersPagesWithContext(in1 context.Context, in2 *iam.ListUsersInput, in3 func(*iam.ListUsersOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListUsersPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListUsersPagesWithContextFunc: method is nil but IAMAPI.ListUsersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListUsersInput
		In3 func(*iam.ListUsersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListUsersPagesWithContext.Lock()
	mock.calls.ListUsersPagesWithContext = append(mock.calls.ListUsersPagesWithContext, callInfo)
	lockIAMAPIMockListUsersPagesWithContext.Unlock()
	return mock.ListUsersPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListUsersPagesWithContextCalls gets all the calls that were made to ListUsersPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListUsersPagesWithContextCalls())
func (mock *IAMAPIMock) ListUsersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListUsersInput
	In3 func(*iam.ListUsersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListUsersInput
		In3 func(*iam.ListUsersOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListUsersPagesWithContext.RLock()
	calls = mock.calls.ListUsersPagesWithContext
	lockIAMAPIMockListUsersPagesWithContext.RUnlock()
	return calls
}

// ListUsersRequest calls ListUsersRequestFunc.
func (mock *IAMAPIMock) ListUsersRequest(in1 *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput) {
	if mock.ListUsersRequestFunc == nil {
		panic("IAMAPIMock.ListUsersRequestFunc: method is nil but IAMAPI.ListUsersRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListUsersInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListUsersRequest.Lock()
	mock.calls.ListUsersRequest = append(mock.calls.ListUsersRequest, callInfo)
	lockIAMAPIMockListUsersRequest.Unlock()
	return mock.ListUsersRequestFunc(in1)
}

// ListUsersRequestCalls gets all the calls that were made to ListUsersRequest.
// Check the length with:
//     len(mockedIAMAPI.ListUsersRequestCalls())
func (mock *IAMAPIMock) ListUsersRequestCalls() []struct {
	In1 *iam.ListUsersInput
} {
	var calls []struct {
		In1 *iam.ListUsersInput
	}
	lockIAMAPIMockListUsersRequest.RLock()
	calls = mock.calls.ListUsersRequest
	lockIAMAPIMockListUsersRequest.RUnlock()
	return calls
}

// ListUsersWithContext calls ListUsersWithContextFunc.
func (mock *IAMAPIMock) ListUsersWithContext(in1 context.Context, in2 *iam.ListUsersInput, in3 ...request.Option) (*iam.ListUsersOutput, error) {
	if mock.ListUsersWithContextFunc == nil {
		panic("IAMAPIMock.ListUsersWithContextFunc: method is nil but IAMAPI.ListUsersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListUsersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListUsersWithContext.Lock()
	mock.calls.ListUsersWithContext = append(mock.calls.ListUsersWithContext, callInfo)
	lockIAMAPIMockListUsersWithContext.Unlock()
	return mock.ListUsersWithContextFunc(in1, in2, in3...)
}

// ListUsersWithContextCalls gets all the calls that were made to ListUsersWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListUsersWithContextCalls())
func (mock *IAMAPIMock) ListUsersWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListUsersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListUsersInput
		In3 []request.Option
	}
	lockIAMAPIMockListUsersWithContext.RLock()
	calls = mock.calls.ListUsersWithContext
	lockIAMAPIMockListUsersWithContext.RUnlock()
	return calls
}

// ListVirtualMFADevices calls ListVirtualMFADevicesFunc.
func (mock *IAMAPIMock) ListVirtualMFADevices(in1 *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	if mock.ListVirtualMFADevicesFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesFunc: method is nil but IAMAPI.ListVirtualMFADevices was just called")
	}
	callInfo := struct {
		In1 *iam.ListVirtualMFADevicesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListVirtualMFADevices.Lock()
	mock.calls.ListVirtualMFADevices = append(mock.calls.ListVirtualMFADevices, callInfo)
	lockIAMAPIMockListVirtualMFADevices.Unlock()
	return mock.ListVirtualMFADevicesFunc(in1)
}

// ListVirtualMFADevicesCalls gets all the calls that were made to ListVirtualMFADevices.
// Check the length with:
//     len(mockedIAMAPI.ListVirtualMFADevicesCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesCalls() []struct {
	In1 *iam.ListVirtualMFADevicesInput
} {
	var calls []struct {
		In1 *iam.ListVirtualMFADevicesInput
	}
	lockIAMAPIMockListVirtualMFADevices.RLock()
	calls = mock.calls.ListVirtualMFADevices
	lockIAMAPIMockListVirtualMFADevices.RUnlock()
	return calls
}

// ListVirtualMFADevicesPages calls ListVirtualMFADevicesPagesFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesPages(in1 *iam.ListVirtualMFADevicesInput, in2 func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
	if mock.ListVirtualMFADevicesPagesFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesPagesFunc: method is nil but IAMAPI.ListVirtualMFADevicesPages was just called")
	}
	callInfo := struct {
		In1 *iam.ListVirtualMFADevicesInput
		In2 func(*iam.ListVirtualMFADevicesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockListVirtualMFADevicesPages.Lock()
	mock.calls.ListVirtualMFADevicesPages = append(mock.calls.ListVirtualMFADevicesPages, callInfo)
	lockIAMAPIMockListVirtualMFADevicesPages.Unlock()
	return mock.ListVirtualMFADevicesPagesFunc(in1, in2)
}

// ListVirtualMFADevicesPagesCalls gets all the calls that were made to ListVirtualMFADevicesPages.
// Check the length with:
//     len(mockedIAMAPI.ListVirtualMFADevicesPagesCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesPagesCalls() []struct {
	In1 *iam.ListVirtualMFADevicesInput
	In2 func(*iam.ListVirtualMFADevicesOutput, bool) bool
} {
	var calls []struct {
		In1 *iam.ListVirtualMFADevicesInput
		In2 func(*iam.ListVirtualMFADevicesOutput, bool) bool
	}
	lockIAMAPIMockListVirtualMFADevicesPages.RLock()
	calls = mock.calls.ListVirtualMFADevicesPages
	lockIAMAPIMockListVirtualMFADevicesPages.RUnlock()
	return calls
}

// ListVirtualMFADevicesPagesWithContext calls ListVirtualMFADevicesPagesWithContextFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesPagesWithContext(in1 context.Context, in2 *iam.ListVirtualMFADevicesInput, in3 func(*iam.ListVirtualMFADevicesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListVirtualMFADevicesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesPagesWithContextFunc: method is nil but IAMAPI.ListVirtualMFADevicesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListVirtualMFADevicesInput
		In3 func(*iam.ListVirtualMFADevicesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockListVirtualMFADevicesPagesWithContext.Lock()
	mock.calls.ListVirtualMFADevicesPagesWithContext = append(mock.calls.ListVirtualMFADevicesPagesWithContext, callInfo)
	lockIAMAPIMockListVirtualMFADevicesPagesWithContext.Unlock()
	return mock.ListVirtualMFADevicesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListVirtualMFADevicesPagesWithContextCalls gets all the calls that were made to ListVirtualMFADevicesPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListVirtualMFADevicesPagesWithContextCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListVirtualMFADevicesInput
	In3 func(*iam.ListVirtualMFADevicesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListVirtualMFADevicesInput
		In3 func(*iam.ListVirtualMFADevicesOutput, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockListVirtualMFADevicesPagesWithContext.RLock()
	calls = mock.calls.ListVirtualMFADevicesPagesWithContext
	lockIAMAPIMockListVirtualMFADevicesPagesWithContext.RUnlock()
	return calls
}

// ListVirtualMFADevicesRequest calls ListVirtualMFADevicesRequestFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesRequest(in1 *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput) {
	if mock.ListVirtualMFADevicesRequestFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesRequestFunc: method is nil but IAMAPI.ListVirtualMFADevicesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ListVirtualMFADevicesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockListVirtualMFADevicesRequest.Lock()
	mock.calls.ListVirtualMFADevicesRequest = append(mock.calls.ListVirtualMFADevicesRequest, callInfo)
	lockIAMAPIMockListVirtualMFADevicesRequest.Unlock()
	return mock.ListVirtualMFADevicesRequestFunc(in1)
}

// ListVirtualMFADevicesRequestCalls gets all the calls that were made to ListVirtualMFADevicesRequest.
// Check the length with:
//     len(mockedIAMAPI.ListVirtualMFADevicesRequestCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesRequestCalls() []struct {
	In1 *iam.ListVirtualMFADevicesInput
} {
	var calls []struct {
		In1 *iam.ListVirtualMFADevicesInput
	}
	lockIAMAPIMockListVirtualMFADevicesRequest.RLock()
	calls = mock.calls.ListVirtualMFADevicesRequest
	lockIAMAPIMockListVirtualMFADevicesRequest.RUnlock()
	return calls
}

// ListVirtualMFADevicesWithContext calls ListVirtualMFADevicesWithContextFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesWithContext(in1 context.Context, in2 *iam.ListVirtualMFADevicesInput, in3 ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
	if mock.ListVirtualMFADevicesWithContextFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesWithContextFunc: method is nil but IAMAPI.ListVirtualMFADevicesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ListVirtualMFADevicesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockListVirtualMFADevicesWithContext.Lock()
	mock.calls.ListVirtualMFADevicesWithContext = append(mock.calls.ListVirtualMFADevicesWithContext, callInfo)
	lockIAMAPIMockListVirtualMFADevicesWithContext.Unlock()
	return mock.ListVirtualMFADevicesWithContextFunc(in1, in2, in3...)
}

// ListVirtualMFADevicesWithContextCalls gets all the calls that were made to ListVirtualMFADevicesWithContext.
// Check the length with:
//     len(mockedIAMAPI.ListVirtualMFADevicesWithContextCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ListVirtualMFADevicesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ListVirtualMFADevicesInput
		In3 []request.Option
	}
	lockIAMAPIMockListVirtualMFADevicesWithContext.RLock()
	calls = mock.calls.ListVirtualMFADevicesWithContext
	lockIAMAPIMockListVirtualMFADevicesWithContext.RUnlock()
	return calls
}

// PutGroupPolicy calls PutGroupPolicyFunc.
func (mock *IAMAPIMock) PutGroupPolicy(in1 *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	if mock.PutGroupPolicyFunc == nil {
		panic("IAMAPIMock.PutGroupPolicyFunc: method is nil but IAMAPI.PutGroupPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.PutGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutGroupPolicy.Lock()
	mock.calls.PutGroupPolicy = append(mock.calls.PutGroupPolicy, callInfo)
	lockIAMAPIMockPutGroupPolicy.Unlock()
	return mock.PutGroupPolicyFunc(in1)
}

// PutGroupPolicyCalls gets all the calls that were made to PutGroupPolicy.
// Check the length with:
//     len(mockedIAMAPI.PutGroupPolicyCalls())
func (mock *IAMAPIMock) PutGroupPolicyCalls() []struct {
	In1 *iam.PutGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.PutGroupPolicyInput
	}
	lockIAMAPIMockPutGroupPolicy.RLock()
	calls = mock.calls.PutGroupPolicy
	lockIAMAPIMockPutGroupPolicy.RUnlock()
	return calls
}

// PutGroupPolicyRequest calls PutGroupPolicyRequestFunc.
func (mock *IAMAPIMock) PutGroupPolicyRequest(in1 *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput) {
	if mock.PutGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.PutGroupPolicyRequestFunc: method is nil but IAMAPI.PutGroupPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.PutGroupPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutGroupPolicyRequest.Lock()
	mock.calls.PutGroupPolicyRequest = append(mock.calls.PutGroupPolicyRequest, callInfo)
	lockIAMAPIMockPutGroupPolicyRequest.Unlock()
	return mock.PutGroupPolicyRequestFunc(in1)
}

// PutGroupPolicyRequestCalls gets all the calls that were made to PutGroupPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.PutGroupPolicyRequestCalls())
func (mock *IAMAPIMock) PutGroupPolicyRequestCalls() []struct {
	In1 *iam.PutGroupPolicyInput
} {
	var calls []struct {
		In1 *iam.PutGroupPolicyInput
	}
	lockIAMAPIMockPutGroupPolicyRequest.RLock()
	calls = mock.calls.PutGroupPolicyRequest
	lockIAMAPIMockPutGroupPolicyRequest.RUnlock()
	return calls
}

// PutGroupPolicyWithContext calls PutGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) PutGroupPolicyWithContext(in1 context.Context, in2 *iam.PutGroupPolicyInput, in3 ...request.Option) (*iam.PutGroupPolicyOutput, error) {
	if mock.PutGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.PutGroupPolicyWithContextFunc: method is nil but IAMAPI.PutGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.PutGroupPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockPutGroupPolicyWithContext.Lock()
	mock.calls.PutGroupPolicyWithContext = append(mock.calls.PutGroupPolicyWithContext, callInfo)
	lockIAMAPIMockPutGroupPolicyWithContext.Unlock()
	return mock.PutGroupPolicyWithContextFunc(in1, in2, in3...)
}

// PutGroupPolicyWithContextCalls gets all the calls that were made to PutGroupPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.PutGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) PutGroupPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.PutGroupPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.PutGroupPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockPutGroupPolicyWithContext.RLock()
	calls = mock.calls.PutGroupPolicyWithContext
	lockIAMAPIMockPutGroupPolicyWithContext.RUnlock()
	return calls
}

// PutRolePermissionsBoundary calls PutRolePermissionsBoundaryFunc.
func (mock *IAMAPIMock) PutRolePermissionsBoundary(in1 *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	if mock.PutRolePermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.PutRolePermissionsBoundaryFunc: method is nil but IAMAPI.PutRolePermissionsBoundary was just called")
	}
	callInfo := struct {
		In1 *iam.PutRolePermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutRolePermissionsBoundary.Lock()
	mock.calls.PutRolePermissionsBoundary = append(mock.calls.PutRolePermissionsBoundary, callInfo)
	lockIAMAPIMockPutRolePermissionsBoundary.Unlock()
	return mock.PutRolePermissionsBoundaryFunc(in1)
}

// PutRolePermissionsBoundaryCalls gets all the calls that were made to PutRolePermissionsBoundary.
// Check the length with:
//     len(mockedIAMAPI.PutRolePermissionsBoundaryCalls())
func (mock *IAMAPIMock) PutRolePermissionsBoundaryCalls() []struct {
	In1 *iam.PutRolePermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.PutRolePermissionsBoundaryInput
	}
	lockIAMAPIMockPutRolePermissionsBoundary.RLock()
	calls = mock.calls.PutRolePermissionsBoundary
	lockIAMAPIMockPutRolePermissionsBoundary.RUnlock()
	return calls
}

// PutRolePermissionsBoundaryRequest calls PutRolePermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) PutRolePermissionsBoundaryRequest(in1 *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput) {
	if mock.PutRolePermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.PutRolePermissionsBoundaryRequestFunc: method is nil but IAMAPI.PutRolePermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		In1 *iam.PutRolePermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutRolePermissionsBoundaryRequest.Lock()
	mock.calls.PutRolePermissionsBoundaryRequest = append(mock.calls.PutRolePermissionsBoundaryRequest, callInfo)
	lockIAMAPIMockPutRolePermissionsBoundaryRequest.Unlock()
	return mock.PutRolePermissionsBoundaryRequestFunc(in1)
}

// PutRolePermissionsBoundaryRequestCalls gets all the calls that were made to PutRolePermissionsBoundaryRequest.
// Check the length with:
//     len(mockedIAMAPI.PutRolePermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) PutRolePermissionsBoundaryRequestCalls() []struct {
	In1 *iam.PutRolePermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.PutRolePermissionsBoundaryInput
	}
	lockIAMAPIMockPutRolePermissionsBoundaryRequest.RLock()
	calls = mock.calls.PutRolePermissionsBoundaryRequest
	lockIAMAPIMockPutRolePermissionsBoundaryRequest.RUnlock()
	return calls
}

// PutRolePermissionsBoundaryWithContext calls PutRolePermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) PutRolePermissionsBoundaryWithContext(in1 context.Context, in2 *iam.PutRolePermissionsBoundaryInput, in3 ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {
	if mock.PutRolePermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.PutRolePermissionsBoundaryWithContextFunc: method is nil but IAMAPI.PutRolePermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.PutRolePermissionsBoundaryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockPutRolePermissionsBoundaryWithContext.Lock()
	mock.calls.PutRolePermissionsBoundaryWithContext = append(mock.calls.PutRolePermissionsBoundaryWithContext, callInfo)
	lockIAMAPIMockPutRolePermissionsBoundaryWithContext.Unlock()
	return mock.PutRolePermissionsBoundaryWithContextFunc(in1, in2, in3...)
}

// PutRolePermissionsBoundaryWithContextCalls gets all the calls that were made to PutRolePermissionsBoundaryWithContext.
// Check the length with:
//     len(mockedIAMAPI.PutRolePermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) PutRolePermissionsBoundaryWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.PutRolePermissionsBoundaryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.PutRolePermissionsBoundaryInput
		In3 []request.Option
	}
	lockIAMAPIMockPutRolePermissionsBoundaryWithContext.RLock()
	calls = mock.calls.PutRolePermissionsBoundaryWithContext
	lockIAMAPIMockPutRolePermissionsBoundaryWithContext.RUnlock()
	return calls
}

// PutRolePolicy calls PutRolePolicyFunc.
func (mock *IAMAPIMock) PutRolePolicy(in1 *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	if mock.PutRolePolicyFunc == nil {
		panic("IAMAPIMock.PutRolePolicyFunc: method is nil but IAMAPI.PutRolePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.PutRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutRolePolicy.Lock()
	mock.calls.PutRolePolicy = append(mock.calls.PutRolePolicy, callInfo)
	lockIAMAPIMockPutRolePolicy.Unlock()
	return mock.PutRolePolicyFunc(in1)
}

// PutRolePolicyCalls gets all the calls that were made to PutRolePolicy.
// Check the length with:
//     len(mockedIAMAPI.PutRolePolicyCalls())
func (mock *IAMAPIMock) PutRolePolicyCalls() []struct {
	In1 *iam.PutRolePolicyInput
} {
	var calls []struct {
		In1 *iam.PutRolePolicyInput
	}
	lockIAMAPIMockPutRolePolicy.RLock()
	calls = mock.calls.PutRolePolicy
	lockIAMAPIMockPutRolePolicy.RUnlock()
	return calls
}

// PutRolePolicyRequest calls PutRolePolicyRequestFunc.
func (mock *IAMAPIMock) PutRolePolicyRequest(in1 *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput) {
	if mock.PutRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.PutRolePolicyRequestFunc: method is nil but IAMAPI.PutRolePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.PutRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutRolePolicyRequest.Lock()
	mock.calls.PutRolePolicyRequest = append(mock.calls.PutRolePolicyRequest, callInfo)
	lockIAMAPIMockPutRolePolicyRequest.Unlock()
	return mock.PutRolePolicyRequestFunc(in1)
}

// PutRolePolicyRequestCalls gets all the calls that were made to PutRolePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.PutRolePolicyRequestCalls())
func (mock *IAMAPIMock) PutRolePolicyRequestCalls() []struct {
	In1 *iam.PutRolePolicyInput
} {
	var calls []struct {
		In1 *iam.PutRolePolicyInput
	}
	lockIAMAPIMockPutRolePolicyRequest.RLock()
	calls = mock.calls.PutRolePolicyRequest
	lockIAMAPIMockPutRolePolicyRequest.RUnlock()
	return calls
}

// PutRolePolicyWithContext calls PutRolePolicyWithContextFunc.
func (mock *IAMAPIMock) PutRolePolicyWithContext(in1 context.Context, in2 *iam.PutRolePolicyInput, in3 ...request.Option) (*iam.PutRolePolicyOutput, error) {
	if mock.PutRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.PutRolePolicyWithContextFunc: method is nil but IAMAPI.PutRolePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.PutRolePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockPutRolePolicyWithContext.Lock()
	mock.calls.PutRolePolicyWithContext = append(mock.calls.PutRolePolicyWithContext, callInfo)
	lockIAMAPIMockPutRolePolicyWithContext.Unlock()
	return mock.PutRolePolicyWithContextFunc(in1, in2, in3...)
}

// PutRolePolicyWithContextCalls gets all the calls that were made to PutRolePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.PutRolePolicyWithContextCalls())
func (mock *IAMAPIMock) PutRolePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.PutRolePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.PutRolePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockPutRolePolicyWithContext.RLock()
	calls = mock.calls.PutRolePolicyWithContext
	lockIAMAPIMockPutRolePolicyWithContext.RUnlock()
	return calls
}

// PutUserPermissionsBoundary calls PutUserPermissionsBoundaryFunc.
func (mock *IAMAPIMock) PutUserPermissionsBoundary(in1 *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
	if mock.PutUserPermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.PutUserPermissionsBoundaryFunc: method is nil but IAMAPI.PutUserPermissionsBoundary was just called")
	}
	callInfo := struct {
		In1 *iam.PutUserPermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutUserPermissionsBoundary.Lock()
	mock.calls.PutUserPermissionsBoundary = append(mock.calls.PutUserPermissionsBoundary, callInfo)
	lockIAMAPIMockPutUserPermissionsBoundary.Unlock()
	return mock.PutUserPermissionsBoundaryFunc(in1)
}

// PutUserPermissionsBoundaryCalls gets all the calls that were made to PutUserPermissionsBoundary.
// Check the length with:
//     len(mockedIAMAPI.PutUserPermissionsBoundaryCalls())
func (mock *IAMAPIMock) PutUserPermissionsBoundaryCalls() []struct {
	In1 *iam.PutUserPermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.PutUserPermissionsBoundaryInput
	}
	lockIAMAPIMockPutUserPermissionsBoundary.RLock()
	calls = mock.calls.PutUserPermissionsBoundary
	lockIAMAPIMockPutUserPermissionsBoundary.RUnlock()
	return calls
}

// PutUserPermissionsBoundaryRequest calls PutUserPermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) PutUserPermissionsBoundaryRequest(in1 *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput) {
	if mock.PutUserPermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.PutUserPermissionsBoundaryRequestFunc: method is nil but IAMAPI.PutUserPermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		In1 *iam.PutUserPermissionsBoundaryInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutUserPermissionsBoundaryRequest.Lock()
	mock.calls.PutUserPermissionsBoundaryRequest = append(mock.calls.PutUserPermissionsBoundaryRequest, callInfo)
	lockIAMAPIMockPutUserPermissionsBoundaryRequest.Unlock()
	return mock.PutUserPermissionsBoundaryRequestFunc(in1)
}

// PutUserPermissionsBoundaryRequestCalls gets all the calls that were made to PutUserPermissionsBoundaryRequest.
// Check the length with:
//     len(mockedIAMAPI.PutUserPermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) PutUserPermissionsBoundaryRequestCalls() []struct {
	In1 *iam.PutUserPermissionsBoundaryInput
} {
	var calls []struct {
		In1 *iam.PutUserPermissionsBoundaryInput
	}
	lockIAMAPIMockPutUserPermissionsBoundaryRequest.RLock()
	calls = mock.calls.PutUserPermissionsBoundaryRequest
	lockIAMAPIMockPutUserPermissionsBoundaryRequest.RUnlock()
	return calls
}

// PutUserPermissionsBoundaryWithContext calls PutUserPermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) PutUserPermissionsBoundaryWithContext(in1 context.Context, in2 *iam.PutUserPermissionsBoundaryInput, in3 ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {
	if mock.PutUserPermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.PutUserPermissionsBoundaryWithContextFunc: method is nil but IAMAPI.PutUserPermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.PutUserPermissionsBoundaryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockPutUserPermissionsBoundaryWithContext.Lock()
	mock.calls.PutUserPermissionsBoundaryWithContext = append(mock.calls.PutUserPermissionsBoundaryWithContext, callInfo)
	lockIAMAPIMockPutUserPermissionsBoundaryWithContext.Unlock()
	return mock.PutUserPermissionsBoundaryWithContextFunc(in1, in2, in3...)
}

// PutUserPermissionsBoundaryWithContextCalls gets all the calls that were made to PutUserPermissionsBoundaryWithContext.
// Check the length with:
//     len(mockedIAMAPI.PutUserPermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) PutUserPermissionsBoundaryWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.PutUserPermissionsBoundaryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.PutUserPermissionsBoundaryInput
		In3 []request.Option
	}
	lockIAMAPIMockPutUserPermissionsBoundaryWithContext.RLock()
	calls = mock.calls.PutUserPermissionsBoundaryWithContext
	lockIAMAPIMockPutUserPermissionsBoundaryWithContext.RUnlock()
	return calls
}

// PutUserPolicy calls PutUserPolicyFunc.
func (mock *IAMAPIMock) PutUserPolicy(in1 *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	if mock.PutUserPolicyFunc == nil {
		panic("IAMAPIMock.PutUserPolicyFunc: method is nil but IAMAPI.PutUserPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.PutUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutUserPolicy.Lock()
	mock.calls.PutUserPolicy = append(mock.calls.PutUserPolicy, callInfo)
	lockIAMAPIMockPutUserPolicy.Unlock()
	return mock.PutUserPolicyFunc(in1)
}

// PutUserPolicyCalls gets all the calls that were made to PutUserPolicy.
// Check the length with:
//     len(mockedIAMAPI.PutUserPolicyCalls())
func (mock *IAMAPIMock) PutUserPolicyCalls() []struct {
	In1 *iam.PutUserPolicyInput
} {
	var calls []struct {
		In1 *iam.PutUserPolicyInput
	}
	lockIAMAPIMockPutUserPolicy.RLock()
	calls = mock.calls.PutUserPolicy
	lockIAMAPIMockPutUserPolicy.RUnlock()
	return calls
}

// PutUserPolicyRequest calls PutUserPolicyRequestFunc.
func (mock *IAMAPIMock) PutUserPolicyRequest(in1 *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput) {
	if mock.PutUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.PutUserPolicyRequestFunc: method is nil but IAMAPI.PutUserPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.PutUserPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockPutUserPolicyRequest.Lock()
	mock.calls.PutUserPolicyRequest = append(mock.calls.PutUserPolicyRequest, callInfo)
	lockIAMAPIMockPutUserPolicyRequest.Unlock()
	return mock.PutUserPolicyRequestFunc(in1)
}

// PutUserPolicyRequestCalls gets all the calls that were made to PutUserPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.PutUserPolicyRequestCalls())
func (mock *IAMAPIMock) PutUserPolicyRequestCalls() []struct {
	In1 *iam.PutUserPolicyInput
} {
	var calls []struct {
		In1 *iam.PutUserPolicyInput
	}
	lockIAMAPIMockPutUserPolicyRequest.RLock()
	calls = mock.calls.PutUserPolicyRequest
	lockIAMAPIMockPutUserPolicyRequest.RUnlock()
	return calls
}

// PutUserPolicyWithContext calls PutUserPolicyWithContextFunc.
func (mock *IAMAPIMock) PutUserPolicyWithContext(in1 context.Context, in2 *iam.PutUserPolicyInput, in3 ...request.Option) (*iam.PutUserPolicyOutput, error) {
	if mock.PutUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.PutUserPolicyWithContextFunc: method is nil but IAMAPI.PutUserPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.PutUserPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockPutUserPolicyWithContext.Lock()
	mock.calls.PutUserPolicyWithContext = append(mock.calls.PutUserPolicyWithContext, callInfo)
	lockIAMAPIMockPutUserPolicyWithContext.Unlock()
	return mock.PutUserPolicyWithContextFunc(in1, in2, in3...)
}

// PutUserPolicyWithContextCalls gets all the calls that were made to PutUserPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.PutUserPolicyWithContextCalls())
func (mock *IAMAPIMock) PutUserPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.PutUserPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.PutUserPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockPutUserPolicyWithContext.RLock()
	calls = mock.calls.PutUserPolicyWithContext
	lockIAMAPIMockPutUserPolicyWithContext.RUnlock()
	return calls
}

// RemoveClientIDFromOpenIDConnectProvider calls RemoveClientIDFromOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProvider(in1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	if mock.RemoveClientIDFromOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.RemoveClientIDFromOpenIDConnectProviderFunc: method is nil but IAMAPI.RemoveClientIDFromOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProvider.Lock()
	mock.calls.RemoveClientIDFromOpenIDConnectProvider = append(mock.calls.RemoveClientIDFromOpenIDConnectProvider, callInfo)
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProvider.Unlock()
	return mock.RemoveClientIDFromOpenIDConnectProviderFunc(in1)
}

// RemoveClientIDFromOpenIDConnectProviderCalls gets all the calls that were made to RemoveClientIDFromOpenIDConnectProvider.
// Check the length with:
//     len(mockedIAMAPI.RemoveClientIDFromOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderCalls() []struct {
	In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProvider.RLock()
	calls = mock.calls.RemoveClientIDFromOpenIDConnectProvider
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProvider.RUnlock()
	return calls
}

// RemoveClientIDFromOpenIDConnectProviderRequest calls RemoveClientIDFromOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderRequest(in1 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	if mock.RemoveClientIDFromOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.RemoveClientIDFromOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.RemoveClientIDFromOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderRequest.Lock()
	mock.calls.RemoveClientIDFromOpenIDConnectProviderRequest = append(mock.calls.RemoveClientIDFromOpenIDConnectProviderRequest, callInfo)
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderRequest.Unlock()
	return mock.RemoveClientIDFromOpenIDConnectProviderRequestFunc(in1)
}

// RemoveClientIDFromOpenIDConnectProviderRequestCalls gets all the calls that were made to RemoveClientIDFromOpenIDConnectProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.RemoveClientIDFromOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderRequestCalls() []struct {
	In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
} {
	var calls []struct {
		In1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.RemoveClientIDFromOpenIDConnectProviderRequest
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// RemoveClientIDFromOpenIDConnectProviderWithContext calls RemoveClientIDFromOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderWithContext(in1 context.Context, in2 *iam.RemoveClientIDFromOpenIDConnectProviderInput, in3 ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	if mock.RemoveClientIDFromOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.RemoveClientIDFromOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.RemoveClientIDFromOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.RemoveClientIDFromOpenIDConnectProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderWithContext.Lock()
	mock.calls.RemoveClientIDFromOpenIDConnectProviderWithContext = append(mock.calls.RemoveClientIDFromOpenIDConnectProviderWithContext, callInfo)
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderWithContext.Unlock()
	return mock.RemoveClientIDFromOpenIDConnectProviderWithContextFunc(in1, in2, in3...)
}

// RemoveClientIDFromOpenIDConnectProviderWithContextCalls gets all the calls that were made to RemoveClientIDFromOpenIDConnectProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.RemoveClientIDFromOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.RemoveClientIDFromOpenIDConnectProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.RemoveClientIDFromOpenIDConnectProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.RemoveClientIDFromOpenIDConnectProviderWithContext
	lockIAMAPIMockRemoveClientIDFromOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// RemoveRoleFromInstanceProfile calls RemoveRoleFromInstanceProfileFunc.
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfile(in1 *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	if mock.RemoveRoleFromInstanceProfileFunc == nil {
		panic("IAMAPIMock.RemoveRoleFromInstanceProfileFunc: method is nil but IAMAPI.RemoveRoleFromInstanceProfile was just called")
	}
	callInfo := struct {
		In1 *iam.RemoveRoleFromInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockRemoveRoleFromInstanceProfile.Lock()
	mock.calls.RemoveRoleFromInstanceProfile = append(mock.calls.RemoveRoleFromInstanceProfile, callInfo)
	lockIAMAPIMockRemoveRoleFromInstanceProfile.Unlock()
	return mock.RemoveRoleFromInstanceProfileFunc(in1)
}

// RemoveRoleFromInstanceProfileCalls gets all the calls that were made to RemoveRoleFromInstanceProfile.
// Check the length with:
//     len(mockedIAMAPI.RemoveRoleFromInstanceProfileCalls())
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileCalls() []struct {
	In1 *iam.RemoveRoleFromInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.RemoveRoleFromInstanceProfileInput
	}
	lockIAMAPIMockRemoveRoleFromInstanceProfile.RLock()
	calls = mock.calls.RemoveRoleFromInstanceProfile
	lockIAMAPIMockRemoveRoleFromInstanceProfile.RUnlock()
	return calls
}

// RemoveRoleFromInstanceProfileRequest calls RemoveRoleFromInstanceProfileRequestFunc.
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileRequest(in1 *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput) {
	if mock.RemoveRoleFromInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.RemoveRoleFromInstanceProfileRequestFunc: method is nil but IAMAPI.RemoveRoleFromInstanceProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.RemoveRoleFromInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockRemoveRoleFromInstanceProfileRequest.Lock()
	mock.calls.RemoveRoleFromInstanceProfileRequest = append(mock.calls.RemoveRoleFromInstanceProfileRequest, callInfo)
	lockIAMAPIMockRemoveRoleFromInstanceProfileRequest.Unlock()
	return mock.RemoveRoleFromInstanceProfileRequestFunc(in1)
}

// RemoveRoleFromInstanceProfileRequestCalls gets all the calls that were made to RemoveRoleFromInstanceProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.RemoveRoleFromInstanceProfileRequestCalls())
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileRequestCalls() []struct {
	In1 *iam.RemoveRoleFromInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.RemoveRoleFromInstanceProfileInput
	}
	lockIAMAPIMockRemoveRoleFromInstanceProfileRequest.RLock()
	calls = mock.calls.RemoveRoleFromInstanceProfileRequest
	lockIAMAPIMockRemoveRoleFromInstanceProfileRequest.RUnlock()
	return calls
}

// RemoveRoleFromInstanceProfileWithContext calls RemoveRoleFromInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileWithContext(in1 context.Context, in2 *iam.RemoveRoleFromInstanceProfileInput, in3 ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	if mock.RemoveRoleFromInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.RemoveRoleFromInstanceProfileWithContextFunc: method is nil but IAMAPI.RemoveRoleFromInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.RemoveRoleFromInstanceProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockRemoveRoleFromInstanceProfileWithContext.Lock()
	mock.calls.RemoveRoleFromInstanceProfileWithContext = append(mock.calls.RemoveRoleFromInstanceProfileWithContext, callInfo)
	lockIAMAPIMockRemoveRoleFromInstanceProfileWithContext.Unlock()
	return mock.RemoveRoleFromInstanceProfileWithContextFunc(in1, in2, in3...)
}

// RemoveRoleFromInstanceProfileWithContextCalls gets all the calls that were made to RemoveRoleFromInstanceProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.RemoveRoleFromInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.RemoveRoleFromInstanceProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.RemoveRoleFromInstanceProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockRemoveRoleFromInstanceProfileWithContext.RLock()
	calls = mock.calls.RemoveRoleFromInstanceProfileWithContext
	lockIAMAPIMockRemoveRoleFromInstanceProfileWithContext.RUnlock()
	return calls
}

// RemoveUserFromGroup calls RemoveUserFromGroupFunc.
func (mock *IAMAPIMock) RemoveUserFromGroup(in1 *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	if mock.RemoveUserFromGroupFunc == nil {
		panic("IAMAPIMock.RemoveUserFromGroupFunc: method is nil but IAMAPI.RemoveUserFromGroup was just called")
	}
	callInfo := struct {
		In1 *iam.RemoveUserFromGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockRemoveUserFromGroup.Lock()
	mock.calls.RemoveUserFromGroup = append(mock.calls.RemoveUserFromGroup, callInfo)
	lockIAMAPIMockRemoveUserFromGroup.Unlock()
	return mock.RemoveUserFromGroupFunc(in1)
}

// RemoveUserFromGroupCalls gets all the calls that were made to RemoveUserFromGroup.
// Check the length with:
//     len(mockedIAMAPI.RemoveUserFromGroupCalls())
func (mock *IAMAPIMock) RemoveUserFromGroupCalls() []struct {
	In1 *iam.RemoveUserFromGroupInput
} {
	var calls []struct {
		In1 *iam.RemoveUserFromGroupInput
	}
	lockIAMAPIMockRemoveUserFromGroup.RLock()
	calls = mock.calls.RemoveUserFromGroup
	lockIAMAPIMockRemoveUserFromGroup.RUnlock()
	return calls
}

// RemoveUserFromGroupRequest calls RemoveUserFromGroupRequestFunc.
func (mock *IAMAPIMock) RemoveUserFromGroupRequest(in1 *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput) {
	if mock.RemoveUserFromGroupRequestFunc == nil {
		panic("IAMAPIMock.RemoveUserFromGroupRequestFunc: method is nil but IAMAPI.RemoveUserFromGroupRequest was just called")
	}
	callInfo := struct {
		In1 *iam.RemoveUserFromGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockRemoveUserFromGroupRequest.Lock()
	mock.calls.RemoveUserFromGroupRequest = append(mock.calls.RemoveUserFromGroupRequest, callInfo)
	lockIAMAPIMockRemoveUserFromGroupRequest.Unlock()
	return mock.RemoveUserFromGroupRequestFunc(in1)
}

// RemoveUserFromGroupRequestCalls gets all the calls that were made to RemoveUserFromGroupRequest.
// Check the length with:
//     len(mockedIAMAPI.RemoveUserFromGroupRequestCalls())
func (mock *IAMAPIMock) RemoveUserFromGroupRequestCalls() []struct {
	In1 *iam.RemoveUserFromGroupInput
} {
	var calls []struct {
		In1 *iam.RemoveUserFromGroupInput
	}
	lockIAMAPIMockRemoveUserFromGroupRequest.RLock()
	calls = mock.calls.RemoveUserFromGroupRequest
	lockIAMAPIMockRemoveUserFromGroupRequest.RUnlock()
	return calls
}

// RemoveUserFromGroupWithContext calls RemoveUserFromGroupWithContextFunc.
func (mock *IAMAPIMock) RemoveUserFromGroupWithContext(in1 context.Context, in2 *iam.RemoveUserFromGroupInput, in3 ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
	if mock.RemoveUserFromGroupWithContextFunc == nil {
		panic("IAMAPIMock.RemoveUserFromGroupWithContextFunc: method is nil but IAMAPI.RemoveUserFromGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.RemoveUserFromGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockRemoveUserFromGroupWithContext.Lock()
	mock.calls.RemoveUserFromGroupWithContext = append(mock.calls.RemoveUserFromGroupWithContext, callInfo)
	lockIAMAPIMockRemoveUserFromGroupWithContext.Unlock()
	return mock.RemoveUserFromGroupWithContextFunc(in1, in2, in3...)
}

// RemoveUserFromGroupWithContextCalls gets all the calls that were made to RemoveUserFromGroupWithContext.
// Check the length with:
//     len(mockedIAMAPI.RemoveUserFromGroupWithContextCalls())
func (mock *IAMAPIMock) RemoveUserFromGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.RemoveUserFromGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.RemoveUserFromGroupInput
		In3 []request.Option
	}
	lockIAMAPIMockRemoveUserFromGroupWithContext.RLock()
	calls = mock.calls.RemoveUserFromGroupWithContext
	lockIAMAPIMockRemoveUserFromGroupWithContext.RUnlock()
	return calls
}

// ResetServiceSpecificCredential calls ResetServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) ResetServiceSpecificCredential(in1 *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	if mock.ResetServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.ResetServiceSpecificCredentialFunc: method is nil but IAMAPI.ResetServiceSpecificCredential was just called")
	}
	callInfo := struct {
		In1 *iam.ResetServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockResetServiceSpecificCredential.Lock()
	mock.calls.ResetServiceSpecificCredential = append(mock.calls.ResetServiceSpecificCredential, callInfo)
	lockIAMAPIMockResetServiceSpecificCredential.Unlock()
	return mock.ResetServiceSpecificCredentialFunc(in1)
}

// ResetServiceSpecificCredentialCalls gets all the calls that were made to ResetServiceSpecificCredential.
// Check the length with:
//     len(mockedIAMAPI.ResetServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) ResetServiceSpecificCredentialCalls() []struct {
	In1 *iam.ResetServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.ResetServiceSpecificCredentialInput
	}
	lockIAMAPIMockResetServiceSpecificCredential.RLock()
	calls = mock.calls.ResetServiceSpecificCredential
	lockIAMAPIMockResetServiceSpecificCredential.RUnlock()
	return calls
}

// ResetServiceSpecificCredentialRequest calls ResetServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) ResetServiceSpecificCredentialRequest(in1 *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput) {
	if mock.ResetServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.ResetServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.ResetServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ResetServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockResetServiceSpecificCredentialRequest.Lock()
	mock.calls.ResetServiceSpecificCredentialRequest = append(mock.calls.ResetServiceSpecificCredentialRequest, callInfo)
	lockIAMAPIMockResetServiceSpecificCredentialRequest.Unlock()
	return mock.ResetServiceSpecificCredentialRequestFunc(in1)
}

// ResetServiceSpecificCredentialRequestCalls gets all the calls that were made to ResetServiceSpecificCredentialRequest.
// Check the length with:
//     len(mockedIAMAPI.ResetServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) ResetServiceSpecificCredentialRequestCalls() []struct {
	In1 *iam.ResetServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.ResetServiceSpecificCredentialInput
	}
	lockIAMAPIMockResetServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.ResetServiceSpecificCredentialRequest
	lockIAMAPIMockResetServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// ResetServiceSpecificCredentialWithContext calls ResetServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) ResetServiceSpecificCredentialWithContext(in1 context.Context, in2 *iam.ResetServiceSpecificCredentialInput, in3 ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
	if mock.ResetServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.ResetServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.ResetServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ResetServiceSpecificCredentialInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockResetServiceSpecificCredentialWithContext.Lock()
	mock.calls.ResetServiceSpecificCredentialWithContext = append(mock.calls.ResetServiceSpecificCredentialWithContext, callInfo)
	lockIAMAPIMockResetServiceSpecificCredentialWithContext.Unlock()
	return mock.ResetServiceSpecificCredentialWithContextFunc(in1, in2, in3...)
}

// ResetServiceSpecificCredentialWithContextCalls gets all the calls that were made to ResetServiceSpecificCredentialWithContext.
// Check the length with:
//     len(mockedIAMAPI.ResetServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) ResetServiceSpecificCredentialWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ResetServiceSpecificCredentialInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ResetServiceSpecificCredentialInput
		In3 []request.Option
	}
	lockIAMAPIMockResetServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.ResetServiceSpecificCredentialWithContext
	lockIAMAPIMockResetServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// ResyncMFADevice calls ResyncMFADeviceFunc.
func (mock *IAMAPIMock) ResyncMFADevice(in1 *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	if mock.ResyncMFADeviceFunc == nil {
		panic("IAMAPIMock.ResyncMFADeviceFunc: method is nil but IAMAPI.ResyncMFADevice was just called")
	}
	callInfo := struct {
		In1 *iam.ResyncMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockResyncMFADevice.Lock()
	mock.calls.ResyncMFADevice = append(mock.calls.ResyncMFADevice, callInfo)
	lockIAMAPIMockResyncMFADevice.Unlock()
	return mock.ResyncMFADeviceFunc(in1)
}

// ResyncMFADeviceCalls gets all the calls that were made to ResyncMFADevice.
// Check the length with:
//     len(mockedIAMAPI.ResyncMFADeviceCalls())
func (mock *IAMAPIMock) ResyncMFADeviceCalls() []struct {
	In1 *iam.ResyncMFADeviceInput
} {
	var calls []struct {
		In1 *iam.ResyncMFADeviceInput
	}
	lockIAMAPIMockResyncMFADevice.RLock()
	calls = mock.calls.ResyncMFADevice
	lockIAMAPIMockResyncMFADevice.RUnlock()
	return calls
}

// ResyncMFADeviceRequest calls ResyncMFADeviceRequestFunc.
func (mock *IAMAPIMock) ResyncMFADeviceRequest(in1 *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput) {
	if mock.ResyncMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.ResyncMFADeviceRequestFunc: method is nil but IAMAPI.ResyncMFADeviceRequest was just called")
	}
	callInfo := struct {
		In1 *iam.ResyncMFADeviceInput
	}{
		In1: in1,
	}
	lockIAMAPIMockResyncMFADeviceRequest.Lock()
	mock.calls.ResyncMFADeviceRequest = append(mock.calls.ResyncMFADeviceRequest, callInfo)
	lockIAMAPIMockResyncMFADeviceRequest.Unlock()
	return mock.ResyncMFADeviceRequestFunc(in1)
}

// ResyncMFADeviceRequestCalls gets all the calls that were made to ResyncMFADeviceRequest.
// Check the length with:
//     len(mockedIAMAPI.ResyncMFADeviceRequestCalls())
func (mock *IAMAPIMock) ResyncMFADeviceRequestCalls() []struct {
	In1 *iam.ResyncMFADeviceInput
} {
	var calls []struct {
		In1 *iam.ResyncMFADeviceInput
	}
	lockIAMAPIMockResyncMFADeviceRequest.RLock()
	calls = mock.calls.ResyncMFADeviceRequest
	lockIAMAPIMockResyncMFADeviceRequest.RUnlock()
	return calls
}

// ResyncMFADeviceWithContext calls ResyncMFADeviceWithContextFunc.
func (mock *IAMAPIMock) ResyncMFADeviceWithContext(in1 context.Context, in2 *iam.ResyncMFADeviceInput, in3 ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
	if mock.ResyncMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.ResyncMFADeviceWithContextFunc: method is nil but IAMAPI.ResyncMFADeviceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.ResyncMFADeviceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockResyncMFADeviceWithContext.Lock()
	mock.calls.ResyncMFADeviceWithContext = append(mock.calls.ResyncMFADeviceWithContext, callInfo)
	lockIAMAPIMockResyncMFADeviceWithContext.Unlock()
	return mock.ResyncMFADeviceWithContextFunc(in1, in2, in3...)
}

// ResyncMFADeviceWithContextCalls gets all the calls that were made to ResyncMFADeviceWithContext.
// Check the length with:
//     len(mockedIAMAPI.ResyncMFADeviceWithContextCalls())
func (mock *IAMAPIMock) ResyncMFADeviceWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.ResyncMFADeviceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.ResyncMFADeviceInput
		In3 []request.Option
	}
	lockIAMAPIMockResyncMFADeviceWithContext.RLock()
	calls = mock.calls.ResyncMFADeviceWithContext
	lockIAMAPIMockResyncMFADeviceWithContext.RUnlock()
	return calls
}

// SetDefaultPolicyVersion calls SetDefaultPolicyVersionFunc.
func (mock *IAMAPIMock) SetDefaultPolicyVersion(in1 *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	if mock.SetDefaultPolicyVersionFunc == nil {
		panic("IAMAPIMock.SetDefaultPolicyVersionFunc: method is nil but IAMAPI.SetDefaultPolicyVersion was just called")
	}
	callInfo := struct {
		In1 *iam.SetDefaultPolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSetDefaultPolicyVersion.Lock()
	mock.calls.SetDefaultPolicyVersion = append(mock.calls.SetDefaultPolicyVersion, callInfo)
	lockIAMAPIMockSetDefaultPolicyVersion.Unlock()
	return mock.SetDefaultPolicyVersionFunc(in1)
}

// SetDefaultPolicyVersionCalls gets all the calls that were made to SetDefaultPolicyVersion.
// Check the length with:
//     len(mockedIAMAPI.SetDefaultPolicyVersionCalls())
func (mock *IAMAPIMock) SetDefaultPolicyVersionCalls() []struct {
	In1 *iam.SetDefaultPolicyVersionInput
} {
	var calls []struct {
		In1 *iam.SetDefaultPolicyVersionInput
	}
	lockIAMAPIMockSetDefaultPolicyVersion.RLock()
	calls = mock.calls.SetDefaultPolicyVersion
	lockIAMAPIMockSetDefaultPolicyVersion.RUnlock()
	return calls
}

// SetDefaultPolicyVersionRequest calls SetDefaultPolicyVersionRequestFunc.
func (mock *IAMAPIMock) SetDefaultPolicyVersionRequest(in1 *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput) {
	if mock.SetDefaultPolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.SetDefaultPolicyVersionRequestFunc: method is nil but IAMAPI.SetDefaultPolicyVersionRequest was just called")
	}
	callInfo := struct {
		In1 *iam.SetDefaultPolicyVersionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSetDefaultPolicyVersionRequest.Lock()
	mock.calls.SetDefaultPolicyVersionRequest = append(mock.calls.SetDefaultPolicyVersionRequest, callInfo)
	lockIAMAPIMockSetDefaultPolicyVersionRequest.Unlock()
	return mock.SetDefaultPolicyVersionRequestFunc(in1)
}

// SetDefaultPolicyVersionRequestCalls gets all the calls that were made to SetDefaultPolicyVersionRequest.
// Check the length with:
//     len(mockedIAMAPI.SetDefaultPolicyVersionRequestCalls())
func (mock *IAMAPIMock) SetDefaultPolicyVersionRequestCalls() []struct {
	In1 *iam.SetDefaultPolicyVersionInput
} {
	var calls []struct {
		In1 *iam.SetDefaultPolicyVersionInput
	}
	lockIAMAPIMockSetDefaultPolicyVersionRequest.RLock()
	calls = mock.calls.SetDefaultPolicyVersionRequest
	lockIAMAPIMockSetDefaultPolicyVersionRequest.RUnlock()
	return calls
}

// SetDefaultPolicyVersionWithContext calls SetDefaultPolicyVersionWithContextFunc.
func (mock *IAMAPIMock) SetDefaultPolicyVersionWithContext(in1 context.Context, in2 *iam.SetDefaultPolicyVersionInput, in3 ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
	if mock.SetDefaultPolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.SetDefaultPolicyVersionWithContextFunc: method is nil but IAMAPI.SetDefaultPolicyVersionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.SetDefaultPolicyVersionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockSetDefaultPolicyVersionWithContext.Lock()
	mock.calls.SetDefaultPolicyVersionWithContext = append(mock.calls.SetDefaultPolicyVersionWithContext, callInfo)
	lockIAMAPIMockSetDefaultPolicyVersionWithContext.Unlock()
	return mock.SetDefaultPolicyVersionWithContextFunc(in1, in2, in3...)
}

// SetDefaultPolicyVersionWithContextCalls gets all the calls that were made to SetDefaultPolicyVersionWithContext.
// Check the length with:
//     len(mockedIAMAPI.SetDefaultPolicyVersionWithContextCalls())
func (mock *IAMAPIMock) SetDefaultPolicyVersionWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.SetDefaultPolicyVersionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.SetDefaultPolicyVersionInput
		In3 []request.Option
	}
	lockIAMAPIMockSetDefaultPolicyVersionWithContext.RLock()
	calls = mock.calls.SetDefaultPolicyVersionWithContext
	lockIAMAPIMockSetDefaultPolicyVersionWithContext.RUnlock()
	return calls
}

// SetSecurityTokenServicePreferences calls SetSecurityTokenServicePreferencesFunc.
func (mock *IAMAPIMock) SetSecurityTokenServicePreferences(in1 *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	if mock.SetSecurityTokenServicePreferencesFunc == nil {
		panic("IAMAPIMock.SetSecurityTokenServicePreferencesFunc: method is nil but IAMAPI.SetSecurityTokenServicePreferences was just called")
	}
	callInfo := struct {
		In1 *iam.SetSecurityTokenServicePreferencesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSetSecurityTokenServicePreferences.Lock()
	mock.calls.SetSecurityTokenServicePreferences = append(mock.calls.SetSecurityTokenServicePreferences, callInfo)
	lockIAMAPIMockSetSecurityTokenServicePreferences.Unlock()
	return mock.SetSecurityTokenServicePreferencesFunc(in1)
}

// SetSecurityTokenServicePreferencesCalls gets all the calls that were made to SetSecurityTokenServicePreferences.
// Check the length with:
//     len(mockedIAMAPI.SetSecurityTokenServicePreferencesCalls())
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesCalls() []struct {
	In1 *iam.SetSecurityTokenServicePreferencesInput
} {
	var calls []struct {
		In1 *iam.SetSecurityTokenServicePreferencesInput
	}
	lockIAMAPIMockSetSecurityTokenServicePreferences.RLock()
	calls = mock.calls.SetSecurityTokenServicePreferences
	lockIAMAPIMockSetSecurityTokenServicePreferences.RUnlock()
	return calls
}

// SetSecurityTokenServicePreferencesRequest calls SetSecurityTokenServicePreferencesRequestFunc.
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesRequest(in1 *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput) {
	if mock.SetSecurityTokenServicePreferencesRequestFunc == nil {
		panic("IAMAPIMock.SetSecurityTokenServicePreferencesRequestFunc: method is nil but IAMAPI.SetSecurityTokenServicePreferencesRequest was just called")
	}
	callInfo := struct {
		In1 *iam.SetSecurityTokenServicePreferencesInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSetSecurityTokenServicePreferencesRequest.Lock()
	mock.calls.SetSecurityTokenServicePreferencesRequest = append(mock.calls.SetSecurityTokenServicePreferencesRequest, callInfo)
	lockIAMAPIMockSetSecurityTokenServicePreferencesRequest.Unlock()
	return mock.SetSecurityTokenServicePreferencesRequestFunc(in1)
}

// SetSecurityTokenServicePreferencesRequestCalls gets all the calls that were made to SetSecurityTokenServicePreferencesRequest.
// Check the length with:
//     len(mockedIAMAPI.SetSecurityTokenServicePreferencesRequestCalls())
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesRequestCalls() []struct {
	In1 *iam.SetSecurityTokenServicePreferencesInput
} {
	var calls []struct {
		In1 *iam.SetSecurityTokenServicePreferencesInput
	}
	lockIAMAPIMockSetSecurityTokenServicePreferencesRequest.RLock()
	calls = mock.calls.SetSecurityTokenServicePreferencesRequest
	lockIAMAPIMockSetSecurityTokenServicePreferencesRequest.RUnlock()
	return calls
}

// SetSecurityTokenServicePreferencesWithContext calls SetSecurityTokenServicePreferencesWithContextFunc.
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesWithContext(in1 context.Context, in2 *iam.SetSecurityTokenServicePreferencesInput, in3 ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	if mock.SetSecurityTokenServicePreferencesWithContextFunc == nil {
		panic("IAMAPIMock.SetSecurityTokenServicePreferencesWithContextFunc: method is nil but IAMAPI.SetSecurityTokenServicePreferencesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.SetSecurityTokenServicePreferencesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockSetSecurityTokenServicePreferencesWithContext.Lock()
	mock.calls.SetSecurityTokenServicePreferencesWithContext = append(mock.calls.SetSecurityTokenServicePreferencesWithContext, callInfo)
	lockIAMAPIMockSetSecurityTokenServicePreferencesWithContext.Unlock()
	return mock.SetSecurityTokenServicePreferencesWithContextFunc(in1, in2, in3...)
}

// SetSecurityTokenServicePreferencesWithContextCalls gets all the calls that were made to SetSecurityTokenServicePreferencesWithContext.
// Check the length with:
//     len(mockedIAMAPI.SetSecurityTokenServicePreferencesWithContextCalls())
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.SetSecurityTokenServicePreferencesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.SetSecurityTokenServicePreferencesInput
		In3 []request.Option
	}
	lockIAMAPIMockSetSecurityTokenServicePreferencesWithContext.RLock()
	calls = mock.calls.SetSecurityTokenServicePreferencesWithContext
	lockIAMAPIMockSetSecurityTokenServicePreferencesWithContext.RUnlock()
	return calls
}

// SimulateCustomPolicy calls SimulateCustomPolicyFunc.
func (mock *IAMAPIMock) SimulateCustomPolicy(in1 *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulateCustomPolicyFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyFunc: method is nil but IAMAPI.SimulateCustomPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.SimulateCustomPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSimulateCustomPolicy.Lock()
	mock.calls.SimulateCustomPolicy = append(mock.calls.SimulateCustomPolicy, callInfo)
	lockIAMAPIMockSimulateCustomPolicy.Unlock()
	return mock.SimulateCustomPolicyFunc(in1)
}

// SimulateCustomPolicyCalls gets all the calls that were made to SimulateCustomPolicy.
// Check the length with:
//     len(mockedIAMAPI.SimulateCustomPolicyCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyCalls() []struct {
	In1 *iam.SimulateCustomPolicyInput
} {
	var calls []struct {
		In1 *iam.SimulateCustomPolicyInput
	}
	lockIAMAPIMockSimulateCustomPolicy.RLock()
	calls = mock.calls.SimulateCustomPolicy
	lockIAMAPIMockSimulateCustomPolicy.RUnlock()
	return calls
}

// SimulateCustomPolicyPages calls SimulateCustomPolicyPagesFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyPages(in1 *iam.SimulateCustomPolicyInput, in2 func(*iam.SimulatePolicyResponse, bool) bool) error {
	if mock.SimulateCustomPolicyPagesFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyPagesFunc: method is nil but IAMAPI.SimulateCustomPolicyPages was just called")
	}
	callInfo := struct {
		In1 *iam.SimulateCustomPolicyInput
		In2 func(*iam.SimulatePolicyResponse, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockSimulateCustomPolicyPages.Lock()
	mock.calls.SimulateCustomPolicyPages = append(mock.calls.SimulateCustomPolicyPages, callInfo)
	lockIAMAPIMockSimulateCustomPolicyPages.Unlock()
	return mock.SimulateCustomPolicyPagesFunc(in1, in2)
}

// SimulateCustomPolicyPagesCalls gets all the calls that were made to SimulateCustomPolicyPages.
// Check the length with:
//     len(mockedIAMAPI.SimulateCustomPolicyPagesCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyPagesCalls() []struct {
	In1 *iam.SimulateCustomPolicyInput
	In2 func(*iam.SimulatePolicyResponse, bool) bool
} {
	var calls []struct {
		In1 *iam.SimulateCustomPolicyInput
		In2 func(*iam.SimulatePolicyResponse, bool) bool
	}
	lockIAMAPIMockSimulateCustomPolicyPages.RLock()
	calls = mock.calls.SimulateCustomPolicyPages
	lockIAMAPIMockSimulateCustomPolicyPages.RUnlock()
	return calls
}

// SimulateCustomPolicyPagesWithContext calls SimulateCustomPolicyPagesWithContextFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyPagesWithContext(in1 context.Context, in2 *iam.SimulateCustomPolicyInput, in3 func(*iam.SimulatePolicyResponse, bool) bool, in4 ...request.Option) error {
	if mock.SimulateCustomPolicyPagesWithContextFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyPagesWithContextFunc: method is nil but IAMAPI.SimulateCustomPolicyPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.SimulateCustomPolicyInput
		In3 func(*iam.SimulatePolicyResponse, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockSimulateCustomPolicyPagesWithContext.Lock()
	mock.calls.SimulateCustomPolicyPagesWithContext = append(mock.calls.SimulateCustomPolicyPagesWithContext, callInfo)
	lockIAMAPIMockSimulateCustomPolicyPagesWithContext.Unlock()
	return mock.SimulateCustomPolicyPagesWithContextFunc(in1, in2, in3, in4...)
}

// SimulateCustomPolicyPagesWithContextCalls gets all the calls that were made to SimulateCustomPolicyPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.SimulateCustomPolicyPagesWithContextCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.SimulateCustomPolicyInput
	In3 func(*iam.SimulatePolicyResponse, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.SimulateCustomPolicyInput
		In3 func(*iam.SimulatePolicyResponse, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockSimulateCustomPolicyPagesWithContext.RLock()
	calls = mock.calls.SimulateCustomPolicyPagesWithContext
	lockIAMAPIMockSimulateCustomPolicyPagesWithContext.RUnlock()
	return calls
}

// SimulateCustomPolicyRequest calls SimulateCustomPolicyRequestFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyRequest(in1 *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	if mock.SimulateCustomPolicyRequestFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyRequestFunc: method is nil but IAMAPI.SimulateCustomPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.SimulateCustomPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSimulateCustomPolicyRequest.Lock()
	mock.calls.SimulateCustomPolicyRequest = append(mock.calls.SimulateCustomPolicyRequest, callInfo)
	lockIAMAPIMockSimulateCustomPolicyRequest.Unlock()
	return mock.SimulateCustomPolicyRequestFunc(in1)
}

// SimulateCustomPolicyRequestCalls gets all the calls that were made to SimulateCustomPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.SimulateCustomPolicyRequestCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyRequestCalls() []struct {
	In1 *iam.SimulateCustomPolicyInput
} {
	var calls []struct {
		In1 *iam.SimulateCustomPolicyInput
	}
	lockIAMAPIMockSimulateCustomPolicyRequest.RLock()
	calls = mock.calls.SimulateCustomPolicyRequest
	lockIAMAPIMockSimulateCustomPolicyRequest.RUnlock()
	return calls
}

// SimulateCustomPolicyWithContext calls SimulateCustomPolicyWithContextFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyWithContext(in1 context.Context, in2 *iam.SimulateCustomPolicyInput, in3 ...request.Option) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulateCustomPolicyWithContextFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyWithContextFunc: method is nil but IAMAPI.SimulateCustomPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.SimulateCustomPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockSimulateCustomPolicyWithContext.Lock()
	mock.calls.SimulateCustomPolicyWithContext = append(mock.calls.SimulateCustomPolicyWithContext, callInfo)
	lockIAMAPIMockSimulateCustomPolicyWithContext.Unlock()
	return mock.SimulateCustomPolicyWithContextFunc(in1, in2, in3...)
}

// SimulateCustomPolicyWithContextCalls gets all the calls that were made to SimulateCustomPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.SimulateCustomPolicyWithContextCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.SimulateCustomPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.SimulateCustomPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockSimulateCustomPolicyWithContext.RLock()
	calls = mock.calls.SimulateCustomPolicyWithContext
	lockIAMAPIMockSimulateCustomPolicyWithContext.RUnlock()
	return calls
}

// SimulatePrincipalPolicy calls SimulatePrincipalPolicyFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicy(in1 *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulatePrincipalPolicyFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyFunc: method is nil but IAMAPI.SimulatePrincipalPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.SimulatePrincipalPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSimulatePrincipalPolicy.Lock()
	mock.calls.SimulatePrincipalPolicy = append(mock.calls.SimulatePrincipalPolicy, callInfo)
	lockIAMAPIMockSimulatePrincipalPolicy.Unlock()
	return mock.SimulatePrincipalPolicyFunc(in1)
}

// SimulatePrincipalPolicyCalls gets all the calls that were made to SimulatePrincipalPolicy.
// Check the length with:
//     len(mockedIAMAPI.SimulatePrincipalPolicyCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyCalls() []struct {
	In1 *iam.SimulatePrincipalPolicyInput
} {
	var calls []struct {
		In1 *iam.SimulatePrincipalPolicyInput
	}
	lockIAMAPIMockSimulatePrincipalPolicy.RLock()
	calls = mock.calls.SimulatePrincipalPolicy
	lockIAMAPIMockSimulatePrincipalPolicy.RUnlock()
	return calls
}

// SimulatePrincipalPolicyPages calls SimulatePrincipalPolicyPagesFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyPages(in1 *iam.SimulatePrincipalPolicyInput, in2 func(*iam.SimulatePolicyResponse, bool) bool) error {
	if mock.SimulatePrincipalPolicyPagesFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyPagesFunc: method is nil but IAMAPI.SimulatePrincipalPolicyPages was just called")
	}
	callInfo := struct {
		In1 *iam.SimulatePrincipalPolicyInput
		In2 func(*iam.SimulatePolicyResponse, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockIAMAPIMockSimulatePrincipalPolicyPages.Lock()
	mock.calls.SimulatePrincipalPolicyPages = append(mock.calls.SimulatePrincipalPolicyPages, callInfo)
	lockIAMAPIMockSimulatePrincipalPolicyPages.Unlock()
	return mock.SimulatePrincipalPolicyPagesFunc(in1, in2)
}

// SimulatePrincipalPolicyPagesCalls gets all the calls that were made to SimulatePrincipalPolicyPages.
// Check the length with:
//     len(mockedIAMAPI.SimulatePrincipalPolicyPagesCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyPagesCalls() []struct {
	In1 *iam.SimulatePrincipalPolicyInput
	In2 func(*iam.SimulatePolicyResponse, bool) bool
} {
	var calls []struct {
		In1 *iam.SimulatePrincipalPolicyInput
		In2 func(*iam.SimulatePolicyResponse, bool) bool
	}
	lockIAMAPIMockSimulatePrincipalPolicyPages.RLock()
	calls = mock.calls.SimulatePrincipalPolicyPages
	lockIAMAPIMockSimulatePrincipalPolicyPages.RUnlock()
	return calls
}

// SimulatePrincipalPolicyPagesWithContext calls SimulatePrincipalPolicyPagesWithContextFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyPagesWithContext(in1 context.Context, in2 *iam.SimulatePrincipalPolicyInput, in3 func(*iam.SimulatePolicyResponse, bool) bool, in4 ...request.Option) error {
	if mock.SimulatePrincipalPolicyPagesWithContextFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyPagesWithContextFunc: method is nil but IAMAPI.SimulatePrincipalPolicyPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.SimulatePrincipalPolicyInput
		In3 func(*iam.SimulatePolicyResponse, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockIAMAPIMockSimulatePrincipalPolicyPagesWithContext.Lock()
	mock.calls.SimulatePrincipalPolicyPagesWithContext = append(mock.calls.SimulatePrincipalPolicyPagesWithContext, callInfo)
	lockIAMAPIMockSimulatePrincipalPolicyPagesWithContext.Unlock()
	return mock.SimulatePrincipalPolicyPagesWithContextFunc(in1, in2, in3, in4...)
}

// SimulatePrincipalPolicyPagesWithContextCalls gets all the calls that were made to SimulatePrincipalPolicyPagesWithContext.
// Check the length with:
//     len(mockedIAMAPI.SimulatePrincipalPolicyPagesWithContextCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.SimulatePrincipalPolicyInput
	In3 func(*iam.SimulatePolicyResponse, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.SimulatePrincipalPolicyInput
		In3 func(*iam.SimulatePolicyResponse, bool) bool
		In4 []request.Option
	}
	lockIAMAPIMockSimulatePrincipalPolicyPagesWithContext.RLock()
	calls = mock.calls.SimulatePrincipalPolicyPagesWithContext
	lockIAMAPIMockSimulatePrincipalPolicyPagesWithContext.RUnlock()
	return calls
}

// SimulatePrincipalPolicyRequest calls SimulatePrincipalPolicyRequestFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyRequest(in1 *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	if mock.SimulatePrincipalPolicyRequestFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyRequestFunc: method is nil but IAMAPI.SimulatePrincipalPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.SimulatePrincipalPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockSimulatePrincipalPolicyRequest.Lock()
	mock.calls.SimulatePrincipalPolicyRequest = append(mock.calls.SimulatePrincipalPolicyRequest, callInfo)
	lockIAMAPIMockSimulatePrincipalPolicyRequest.Unlock()
	return mock.SimulatePrincipalPolicyRequestFunc(in1)
}

// SimulatePrincipalPolicyRequestCalls gets all the calls that were made to SimulatePrincipalPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.SimulatePrincipalPolicyRequestCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyRequestCalls() []struct {
	In1 *iam.SimulatePrincipalPolicyInput
} {
	var calls []struct {
		In1 *iam.SimulatePrincipalPolicyInput
	}
	lockIAMAPIMockSimulatePrincipalPolicyRequest.RLock()
	calls = mock.calls.SimulatePrincipalPolicyRequest
	lockIAMAPIMockSimulatePrincipalPolicyRequest.RUnlock()
	return calls
}

// SimulatePrincipalPolicyWithContext calls SimulatePrincipalPolicyWithContextFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyWithContext(in1 context.Context, in2 *iam.SimulatePrincipalPolicyInput, in3 ...request.Option) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulatePrincipalPolicyWithContextFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyWithContextFunc: method is nil but IAMAPI.SimulatePrincipalPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.SimulatePrincipalPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockSimulatePrincipalPolicyWithContext.Lock()
	mock.calls.SimulatePrincipalPolicyWithContext = append(mock.calls.SimulatePrincipalPolicyWithContext, callInfo)
	lockIAMAPIMockSimulatePrincipalPolicyWithContext.Unlock()
	return mock.SimulatePrincipalPolicyWithContextFunc(in1, in2, in3...)
}

// SimulatePrincipalPolicyWithContextCalls gets all the calls that were made to SimulatePrincipalPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.SimulatePrincipalPolicyWithContextCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.SimulatePrincipalPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.SimulatePrincipalPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockSimulatePrincipalPolicyWithContext.RLock()
	calls = mock.calls.SimulatePrincipalPolicyWithContext
	lockIAMAPIMockSimulatePrincipalPolicyWithContext.RUnlock()
	return calls
}

// TagRole calls TagRoleFunc.
func (mock *IAMAPIMock) TagRole(in1 *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	if mock.TagRoleFunc == nil {
		panic("IAMAPIMock.TagRoleFunc: method is nil but IAMAPI.TagRole was just called")
	}
	callInfo := struct {
		In1 *iam.TagRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockTagRole.Lock()
	mock.calls.TagRole = append(mock.calls.TagRole, callInfo)
	lockIAMAPIMockTagRole.Unlock()
	return mock.TagRoleFunc(in1)
}

// TagRoleCalls gets all the calls that were made to TagRole.
// Check the length with:
//     len(mockedIAMAPI.TagRoleCalls())
func (mock *IAMAPIMock) TagRoleCalls() []struct {
	In1 *iam.TagRoleInput
} {
	var calls []struct {
		In1 *iam.TagRoleInput
	}
	lockIAMAPIMockTagRole.RLock()
	calls = mock.calls.TagRole
	lockIAMAPIMockTagRole.RUnlock()
	return calls
}

// TagRoleRequest calls TagRoleRequestFunc.
func (mock *IAMAPIMock) TagRoleRequest(in1 *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput) {
	if mock.TagRoleRequestFunc == nil {
		panic("IAMAPIMock.TagRoleRequestFunc: method is nil but IAMAPI.TagRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.TagRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockTagRoleRequest.Lock()
	mock.calls.TagRoleRequest = append(mock.calls.TagRoleRequest, callInfo)
	lockIAMAPIMockTagRoleRequest.Unlock()
	return mock.TagRoleRequestFunc(in1)
}

// TagRoleRequestCalls gets all the calls that were made to TagRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.TagRoleRequestCalls())
func (mock *IAMAPIMock) TagRoleRequestCalls() []struct {
	In1 *iam.TagRoleInput
} {
	var calls []struct {
		In1 *iam.TagRoleInput
	}
	lockIAMAPIMockTagRoleRequest.RLock()
	calls = mock.calls.TagRoleRequest
	lockIAMAPIMockTagRoleRequest.RUnlock()
	return calls
}

// TagRoleWithContext calls TagRoleWithContextFunc.
func (mock *IAMAPIMock) TagRoleWithContext(in1 context.Context, in2 *iam.TagRoleInput, in3 ...request.Option) (*iam.TagRoleOutput, error) {
	if mock.TagRoleWithContextFunc == nil {
		panic("IAMAPIMock.TagRoleWithContextFunc: method is nil but IAMAPI.TagRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.TagRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockTagRoleWithContext.Lock()
	mock.calls.TagRoleWithContext = append(mock.calls.TagRoleWithContext, callInfo)
	lockIAMAPIMockTagRoleWithContext.Unlock()
	return mock.TagRoleWithContextFunc(in1, in2, in3...)
}

// TagRoleWithContextCalls gets all the calls that were made to TagRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.TagRoleWithContextCalls())
func (mock *IAMAPIMock) TagRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.TagRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.TagRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockTagRoleWithContext.RLock()
	calls = mock.calls.TagRoleWithContext
	lockIAMAPIMockTagRoleWithContext.RUnlock()
	return calls
}

// TagUser calls TagUserFunc.
func (mock *IAMAPIMock) TagUser(in1 *iam.TagUserInput) (*iam.TagUserOutput, error) {
	if mock.TagUserFunc == nil {
		panic("IAMAPIMock.TagUserFunc: method is nil but IAMAPI.TagUser was just called")
	}
	callInfo := struct {
		In1 *iam.TagUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockTagUser.Lock()
	mock.calls.TagUser = append(mock.calls.TagUser, callInfo)
	lockIAMAPIMockTagUser.Unlock()
	return mock.TagUserFunc(in1)
}

// TagUserCalls gets all the calls that were made to TagUser.
// Check the length with:
//     len(mockedIAMAPI.TagUserCalls())
func (mock *IAMAPIMock) TagUserCalls() []struct {
	In1 *iam.TagUserInput
} {
	var calls []struct {
		In1 *iam.TagUserInput
	}
	lockIAMAPIMockTagUser.RLock()
	calls = mock.calls.TagUser
	lockIAMAPIMockTagUser.RUnlock()
	return calls
}

// TagUserRequest calls TagUserRequestFunc.
func (mock *IAMAPIMock) TagUserRequest(in1 *iam.TagUserInput) (*request.Request, *iam.TagUserOutput) {
	if mock.TagUserRequestFunc == nil {
		panic("IAMAPIMock.TagUserRequestFunc: method is nil but IAMAPI.TagUserRequest was just called")
	}
	callInfo := struct {
		In1 *iam.TagUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockTagUserRequest.Lock()
	mock.calls.TagUserRequest = append(mock.calls.TagUserRequest, callInfo)
	lockIAMAPIMockTagUserRequest.Unlock()
	return mock.TagUserRequestFunc(in1)
}

// TagUserRequestCalls gets all the calls that were made to TagUserRequest.
// Check the length with:
//     len(mockedIAMAPI.TagUserRequestCalls())
func (mock *IAMAPIMock) TagUserRequestCalls() []struct {
	In1 *iam.TagUserInput
} {
	var calls []struct {
		In1 *iam.TagUserInput
	}
	lockIAMAPIMockTagUserRequest.RLock()
	calls = mock.calls.TagUserRequest
	lockIAMAPIMockTagUserRequest.RUnlock()
	return calls
}

// TagUserWithContext calls TagUserWithContextFunc.
func (mock *IAMAPIMock) TagUserWithContext(in1 context.Context, in2 *iam.TagUserInput, in3 ...request.Option) (*iam.TagUserOutput, error) {
	if mock.TagUserWithContextFunc == nil {
		panic("IAMAPIMock.TagUserWithContextFunc: method is nil but IAMAPI.TagUserWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.TagUserInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockTagUserWithContext.Lock()
	mock.calls.TagUserWithContext = append(mock.calls.TagUserWithContext, callInfo)
	lockIAMAPIMockTagUserWithContext.Unlock()
	return mock.TagUserWithContextFunc(in1, in2, in3...)
}

// TagUserWithContextCalls gets all the calls that were made to TagUserWithContext.
// Check the length with:
//     len(mockedIAMAPI.TagUserWithContextCalls())
func (mock *IAMAPIMock) TagUserWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.TagUserInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.TagUserInput
		In3 []request.Option
	}
	lockIAMAPIMockTagUserWithContext.RLock()
	calls = mock.calls.TagUserWithContext
	lockIAMAPIMockTagUserWithContext.RUnlock()
	return calls
}

// UntagRole calls UntagRoleFunc.
func (mock *IAMAPIMock) UntagRole(in1 *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
	if mock.UntagRoleFunc == nil {
		panic("IAMAPIMock.UntagRoleFunc: method is nil but IAMAPI.UntagRole was just called")
	}
	callInfo := struct {
		In1 *iam.UntagRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUntagRole.Lock()
	mock.calls.UntagRole = append(mock.calls.UntagRole, callInfo)
	lockIAMAPIMockUntagRole.Unlock()
	return mock.UntagRoleFunc(in1)
}

// UntagRoleCalls gets all the calls that were made to UntagRole.
// Check the length with:
//     len(mockedIAMAPI.UntagRoleCalls())
func (mock *IAMAPIMock) UntagRoleCalls() []struct {
	In1 *iam.UntagRoleInput
} {
	var calls []struct {
		In1 *iam.UntagRoleInput
	}
	lockIAMAPIMockUntagRole.RLock()
	calls = mock.calls.UntagRole
	lockIAMAPIMockUntagRole.RUnlock()
	return calls
}

// UntagRoleRequest calls UntagRoleRequestFunc.
func (mock *IAMAPIMock) UntagRoleRequest(in1 *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput) {
	if mock.UntagRoleRequestFunc == nil {
		panic("IAMAPIMock.UntagRoleRequestFunc: method is nil but IAMAPI.UntagRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UntagRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUntagRoleRequest.Lock()
	mock.calls.UntagRoleRequest = append(mock.calls.UntagRoleRequest, callInfo)
	lockIAMAPIMockUntagRoleRequest.Unlock()
	return mock.UntagRoleRequestFunc(in1)
}

// UntagRoleRequestCalls gets all the calls that were made to UntagRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.UntagRoleRequestCalls())
func (mock *IAMAPIMock) UntagRoleRequestCalls() []struct {
	In1 *iam.UntagRoleInput
} {
	var calls []struct {
		In1 *iam.UntagRoleInput
	}
	lockIAMAPIMockUntagRoleRequest.RLock()
	calls = mock.calls.UntagRoleRequest
	lockIAMAPIMockUntagRoleRequest.RUnlock()
	return calls
}

// UntagRoleWithContext calls UntagRoleWithContextFunc.
func (mock *IAMAPIMock) UntagRoleWithContext(in1 context.Context, in2 *iam.UntagRoleInput, in3 ...request.Option) (*iam.UntagRoleOutput, error) {
	if mock.UntagRoleWithContextFunc == nil {
		panic("IAMAPIMock.UntagRoleWithContextFunc: method is nil but IAMAPI.UntagRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UntagRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUntagRoleWithContext.Lock()
	mock.calls.UntagRoleWithContext = append(mock.calls.UntagRoleWithContext, callInfo)
	lockIAMAPIMockUntagRoleWithContext.Unlock()
	return mock.UntagRoleWithContextFunc(in1, in2, in3...)
}

// UntagRoleWithContextCalls gets all the calls that were made to UntagRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.UntagRoleWithContextCalls())
func (mock *IAMAPIMock) UntagRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UntagRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UntagRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockUntagRoleWithContext.RLock()
	calls = mock.calls.UntagRoleWithContext
	lockIAMAPIMockUntagRoleWithContext.RUnlock()
	return calls
}

// UntagUser calls UntagUserFunc.
func (mock *IAMAPIMock) UntagUser(in1 *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
	if mock.UntagUserFunc == nil {
		panic("IAMAPIMock.UntagUserFunc: method is nil but IAMAPI.UntagUser was just called")
	}
	callInfo := struct {
		In1 *iam.UntagUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUntagUser.Lock()
	mock.calls.UntagUser = append(mock.calls.UntagUser, callInfo)
	lockIAMAPIMockUntagUser.Unlock()
	return mock.UntagUserFunc(in1)
}

// UntagUserCalls gets all the calls that were made to UntagUser.
// Check the length with:
//     len(mockedIAMAPI.UntagUserCalls())
func (mock *IAMAPIMock) UntagUserCalls() []struct {
	In1 *iam.UntagUserInput
} {
	var calls []struct {
		In1 *iam.UntagUserInput
	}
	lockIAMAPIMockUntagUser.RLock()
	calls = mock.calls.UntagUser
	lockIAMAPIMockUntagUser.RUnlock()
	return calls
}

// UntagUserRequest calls UntagUserRequestFunc.
func (mock *IAMAPIMock) UntagUserRequest(in1 *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput) {
	if mock.UntagUserRequestFunc == nil {
		panic("IAMAPIMock.UntagUserRequestFunc: method is nil but IAMAPI.UntagUserRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UntagUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUntagUserRequest.Lock()
	mock.calls.UntagUserRequest = append(mock.calls.UntagUserRequest, callInfo)
	lockIAMAPIMockUntagUserRequest.Unlock()
	return mock.UntagUserRequestFunc(in1)
}

// UntagUserRequestCalls gets all the calls that were made to UntagUserRequest.
// Check the length with:
//     len(mockedIAMAPI.UntagUserRequestCalls())
func (mock *IAMAPIMock) UntagUserRequestCalls() []struct {
	In1 *iam.UntagUserInput
} {
	var calls []struct {
		In1 *iam.UntagUserInput
	}
	lockIAMAPIMockUntagUserRequest.RLock()
	calls = mock.calls.UntagUserRequest
	lockIAMAPIMockUntagUserRequest.RUnlock()
	return calls
}

// UntagUserWithContext calls UntagUserWithContextFunc.
func (mock *IAMAPIMock) UntagUserWithContext(in1 context.Context, in2 *iam.UntagUserInput, in3 ...request.Option) (*iam.UntagUserOutput, error) {
	if mock.UntagUserWithContextFunc == nil {
		panic("IAMAPIMock.UntagUserWithContextFunc: method is nil but IAMAPI.UntagUserWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UntagUserInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUntagUserWithContext.Lock()
	mock.calls.UntagUserWithContext = append(mock.calls.UntagUserWithContext, callInfo)
	lockIAMAPIMockUntagUserWithContext.Unlock()
	return mock.UntagUserWithContextFunc(in1, in2, in3...)
}

// UntagUserWithContextCalls gets all the calls that were made to UntagUserWithContext.
// Check the length with:
//     len(mockedIAMAPI.UntagUserWithContextCalls())
func (mock *IAMAPIMock) UntagUserWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UntagUserInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UntagUserInput
		In3 []request.Option
	}
	lockIAMAPIMockUntagUserWithContext.RLock()
	calls = mock.calls.UntagUserWithContext
	lockIAMAPIMockUntagUserWithContext.RUnlock()
	return calls
}

// UpdateAccessKey calls UpdateAccessKeyFunc.
func (mock *IAMAPIMock) UpdateAccessKey(in1 *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	if mock.UpdateAccessKeyFunc == nil {
		panic("IAMAPIMock.UpdateAccessKeyFunc: method is nil but IAMAPI.UpdateAccessKey was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateAccessKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateAccessKey.Lock()
	mock.calls.UpdateAccessKey = append(mock.calls.UpdateAccessKey, callInfo)
	lockIAMAPIMockUpdateAccessKey.Unlock()
	return mock.UpdateAccessKeyFunc(in1)
}

// UpdateAccessKeyCalls gets all the calls that were made to UpdateAccessKey.
// Check the length with:
//     len(mockedIAMAPI.UpdateAccessKeyCalls())
func (mock *IAMAPIMock) UpdateAccessKeyCalls() []struct {
	In1 *iam.UpdateAccessKeyInput
} {
	var calls []struct {
		In1 *iam.UpdateAccessKeyInput
	}
	lockIAMAPIMockUpdateAccessKey.RLock()
	calls = mock.calls.UpdateAccessKey
	lockIAMAPIMockUpdateAccessKey.RUnlock()
	return calls
}

// UpdateAccessKeyRequest calls UpdateAccessKeyRequestFunc.
func (mock *IAMAPIMock) UpdateAccessKeyRequest(in1 *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput) {
	if mock.UpdateAccessKeyRequestFunc == nil {
		panic("IAMAPIMock.UpdateAccessKeyRequestFunc: method is nil but IAMAPI.UpdateAccessKeyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateAccessKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateAccessKeyRequest.Lock()
	mock.calls.UpdateAccessKeyRequest = append(mock.calls.UpdateAccessKeyRequest, callInfo)
	lockIAMAPIMockUpdateAccessKeyRequest.Unlock()
	return mock.UpdateAccessKeyRequestFunc(in1)
}

// UpdateAccessKeyRequestCalls gets all the calls that were made to UpdateAccessKeyRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateAccessKeyRequestCalls())
func (mock *IAMAPIMock) UpdateAccessKeyRequestCalls() []struct {
	In1 *iam.UpdateAccessKeyInput
} {
	var calls []struct {
		In1 *iam.UpdateAccessKeyInput
	}
	lockIAMAPIMockUpdateAccessKeyRequest.RLock()
	calls = mock.calls.UpdateAccessKeyRequest
	lockIAMAPIMockUpdateAccessKeyRequest.RUnlock()
	return calls
}

// UpdateAccessKeyWithContext calls UpdateAccessKeyWithContextFunc.
func (mock *IAMAPIMock) UpdateAccessKeyWithContext(in1 context.Context, in2 *iam.UpdateAccessKeyInput, in3 ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
	if mock.UpdateAccessKeyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateAccessKeyWithContextFunc: method is nil but IAMAPI.UpdateAccessKeyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateAccessKeyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateAccessKeyWithContext.Lock()
	mock.calls.UpdateAccessKeyWithContext = append(mock.calls.UpdateAccessKeyWithContext, callInfo)
	lockIAMAPIMockUpdateAccessKeyWithContext.Unlock()
	return mock.UpdateAccessKeyWithContextFunc(in1, in2, in3...)
}

// UpdateAccessKeyWithContextCalls gets all the calls that were made to UpdateAccessKeyWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateAccessKeyWithContextCalls())
func (mock *IAMAPIMock) UpdateAccessKeyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateAccessKeyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateAccessKeyInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateAccessKeyWithContext.RLock()
	calls = mock.calls.UpdateAccessKeyWithContext
	lockIAMAPIMockUpdateAccessKeyWithContext.RUnlock()
	return calls
}

// UpdateAccountPasswordPolicy calls UpdateAccountPasswordPolicyFunc.
func (mock *IAMAPIMock) UpdateAccountPasswordPolicy(in1 *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	if mock.UpdateAccountPasswordPolicyFunc == nil {
		panic("IAMAPIMock.UpdateAccountPasswordPolicyFunc: method is nil but IAMAPI.UpdateAccountPasswordPolicy was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateAccountPasswordPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateAccountPasswordPolicy.Lock()
	mock.calls.UpdateAccountPasswordPolicy = append(mock.calls.UpdateAccountPasswordPolicy, callInfo)
	lockIAMAPIMockUpdateAccountPasswordPolicy.Unlock()
	return mock.UpdateAccountPasswordPolicyFunc(in1)
}

// UpdateAccountPasswordPolicyCalls gets all the calls that were made to UpdateAccountPasswordPolicy.
// Check the length with:
//     len(mockedIAMAPI.UpdateAccountPasswordPolicyCalls())
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyCalls() []struct {
	In1 *iam.UpdateAccountPasswordPolicyInput
} {
	var calls []struct {
		In1 *iam.UpdateAccountPasswordPolicyInput
	}
	lockIAMAPIMockUpdateAccountPasswordPolicy.RLock()
	calls = mock.calls.UpdateAccountPasswordPolicy
	lockIAMAPIMockUpdateAccountPasswordPolicy.RUnlock()
	return calls
}

// UpdateAccountPasswordPolicyRequest calls UpdateAccountPasswordPolicyRequestFunc.
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyRequest(in1 *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput) {
	if mock.UpdateAccountPasswordPolicyRequestFunc == nil {
		panic("IAMAPIMock.UpdateAccountPasswordPolicyRequestFunc: method is nil but IAMAPI.UpdateAccountPasswordPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateAccountPasswordPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateAccountPasswordPolicyRequest.Lock()
	mock.calls.UpdateAccountPasswordPolicyRequest = append(mock.calls.UpdateAccountPasswordPolicyRequest, callInfo)
	lockIAMAPIMockUpdateAccountPasswordPolicyRequest.Unlock()
	return mock.UpdateAccountPasswordPolicyRequestFunc(in1)
}

// UpdateAccountPasswordPolicyRequestCalls gets all the calls that were made to UpdateAccountPasswordPolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateAccountPasswordPolicyRequestCalls())
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyRequestCalls() []struct {
	In1 *iam.UpdateAccountPasswordPolicyInput
} {
	var calls []struct {
		In1 *iam.UpdateAccountPasswordPolicyInput
	}
	lockIAMAPIMockUpdateAccountPasswordPolicyRequest.RLock()
	calls = mock.calls.UpdateAccountPasswordPolicyRequest
	lockIAMAPIMockUpdateAccountPasswordPolicyRequest.RUnlock()
	return calls
}

// UpdateAccountPasswordPolicyWithContext calls UpdateAccountPasswordPolicyWithContextFunc.
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyWithContext(in1 context.Context, in2 *iam.UpdateAccountPasswordPolicyInput, in3 ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	if mock.UpdateAccountPasswordPolicyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateAccountPasswordPolicyWithContextFunc: method is nil but IAMAPI.UpdateAccountPasswordPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateAccountPasswordPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateAccountPasswordPolicyWithContext.Lock()
	mock.calls.UpdateAccountPasswordPolicyWithContext = append(mock.calls.UpdateAccountPasswordPolicyWithContext, callInfo)
	lockIAMAPIMockUpdateAccountPasswordPolicyWithContext.Unlock()
	return mock.UpdateAccountPasswordPolicyWithContextFunc(in1, in2, in3...)
}

// UpdateAccountPasswordPolicyWithContextCalls gets all the calls that were made to UpdateAccountPasswordPolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateAccountPasswordPolicyWithContextCalls())
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateAccountPasswordPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateAccountPasswordPolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateAccountPasswordPolicyWithContext.RLock()
	calls = mock.calls.UpdateAccountPasswordPolicyWithContext
	lockIAMAPIMockUpdateAccountPasswordPolicyWithContext.RUnlock()
	return calls
}

// UpdateAssumeRolePolicy calls UpdateAssumeRolePolicyFunc.
func (mock *IAMAPIMock) UpdateAssumeRolePolicy(in1 *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	if mock.UpdateAssumeRolePolicyFunc == nil {
		panic("IAMAPIMock.UpdateAssumeRolePolicyFunc: method is nil but IAMAPI.UpdateAssumeRolePolicy was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateAssumeRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateAssumeRolePolicy.Lock()
	mock.calls.UpdateAssumeRolePolicy = append(mock.calls.UpdateAssumeRolePolicy, callInfo)
	lockIAMAPIMockUpdateAssumeRolePolicy.Unlock()
	return mock.UpdateAssumeRolePolicyFunc(in1)
}

// UpdateAssumeRolePolicyCalls gets all the calls that were made to UpdateAssumeRolePolicy.
// Check the length with:
//     len(mockedIAMAPI.UpdateAssumeRolePolicyCalls())
func (mock *IAMAPIMock) UpdateAssumeRolePolicyCalls() []struct {
	In1 *iam.UpdateAssumeRolePolicyInput
} {
	var calls []struct {
		In1 *iam.UpdateAssumeRolePolicyInput
	}
	lockIAMAPIMockUpdateAssumeRolePolicy.RLock()
	calls = mock.calls.UpdateAssumeRolePolicy
	lockIAMAPIMockUpdateAssumeRolePolicy.RUnlock()
	return calls
}

// UpdateAssumeRolePolicyRequest calls UpdateAssumeRolePolicyRequestFunc.
func (mock *IAMAPIMock) UpdateAssumeRolePolicyRequest(in1 *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput) {
	if mock.UpdateAssumeRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.UpdateAssumeRolePolicyRequestFunc: method is nil but IAMAPI.UpdateAssumeRolePolicyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateAssumeRolePolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateAssumeRolePolicyRequest.Lock()
	mock.calls.UpdateAssumeRolePolicyRequest = append(mock.calls.UpdateAssumeRolePolicyRequest, callInfo)
	lockIAMAPIMockUpdateAssumeRolePolicyRequest.Unlock()
	return mock.UpdateAssumeRolePolicyRequestFunc(in1)
}

// UpdateAssumeRolePolicyRequestCalls gets all the calls that were made to UpdateAssumeRolePolicyRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateAssumeRolePolicyRequestCalls())
func (mock *IAMAPIMock) UpdateAssumeRolePolicyRequestCalls() []struct {
	In1 *iam.UpdateAssumeRolePolicyInput
} {
	var calls []struct {
		In1 *iam.UpdateAssumeRolePolicyInput
	}
	lockIAMAPIMockUpdateAssumeRolePolicyRequest.RLock()
	calls = mock.calls.UpdateAssumeRolePolicyRequest
	lockIAMAPIMockUpdateAssumeRolePolicyRequest.RUnlock()
	return calls
}

// UpdateAssumeRolePolicyWithContext calls UpdateAssumeRolePolicyWithContextFunc.
func (mock *IAMAPIMock) UpdateAssumeRolePolicyWithContext(in1 context.Context, in2 *iam.UpdateAssumeRolePolicyInput, in3 ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
	if mock.UpdateAssumeRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateAssumeRolePolicyWithContextFunc: method is nil but IAMAPI.UpdateAssumeRolePolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateAssumeRolePolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateAssumeRolePolicyWithContext.Lock()
	mock.calls.UpdateAssumeRolePolicyWithContext = append(mock.calls.UpdateAssumeRolePolicyWithContext, callInfo)
	lockIAMAPIMockUpdateAssumeRolePolicyWithContext.Unlock()
	return mock.UpdateAssumeRolePolicyWithContextFunc(in1, in2, in3...)
}

// UpdateAssumeRolePolicyWithContextCalls gets all the calls that were made to UpdateAssumeRolePolicyWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateAssumeRolePolicyWithContextCalls())
func (mock *IAMAPIMock) UpdateAssumeRolePolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateAssumeRolePolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateAssumeRolePolicyInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateAssumeRolePolicyWithContext.RLock()
	calls = mock.calls.UpdateAssumeRolePolicyWithContext
	lockIAMAPIMockUpdateAssumeRolePolicyWithContext.RUnlock()
	return calls
}

// UpdateGroup calls UpdateGroupFunc.
func (mock *IAMAPIMock) UpdateGroup(in1 *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	if mock.UpdateGroupFunc == nil {
		panic("IAMAPIMock.UpdateGroupFunc: method is nil but IAMAPI.UpdateGroup was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateGroup.Lock()
	mock.calls.UpdateGroup = append(mock.calls.UpdateGroup, callInfo)
	lockIAMAPIMockUpdateGroup.Unlock()
	return mock.UpdateGroupFunc(in1)
}

// UpdateGroupCalls gets all the calls that were made to UpdateGroup.
// Check the length with:
//     len(mockedIAMAPI.UpdateGroupCalls())
func (mock *IAMAPIMock) UpdateGroupCalls() []struct {
	In1 *iam.UpdateGroupInput
} {
	var calls []struct {
		In1 *iam.UpdateGroupInput
	}
	lockIAMAPIMockUpdateGroup.RLock()
	calls = mock.calls.UpdateGroup
	lockIAMAPIMockUpdateGroup.RUnlock()
	return calls
}

// UpdateGroupRequest calls UpdateGroupRequestFunc.
func (mock *IAMAPIMock) UpdateGroupRequest(in1 *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput) {
	if mock.UpdateGroupRequestFunc == nil {
		panic("IAMAPIMock.UpdateGroupRequestFunc: method is nil but IAMAPI.UpdateGroupRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateGroupInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateGroupRequest.Lock()
	mock.calls.UpdateGroupRequest = append(mock.calls.UpdateGroupRequest, callInfo)
	lockIAMAPIMockUpdateGroupRequest.Unlock()
	return mock.UpdateGroupRequestFunc(in1)
}

// UpdateGroupRequestCalls gets all the calls that were made to UpdateGroupRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateGroupRequestCalls())
func (mock *IAMAPIMock) UpdateGroupRequestCalls() []struct {
	In1 *iam.UpdateGroupInput
} {
	var calls []struct {
		In1 *iam.UpdateGroupInput
	}
	lockIAMAPIMockUpdateGroupRequest.RLock()
	calls = mock.calls.UpdateGroupRequest
	lockIAMAPIMockUpdateGroupRequest.RUnlock()
	return calls
}

// UpdateGroupWithContext calls UpdateGroupWithContextFunc.
func (mock *IAMAPIMock) UpdateGroupWithContext(in1 context.Context, in2 *iam.UpdateGroupInput, in3 ...request.Option) (*iam.UpdateGroupOutput, error) {
	if mock.UpdateGroupWithContextFunc == nil {
		panic("IAMAPIMock.UpdateGroupWithContextFunc: method is nil but IAMAPI.UpdateGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateGroupWithContext.Lock()
	mock.calls.UpdateGroupWithContext = append(mock.calls.UpdateGroupWithContext, callInfo)
	lockIAMAPIMockUpdateGroupWithContext.Unlock()
	return mock.UpdateGroupWithContextFunc(in1, in2, in3...)
}

// UpdateGroupWithContextCalls gets all the calls that were made to UpdateGroupWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateGroupWithContextCalls())
func (mock *IAMAPIMock) UpdateGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateGroupInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateGroupWithContext.RLock()
	calls = mock.calls.UpdateGroupWithContext
	lockIAMAPIMockUpdateGroupWithContext.RUnlock()
	return calls
}

// UpdateLoginProfile calls UpdateLoginProfileFunc.
func (mock *IAMAPIMock) UpdateLoginProfile(in1 *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	if mock.UpdateLoginProfileFunc == nil {
		panic("IAMAPIMock.UpdateLoginProfileFunc: method is nil but IAMAPI.UpdateLoginProfile was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateLoginProfile.Lock()
	mock.calls.UpdateLoginProfile = append(mock.calls.UpdateLoginProfile, callInfo)
	lockIAMAPIMockUpdateLoginProfile.Unlock()
	return mock.UpdateLoginProfileFunc(in1)
}

// UpdateLoginProfileCalls gets all the calls that were made to UpdateLoginProfile.
// Check the length with:
//     len(mockedIAMAPI.UpdateLoginProfileCalls())
func (mock *IAMAPIMock) UpdateLoginProfileCalls() []struct {
	In1 *iam.UpdateLoginProfileInput
} {
	var calls []struct {
		In1 *iam.UpdateLoginProfileInput
	}
	lockIAMAPIMockUpdateLoginProfile.RLock()
	calls = mock.calls.UpdateLoginProfile
	lockIAMAPIMockUpdateLoginProfile.RUnlock()
	return calls
}

// UpdateLoginProfileRequest calls UpdateLoginProfileRequestFunc.
func (mock *IAMAPIMock) UpdateLoginProfileRequest(in1 *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput) {
	if mock.UpdateLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.UpdateLoginProfileRequestFunc: method is nil but IAMAPI.UpdateLoginProfileRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateLoginProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateLoginProfileRequest.Lock()
	mock.calls.UpdateLoginProfileRequest = append(mock.calls.UpdateLoginProfileRequest, callInfo)
	lockIAMAPIMockUpdateLoginProfileRequest.Unlock()
	return mock.UpdateLoginProfileRequestFunc(in1)
}

// UpdateLoginProfileRequestCalls gets all the calls that were made to UpdateLoginProfileRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateLoginProfileRequestCalls())
func (mock *IAMAPIMock) UpdateLoginProfileRequestCalls() []struct {
	In1 *iam.UpdateLoginProfileInput
} {
	var calls []struct {
		In1 *iam.UpdateLoginProfileInput
	}
	lockIAMAPIMockUpdateLoginProfileRequest.RLock()
	calls = mock.calls.UpdateLoginProfileRequest
	lockIAMAPIMockUpdateLoginProfileRequest.RUnlock()
	return calls
}

// UpdateLoginProfileWithContext calls UpdateLoginProfileWithContextFunc.
func (mock *IAMAPIMock) UpdateLoginProfileWithContext(in1 context.Context, in2 *iam.UpdateLoginProfileInput, in3 ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
	if mock.UpdateLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.UpdateLoginProfileWithContextFunc: method is nil but IAMAPI.UpdateLoginProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateLoginProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateLoginProfileWithContext.Lock()
	mock.calls.UpdateLoginProfileWithContext = append(mock.calls.UpdateLoginProfileWithContext, callInfo)
	lockIAMAPIMockUpdateLoginProfileWithContext.Unlock()
	return mock.UpdateLoginProfileWithContextFunc(in1, in2, in3...)
}

// UpdateLoginProfileWithContextCalls gets all the calls that were made to UpdateLoginProfileWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateLoginProfileWithContextCalls())
func (mock *IAMAPIMock) UpdateLoginProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateLoginProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateLoginProfileInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateLoginProfileWithContext.RLock()
	calls = mock.calls.UpdateLoginProfileWithContext
	lockIAMAPIMockUpdateLoginProfileWithContext.RUnlock()
	return calls
}

// UpdateOpenIDConnectProviderThumbprint calls UpdateOpenIDConnectProviderThumbprintFunc.
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprint(in1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	if mock.UpdateOpenIDConnectProviderThumbprintFunc == nil {
		panic("IAMAPIMock.UpdateOpenIDConnectProviderThumbprintFunc: method is nil but IAMAPI.UpdateOpenIDConnectProviderThumbprint was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprint.Lock()
	mock.calls.UpdateOpenIDConnectProviderThumbprint = append(mock.calls.UpdateOpenIDConnectProviderThumbprint, callInfo)
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprint.Unlock()
	return mock.UpdateOpenIDConnectProviderThumbprintFunc(in1)
}

// UpdateOpenIDConnectProviderThumbprintCalls gets all the calls that were made to UpdateOpenIDConnectProviderThumbprint.
// Check the length with:
//     len(mockedIAMAPI.UpdateOpenIDConnectProviderThumbprintCalls())
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintCalls() []struct {
	In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
} {
	var calls []struct {
		In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprint.RLock()
	calls = mock.calls.UpdateOpenIDConnectProviderThumbprint
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprint.RUnlock()
	return calls
}

// UpdateOpenIDConnectProviderThumbprintRequest calls UpdateOpenIDConnectProviderThumbprintRequestFunc.
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintRequest(in1 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	if mock.UpdateOpenIDConnectProviderThumbprintRequestFunc == nil {
		panic("IAMAPIMock.UpdateOpenIDConnectProviderThumbprintRequestFunc: method is nil but IAMAPI.UpdateOpenIDConnectProviderThumbprintRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintRequest.Lock()
	mock.calls.UpdateOpenIDConnectProviderThumbprintRequest = append(mock.calls.UpdateOpenIDConnectProviderThumbprintRequest, callInfo)
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintRequest.Unlock()
	return mock.UpdateOpenIDConnectProviderThumbprintRequestFunc(in1)
}

// UpdateOpenIDConnectProviderThumbprintRequestCalls gets all the calls that were made to UpdateOpenIDConnectProviderThumbprintRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateOpenIDConnectProviderThumbprintRequestCalls())
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintRequestCalls() []struct {
	In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
} {
	var calls []struct {
		In1 *iam.UpdateOpenIDConnectProviderThumbprintInput
	}
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintRequest.RLock()
	calls = mock.calls.UpdateOpenIDConnectProviderThumbprintRequest
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintRequest.RUnlock()
	return calls
}

// UpdateOpenIDConnectProviderThumbprintWithContext calls UpdateOpenIDConnectProviderThumbprintWithContextFunc.
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintWithContext(in1 context.Context, in2 *iam.UpdateOpenIDConnectProviderThumbprintInput, in3 ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	if mock.UpdateOpenIDConnectProviderThumbprintWithContextFunc == nil {
		panic("IAMAPIMock.UpdateOpenIDConnectProviderThumbprintWithContextFunc: method is nil but IAMAPI.UpdateOpenIDConnectProviderThumbprintWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateOpenIDConnectProviderThumbprintInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintWithContext.Lock()
	mock.calls.UpdateOpenIDConnectProviderThumbprintWithContext = append(mock.calls.UpdateOpenIDConnectProviderThumbprintWithContext, callInfo)
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintWithContext.Unlock()
	return mock.UpdateOpenIDConnectProviderThumbprintWithContextFunc(in1, in2, in3...)
}

// UpdateOpenIDConnectProviderThumbprintWithContextCalls gets all the calls that were made to UpdateOpenIDConnectProviderThumbprintWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateOpenIDConnectProviderThumbprintWithContextCalls())
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateOpenIDConnectProviderThumbprintInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateOpenIDConnectProviderThumbprintInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintWithContext.RLock()
	calls = mock.calls.UpdateOpenIDConnectProviderThumbprintWithContext
	lockIAMAPIMockUpdateOpenIDConnectProviderThumbprintWithContext.RUnlock()
	return calls
}

// UpdateRole calls UpdateRoleFunc.
func (mock *IAMAPIMock) UpdateRole(in1 *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	if mock.UpdateRoleFunc == nil {
		panic("IAMAPIMock.UpdateRoleFunc: method is nil but IAMAPI.UpdateRole was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateRole.Lock()
	mock.calls.UpdateRole = append(mock.calls.UpdateRole, callInfo)
	lockIAMAPIMockUpdateRole.Unlock()
	return mock.UpdateRoleFunc(in1)
}

// UpdateRoleCalls gets all the calls that were made to UpdateRole.
// Check the length with:
//     len(mockedIAMAPI.UpdateRoleCalls())
func (mock *IAMAPIMock) UpdateRoleCalls() []struct {
	In1 *iam.UpdateRoleInput
} {
	var calls []struct {
		In1 *iam.UpdateRoleInput
	}
	lockIAMAPIMockUpdateRole.RLock()
	calls = mock.calls.UpdateRole
	lockIAMAPIMockUpdateRole.RUnlock()
	return calls
}

// UpdateRoleDescription calls UpdateRoleDescriptionFunc.
func (mock *IAMAPIMock) UpdateRoleDescription(in1 *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	if mock.UpdateRoleDescriptionFunc == nil {
		panic("IAMAPIMock.UpdateRoleDescriptionFunc: method is nil but IAMAPI.UpdateRoleDescription was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateRoleDescriptionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateRoleDescription.Lock()
	mock.calls.UpdateRoleDescription = append(mock.calls.UpdateRoleDescription, callInfo)
	lockIAMAPIMockUpdateRoleDescription.Unlock()
	return mock.UpdateRoleDescriptionFunc(in1)
}

// UpdateRoleDescriptionCalls gets all the calls that were made to UpdateRoleDescription.
// Check the length with:
//     len(mockedIAMAPI.UpdateRoleDescriptionCalls())
func (mock *IAMAPIMock) UpdateRoleDescriptionCalls() []struct {
	In1 *iam.UpdateRoleDescriptionInput
} {
	var calls []struct {
		In1 *iam.UpdateRoleDescriptionInput
	}
	lockIAMAPIMockUpdateRoleDescription.RLock()
	calls = mock.calls.UpdateRoleDescription
	lockIAMAPIMockUpdateRoleDescription.RUnlock()
	return calls
}

// UpdateRoleDescriptionRequest calls UpdateRoleDescriptionRequestFunc.
func (mock *IAMAPIMock) UpdateRoleDescriptionRequest(in1 *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput) {
	if mock.UpdateRoleDescriptionRequestFunc == nil {
		panic("IAMAPIMock.UpdateRoleDescriptionRequestFunc: method is nil but IAMAPI.UpdateRoleDescriptionRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateRoleDescriptionInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateRoleDescriptionRequest.Lock()
	mock.calls.UpdateRoleDescriptionRequest = append(mock.calls.UpdateRoleDescriptionRequest, callInfo)
	lockIAMAPIMockUpdateRoleDescriptionRequest.Unlock()
	return mock.UpdateRoleDescriptionRequestFunc(in1)
}

// UpdateRoleDescriptionRequestCalls gets all the calls that were made to UpdateRoleDescriptionRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateRoleDescriptionRequestCalls())
func (mock *IAMAPIMock) UpdateRoleDescriptionRequestCalls() []struct {
	In1 *iam.UpdateRoleDescriptionInput
} {
	var calls []struct {
		In1 *iam.UpdateRoleDescriptionInput
	}
	lockIAMAPIMockUpdateRoleDescriptionRequest.RLock()
	calls = mock.calls.UpdateRoleDescriptionRequest
	lockIAMAPIMockUpdateRoleDescriptionRequest.RUnlock()
	return calls
}

// UpdateRoleDescriptionWithContext calls UpdateRoleDescriptionWithContextFunc.
func (mock *IAMAPIMock) UpdateRoleDescriptionWithContext(in1 context.Context, in2 *iam.UpdateRoleDescriptionInput, in3 ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
	if mock.UpdateRoleDescriptionWithContextFunc == nil {
		panic("IAMAPIMock.UpdateRoleDescriptionWithContextFunc: method is nil but IAMAPI.UpdateRoleDescriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateRoleDescriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateRoleDescriptionWithContext.Lock()
	mock.calls.UpdateRoleDescriptionWithContext = append(mock.calls.UpdateRoleDescriptionWithContext, callInfo)
	lockIAMAPIMockUpdateRoleDescriptionWithContext.Unlock()
	return mock.UpdateRoleDescriptionWithContextFunc(in1, in2, in3...)
}

// UpdateRoleDescriptionWithContextCalls gets all the calls that were made to UpdateRoleDescriptionWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateRoleDescriptionWithContextCalls())
func (mock *IAMAPIMock) UpdateRoleDescriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateRoleDescriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateRoleDescriptionInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateRoleDescriptionWithContext.RLock()
	calls = mock.calls.UpdateRoleDescriptionWithContext
	lockIAMAPIMockUpdateRoleDescriptionWithContext.RUnlock()
	return calls
}

// UpdateRoleRequest calls UpdateRoleRequestFunc.
func (mock *IAMAPIMock) UpdateRoleRequest(in1 *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput) {
	if mock.UpdateRoleRequestFunc == nil {
		panic("IAMAPIMock.UpdateRoleRequestFunc: method is nil but IAMAPI.UpdateRoleRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateRoleRequest.Lock()
	mock.calls.UpdateRoleRequest = append(mock.calls.UpdateRoleRequest, callInfo)
	lockIAMAPIMockUpdateRoleRequest.Unlock()
	return mock.UpdateRoleRequestFunc(in1)
}

// UpdateRoleRequestCalls gets all the calls that were made to UpdateRoleRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateRoleRequestCalls())
func (mock *IAMAPIMock) UpdateRoleRequestCalls() []struct {
	In1 *iam.UpdateRoleInput
} {
	var calls []struct {
		In1 *iam.UpdateRoleInput
	}
	lockIAMAPIMockUpdateRoleRequest.RLock()
	calls = mock.calls.UpdateRoleRequest
	lockIAMAPIMockUpdateRoleRequest.RUnlock()
	return calls
}

// UpdateRoleWithContext calls UpdateRoleWithContextFunc.
func (mock *IAMAPIMock) UpdateRoleWithContext(in1 context.Context, in2 *iam.UpdateRoleInput, in3 ...request.Option) (*iam.UpdateRoleOutput, error) {
	if mock.UpdateRoleWithContextFunc == nil {
		panic("IAMAPIMock.UpdateRoleWithContextFunc: method is nil but IAMAPI.UpdateRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateRoleWithContext.Lock()
	mock.calls.UpdateRoleWithContext = append(mock.calls.UpdateRoleWithContext, callInfo)
	lockIAMAPIMockUpdateRoleWithContext.Unlock()
	return mock.UpdateRoleWithContextFunc(in1, in2, in3...)
}

// UpdateRoleWithContextCalls gets all the calls that were made to UpdateRoleWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateRoleWithContextCalls())
func (mock *IAMAPIMock) UpdateRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateRoleInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateRoleWithContext.RLock()
	calls = mock.calls.UpdateRoleWithContext
	lockIAMAPIMockUpdateRoleWithContext.RUnlock()
	return calls
}

// UpdateSAMLProvider calls UpdateSAMLProviderFunc.
func (mock *IAMAPIMock) UpdateSAMLProvider(in1 *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	if mock.UpdateSAMLProviderFunc == nil {
		panic("IAMAPIMock.UpdateSAMLProviderFunc: method is nil but IAMAPI.UpdateSAMLProvider was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateSAMLProvider.Lock()
	mock.calls.UpdateSAMLProvider = append(mock.calls.UpdateSAMLProvider, callInfo)
	lockIAMAPIMockUpdateSAMLProvider.Unlock()
	return mock.UpdateSAMLProviderFunc(in1)
}

// UpdateSAMLProviderCalls gets all the calls that were made to UpdateSAMLProvider.
// Check the length with:
//     len(mockedIAMAPI.UpdateSAMLProviderCalls())
func (mock *IAMAPIMock) UpdateSAMLProviderCalls() []struct {
	In1 *iam.UpdateSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.UpdateSAMLProviderInput
	}
	lockIAMAPIMockUpdateSAMLProvider.RLock()
	calls = mock.calls.UpdateSAMLProvider
	lockIAMAPIMockUpdateSAMLProvider.RUnlock()
	return calls
}

// UpdateSAMLProviderRequest calls UpdateSAMLProviderRequestFunc.
func (mock *IAMAPIMock) UpdateSAMLProviderRequest(in1 *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput) {
	if mock.UpdateSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.UpdateSAMLProviderRequestFunc: method is nil but IAMAPI.UpdateSAMLProviderRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateSAMLProviderInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateSAMLProviderRequest.Lock()
	mock.calls.UpdateSAMLProviderRequest = append(mock.calls.UpdateSAMLProviderRequest, callInfo)
	lockIAMAPIMockUpdateSAMLProviderRequest.Unlock()
	return mock.UpdateSAMLProviderRequestFunc(in1)
}

// UpdateSAMLProviderRequestCalls gets all the calls that were made to UpdateSAMLProviderRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateSAMLProviderRequestCalls())
func (mock *IAMAPIMock) UpdateSAMLProviderRequestCalls() []struct {
	In1 *iam.UpdateSAMLProviderInput
} {
	var calls []struct {
		In1 *iam.UpdateSAMLProviderInput
	}
	lockIAMAPIMockUpdateSAMLProviderRequest.RLock()
	calls = mock.calls.UpdateSAMLProviderRequest
	lockIAMAPIMockUpdateSAMLProviderRequest.RUnlock()
	return calls
}

// UpdateSAMLProviderWithContext calls UpdateSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) UpdateSAMLProviderWithContext(in1 context.Context, in2 *iam.UpdateSAMLProviderInput, in3 ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
	if mock.UpdateSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.UpdateSAMLProviderWithContextFunc: method is nil but IAMAPI.UpdateSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateSAMLProviderInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateSAMLProviderWithContext.Lock()
	mock.calls.UpdateSAMLProviderWithContext = append(mock.calls.UpdateSAMLProviderWithContext, callInfo)
	lockIAMAPIMockUpdateSAMLProviderWithContext.Unlock()
	return mock.UpdateSAMLProviderWithContextFunc(in1, in2, in3...)
}

// UpdateSAMLProviderWithContextCalls gets all the calls that were made to UpdateSAMLProviderWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) UpdateSAMLProviderWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateSAMLProviderInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateSAMLProviderInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateSAMLProviderWithContext.RLock()
	calls = mock.calls.UpdateSAMLProviderWithContext
	lockIAMAPIMockUpdateSAMLProviderWithContext.RUnlock()
	return calls
}

// UpdateSSHPublicKey calls UpdateSSHPublicKeyFunc.
func (mock *IAMAPIMock) UpdateSSHPublicKey(in1 *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	if mock.UpdateSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.UpdateSSHPublicKeyFunc: method is nil but IAMAPI.UpdateSSHPublicKey was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateSSHPublicKey.Lock()
	mock.calls.UpdateSSHPublicKey = append(mock.calls.UpdateSSHPublicKey, callInfo)
	lockIAMAPIMockUpdateSSHPublicKey.Unlock()
	return mock.UpdateSSHPublicKeyFunc(in1)
}

// UpdateSSHPublicKeyCalls gets all the calls that were made to UpdateSSHPublicKey.
// Check the length with:
//     len(mockedIAMAPI.UpdateSSHPublicKeyCalls())
func (mock *IAMAPIMock) UpdateSSHPublicKeyCalls() []struct {
	In1 *iam.UpdateSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.UpdateSSHPublicKeyInput
	}
	lockIAMAPIMockUpdateSSHPublicKey.RLock()
	calls = mock.calls.UpdateSSHPublicKey
	lockIAMAPIMockUpdateSSHPublicKey.RUnlock()
	return calls
}

// UpdateSSHPublicKeyRequest calls UpdateSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) UpdateSSHPublicKeyRequest(in1 *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput) {
	if mock.UpdateSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.UpdateSSHPublicKeyRequestFunc: method is nil but IAMAPI.UpdateSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateSSHPublicKeyRequest.Lock()
	mock.calls.UpdateSSHPublicKeyRequest = append(mock.calls.UpdateSSHPublicKeyRequest, callInfo)
	lockIAMAPIMockUpdateSSHPublicKeyRequest.Unlock()
	return mock.UpdateSSHPublicKeyRequestFunc(in1)
}

// UpdateSSHPublicKeyRequestCalls gets all the calls that were made to UpdateSSHPublicKeyRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) UpdateSSHPublicKeyRequestCalls() []struct {
	In1 *iam.UpdateSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.UpdateSSHPublicKeyInput
	}
	lockIAMAPIMockUpdateSSHPublicKeyRequest.RLock()
	calls = mock.calls.UpdateSSHPublicKeyRequest
	lockIAMAPIMockUpdateSSHPublicKeyRequest.RUnlock()
	return calls
}

// UpdateSSHPublicKeyWithContext calls UpdateSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) UpdateSSHPublicKeyWithContext(in1 context.Context, in2 *iam.UpdateSSHPublicKeyInput, in3 ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
	if mock.UpdateSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateSSHPublicKeyWithContextFunc: method is nil but IAMAPI.UpdateSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateSSHPublicKeyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateSSHPublicKeyWithContext.Lock()
	mock.calls.UpdateSSHPublicKeyWithContext = append(mock.calls.UpdateSSHPublicKeyWithContext, callInfo)
	lockIAMAPIMockUpdateSSHPublicKeyWithContext.Unlock()
	return mock.UpdateSSHPublicKeyWithContextFunc(in1, in2, in3...)
}

// UpdateSSHPublicKeyWithContextCalls gets all the calls that were made to UpdateSSHPublicKeyWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) UpdateSSHPublicKeyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateSSHPublicKeyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateSSHPublicKeyInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateSSHPublicKeyWithContext.RLock()
	calls = mock.calls.UpdateSSHPublicKeyWithContext
	lockIAMAPIMockUpdateSSHPublicKeyWithContext.RUnlock()
	return calls
}

// UpdateServerCertificate calls UpdateServerCertificateFunc.
func (mock *IAMAPIMock) UpdateServerCertificate(in1 *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	if mock.UpdateServerCertificateFunc == nil {
		panic("IAMAPIMock.UpdateServerCertificateFunc: method is nil but IAMAPI.UpdateServerCertificate was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateServerCertificate.Lock()
	mock.calls.UpdateServerCertificate = append(mock.calls.UpdateServerCertificate, callInfo)
	lockIAMAPIMockUpdateServerCertificate.Unlock()
	return mock.UpdateServerCertificateFunc(in1)
}

// UpdateServerCertificateCalls gets all the calls that were made to UpdateServerCertificate.
// Check the length with:
//     len(mockedIAMAPI.UpdateServerCertificateCalls())
func (mock *IAMAPIMock) UpdateServerCertificateCalls() []struct {
	In1 *iam.UpdateServerCertificateInput
} {
	var calls []struct {
		In1 *iam.UpdateServerCertificateInput
	}
	lockIAMAPIMockUpdateServerCertificate.RLock()
	calls = mock.calls.UpdateServerCertificate
	lockIAMAPIMockUpdateServerCertificate.RUnlock()
	return calls
}

// UpdateServerCertificateRequest calls UpdateServerCertificateRequestFunc.
func (mock *IAMAPIMock) UpdateServerCertificateRequest(in1 *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput) {
	if mock.UpdateServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.UpdateServerCertificateRequestFunc: method is nil but IAMAPI.UpdateServerCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateServerCertificateRequest.Lock()
	mock.calls.UpdateServerCertificateRequest = append(mock.calls.UpdateServerCertificateRequest, callInfo)
	lockIAMAPIMockUpdateServerCertificateRequest.Unlock()
	return mock.UpdateServerCertificateRequestFunc(in1)
}

// UpdateServerCertificateRequestCalls gets all the calls that were made to UpdateServerCertificateRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateServerCertificateRequestCalls())
func (mock *IAMAPIMock) UpdateServerCertificateRequestCalls() []struct {
	In1 *iam.UpdateServerCertificateInput
} {
	var calls []struct {
		In1 *iam.UpdateServerCertificateInput
	}
	lockIAMAPIMockUpdateServerCertificateRequest.RLock()
	calls = mock.calls.UpdateServerCertificateRequest
	lockIAMAPIMockUpdateServerCertificateRequest.RUnlock()
	return calls
}

// UpdateServerCertificateWithContext calls UpdateServerCertificateWithContextFunc.
func (mock *IAMAPIMock) UpdateServerCertificateWithContext(in1 context.Context, in2 *iam.UpdateServerCertificateInput, in3 ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
	if mock.UpdateServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UpdateServerCertificateWithContextFunc: method is nil but IAMAPI.UpdateServerCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateServerCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateServerCertificateWithContext.Lock()
	mock.calls.UpdateServerCertificateWithContext = append(mock.calls.UpdateServerCertificateWithContext, callInfo)
	lockIAMAPIMockUpdateServerCertificateWithContext.Unlock()
	return mock.UpdateServerCertificateWithContextFunc(in1, in2, in3...)
}

// UpdateServerCertificateWithContextCalls gets all the calls that were made to UpdateServerCertificateWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateServerCertificateWithContextCalls())
func (mock *IAMAPIMock) UpdateServerCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateServerCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateServerCertificateInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateServerCertificateWithContext.RLock()
	calls = mock.calls.UpdateServerCertificateWithContext
	lockIAMAPIMockUpdateServerCertificateWithContext.RUnlock()
	return calls
}

// UpdateServiceSpecificCredential calls UpdateServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) UpdateServiceSpecificCredential(in1 *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	if mock.UpdateServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.UpdateServiceSpecificCredentialFunc: method is nil but IAMAPI.UpdateServiceSpecificCredential was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateServiceSpecificCredential.Lock()
	mock.calls.UpdateServiceSpecificCredential = append(mock.calls.UpdateServiceSpecificCredential, callInfo)
	lockIAMAPIMockUpdateServiceSpecificCredential.Unlock()
	return mock.UpdateServiceSpecificCredentialFunc(in1)
}

// UpdateServiceSpecificCredentialCalls gets all the calls that were made to UpdateServiceSpecificCredential.
// Check the length with:
//     len(mockedIAMAPI.UpdateServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialCalls() []struct {
	In1 *iam.UpdateServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.UpdateServiceSpecificCredentialInput
	}
	lockIAMAPIMockUpdateServiceSpecificCredential.RLock()
	calls = mock.calls.UpdateServiceSpecificCredential
	lockIAMAPIMockUpdateServiceSpecificCredential.RUnlock()
	return calls
}

// UpdateServiceSpecificCredentialRequest calls UpdateServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialRequest(in1 *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput) {
	if mock.UpdateServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.UpdateServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.UpdateServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateServiceSpecificCredentialInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateServiceSpecificCredentialRequest.Lock()
	mock.calls.UpdateServiceSpecificCredentialRequest = append(mock.calls.UpdateServiceSpecificCredentialRequest, callInfo)
	lockIAMAPIMockUpdateServiceSpecificCredentialRequest.Unlock()
	return mock.UpdateServiceSpecificCredentialRequestFunc(in1)
}

// UpdateServiceSpecificCredentialRequestCalls gets all the calls that were made to UpdateServiceSpecificCredentialRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialRequestCalls() []struct {
	In1 *iam.UpdateServiceSpecificCredentialInput
} {
	var calls []struct {
		In1 *iam.UpdateServiceSpecificCredentialInput
	}
	lockIAMAPIMockUpdateServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.UpdateServiceSpecificCredentialRequest
	lockIAMAPIMockUpdateServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// UpdateServiceSpecificCredentialWithContext calls UpdateServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialWithContext(in1 context.Context, in2 *iam.UpdateServiceSpecificCredentialInput, in3 ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	if mock.UpdateServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.UpdateServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.UpdateServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateServiceSpecificCredentialInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateServiceSpecificCredentialWithContext.Lock()
	mock.calls.UpdateServiceSpecificCredentialWithContext = append(mock.calls.UpdateServiceSpecificCredentialWithContext, callInfo)
	lockIAMAPIMockUpdateServiceSpecificCredentialWithContext.Unlock()
	return mock.UpdateServiceSpecificCredentialWithContextFunc(in1, in2, in3...)
}

// UpdateServiceSpecificCredentialWithContextCalls gets all the calls that were made to UpdateServiceSpecificCredentialWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateServiceSpecificCredentialInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateServiceSpecificCredentialInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.UpdateServiceSpecificCredentialWithContext
	lockIAMAPIMockUpdateServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// UpdateSigningCertificate calls UpdateSigningCertificateFunc.
func (mock *IAMAPIMock) UpdateSigningCertificate(in1 *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	if mock.UpdateSigningCertificateFunc == nil {
		panic("IAMAPIMock.UpdateSigningCertificateFunc: method is nil but IAMAPI.UpdateSigningCertificate was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateSigningCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateSigningCertificate.Lock()
	mock.calls.UpdateSigningCertificate = append(mock.calls.UpdateSigningCertificate, callInfo)
	lockIAMAPIMockUpdateSigningCertificate.Unlock()
	return mock.UpdateSigningCertificateFunc(in1)
}

// UpdateSigningCertificateCalls gets all the calls that were made to UpdateSigningCertificate.
// Check the length with:
//     len(mockedIAMAPI.UpdateSigningCertificateCalls())
func (mock *IAMAPIMock) UpdateSigningCertificateCalls() []struct {
	In1 *iam.UpdateSigningCertificateInput
} {
	var calls []struct {
		In1 *iam.UpdateSigningCertificateInput
	}
	lockIAMAPIMockUpdateSigningCertificate.RLock()
	calls = mock.calls.UpdateSigningCertificate
	lockIAMAPIMockUpdateSigningCertificate.RUnlock()
	return calls
}

// UpdateSigningCertificateRequest calls UpdateSigningCertificateRequestFunc.
func (mock *IAMAPIMock) UpdateSigningCertificateRequest(in1 *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput) {
	if mock.UpdateSigningCertificateRequestFunc == nil {
		panic("IAMAPIMock.UpdateSigningCertificateRequestFunc: method is nil but IAMAPI.UpdateSigningCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateSigningCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateSigningCertificateRequest.Lock()
	mock.calls.UpdateSigningCertificateRequest = append(mock.calls.UpdateSigningCertificateRequest, callInfo)
	lockIAMAPIMockUpdateSigningCertificateRequest.Unlock()
	return mock.UpdateSigningCertificateRequestFunc(in1)
}

// UpdateSigningCertificateRequestCalls gets all the calls that were made to UpdateSigningCertificateRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateSigningCertificateRequestCalls())
func (mock *IAMAPIMock) UpdateSigningCertificateRequestCalls() []struct {
	In1 *iam.UpdateSigningCertificateInput
} {
	var calls []struct {
		In1 *iam.UpdateSigningCertificateInput
	}
	lockIAMAPIMockUpdateSigningCertificateRequest.RLock()
	calls = mock.calls.UpdateSigningCertificateRequest
	lockIAMAPIMockUpdateSigningCertificateRequest.RUnlock()
	return calls
}

// UpdateSigningCertificateWithContext calls UpdateSigningCertificateWithContextFunc.
func (mock *IAMAPIMock) UpdateSigningCertificateWithContext(in1 context.Context, in2 *iam.UpdateSigningCertificateInput, in3 ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
	if mock.UpdateSigningCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UpdateSigningCertificateWithContextFunc: method is nil but IAMAPI.UpdateSigningCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateSigningCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateSigningCertificateWithContext.Lock()
	mock.calls.UpdateSigningCertificateWithContext = append(mock.calls.UpdateSigningCertificateWithContext, callInfo)
	lockIAMAPIMockUpdateSigningCertificateWithContext.Unlock()
	return mock.UpdateSigningCertificateWithContextFunc(in1, in2, in3...)
}

// UpdateSigningCertificateWithContextCalls gets all the calls that were made to UpdateSigningCertificateWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateSigningCertificateWithContextCalls())
func (mock *IAMAPIMock) UpdateSigningCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateSigningCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateSigningCertificateInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateSigningCertificateWithContext.RLock()
	calls = mock.calls.UpdateSigningCertificateWithContext
	lockIAMAPIMockUpdateSigningCertificateWithContext.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *IAMAPIMock) UpdateUser(in1 *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	if mock.UpdateUserFunc == nil {
		panic("IAMAPIMock.UpdateUserFunc: method is nil but IAMAPI.UpdateUser was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	lockIAMAPIMockUpdateUser.Unlock()
	return mock.UpdateUserFunc(in1)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedIAMAPI.UpdateUserCalls())
func (mock *IAMAPIMock) UpdateUserCalls() []struct {
	In1 *iam.UpdateUserInput
} {
	var calls []struct {
		In1 *iam.UpdateUserInput
	}
	lockIAMAPIMockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	lockIAMAPIMockUpdateUser.RUnlock()
	return calls
}

// UpdateUserRequest calls UpdateUserRequestFunc.
func (mock *IAMAPIMock) UpdateUserRequest(in1 *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput) {
	if mock.UpdateUserRequestFunc == nil {
		panic("IAMAPIMock.UpdateUserRequestFunc: method is nil but IAMAPI.UpdateUserRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UpdateUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUpdateUserRequest.Lock()
	mock.calls.UpdateUserRequest = append(mock.calls.UpdateUserRequest, callInfo)
	lockIAMAPIMockUpdateUserRequest.Unlock()
	return mock.UpdateUserRequestFunc(in1)
}

// UpdateUserRequestCalls gets all the calls that were made to UpdateUserRequest.
// Check the length with:
//     len(mockedIAMAPI.UpdateUserRequestCalls())
func (mock *IAMAPIMock) UpdateUserRequestCalls() []struct {
	In1 *iam.UpdateUserInput
} {
	var calls []struct {
		In1 *iam.UpdateUserInput
	}
	lockIAMAPIMockUpdateUserRequest.RLock()
	calls = mock.calls.UpdateUserRequest
	lockIAMAPIMockUpdateUserRequest.RUnlock()
	return calls
}

// UpdateUserWithContext calls UpdateUserWithContextFunc.
func (mock *IAMAPIMock) UpdateUserWithContext(in1 context.Context, in2 *iam.UpdateUserInput, in3 ...request.Option) (*iam.UpdateUserOutput, error) {
	if mock.UpdateUserWithContextFunc == nil {
		panic("IAMAPIMock.UpdateUserWithContextFunc: method is nil but IAMAPI.UpdateUserWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UpdateUserInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUpdateUserWithContext.Lock()
	mock.calls.UpdateUserWithContext = append(mock.calls.UpdateUserWithContext, callInfo)
	lockIAMAPIMockUpdateUserWithContext.Unlock()
	return mock.UpdateUserWithContextFunc(in1, in2, in3...)
}

// UpdateUserWithContextCalls gets all the calls that were made to UpdateUserWithContext.
// Check the length with:
//     len(mockedIAMAPI.UpdateUserWithContextCalls())
func (mock *IAMAPIMock) UpdateUserWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UpdateUserInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UpdateUserInput
		In3 []request.Option
	}
	lockIAMAPIMockUpdateUserWithContext.RLock()
	calls = mock.calls.UpdateUserWithContext
	lockIAMAPIMockUpdateUserWithContext.RUnlock()
	return calls
}

// UploadSSHPublicKey calls UploadSSHPublicKeyFunc.
func (mock *IAMAPIMock) UploadSSHPublicKey(in1 *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	if mock.UploadSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.UploadSSHPublicKeyFunc: method is nil but IAMAPI.UploadSSHPublicKey was just called")
	}
	callInfo := struct {
		In1 *iam.UploadSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUploadSSHPublicKey.Lock()
	mock.calls.UploadSSHPublicKey = append(mock.calls.UploadSSHPublicKey, callInfo)
	lockIAMAPIMockUploadSSHPublicKey.Unlock()
	return mock.UploadSSHPublicKeyFunc(in1)
}

// UploadSSHPublicKeyCalls gets all the calls that were made to UploadSSHPublicKey.
// Check the length with:
//     len(mockedIAMAPI.UploadSSHPublicKeyCalls())
func (mock *IAMAPIMock) UploadSSHPublicKeyCalls() []struct {
	In1 *iam.UploadSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.UploadSSHPublicKeyInput
	}
	lockIAMAPIMockUploadSSHPublicKey.RLock()
	calls = mock.calls.UploadSSHPublicKey
	lockIAMAPIMockUploadSSHPublicKey.RUnlock()
	return calls
}

// UploadSSHPublicKeyRequest calls UploadSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) UploadSSHPublicKeyRequest(in1 *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput) {
	if mock.UploadSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.UploadSSHPublicKeyRequestFunc: method is nil but IAMAPI.UploadSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UploadSSHPublicKeyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUploadSSHPublicKeyRequest.Lock()
	mock.calls.UploadSSHPublicKeyRequest = append(mock.calls.UploadSSHPublicKeyRequest, callInfo)
	lockIAMAPIMockUploadSSHPublicKeyRequest.Unlock()
	return mock.UploadSSHPublicKeyRequestFunc(in1)
}

// UploadSSHPublicKeyRequestCalls gets all the calls that were made to UploadSSHPublicKeyRequest.
// Check the length with:
//     len(mockedIAMAPI.UploadSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) UploadSSHPublicKeyRequestCalls() []struct {
	In1 *iam.UploadSSHPublicKeyInput
} {
	var calls []struct {
		In1 *iam.UploadSSHPublicKeyInput
	}
	lockIAMAPIMockUploadSSHPublicKeyRequest.RLock()
	calls = mock.calls.UploadSSHPublicKeyRequest
	lockIAMAPIMockUploadSSHPublicKeyRequest.RUnlock()
	return calls
}

// UploadSSHPublicKeyWithContext calls UploadSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) UploadSSHPublicKeyWithContext(in1 context.Context, in2 *iam.UploadSSHPublicKeyInput, in3 ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
	if mock.UploadSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.UploadSSHPublicKeyWithContextFunc: method is nil but IAMAPI.UploadSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UploadSSHPublicKeyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUploadSSHPublicKeyWithContext.Lock()
	mock.calls.UploadSSHPublicKeyWithContext = append(mock.calls.UploadSSHPublicKeyWithContext, callInfo)
	lockIAMAPIMockUploadSSHPublicKeyWithContext.Unlock()
	return mock.UploadSSHPublicKeyWithContextFunc(in1, in2, in3...)
}

// UploadSSHPublicKeyWithContextCalls gets all the calls that were made to UploadSSHPublicKeyWithContext.
// Check the length with:
//     len(mockedIAMAPI.UploadSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) UploadSSHPublicKeyWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UploadSSHPublicKeyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UploadSSHPublicKeyInput
		In3 []request.Option
	}
	lockIAMAPIMockUploadSSHPublicKeyWithContext.RLock()
	calls = mock.calls.UploadSSHPublicKeyWithContext
	lockIAMAPIMockUploadSSHPublicKeyWithContext.RUnlock()
	return calls
}

// UploadServerCertificate calls UploadServerCertificateFunc.
func (mock *IAMAPIMock) UploadServerCertificate(in1 *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	if mock.UploadServerCertificateFunc == nil {
		panic("IAMAPIMock.UploadServerCertificateFunc: method is nil but IAMAPI.UploadServerCertificate was just called")
	}
	callInfo := struct {
		In1 *iam.UploadServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUploadServerCertificate.Lock()
	mock.calls.UploadServerCertificate = append(mock.calls.UploadServerCertificate, callInfo)
	lockIAMAPIMockUploadServerCertificate.Unlock()
	return mock.UploadServerCertificateFunc(in1)
}

// UploadServerCertificateCalls gets all the calls that were made to UploadServerCertificate.
// Check the length with:
//     len(mockedIAMAPI.UploadServerCertificateCalls())
func (mock *IAMAPIMock) UploadServerCertificateCalls() []struct {
	In1 *iam.UploadServerCertificateInput
} {
	var calls []struct {
		In1 *iam.UploadServerCertificateInput
	}
	lockIAMAPIMockUploadServerCertificate.RLock()
	calls = mock.calls.UploadServerCertificate
	lockIAMAPIMockUploadServerCertificate.RUnlock()
	return calls
}

// UploadServerCertificateRequest calls UploadServerCertificateRequestFunc.
func (mock *IAMAPIMock) UploadServerCertificateRequest(in1 *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput) {
	if mock.UploadServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.UploadServerCertificateRequestFunc: method is nil but IAMAPI.UploadServerCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UploadServerCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUploadServerCertificateRequest.Lock()
	mock.calls.UploadServerCertificateRequest = append(mock.calls.UploadServerCertificateRequest, callInfo)
	lockIAMAPIMockUploadServerCertificateRequest.Unlock()
	return mock.UploadServerCertificateRequestFunc(in1)
}

// UploadServerCertificateRequestCalls gets all the calls that were made to UploadServerCertificateRequest.
// Check the length with:
//     len(mockedIAMAPI.UploadServerCertificateRequestCalls())
func (mock *IAMAPIMock) UploadServerCertificateRequestCalls() []struct {
	In1 *iam.UploadServerCertificateInput
} {
	var calls []struct {
		In1 *iam.UploadServerCertificateInput
	}
	lockIAMAPIMockUploadServerCertificateRequest.RLock()
	calls = mock.calls.UploadServerCertificateRequest
	lockIAMAPIMockUploadServerCertificateRequest.RUnlock()
	return calls
}

// UploadServerCertificateWithContext calls UploadServerCertificateWithContextFunc.
func (mock *IAMAPIMock) UploadServerCertificateWithContext(in1 context.Context, in2 *iam.UploadServerCertificateInput, in3 ...request.Option) (*iam.UploadServerCertificateOutput, error) {
	if mock.UploadServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UploadServerCertificateWithContextFunc: method is nil but IAMAPI.UploadServerCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UploadServerCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUploadServerCertificateWithContext.Lock()
	mock.calls.UploadServerCertificateWithContext = append(mock.calls.UploadServerCertificateWithContext, callInfo)
	lockIAMAPIMockUploadServerCertificateWithContext.Unlock()
	return mock.UploadServerCertificateWithContextFunc(in1, in2, in3...)
}

// UploadServerCertificateWithContextCalls gets all the calls that were made to UploadServerCertificateWithContext.
// Check the length with:
//     len(mockedIAMAPI.UploadServerCertificateWithContextCalls())
func (mock *IAMAPIMock) UploadServerCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UploadServerCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UploadServerCertificateInput
		In3 []request.Option
	}
	lockIAMAPIMockUploadServerCertificateWithContext.RLock()
	calls = mock.calls.UploadServerCertificateWithContext
	lockIAMAPIMockUploadServerCertificateWithContext.RUnlock()
	return calls
}

// UploadSigningCertificate calls UploadSigningCertificateFunc.
func (mock *IAMAPIMock) UploadSigningCertificate(in1 *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	if mock.UploadSigningCertificateFunc == nil {
		panic("IAMAPIMock.UploadSigningCertificateFunc: method is nil but IAMAPI.UploadSigningCertificate was just called")
	}
	callInfo := struct {
		In1 *iam.UploadSigningCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUploadSigningCertificate.Lock()
	mock.calls.UploadSigningCertificate = append(mock.calls.UploadSigningCertificate, callInfo)
	lockIAMAPIMockUploadSigningCertificate.Unlock()
	return mock.UploadSigningCertificateFunc(in1)
}

// UploadSigningCertificateCalls gets all the calls that were made to UploadSigningCertificate.
// Check the length with:
//     len(mockedIAMAPI.UploadSigningCertificateCalls())
func (mock *IAMAPIMock) UploadSigningCertificateCalls() []struct {
	In1 *iam.UploadSigningCertificateInput
} {
	var calls []struct {
		In1 *iam.UploadSigningCertificateInput
	}
	lockIAMAPIMockUploadSigningCertificate.RLock()
	calls = mock.calls.UploadSigningCertificate
	lockIAMAPIMockUploadSigningCertificate.RUnlock()
	return calls
}

// UploadSigningCertificateRequest calls UploadSigningCertificateRequestFunc.
func (mock *IAMAPIMock) UploadSigningCertificateRequest(in1 *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput) {
	if mock.UploadSigningCertificateRequestFunc == nil {
		panic("IAMAPIMock.UploadSigningCertificateRequestFunc: method is nil but IAMAPI.UploadSigningCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *iam.UploadSigningCertificateInput
	}{
		In1: in1,
	}
	lockIAMAPIMockUploadSigningCertificateRequest.Lock()
	mock.calls.UploadSigningCertificateRequest = append(mock.calls.UploadSigningCertificateRequest, callInfo)
	lockIAMAPIMockUploadSigningCertificateRequest.Unlock()
	return mock.UploadSigningCertificateRequestFunc(in1)
}

// UploadSigningCertificateRequestCalls gets all the calls that were made to UploadSigningCertificateRequest.
// Check the length with:
//     len(mockedIAMAPI.UploadSigningCertificateRequestCalls())
func (mock *IAMAPIMock) UploadSigningCertificateRequestCalls() []struct {
	In1 *iam.UploadSigningCertificateInput
} {
	var calls []struct {
		In1 *iam.UploadSigningCertificateInput
	}
	lockIAMAPIMockUploadSigningCertificateRequest.RLock()
	calls = mock.calls.UploadSigningCertificateRequest
	lockIAMAPIMockUploadSigningCertificateRequest.RUnlock()
	return calls
}

// UploadSigningCertificateWithContext calls UploadSigningCertificateWithContextFunc.
func (mock *IAMAPIMock) UploadSigningCertificateWithContext(in1 context.Context, in2 *iam.UploadSigningCertificateInput, in3 ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
	if mock.UploadSigningCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UploadSigningCertificateWithContextFunc: method is nil but IAMAPI.UploadSigningCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.UploadSigningCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockUploadSigningCertificateWithContext.Lock()
	mock.calls.UploadSigningCertificateWithContext = append(mock.calls.UploadSigningCertificateWithContext, callInfo)
	lockIAMAPIMockUploadSigningCertificateWithContext.Unlock()
	return mock.UploadSigningCertificateWithContextFunc(in1, in2, in3...)
}

// UploadSigningCertificateWithContextCalls gets all the calls that were made to UploadSigningCertificateWithContext.
// Check the length with:
//     len(mockedIAMAPI.UploadSigningCertificateWithContextCalls())
func (mock *IAMAPIMock) UploadSigningCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.UploadSigningCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.UploadSigningCertificateInput
		In3 []request.Option
	}
	lockIAMAPIMockUploadSigningCertificateWithContext.RLock()
	calls = mock.calls.UploadSigningCertificateWithContext
	lockIAMAPIMockUploadSigningCertificateWithContext.RUnlock()
	return calls
}

// WaitUntilInstanceProfileExists calls WaitUntilInstanceProfileExistsFunc.
func (mock *IAMAPIMock) WaitUntilInstanceProfileExists(in1 *iam.GetInstanceProfileInput) error {
	if mock.WaitUntilInstanceProfileExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilInstanceProfileExistsFunc: method is nil but IAMAPI.WaitUntilInstanceProfileExists was just called")
	}
	callInfo := struct {
		In1 *iam.GetInstanceProfileInput
	}{
		In1: in1,
	}
	lockIAMAPIMockWaitUntilInstanceProfileExists.Lock()
	mock.calls.WaitUntilInstanceProfileExists = append(mock.calls.WaitUntilInstanceProfileExists, callInfo)
	lockIAMAPIMockWaitUntilInstanceProfileExists.Unlock()
	return mock.WaitUntilInstanceProfileExistsFunc(in1)
}

// WaitUntilInstanceProfileExistsCalls gets all the calls that were made to WaitUntilInstanceProfileExists.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilInstanceProfileExistsCalls())
func (mock *IAMAPIMock) WaitUntilInstanceProfileExistsCalls() []struct {
	In1 *iam.GetInstanceProfileInput
} {
	var calls []struct {
		In1 *iam.GetInstanceProfileInput
	}
	lockIAMAPIMockWaitUntilInstanceProfileExists.RLock()
	calls = mock.calls.WaitUntilInstanceProfileExists
	lockIAMAPIMockWaitUntilInstanceProfileExists.RUnlock()
	return calls
}

// WaitUntilInstanceProfileExistsWithContext calls WaitUntilInstanceProfileExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilInstanceProfileExistsWithContext(in1 context.Context, in2 *iam.GetInstanceProfileInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilInstanceProfileExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilInstanceProfileExistsWithContextFunc: method is nil but IAMAPI.WaitUntilInstanceProfileExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetInstanceProfileInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockWaitUntilInstanceProfileExistsWithContext.Lock()
	mock.calls.WaitUntilInstanceProfileExistsWithContext = append(mock.calls.WaitUntilInstanceProfileExistsWithContext, callInfo)
	lockIAMAPIMockWaitUntilInstanceProfileExistsWithContext.Unlock()
	return mock.WaitUntilInstanceProfileExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilInstanceProfileExistsWithContextCalls gets all the calls that were made to WaitUntilInstanceProfileExistsWithContext.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilInstanceProfileExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilInstanceProfileExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetInstanceProfileInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetInstanceProfileInput
		In3 []request.WaiterOption
	}
	lockIAMAPIMockWaitUntilInstanceProfileExistsWithContext.RLock()
	calls = mock.calls.WaitUntilInstanceProfileExistsWithContext
	lockIAMAPIMockWaitUntilInstanceProfileExistsWithContext.RUnlock()
	return calls
}

// WaitUntilPolicyExists calls WaitUntilPolicyExistsFunc.
func (mock *IAMAPIMock) WaitUntilPolicyExists(in1 *iam.GetPolicyInput) error {
	if mock.WaitUntilPolicyExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilPolicyExistsFunc: method is nil but IAMAPI.WaitUntilPolicyExists was just called")
	}
	callInfo := struct {
		In1 *iam.GetPolicyInput
	}{
		In1: in1,
	}
	lockIAMAPIMockWaitUntilPolicyExists.Lock()
	mock.calls.WaitUntilPolicyExists = append(mock.calls.WaitUntilPolicyExists, callInfo)
	lockIAMAPIMockWaitUntilPolicyExists.Unlock()
	return mock.WaitUntilPolicyExistsFunc(in1)
}

// WaitUntilPolicyExistsCalls gets all the calls that were made to WaitUntilPolicyExists.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilPolicyExistsCalls())
func (mock *IAMAPIMock) WaitUntilPolicyExistsCalls() []struct {
	In1 *iam.GetPolicyInput
} {
	var calls []struct {
		In1 *iam.GetPolicyInput
	}
	lockIAMAPIMockWaitUntilPolicyExists.RLock()
	calls = mock.calls.WaitUntilPolicyExists
	lockIAMAPIMockWaitUntilPolicyExists.RUnlock()
	return calls
}

// WaitUntilPolicyExistsWithContext calls WaitUntilPolicyExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilPolicyExistsWithContext(in1 context.Context, in2 *iam.GetPolicyInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilPolicyExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilPolicyExistsWithContextFunc: method is nil but IAMAPI.WaitUntilPolicyExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetPolicyInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockWaitUntilPolicyExistsWithContext.Lock()
	mock.calls.WaitUntilPolicyExistsWithContext = append(mock.calls.WaitUntilPolicyExistsWithContext, callInfo)
	lockIAMAPIMockWaitUntilPolicyExistsWithContext.Unlock()
	return mock.WaitUntilPolicyExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilPolicyExistsWithContextCalls gets all the calls that were made to WaitUntilPolicyExistsWithContext.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilPolicyExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilPolicyExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetPolicyInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetPolicyInput
		In3 []request.WaiterOption
	}
	lockIAMAPIMockWaitUntilPolicyExistsWithContext.RLock()
	calls = mock.calls.WaitUntilPolicyExistsWithContext
	lockIAMAPIMockWaitUntilPolicyExistsWithContext.RUnlock()
	return calls
}

// WaitUntilRoleExists calls WaitUntilRoleExistsFunc.
func (mock *IAMAPIMock) WaitUntilRoleExists(in1 *iam.GetRoleInput) error {
	if mock.WaitUntilRoleExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilRoleExistsFunc: method is nil but IAMAPI.WaitUntilRoleExists was just called")
	}
	callInfo := struct {
		In1 *iam.GetRoleInput
	}{
		In1: in1,
	}
	lockIAMAPIMockWaitUntilRoleExists.Lock()
	mock.calls.WaitUntilRoleExists = append(mock.calls.WaitUntilRoleExists, callInfo)
	lockIAMAPIMockWaitUntilRoleExists.Unlock()
	return mock.WaitUntilRoleExistsFunc(in1)
}

// WaitUntilRoleExistsCalls gets all the calls that were made to WaitUntilRoleExists.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilRoleExistsCalls())
func (mock *IAMAPIMock) WaitUntilRoleExistsCalls() []struct {
	In1 *iam.GetRoleInput
} {
	var calls []struct {
		In1 *iam.GetRoleInput
	}
	lockIAMAPIMockWaitUntilRoleExists.RLock()
	calls = mock.calls.WaitUntilRoleExists
	lockIAMAPIMockWaitUntilRoleExists.RUnlock()
	return calls
}

// WaitUntilRoleExistsWithContext calls WaitUntilRoleExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilRoleExistsWithContext(in1 context.Context, in2 *iam.GetRoleInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilRoleExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilRoleExistsWithContextFunc: method is nil but IAMAPI.WaitUntilRoleExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetRoleInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockWaitUntilRoleExistsWithContext.Lock()
	mock.calls.WaitUntilRoleExistsWithContext = append(mock.calls.WaitUntilRoleExistsWithContext, callInfo)
	lockIAMAPIMockWaitUntilRoleExistsWithContext.Unlock()
	return mock.WaitUntilRoleExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilRoleExistsWithContextCalls gets all the calls that were made to WaitUntilRoleExistsWithContext.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilRoleExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilRoleExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetRoleInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetRoleInput
		In3 []request.WaiterOption
	}
	lockIAMAPIMockWaitUntilRoleExistsWithContext.RLock()
	calls = mock.calls.WaitUntilRoleExistsWithContext
	lockIAMAPIMockWaitUntilRoleExistsWithContext.RUnlock()
	return calls
}

// WaitUntilUserExists calls WaitUntilUserExistsFunc.
func (mock *IAMAPIMock) WaitUntilUserExists(in1 *iam.GetUserInput) error {
	if mock.WaitUntilUserExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilUserExistsFunc: method is nil but IAMAPI.WaitUntilUserExists was just called")
	}
	callInfo := struct {
		In1 *iam.GetUserInput
	}{
		In1: in1,
	}
	lockIAMAPIMockWaitUntilUserExists.Lock()
	mock.calls.WaitUntilUserExists = append(mock.calls.WaitUntilUserExists, callInfo)
	lockIAMAPIMockWaitUntilUserExists.Unlock()
	return mock.WaitUntilUserExistsFunc(in1)
}

// WaitUntilUserExistsCalls gets all the calls that were made to WaitUntilUserExists.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilUserExistsCalls())
func (mock *IAMAPIMock) WaitUntilUserExistsCalls() []struct {
	In1 *iam.GetUserInput
} {
	var calls []struct {
		In1 *iam.GetUserInput
	}
	lockIAMAPIMockWaitUntilUserExists.RLock()
	calls = mock.calls.WaitUntilUserExists
	lockIAMAPIMockWaitUntilUserExists.RUnlock()
	return calls
}

// WaitUntilUserExistsWithContext calls WaitUntilUserExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilUserExistsWithContext(in1 context.Context, in2 *iam.GetUserInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilUserExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilUserExistsWithContextFunc: method is nil but IAMAPI.WaitUntilUserExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *iam.GetUserInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockIAMAPIMockWaitUntilUserExistsWithContext.Lock()
	mock.calls.WaitUntilUserExistsWithContext = append(mock.calls.WaitUntilUserExistsWithContext, callInfo)
	lockIAMAPIMockWaitUntilUserExistsWithContext.Unlock()
	return mock.WaitUntilUserExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilUserExistsWithContextCalls gets all the calls that were made to WaitUntilUserExistsWithContext.
// Check the length with:
//     len(mockedIAMAPI.WaitUntilUserExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilUserExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *iam.GetUserInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *iam.GetUserInput
		In3 []request.WaiterOption
	}
	lockIAMAPIMockWaitUntilUserExistsWithContext.RLock()
	calls = mock.calls.WaitUntilUserExistsWithContext
	lockIAMAPIMockWaitUntilUserExistsWithContext.RUnlock()
	return calls
}
