// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package stsmock

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sts"
	"github.com/aws/aws-sdk-go/service/sts/stsiface"
	"sync"
)

var (
	lockSTSAPIMockAssumeRole                            sync.RWMutex
	lockSTSAPIMockAssumeRoleRequest                     sync.RWMutex
	lockSTSAPIMockAssumeRoleWithContext                 sync.RWMutex
	lockSTSAPIMockAssumeRoleWithSAML                    sync.RWMutex
	lockSTSAPIMockAssumeRoleWithSAMLRequest             sync.RWMutex
	lockSTSAPIMockAssumeRoleWithSAMLWithContext         sync.RWMutex
	lockSTSAPIMockAssumeRoleWithWebIdentity             sync.RWMutex
	lockSTSAPIMockAssumeRoleWithWebIdentityRequest      sync.RWMutex
	lockSTSAPIMockAssumeRoleWithWebIdentityWithContext  sync.RWMutex
	lockSTSAPIMockDecodeAuthorizationMessage            sync.RWMutex
	lockSTSAPIMockDecodeAuthorizationMessageRequest     sync.RWMutex
	lockSTSAPIMockDecodeAuthorizationMessageWithContext sync.RWMutex
	lockSTSAPIMockGetCallerIdentity                     sync.RWMutex
	lockSTSAPIMockGetCallerIdentityRequest              sync.RWMutex
	lockSTSAPIMockGetCallerIdentityWithContext          sync.RWMutex
	lockSTSAPIMockGetFederationToken                    sync.RWMutex
	lockSTSAPIMockGetFederationTokenRequest             sync.RWMutex
	lockSTSAPIMockGetFederationTokenWithContext         sync.RWMutex
	lockSTSAPIMockGetSessionToken                       sync.RWMutex
	lockSTSAPIMockGetSessionTokenRequest                sync.RWMutex
	lockSTSAPIMockGetSessionTokenWithContext            sync.RWMutex
)

// Ensure, that STSAPIMock does implement STSAPI.
// If this is not the case, regenerate this file with moq.
var _ stsiface.STSAPI = &STSAPIMock{}

// STSAPIMock is a mock implementation of STSAPI.
//
//     func TestSomethingThatUsesSTSAPI(t *testing.T) {
//
//         // make and configure a mocked STSAPI
//         mockedSTSAPI := &STSAPIMock{
//             AssumeRoleFunc: func(in1 *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
// 	               panic("mock out the AssumeRole method")
//             },
//             AssumeRoleRequestFunc: func(in1 *sts.AssumeRoleInput) (*request.Request, *sts.AssumeRoleOutput) {
// 	               panic("mock out the AssumeRoleRequest method")
//             },
//             AssumeRoleWithContextFunc: func(in1 context.Context, in2 *sts.AssumeRoleInput, in3 ...request.Option) (*sts.AssumeRoleOutput, error) {
// 	               panic("mock out the AssumeRoleWithContext method")
//             },
//             AssumeRoleWithSAMLFunc: func(in1 *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error) {
// 	               panic("mock out the AssumeRoleWithSAML method")
//             },
//             AssumeRoleWithSAMLRequestFunc: func(in1 *sts.AssumeRoleWithSAMLInput) (*request.Request, *sts.AssumeRoleWithSAMLOutput) {
// 	               panic("mock out the AssumeRoleWithSAMLRequest method")
//             },
//             AssumeRoleWithSAMLWithContextFunc: func(in1 context.Context, in2 *sts.AssumeRoleWithSAMLInput, in3 ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error) {
// 	               panic("mock out the AssumeRoleWithSAMLWithContext method")
//             },
//             AssumeRoleWithWebIdentityFunc: func(in1 *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error) {
// 	               panic("mock out the AssumeRoleWithWebIdentity method")
//             },
//             AssumeRoleWithWebIdentityRequestFunc: func(in1 *sts.AssumeRoleWithWebIdentityInput) (*request.Request, *sts.AssumeRoleWithWebIdentityOutput) {
// 	               panic("mock out the AssumeRoleWithWebIdentityRequest method")
//             },
//             AssumeRoleWithWebIdentityWithContextFunc: func(in1 context.Context, in2 *sts.AssumeRoleWithWebIdentityInput, in3 ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error) {
// 	               panic("mock out the AssumeRoleWithWebIdentityWithContext method")
//             },
//             DecodeAuthorizationMessageFunc: func(in1 *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error) {
// 	               panic("mock out the DecodeAuthorizationMessage method")
//             },
//             DecodeAuthorizationMessageRequestFunc: func(in1 *sts.DecodeAuthorizationMessageInput) (*request.Request, *sts.DecodeAuthorizationMessageOutput) {
// 	               panic("mock out the DecodeAuthorizationMessageRequest method")
//             },
//             DecodeAuthorizationMessageWithContextFunc: func(in1 context.Context, in2 *sts.DecodeAuthorizationMessageInput, in3 ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error) {
// 	               panic("mock out the DecodeAuthorizationMessageWithContext method")
//             },
//             GetCallerIdentityFunc: func(in1 *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
// 	               panic("mock out the GetCallerIdentity method")
//             },
//             GetCallerIdentityRequestFunc: func(in1 *sts.GetCallerIdentityInput) (*request.Request, *sts.GetCallerIdentityOutput) {
// 	               panic("mock out the GetCallerIdentityRequest method")
//             },
//             GetCallerIdentityWithContextFunc: func(in1 context.Context, in2 *sts.GetCallerIdentityInput, in3 ...request.Option) (*sts.GetCallerIdentityOutput, error) {
// 	               panic("mock out the GetCallerIdentityWithContext method")
//             },
//             GetFederationTokenFunc: func(in1 *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error) {
// 	               panic("mock out the GetFederationToken method")
//             },
//             GetFederationTokenRequestFunc: func(in1 *sts.GetFederationTokenInput) (*request.Request, *sts.GetFederationTokenOutput) {
// 	               panic("mock out the GetFederationTokenRequest method")
//             },
//             GetFederationTokenWithContextFunc: func(in1 context.Context, in2 *sts.GetFederationTokenInput, in3 ...request.Option) (*sts.GetFederationTokenOutput, error) {
// 	               panic("mock out the GetFederationTokenWithContext method")
//             },
//             GetSessionTokenFunc: func(in1 *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error) {
// 	               panic("mock out the GetSessionToken method")
//             },
//             GetSessionTokenRequestFunc: func(in1 *sts.GetSessionTokenInput) (*request.Request, *sts.GetSessionTokenOutput) {
// 	               panic("mock out the GetSessionTokenRequest method")
//             },
//             GetSessionTokenWithContextFunc: func(in1 context.Context, in2 *sts.GetSessionTokenInput, in3 ...request.Option) (*sts.GetSessionTokenOutput, error) {
// 	               panic("mock out the GetSessionTokenWithContext method")
//             },
//         }
//
//         // use mockedSTSAPI in code that requires STSAPI
//         // and then make assertions.
//
//     }
type STSAPIMock struct {
	// AssumeRoleFunc mocks the AssumeRole method.
	AssumeRoleFunc func(in1 *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error)

	// AssumeRoleRequestFunc mocks the AssumeRoleRequest method.
	AssumeRoleRequestFunc func(in1 *sts.AssumeRoleInput) (*request.Request, *sts.AssumeRoleOutput)

	// AssumeRoleWithContextFunc mocks the AssumeRoleWithContext method.
	AssumeRoleWithContextFunc func(in1 context.Context, in2 *sts.AssumeRoleInput, in3 ...request.Option) (*sts.AssumeRoleOutput, error)

	// AssumeRoleWithSAMLFunc mocks the AssumeRoleWithSAML method.
	AssumeRoleWithSAMLFunc func(in1 *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error)

	// AssumeRoleWithSAMLRequestFunc mocks the AssumeRoleWithSAMLRequest method.
	AssumeRoleWithSAMLRequestFunc func(in1 *sts.AssumeRoleWithSAMLInput) (*request.Request, *sts.AssumeRoleWithSAMLOutput)

	// AssumeRoleWithSAMLWithContextFunc mocks the AssumeRoleWithSAMLWithContext method.
	AssumeRoleWithSAMLWithContextFunc func(in1 context.Context, in2 *sts.AssumeRoleWithSAMLInput, in3 ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error)

	// AssumeRoleWithWebIdentityFunc mocks the AssumeRoleWithWebIdentity method.
	AssumeRoleWithWebIdentityFunc func(in1 *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error)

	// AssumeRoleWithWebIdentityRequestFunc mocks the AssumeRoleWithWebIdentityRequest method.
	AssumeRoleWithWebIdentityRequestFunc func(in1 *sts.AssumeRoleWithWebIdentityInput) (*request.Request, *sts.AssumeRoleWithWebIdentityOutput)

	// AssumeRoleWithWebIdentityWithContextFunc mocks the AssumeRoleWithWebIdentityWithContext method.
	AssumeRoleWithWebIdentityWithContextFunc func(in1 context.Context, in2 *sts.AssumeRoleWithWebIdentityInput, in3 ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error)

	// DecodeAuthorizationMessageFunc mocks the DecodeAuthorizationMessage method.
	DecodeAuthorizationMessageFunc func(in1 *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error)

	// DecodeAuthorizationMessageRequestFunc mocks the DecodeAuthorizationMessageRequest method.
	DecodeAuthorizationMessageRequestFunc func(in1 *sts.DecodeAuthorizationMessageInput) (*request.Request, *sts.DecodeAuthorizationMessageOutput)

	// DecodeAuthorizationMessageWithContextFunc mocks the DecodeAuthorizationMessageWithContext method.
	DecodeAuthorizationMessageWithContextFunc func(in1 context.Context, in2 *sts.DecodeAuthorizationMessageInput, in3 ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error)

	// GetCallerIdentityFunc mocks the GetCallerIdentity method.
	GetCallerIdentityFunc func(in1 *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error)

	// GetCallerIdentityRequestFunc mocks the GetCallerIdentityRequest method.
	GetCallerIdentityRequestFunc func(in1 *sts.GetCallerIdentityInput) (*request.Request, *sts.GetCallerIdentityOutput)

	// GetCallerIdentityWithContextFunc mocks the GetCallerIdentityWithContext method.
	GetCallerIdentityWithContextFunc func(in1 context.Context, in2 *sts.GetCallerIdentityInput, in3 ...request.Option) (*sts.GetCallerIdentityOutput, error)

	// GetFederationTokenFunc mocks the GetFederationToken method.
	GetFederationTokenFunc func(in1 *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error)

	// GetFederationTokenRequestFunc mocks the GetFederationTokenRequest method.
	GetFederationTokenRequestFunc func(in1 *sts.GetFederationTokenInput) (*request.Request, *sts.GetFederationTokenOutput)

	// GetFederationTokenWithContextFunc mocks the GetFederationTokenWithContext method.
	GetFederationTokenWithContextFunc func(in1 context.Context, in2 *sts.GetFederationTokenInput, in3 ...request.Option) (*sts.GetFederationTokenOutput, error)

	// GetSessionTokenFunc mocks the GetSessionToken method.
	GetSessionTokenFunc func(in1 *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error)

	// GetSessionTokenRequestFunc mocks the GetSessionTokenRequest method.
	GetSessionTokenRequestFunc func(in1 *sts.GetSessionTokenInput) (*request.Request, *sts.GetSessionTokenOutput)

	// GetSessionTokenWithContextFunc mocks the GetSessionTokenWithContext method.
	GetSessionTokenWithContextFunc func(in1 context.Context, in2 *sts.GetSessionTokenInput, in3 ...request.Option) (*sts.GetSessionTokenOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AssumeRole holds details about calls to the AssumeRole method.
		AssumeRole []struct {
			// In1 is the in1 argument value.
			In1 *sts.AssumeRoleInput
		}
		// AssumeRoleRequest holds details about calls to the AssumeRoleRequest method.
		AssumeRoleRequest []struct {
			// In1 is the in1 argument value.
			In1 *sts.AssumeRoleInput
		}
		// AssumeRoleWithContext holds details about calls to the AssumeRoleWithContext method.
		AssumeRoleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *sts.AssumeRoleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssumeRoleWithSAML holds details about calls to the AssumeRoleWithSAML method.
		AssumeRoleWithSAML []struct {
			// In1 is the in1 argument value.
			In1 *sts.AssumeRoleWithSAMLInput
		}
		// AssumeRoleWithSAMLRequest holds details about calls to the AssumeRoleWithSAMLRequest method.
		AssumeRoleWithSAMLRequest []struct {
			// In1 is the in1 argument value.
			In1 *sts.AssumeRoleWithSAMLInput
		}
		// AssumeRoleWithSAMLWithContext holds details about calls to the AssumeRoleWithSAMLWithContext method.
		AssumeRoleWithSAMLWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *sts.AssumeRoleWithSAMLInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssumeRoleWithWebIdentity holds details about calls to the AssumeRoleWithWebIdentity method.
		AssumeRoleWithWebIdentity []struct {
			// In1 is the in1 argument value.
			In1 *sts.AssumeRoleWithWebIdentityInput
		}
		// AssumeRoleWithWebIdentityRequest holds details about calls to the AssumeRoleWithWebIdentityRequest method.
		AssumeRoleWithWebIdentityRequest []struct {
			// In1 is the in1 argument value.
			In1 *sts.AssumeRoleWithWebIdentityInput
		}
		// AssumeRoleWithWebIdentityWithContext holds details about calls to the AssumeRoleWithWebIdentityWithContext method.
		AssumeRoleWithWebIdentityWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *sts.AssumeRoleWithWebIdentityInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DecodeAuthorizationMessage holds details about calls to the DecodeAuthorizationMessage method.
		DecodeAuthorizationMessage []struct {
			// In1 is the in1 argument value.
			In1 *sts.DecodeAuthorizationMessageInput
		}
		// DecodeAuthorizationMessageRequest holds details about calls to the DecodeAuthorizationMessageRequest method.
		DecodeAuthorizationMessageRequest []struct {
			// In1 is the in1 argument value.
			In1 *sts.DecodeAuthorizationMessageInput
		}
		// DecodeAuthorizationMessageWithContext holds details about calls to the DecodeAuthorizationMessageWithContext method.
		DecodeAuthorizationMessageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *sts.DecodeAuthorizationMessageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetCallerIdentity holds details about calls to the GetCallerIdentity method.
		GetCallerIdentity []struct {
			// In1 is the in1 argument value.
			In1 *sts.GetCallerIdentityInput
		}
		// GetCallerIdentityRequest holds details about calls to the GetCallerIdentityRequest method.
		GetCallerIdentityRequest []struct {
			// In1 is the in1 argument value.
			In1 *sts.GetCallerIdentityInput
		}
		// GetCallerIdentityWithContext holds details about calls to the GetCallerIdentityWithContext method.
		GetCallerIdentityWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *sts.GetCallerIdentityInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetFederationToken holds details about calls to the GetFederationToken method.
		GetFederationToken []struct {
			// In1 is the in1 argument value.
			In1 *sts.GetFederationTokenInput
		}
		// GetFederationTokenRequest holds details about calls to the GetFederationTokenRequest method.
		GetFederationTokenRequest []struct {
			// In1 is the in1 argument value.
			In1 *sts.GetFederationTokenInput
		}
		// GetFederationTokenWithContext holds details about calls to the GetFederationTokenWithContext method.
		GetFederationTokenWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *sts.GetFederationTokenInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetSessionToken holds details about calls to the GetSessionToken method.
		GetSessionToken []struct {
			// In1 is the in1 argument value.
			In1 *sts.GetSessionTokenInput
		}
		// GetSessionTokenRequest holds details about calls to the GetSessionTokenRequest method.
		GetSessionTokenRequest []struct {
			// In1 is the in1 argument value.
			In1 *sts.GetSessionTokenInput
		}
		// GetSessionTokenWithContext holds details about calls to the GetSessionTokenWithContext method.
		GetSessionTokenWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *sts.GetSessionTokenInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
	}
}

// AssumeRole calls AssumeRoleFunc.
func (mock *STSAPIMock) AssumeRole(in1 *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
	if mock.AssumeRoleFunc == nil {
		panic("STSAPIMock.AssumeRoleFunc: method is nil but STSAPI.AssumeRole was just called")
	}
	callInfo := struct {
		In1 *sts.AssumeRoleInput
	}{
		In1: in1,
	}
	lockSTSAPIMockAssumeRole.Lock()
	mock.calls.AssumeRole = append(mock.calls.AssumeRole, callInfo)
	lockSTSAPIMockAssumeRole.Unlock()
	return mock.AssumeRoleFunc(in1)
}

// AssumeRoleCalls gets all the calls that were made to AssumeRole.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleCalls())
func (mock *STSAPIMock) AssumeRoleCalls() []struct {
	In1 *sts.AssumeRoleInput
} {
	var calls []struct {
		In1 *sts.AssumeRoleInput
	}
	lockSTSAPIMockAssumeRole.RLock()
	calls = mock.calls.AssumeRole
	lockSTSAPIMockAssumeRole.RUnlock()
	return calls
}

// AssumeRoleRequest calls AssumeRoleRequestFunc.
func (mock *STSAPIMock) AssumeRoleRequest(in1 *sts.AssumeRoleInput) (*request.Request, *sts.AssumeRoleOutput) {
	if mock.AssumeRoleRequestFunc == nil {
		panic("STSAPIMock.AssumeRoleRequestFunc: method is nil but STSAPI.AssumeRoleRequest was just called")
	}
	callInfo := struct {
		In1 *sts.AssumeRoleInput
	}{
		In1: in1,
	}
	lockSTSAPIMockAssumeRoleRequest.Lock()
	mock.calls.AssumeRoleRequest = append(mock.calls.AssumeRoleRequest, callInfo)
	lockSTSAPIMockAssumeRoleRequest.Unlock()
	return mock.AssumeRoleRequestFunc(in1)
}

// AssumeRoleRequestCalls gets all the calls that were made to AssumeRoleRequest.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleRequestCalls())
func (mock *STSAPIMock) AssumeRoleRequestCalls() []struct {
	In1 *sts.AssumeRoleInput
} {
	var calls []struct {
		In1 *sts.AssumeRoleInput
	}
	lockSTSAPIMockAssumeRoleRequest.RLock()
	calls = mock.calls.AssumeRoleRequest
	lockSTSAPIMockAssumeRoleRequest.RUnlock()
	return calls
}

// AssumeRoleWithContext calls AssumeRoleWithContextFunc.
func (mock *STSAPIMock) AssumeRoleWithContext(in1 context.Context, in2 *sts.AssumeRoleInput, in3 ...request.Option) (*sts.AssumeRoleOutput, error) {
	if mock.AssumeRoleWithContextFunc == nil {
		panic("STSAPIMock.AssumeRoleWithContextFunc: method is nil but STSAPI.AssumeRoleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *sts.AssumeRoleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockSTSAPIMockAssumeRoleWithContext.Lock()
	mock.calls.AssumeRoleWithContext = append(mock.calls.AssumeRoleWithContext, callInfo)
	lockSTSAPIMockAssumeRoleWithContext.Unlock()
	return mock.AssumeRoleWithContextFunc(in1, in2, in3...)
}

// AssumeRoleWithContextCalls gets all the calls that were made to AssumeRoleWithContext.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleWithContextCalls())
func (mock *STSAPIMock) AssumeRoleWithContextCalls() []struct {
	In1 context.Context
	In2 *sts.AssumeRoleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *sts.AssumeRoleInput
		In3 []request.Option
	}
	lockSTSAPIMockAssumeRoleWithContext.RLock()
	calls = mock.calls.AssumeRoleWithContext
	lockSTSAPIMockAssumeRoleWithContext.RUnlock()
	return calls
}

// AssumeRoleWithSAML calls AssumeRoleWithSAMLFunc.
func (mock *STSAPIMock) AssumeRoleWithSAML(in1 *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error) {
	if mock.AssumeRoleWithSAMLFunc == nil {
		panic("STSAPIMock.AssumeRoleWithSAMLFunc: method is nil but STSAPI.AssumeRoleWithSAML was just called")
	}
	callInfo := struct {
		In1 *sts.AssumeRoleWithSAMLInput
	}{
		In1: in1,
	}
	lockSTSAPIMockAssumeRoleWithSAML.Lock()
	mock.calls.AssumeRoleWithSAML = append(mock.calls.AssumeRoleWithSAML, callInfo)
	lockSTSAPIMockAssumeRoleWithSAML.Unlock()
	return mock.AssumeRoleWithSAMLFunc(in1)
}

// AssumeRoleWithSAMLCalls gets all the calls that were made to AssumeRoleWithSAML.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleWithSAMLCalls())
func (mock *STSAPIMock) AssumeRoleWithSAMLCalls() []struct {
	In1 *sts.AssumeRoleWithSAMLInput
} {
	var calls []struct {
		In1 *sts.AssumeRoleWithSAMLInput
	}
	lockSTSAPIMockAssumeRoleWithSAML.RLock()
	calls = mock.calls.AssumeRoleWithSAML
	lockSTSAPIMockAssumeRoleWithSAML.RUnlock()
	return calls
}

// AssumeRoleWithSAMLRequest calls AssumeRoleWithSAMLRequestFunc.
func (mock *STSAPIMock) AssumeRoleWithSAMLRequest(in1 *sts.AssumeRoleWithSAMLInput) (*request.Request, *sts.AssumeRoleWithSAMLOutput) {
	if mock.AssumeRoleWithSAMLRequestFunc == nil {
		panic("STSAPIMock.AssumeRoleWithSAMLRequestFunc: method is nil but STSAPI.AssumeRoleWithSAMLRequest was just called")
	}
	callInfo := struct {
		In1 *sts.AssumeRoleWithSAMLInput
	}{
		In1: in1,
	}
	lockSTSAPIMockAssumeRoleWithSAMLRequest.Lock()
	mock.calls.AssumeRoleWithSAMLRequest = append(mock.calls.AssumeRoleWithSAMLRequest, callInfo)
	lockSTSAPIMockAssumeRoleWithSAMLRequest.Unlock()
	return mock.AssumeRoleWithSAMLRequestFunc(in1)
}

// AssumeRoleWithSAMLRequestCalls gets all the calls that were made to AssumeRoleWithSAMLRequest.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleWithSAMLRequestCalls())
func (mock *STSAPIMock) AssumeRoleWithSAMLRequestCalls() []struct {
	In1 *sts.AssumeRoleWithSAMLInput
} {
	var calls []struct {
		In1 *sts.AssumeRoleWithSAMLInput
	}
	lockSTSAPIMockAssumeRoleWithSAMLRequest.RLock()
	calls = mock.calls.AssumeRoleWithSAMLRequest
	lockSTSAPIMockAssumeRoleWithSAMLRequest.RUnlock()
	return calls
}

// AssumeRoleWithSAMLWithContext calls AssumeRoleWithSAMLWithContextFunc.
func (mock *STSAPIMock) AssumeRoleWithSAMLWithContext(in1 context.Context, in2 *sts.AssumeRoleWithSAMLInput, in3 ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error) {
	if mock.AssumeRoleWithSAMLWithContextFunc == nil {
		panic("STSAPIMock.AssumeRoleWithSAMLWithContextFunc: method is nil but STSAPI.AssumeRoleWithSAMLWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *sts.AssumeRoleWithSAMLInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockSTSAPIMockAssumeRoleWithSAMLWithContext.Lock()
	mock.calls.AssumeRoleWithSAMLWithContext = append(mock.calls.AssumeRoleWithSAMLWithContext, callInfo)
	lockSTSAPIMockAssumeRoleWithSAMLWithContext.Unlock()
	return mock.AssumeRoleWithSAMLWithContextFunc(in1, in2, in3...)
}

// AssumeRoleWithSAMLWithContextCalls gets all the calls that were made to AssumeRoleWithSAMLWithContext.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleWithSAMLWithContextCalls())
func (mock *STSAPIMock) AssumeRoleWithSAMLWithContextCalls() []struct {
	In1 context.Context
	In2 *sts.AssumeRoleWithSAMLInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *sts.AssumeRoleWithSAMLInput
		In3 []request.Option
	}
	lockSTSAPIMockAssumeRoleWithSAMLWithContext.RLock()
	calls = mock.calls.AssumeRoleWithSAMLWithContext
	lockSTSAPIMockAssumeRoleWithSAMLWithContext.RUnlock()
	return calls
}

// AssumeRoleWithWebIdentity calls AssumeRoleWithWebIdentityFunc.
func (mock *STSAPIMock) AssumeRoleWithWebIdentity(in1 *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	if mock.AssumeRoleWithWebIdentityFunc == nil {
		panic("STSAPIMock.AssumeRoleWithWebIdentityFunc: method is nil but STSAPI.AssumeRoleWithWebIdentity was just called")
	}
	callInfo := struct {
		In1 *sts.AssumeRoleWithWebIdentityInput
	}{
		In1: in1,
	}
	lockSTSAPIMockAssumeRoleWithWebIdentity.Lock()
	mock.calls.AssumeRoleWithWebIdentity = append(mock.calls.AssumeRoleWithWebIdentity, callInfo)
	lockSTSAPIMockAssumeRoleWithWebIdentity.Unlock()
	return mock.AssumeRoleWithWebIdentityFunc(in1)
}

// AssumeRoleWithWebIdentityCalls gets all the calls that were made to AssumeRoleWithWebIdentity.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleWithWebIdentityCalls())
func (mock *STSAPIMock) AssumeRoleWithWebIdentityCalls() []struct {
	In1 *sts.AssumeRoleWithWebIdentityInput
} {
	var calls []struct {
		In1 *sts.AssumeRoleWithWebIdentityInput
	}
	lockSTSAPIMockAssumeRoleWithWebIdentity.RLock()
	calls = mock.calls.AssumeRoleWithWebIdentity
	lockSTSAPIMockAssumeRoleWithWebIdentity.RUnlock()
	return calls
}

// AssumeRoleWithWebIdentityRequest calls AssumeRoleWithWebIdentityRequestFunc.
func (mock *STSAPIMock) AssumeRoleWithWebIdentityRequest(in1 *sts.AssumeRoleWithWebIdentityInput) (*request.Request, *sts.AssumeRoleWithWebIdentityOutput) {
	if mock.AssumeRoleWithWebIdentityRequestFunc == nil {
		panic("STSAPIMock.AssumeRoleWithWebIdentityRequestFunc: method is nil but STSAPI.AssumeRoleWithWebIdentityRequest was just called")
	}
	callInfo := struct {
		In1 *sts.AssumeRoleWithWebIdentityInput
	}{
		In1: in1,
	}
	lockSTSAPIMockAssumeRoleWithWebIdentityRequest.Lock()
	mock.calls.AssumeRoleWithWebIdentityRequest = append(mock.calls.AssumeRoleWithWebIdentityRequest, callInfo)
	lockSTSAPIMockAssumeRoleWithWebIdentityRequest.Unlock()
	return mock.AssumeRoleWithWebIdentityRequestFunc(in1)
}

// AssumeRoleWithWebIdentityRequestCalls gets all the calls that were made to AssumeRoleWithWebIdentityRequest.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleWithWebIdentityRequestCalls())
func (mock *STSAPIMock) AssumeRoleWithWebIdentityRequestCalls() []struct {
	In1 *sts.AssumeRoleWithWebIdentityInput
} {
	var calls []struct {
		In1 *sts.AssumeRoleWithWebIdentityInput
	}
	lockSTSAPIMockAssumeRoleWithWebIdentityRequest.RLock()
	calls = mock.calls.AssumeRoleWithWebIdentityRequest
	lockSTSAPIMockAssumeRoleWithWebIdentityRequest.RUnlock()
	return calls
}

// AssumeRoleWithWebIdentityWithContext calls AssumeRoleWithWebIdentityWithContextFunc.
func (mock *STSAPIMock) AssumeRoleWithWebIdentityWithContext(in1 context.Context, in2 *sts.AssumeRoleWithWebIdentityInput, in3 ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	if mock.AssumeRoleWithWebIdentityWithContextFunc == nil {
		panic("STSAPIMock.AssumeRoleWithWebIdentityWithContextFunc: method is nil but STSAPI.AssumeRoleWithWebIdentityWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *sts.AssumeRoleWithWebIdentityInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockSTSAPIMockAssumeRoleWithWebIdentityWithContext.Lock()
	mock.calls.AssumeRoleWithWebIdentityWithContext = append(mock.calls.AssumeRoleWithWebIdentityWithContext, callInfo)
	lockSTSAPIMockAssumeRoleWithWebIdentityWithContext.Unlock()
	return mock.AssumeRoleWithWebIdentityWithContextFunc(in1, in2, in3...)
}

// AssumeRoleWithWebIdentityWithContextCalls gets all the calls that were made to AssumeRoleWithWebIdentityWithContext.
// Check the length with:
//     len(mockedSTSAPI.AssumeRoleWithWebIdentityWithContextCalls())
func (mock *STSAPIMock) AssumeRoleWithWebIdentityWithContextCalls() []struct {
	In1 context.Context
	In2 *sts.AssumeRoleWithWebIdentityInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *sts.AssumeRoleWithWebIdentityInput
		In3 []request.Option
	}
	lockSTSAPIMockAssumeRoleWithWebIdentityWithContext.RLock()
	calls = mock.calls.AssumeRoleWithWebIdentityWithContext
	lockSTSAPIMockAssumeRoleWithWebIdentityWithContext.RUnlock()
	return calls
}

// DecodeAuthorizationMessage calls DecodeAuthorizationMessageFunc.
func (mock *STSAPIMock) DecodeAuthorizationMessage(in1 *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error) {
	if mock.DecodeAuthorizationMessageFunc == nil {
		panic("STSAPIMock.DecodeAuthorizationMessageFunc: method is nil but STSAPI.DecodeAuthorizationMessage was just called")
	}
	callInfo := struct {
		In1 *sts.DecodeAuthorizationMessageInput
	}{
		In1: in1,
	}
	lockSTSAPIMockDecodeAuthorizationMessage.Lock()
	mock.calls.DecodeAuthorizationMessage = append(mock.calls.DecodeAuthorizationMessage, callInfo)
	lockSTSAPIMockDecodeAuthorizationMessage.Unlock()
	return mock.DecodeAuthorizationMessageFunc(in1)
}

// DecodeAuthorizationMessageCalls gets all the calls that were made to DecodeAuthorizationMessage.
// Check the length with:
//     len(mockedSTSAPI.DecodeAuthorizationMessageCalls())
func (mock *STSAPIMock) DecodeAuthorizationMessageCalls() []struct {
	In1 *sts.DecodeAuthorizationMessageInput
} {
	var calls []struct {
		In1 *sts.DecodeAuthorizationMessageInput
	}
	lockSTSAPIMockDecodeAuthorizationMessage.RLock()
	calls = mock.calls.DecodeAuthorizationMessage
	lockSTSAPIMockDecodeAuthorizationMessage.RUnlock()
	return calls
}

// DecodeAuthorizationMessageRequest calls DecodeAuthorizationMessageRequestFunc.
func (mock *STSAPIMock) DecodeAuthorizationMessageRequest(in1 *sts.DecodeAuthorizationMessageInput) (*request.Request, *sts.DecodeAuthorizationMessageOutput) {
	if mock.DecodeAuthorizationMessageRequestFunc == nil {
		panic("STSAPIMock.DecodeAuthorizationMessageRequestFunc: method is nil but STSAPI.DecodeAuthorizationMessageRequest was just called")
	}
	callInfo := struct {
		In1 *sts.DecodeAuthorizationMessageInput
	}{
		In1: in1,
	}
	lockSTSAPIMockDecodeAuthorizationMessageRequest.Lock()
	mock.calls.DecodeAuthorizationMessageRequest = append(mock.calls.DecodeAuthorizationMessageRequest, callInfo)
	lockSTSAPIMockDecodeAuthorizationMessageRequest.Unlock()
	return mock.DecodeAuthorizationMessageRequestFunc(in1)
}

// DecodeAuthorizationMessageRequestCalls gets all the calls that were made to DecodeAuthorizationMessageRequest.
// Check the length with:
//     len(mockedSTSAPI.DecodeAuthorizationMessageRequestCalls())
func (mock *STSAPIMock) DecodeAuthorizationMessageRequestCalls() []struct {
	In1 *sts.DecodeAuthorizationMessageInput
} {
	var calls []struct {
		In1 *sts.DecodeAuthorizationMessageInput
	}
	lockSTSAPIMockDecodeAuthorizationMessageRequest.RLock()
	calls = mock.calls.DecodeAuthorizationMessageRequest
	lockSTSAPIMockDecodeAuthorizationMessageRequest.RUnlock()
	return calls
}

// DecodeAuthorizationMessageWithContext calls DecodeAuthorizationMessageWithContextFunc.
func (mock *STSAPIMock) DecodeAuthorizationMessageWithContext(in1 context.Context, in2 *sts.DecodeAuthorizationMessageInput, in3 ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error) {
	if mock.DecodeAuthorizationMessageWithContextFunc == nil {
		panic("STSAPIMock.DecodeAuthorizationMessageWithContextFunc: method is nil but STSAPI.DecodeAuthorizationMessageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *sts.DecodeAuthorizationMessageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockSTSAPIMockDecodeAuthorizationMessageWithContext.Lock()
	mock.calls.DecodeAuthorizationMessageWithContext = append(mock.calls.DecodeAuthorizationMessageWithContext, callInfo)
	lockSTSAPIMockDecodeAuthorizationMessageWithContext.Unlock()
	return mock.DecodeAuthorizationMessageWithContextFunc(in1, in2, in3...)
}

// DecodeAuthorizationMessageWithContextCalls gets all the calls that were made to DecodeAuthorizationMessageWithContext.
// Check the length with:
//     len(mockedSTSAPI.DecodeAuthorizationMessageWithContextCalls())
func (mock *STSAPIMock) DecodeAuthorizationMessageWithContextCalls() []struct {
	In1 context.Context
	In2 *sts.DecodeAuthorizationMessageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *sts.DecodeAuthorizationMessageInput
		In3 []request.Option
	}
	lockSTSAPIMockDecodeAuthorizationMessageWithContext.RLock()
	calls = mock.calls.DecodeAuthorizationMessageWithContext
	lockSTSAPIMockDecodeAuthorizationMessageWithContext.RUnlock()
	return calls
}

// GetCallerIdentity calls GetCallerIdentityFunc.
func (mock *STSAPIMock) GetCallerIdentity(in1 *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
	if mock.GetCallerIdentityFunc == nil {
		panic("STSAPIMock.GetCallerIdentityFunc: method is nil but STSAPI.GetCallerIdentity was just called")
	}
	callInfo := struct {
		In1 *sts.GetCallerIdentityInput
	}{
		In1: in1,
	}
	lockSTSAPIMockGetCallerIdentity.Lock()
	mock.calls.GetCallerIdentity = append(mock.calls.GetCallerIdentity, callInfo)
	lockSTSAPIMockGetCallerIdentity.Unlock()
	return mock.GetCallerIdentityFunc(in1)
}

// GetCallerIdentityCalls gets all the calls that were made to GetCallerIdentity.
// Check the length with:
//     len(mockedSTSAPI.GetCallerIdentityCalls())
func (mock *STSAPIMock) GetCallerIdentityCalls() []struct {
	In1 *sts.GetCallerIdentityInput
} {
	var calls []struct {
		In1 *sts.GetCallerIdentityInput
	}
	lockSTSAPIMockGetCallerIdentity.RLock()
	calls = mock.calls.GetCallerIdentity
	lockSTSAPIMockGetCallerIdentity.RUnlock()
	return calls
}

// GetCallerIdentityRequest calls GetCallerIdentityRequestFunc.
func (mock *STSAPIMock) GetCallerIdentityRequest(in1 *sts.GetCallerIdentityInput) (*request.Request, *sts.GetCallerIdentityOutput) {
	if mock.GetCallerIdentityRequestFunc == nil {
		panic("STSAPIMock.GetCallerIdentityRequestFunc: method is nil but STSAPI.GetCallerIdentityRequest was just called")
	}
	callInfo := struct {
		In1 *sts.GetCallerIdentityInput
	}{
		In1: in1,
	}
	lockSTSAPIMockGetCallerIdentityRequest.Lock()
	mock.calls.GetCallerIdentityRequest = append(mock.calls.GetCallerIdentityRequest, callInfo)
	lockSTSAPIMockGetCallerIdentityRequest.Unlock()
	return mock.GetCallerIdentityRequestFunc(in1)
}

// GetCallerIdentityRequestCalls gets all the calls that were made to GetCallerIdentityRequest.
// Check the length with:
//     len(mockedSTSAPI.GetCallerIdentityRequestCalls())
func (mock *STSAPIMock) GetCallerIdentityRequestCalls() []struct {
	In1 *sts.GetCallerIdentityInput
} {
	var calls []struct {
		In1 *sts.GetCallerIdentityInput
	}
	lockSTSAPIMockGetCallerIdentityRequest.RLock()
	calls = mock.calls.GetCallerIdentityRequest
	lockSTSAPIMockGetCallerIdentityRequest.RUnlock()
	return calls
}

// GetCallerIdentityWithContext calls GetCallerIdentityWithContextFunc.
func (mock *STSAPIMock) GetCallerIdentityWithContext(in1 context.Context, in2 *sts.GetCallerIdentityInput, in3 ...request.Option) (*sts.GetCallerIdentityOutput, error) {
	if mock.GetCallerIdentityWithContextFunc == nil {
		panic("STSAPIMock.GetCallerIdentityWithContextFunc: method is nil but STSAPI.GetCallerIdentityWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *sts.GetCallerIdentityInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockSTSAPIMockGetCallerIdentityWithContext.Lock()
	mock.calls.GetCallerIdentityWithContext = append(mock.calls.GetCallerIdentityWithContext, callInfo)
	lockSTSAPIMockGetCallerIdentityWithContext.Unlock()
	return mock.GetCallerIdentityWithContextFunc(in1, in2, in3...)
}

// GetCallerIdentityWithContextCalls gets all the calls that were made to GetCallerIdentityWithContext.
// Check the length with:
//     len(mockedSTSAPI.GetCallerIdentityWithContextCalls())
func (mock *STSAPIMock) GetCallerIdentityWithContextCalls() []struct {
	In1 context.Context
	In2 *sts.GetCallerIdentityInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *sts.GetCallerIdentityInput
		In3 []request.Option
	}
	lockSTSAPIMockGetCallerIdentityWithContext.RLock()
	calls = mock.calls.GetCallerIdentityWithContext
	lockSTSAPIMockGetCallerIdentityWithContext.RUnlock()
	return calls
}

// GetFederationToken calls GetFederationTokenFunc.
func (mock *STSAPIMock) GetFederationToken(in1 *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error) {
	if mock.GetFederationTokenFunc == nil {
		panic("STSAPIMock.GetFederationTokenFunc: method is nil but STSAPI.GetFederationToken was just called")
	}
	callInfo := struct {
		In1 *sts.GetFederationTokenInput
	}{
		In1: in1,
	}
	lockSTSAPIMockGetFederationToken.Lock()
	mock.calls.GetFederationToken = append(mock.calls.GetFederationToken, callInfo)
	lockSTSAPIMockGetFederationToken.Unlock()
	return mock.GetFederationTokenFunc(in1)
}

// GetFederationTokenCalls gets all the calls that were made to GetFederationToken.
// Check the length with:
//     len(mockedSTSAPI.GetFederationTokenCalls())
func (mock *STSAPIMock) GetFederationTokenCalls() []struct {
	In1 *sts.GetFederationTokenInput
} {
	var calls []struct {
		In1 *sts.GetFederationTokenInput
	}
	lockSTSAPIMockGetFederationToken.RLock()
	calls = mock.calls.GetFederationToken
	lockSTSAPIMockGetFederationToken.RUnlock()
	return calls
}

// GetFederationTokenRequest calls GetFederationTokenRequestFunc.
func (mock *STSAPIMock) GetFederationTokenRequest(in1 *sts.GetFederationTokenInput) (*request.Request, *sts.GetFederationTokenOutput) {
	if mock.GetFederationTokenRequestFunc == nil {
		panic("STSAPIMock.GetFederationTokenRequestFunc: method is nil but STSAPI.GetFederationTokenRequest was just called")
	}
	callInfo := struct {
		In1 *sts.GetFederationTokenInput
	}{
		In1: in1,
	}
	lockSTSAPIMockGetFederationTokenRequest.Lock()
	mock.calls.GetFederationTokenRequest = append(mock.calls.GetFederationTokenRequest, callInfo)
	lockSTSAPIMockGetFederationTokenRequest.Unlock()
	return mock.GetFederationTokenRequestFunc(in1)
}

// GetFederationTokenRequestCalls gets all the calls that were made to GetFederationTokenRequest.
// Check the length with:
//     len(mockedSTSAPI.GetFederationTokenRequestCalls())
func (mock *STSAPIMock) GetFederationTokenRequestCalls() []struct {
	In1 *sts.GetFederationTokenInput
} {
	var calls []struct {
		In1 *sts.GetFederationTokenInput
	}
	lockSTSAPIMockGetFederationTokenRequest.RLock()
	calls = mock.calls.GetFederationTokenRequest
	lockSTSAPIMockGetFederationTokenRequest.RUnlock()
	return calls
}

// GetFederationTokenWithContext calls GetFederationTokenWithContextFunc.
func (mock *STSAPIMock) GetFederationTokenWithContext(in1 context.Context, in2 *sts.GetFederationTokenInput, in3 ...request.Option) (*sts.GetFederationTokenOutput, error) {
	if mock.GetFederationTokenWithContextFunc == nil {
		panic("STSAPIMock.GetFederationTokenWithContextFunc: method is nil but STSAPI.GetFederationTokenWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *sts.GetFederationTokenInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockSTSAPIMockGetFederationTokenWithContext.Lock()
	mock.calls.GetFederationTokenWithContext = append(mock.calls.GetFederationTokenWithContext, callInfo)
	lockSTSAPIMockGetFederationTokenWithContext.Unlock()
	return mock.GetFederationTokenWithContextFunc(in1, in2, in3...)
}

// GetFederationTokenWithContextCalls gets all the calls that were made to GetFederationTokenWithContext.
// Check the length with:
//     len(mockedSTSAPI.GetFederationTokenWithContextCalls())
func (mock *STSAPIMock) GetFederationTokenWithContextCalls() []struct {
	In1 context.Context
	In2 *sts.GetFederationTokenInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *sts.GetFederationTokenInput
		In3 []request.Option
	}
	lockSTSAPIMockGetFederationTokenWithContext.RLock()
	calls = mock.calls.GetFederationTokenWithContext
	lockSTSAPIMockGetFederationTokenWithContext.RUnlock()
	return calls
}

// GetSessionToken calls GetSessionTokenFunc.
func (mock *STSAPIMock) GetSessionToken(in1 *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error) {
	if mock.GetSessionTokenFunc == nil {
		panic("STSAPIMock.GetSessionTokenFunc: method is nil but STSAPI.GetSessionToken was just called")
	}
	callInfo := struct {
		In1 *sts.GetSessionTokenInput
	}{
		In1: in1,
	}
	lockSTSAPIMockGetSessionToken.Lock()
	mock.calls.GetSessionToken = append(mock.calls.GetSessionToken, callInfo)
	lockSTSAPIMockGetSessionToken.Unlock()
	return mock.GetSessionTokenFunc(in1)
}

// GetSessionTokenCalls gets all the calls that were made to GetSessionToken.
// Check the length with:
//     len(mockedSTSAPI.GetSessionTokenCalls())
func (mock *STSAPIMock) GetSessionTokenCalls() []struct {
	In1 *sts.GetSessionTokenInput
} {
	var calls []struct {
		In1 *sts.GetSessionTokenInput
	}
	lockSTSAPIMockGetSessionToken.RLock()
	calls = mock.calls.GetSessionToken
	lockSTSAPIMockGetSessionToken.RUnlock()
	return calls
}

// GetSessionTokenRequest calls GetSessionTokenRequestFunc.
func (mock *STSAPIMock) GetSessionTokenRequest(in1 *sts.GetSessionTokenInput) (*request.Request, *sts.GetSessionTokenOutput) {
	if mock.GetSessionTokenRequestFunc == nil {
		panic("STSAPIMock.GetSessionTokenRequestFunc: method is nil but STSAPI.GetSessionTokenRequest was just called")
	}
	callInfo := struct {
		In1 *sts.GetSessionTokenInput
	}{
		In1: in1,
	}
	lockSTSAPIMockGetSessionTokenRequest.Lock()
	mock.calls.GetSessionTokenRequest = append(mock.calls.GetSessionTokenRequest, callInfo)
	lockSTSAPIMockGetSessionTokenRequest.Unlock()
	return mock.GetSessionTokenRequestFunc(in1)
}

// GetSessionTokenRequestCalls gets all the calls that were made to GetSessionTokenRequest.
// Check the length with:
//     len(mockedSTSAPI.GetSessionTokenRequestCalls())
func (mock *STSAPIMock) GetSessionTokenRequestCalls() []struct {
	In1 *sts.GetSessionTokenInput
} {
	var calls []struct {
		In1 *sts.GetSessionTokenInput
	}
	lockSTSAPIMockGetSessionTokenRequest.RLock()
	calls = mock.calls.GetSessionTokenRequest
	lockSTSAPIMockGetSessionTokenRequest.RUnlock()
	return calls
}

// GetSessionTokenWithContext calls GetSessionTokenWithContextFunc.
func (mock *STSAPIMock) GetSessionTokenWithContext(in1 context.Context, in2 *sts.GetSessionTokenInput, in3 ...request.Option) (*sts.GetSessionTokenOutput, error) {
	if mock.GetSessionTokenWithContextFunc == nil {
		panic("STSAPIMock.GetSessionTokenWithContextFunc: method is nil but STSAPI.GetSessionTokenWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *sts.GetSessionTokenInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockSTSAPIMockGetSessionTokenWithContext.Lock()
	mock.calls.GetSessionTokenWithContext = append(mock.calls.GetSessionTokenWithContext, callInfo)
	lockSTSAPIMockGetSessionTokenWithContext.Unlock()
	return mock.GetSessionTokenWithContextFunc(in1, in2, in3...)
}

// GetSessionTokenWithContextCalls gets all the calls that were made to GetSessionTokenWithContext.
// Check the length with:
//     len(mockedSTSAPI.GetSessionTokenWithContextCalls())
func (mock *STSAPIMock) GetSessionTokenWithContextCalls() []struct {
	In1 context.Context
	In2 *sts.GetSessionTokenInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *sts.GetSessionTokenInput
		In3 []request.Option
	}
	lockSTSAPIMockGetSessionTokenWithContext.RLock()
	calls = mock.calls.GetSessionTokenWithContext
	lockSTSAPIMockGetSessionTokenWithContext.RUnlock()
	return calls
}
