// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iam"
	"github.com/aws/aws-sdk-go/service/iam/iamiface"
	"sync"
)

// Ensure, that IAMAPIMock does implement iamiface.IAMAPI.
// If this is not the case, regenerate this file with moq.
var _ iamiface.IAMAPI = &IAMAPIMock{}

// IAMAPIMock is a mock implementation of iamiface.IAMAPI.
//
//	func TestSomethingThatUsesIAMAPI(t *testing.T) {
//
//		// make and configure a mocked iamiface.IAMAPI
//		mockedIAMAPI := &IAMAPIMock{
//			AddClientIDToOpenIDConnectProviderFunc: func(addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
//				panic("mock out the AddClientIDToOpenIDConnectProvider method")
//			},
//			AddClientIDToOpenIDConnectProviderRequestFunc: func(addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput) {
//				panic("mock out the AddClientIDToOpenIDConnectProviderRequest method")
//			},
//			AddClientIDToOpenIDConnectProviderWithContextFunc: func(contextMoqParam context.Context, addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput, options ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
//				panic("mock out the AddClientIDToOpenIDConnectProviderWithContext method")
//			},
//			AddRoleToInstanceProfileFunc: func(addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
//				panic("mock out the AddRoleToInstanceProfile method")
//			},
//			AddRoleToInstanceProfileRequestFunc: func(addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput) {
//				panic("mock out the AddRoleToInstanceProfileRequest method")
//			},
//			AddRoleToInstanceProfileWithContextFunc: func(contextMoqParam context.Context, addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput, options ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
//				panic("mock out the AddRoleToInstanceProfileWithContext method")
//			},
//			AddUserToGroupFunc: func(addUserToGroupInput *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
//				panic("mock out the AddUserToGroup method")
//			},
//			AddUserToGroupRequestFunc: func(addUserToGroupInput *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput) {
//				panic("mock out the AddUserToGroupRequest method")
//			},
//			AddUserToGroupWithContextFunc: func(contextMoqParam context.Context, addUserToGroupInput *iam.AddUserToGroupInput, options ...request.Option) (*iam.AddUserToGroupOutput, error) {
//				panic("mock out the AddUserToGroupWithContext method")
//			},
//			AttachGroupPolicyFunc: func(attachGroupPolicyInput *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
//				panic("mock out the AttachGroupPolicy method")
//			},
//			AttachGroupPolicyRequestFunc: func(attachGroupPolicyInput *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput) {
//				panic("mock out the AttachGroupPolicyRequest method")
//			},
//			AttachGroupPolicyWithContextFunc: func(contextMoqParam context.Context, attachGroupPolicyInput *iam.AttachGroupPolicyInput, options ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
//				panic("mock out the AttachGroupPolicyWithContext method")
//			},
//			AttachRolePolicyFunc: func(attachRolePolicyInput *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
//				panic("mock out the AttachRolePolicy method")
//			},
//			AttachRolePolicyRequestFunc: func(attachRolePolicyInput *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput) {
//				panic("mock out the AttachRolePolicyRequest method")
//			},
//			AttachRolePolicyWithContextFunc: func(contextMoqParam context.Context, attachRolePolicyInput *iam.AttachRolePolicyInput, options ...request.Option) (*iam.AttachRolePolicyOutput, error) {
//				panic("mock out the AttachRolePolicyWithContext method")
//			},
//			AttachUserPolicyFunc: func(attachUserPolicyInput *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
//				panic("mock out the AttachUserPolicy method")
//			},
//			AttachUserPolicyRequestFunc: func(attachUserPolicyInput *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput) {
//				panic("mock out the AttachUserPolicyRequest method")
//			},
//			AttachUserPolicyWithContextFunc: func(contextMoqParam context.Context, attachUserPolicyInput *iam.AttachUserPolicyInput, options ...request.Option) (*iam.AttachUserPolicyOutput, error) {
//				panic("mock out the AttachUserPolicyWithContext method")
//			},
//			ChangePasswordFunc: func(changePasswordInput *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
//				panic("mock out the ChangePassword method")
//			},
//			ChangePasswordRequestFunc: func(changePasswordInput *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput) {
//				panic("mock out the ChangePasswordRequest method")
//			},
//			ChangePasswordWithContextFunc: func(contextMoqParam context.Context, changePasswordInput *iam.ChangePasswordInput, options ...request.Option) (*iam.ChangePasswordOutput, error) {
//				panic("mock out the ChangePasswordWithContext method")
//			},
//			CreateAccessKeyFunc: func(createAccessKeyInput *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
//				panic("mock out the CreateAccessKey method")
//			},
//			CreateAccessKeyRequestFunc: func(createAccessKeyInput *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput) {
//				panic("mock out the CreateAccessKeyRequest method")
//			},
//			CreateAccessKeyWithContextFunc: func(contextMoqParam context.Context, createAccessKeyInput *iam.CreateAccessKeyInput, options ...request.Option) (*iam.CreateAccessKeyOutput, error) {
//				panic("mock out the CreateAccessKeyWithContext method")
//			},
//			CreateAccountAliasFunc: func(createAccountAliasInput *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
//				panic("mock out the CreateAccountAlias method")
//			},
//			CreateAccountAliasRequestFunc: func(createAccountAliasInput *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput) {
//				panic("mock out the CreateAccountAliasRequest method")
//			},
//			CreateAccountAliasWithContextFunc: func(contextMoqParam context.Context, createAccountAliasInput *iam.CreateAccountAliasInput, options ...request.Option) (*iam.CreateAccountAliasOutput, error) {
//				panic("mock out the CreateAccountAliasWithContext method")
//			},
//			CreateGroupFunc: func(createGroupInput *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
//				panic("mock out the CreateGroup method")
//			},
//			CreateGroupRequestFunc: func(createGroupInput *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput) {
//				panic("mock out the CreateGroupRequest method")
//			},
//			CreateGroupWithContextFunc: func(contextMoqParam context.Context, createGroupInput *iam.CreateGroupInput, options ...request.Option) (*iam.CreateGroupOutput, error) {
//				panic("mock out the CreateGroupWithContext method")
//			},
//			CreateInstanceProfileFunc: func(createInstanceProfileInput *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
//				panic("mock out the CreateInstanceProfile method")
//			},
//			CreateInstanceProfileRequestFunc: func(createInstanceProfileInput *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput) {
//				panic("mock out the CreateInstanceProfileRequest method")
//			},
//			CreateInstanceProfileWithContextFunc: func(contextMoqParam context.Context, createInstanceProfileInput *iam.CreateInstanceProfileInput, options ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
//				panic("mock out the CreateInstanceProfileWithContext method")
//			},
//			CreateLoginProfileFunc: func(createLoginProfileInput *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
//				panic("mock out the CreateLoginProfile method")
//			},
//			CreateLoginProfileRequestFunc: func(createLoginProfileInput *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput) {
//				panic("mock out the CreateLoginProfileRequest method")
//			},
//			CreateLoginProfileWithContextFunc: func(contextMoqParam context.Context, createLoginProfileInput *iam.CreateLoginProfileInput, options ...request.Option) (*iam.CreateLoginProfileOutput, error) {
//				panic("mock out the CreateLoginProfileWithContext method")
//			},
//			CreateOpenIDConnectProviderFunc: func(createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
//				panic("mock out the CreateOpenIDConnectProvider method")
//			},
//			CreateOpenIDConnectProviderRequestFunc: func(createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput) {
//				panic("mock out the CreateOpenIDConnectProviderRequest method")
//			},
//			CreateOpenIDConnectProviderWithContextFunc: func(contextMoqParam context.Context, createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput, options ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
//				panic("mock out the CreateOpenIDConnectProviderWithContext method")
//			},
//			CreatePolicyFunc: func(createPolicyInput *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
//				panic("mock out the CreatePolicy method")
//			},
//			CreatePolicyRequestFunc: func(createPolicyInput *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput) {
//				panic("mock out the CreatePolicyRequest method")
//			},
//			CreatePolicyVersionFunc: func(createPolicyVersionInput *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
//				panic("mock out the CreatePolicyVersion method")
//			},
//			CreatePolicyVersionRequestFunc: func(createPolicyVersionInput *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput) {
//				panic("mock out the CreatePolicyVersionRequest method")
//			},
//			CreatePolicyVersionWithContextFunc: func(contextMoqParam context.Context, createPolicyVersionInput *iam.CreatePolicyVersionInput, options ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
//				panic("mock out the CreatePolicyVersionWithContext method")
//			},
//			CreatePolicyWithContextFunc: func(contextMoqParam context.Context, createPolicyInput *iam.CreatePolicyInput, options ...request.Option) (*iam.CreatePolicyOutput, error) {
//				panic("mock out the CreatePolicyWithContext method")
//			},
//			CreateRoleFunc: func(createRoleInput *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
//				panic("mock out the CreateRole method")
//			},
//			CreateRoleRequestFunc: func(createRoleInput *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput) {
//				panic("mock out the CreateRoleRequest method")
//			},
//			CreateRoleWithContextFunc: func(contextMoqParam context.Context, createRoleInput *iam.CreateRoleInput, options ...request.Option) (*iam.CreateRoleOutput, error) {
//				panic("mock out the CreateRoleWithContext method")
//			},
//			CreateSAMLProviderFunc: func(createSAMLProviderInput *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
//				panic("mock out the CreateSAMLProvider method")
//			},
//			CreateSAMLProviderRequestFunc: func(createSAMLProviderInput *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput) {
//				panic("mock out the CreateSAMLProviderRequest method")
//			},
//			CreateSAMLProviderWithContextFunc: func(contextMoqParam context.Context, createSAMLProviderInput *iam.CreateSAMLProviderInput, options ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
//				panic("mock out the CreateSAMLProviderWithContext method")
//			},
//			CreateServiceLinkedRoleFunc: func(createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
//				panic("mock out the CreateServiceLinkedRole method")
//			},
//			CreateServiceLinkedRoleRequestFunc: func(createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput) {
//				panic("mock out the CreateServiceLinkedRoleRequest method")
//			},
//			CreateServiceLinkedRoleWithContextFunc: func(contextMoqParam context.Context, createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput, options ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
//				panic("mock out the CreateServiceLinkedRoleWithContext method")
//			},
//			CreateServiceSpecificCredentialFunc: func(createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
//				panic("mock out the CreateServiceSpecificCredential method")
//			},
//			CreateServiceSpecificCredentialRequestFunc: func(createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput) {
//				panic("mock out the CreateServiceSpecificCredentialRequest method")
//			},
//			CreateServiceSpecificCredentialWithContextFunc: func(contextMoqParam context.Context, createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput, options ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
//				panic("mock out the CreateServiceSpecificCredentialWithContext method")
//			},
//			CreateUserFunc: func(createUserInput *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
//				panic("mock out the CreateUser method")
//			},
//			CreateUserRequestFunc: func(createUserInput *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput) {
//				panic("mock out the CreateUserRequest method")
//			},
//			CreateUserWithContextFunc: func(contextMoqParam context.Context, createUserInput *iam.CreateUserInput, options ...request.Option) (*iam.CreateUserOutput, error) {
//				panic("mock out the CreateUserWithContext method")
//			},
//			CreateVirtualMFADeviceFunc: func(createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
//				panic("mock out the CreateVirtualMFADevice method")
//			},
//			CreateVirtualMFADeviceRequestFunc: func(createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput) {
//				panic("mock out the CreateVirtualMFADeviceRequest method")
//			},
//			CreateVirtualMFADeviceWithContextFunc: func(contextMoqParam context.Context, createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput, options ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
//				panic("mock out the CreateVirtualMFADeviceWithContext method")
//			},
//			DeactivateMFADeviceFunc: func(deactivateMFADeviceInput *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
//				panic("mock out the DeactivateMFADevice method")
//			},
//			DeactivateMFADeviceRequestFunc: func(deactivateMFADeviceInput *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput) {
//				panic("mock out the DeactivateMFADeviceRequest method")
//			},
//			DeactivateMFADeviceWithContextFunc: func(contextMoqParam context.Context, deactivateMFADeviceInput *iam.DeactivateMFADeviceInput, options ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
//				panic("mock out the DeactivateMFADeviceWithContext method")
//			},
//			DeleteAccessKeyFunc: func(deleteAccessKeyInput *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
//				panic("mock out the DeleteAccessKey method")
//			},
//			DeleteAccessKeyRequestFunc: func(deleteAccessKeyInput *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput) {
//				panic("mock out the DeleteAccessKeyRequest method")
//			},
//			DeleteAccessKeyWithContextFunc: func(contextMoqParam context.Context, deleteAccessKeyInput *iam.DeleteAccessKeyInput, options ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
//				panic("mock out the DeleteAccessKeyWithContext method")
//			},
//			DeleteAccountAliasFunc: func(deleteAccountAliasInput *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
//				panic("mock out the DeleteAccountAlias method")
//			},
//			DeleteAccountAliasRequestFunc: func(deleteAccountAliasInput *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput) {
//				panic("mock out the DeleteAccountAliasRequest method")
//			},
//			DeleteAccountAliasWithContextFunc: func(contextMoqParam context.Context, deleteAccountAliasInput *iam.DeleteAccountAliasInput, options ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
//				panic("mock out the DeleteAccountAliasWithContext method")
//			},
//			DeleteAccountPasswordPolicyFunc: func(deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
//				panic("mock out the DeleteAccountPasswordPolicy method")
//			},
//			DeleteAccountPasswordPolicyRequestFunc: func(deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput) {
//				panic("mock out the DeleteAccountPasswordPolicyRequest method")
//			},
//			DeleteAccountPasswordPolicyWithContextFunc: func(contextMoqParam context.Context, deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput, options ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
//				panic("mock out the DeleteAccountPasswordPolicyWithContext method")
//			},
//			DeleteGroupFunc: func(deleteGroupInput *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
//				panic("mock out the DeleteGroup method")
//			},
//			DeleteGroupPolicyFunc: func(deleteGroupPolicyInput *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
//				panic("mock out the DeleteGroupPolicy method")
//			},
//			DeleteGroupPolicyRequestFunc: func(deleteGroupPolicyInput *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput) {
//				panic("mock out the DeleteGroupPolicyRequest method")
//			},
//			DeleteGroupPolicyWithContextFunc: func(contextMoqParam context.Context, deleteGroupPolicyInput *iam.DeleteGroupPolicyInput, options ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
//				panic("mock out the DeleteGroupPolicyWithContext method")
//			},
//			DeleteGroupRequestFunc: func(deleteGroupInput *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput) {
//				panic("mock out the DeleteGroupRequest method")
//			},
//			DeleteGroupWithContextFunc: func(contextMoqParam context.Context, deleteGroupInput *iam.DeleteGroupInput, options ...request.Option) (*iam.DeleteGroupOutput, error) {
//				panic("mock out the DeleteGroupWithContext method")
//			},
//			DeleteInstanceProfileFunc: func(deleteInstanceProfileInput *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
//				panic("mock out the DeleteInstanceProfile method")
//			},
//			DeleteInstanceProfileRequestFunc: func(deleteInstanceProfileInput *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput) {
//				panic("mock out the DeleteInstanceProfileRequest method")
//			},
//			DeleteInstanceProfileWithContextFunc: func(contextMoqParam context.Context, deleteInstanceProfileInput *iam.DeleteInstanceProfileInput, options ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
//				panic("mock out the DeleteInstanceProfileWithContext method")
//			},
//			DeleteLoginProfileFunc: func(deleteLoginProfileInput *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
//				panic("mock out the DeleteLoginProfile method")
//			},
//			DeleteLoginProfileRequestFunc: func(deleteLoginProfileInput *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput) {
//				panic("mock out the DeleteLoginProfileRequest method")
//			},
//			DeleteLoginProfileWithContextFunc: func(contextMoqParam context.Context, deleteLoginProfileInput *iam.DeleteLoginProfileInput, options ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
//				panic("mock out the DeleteLoginProfileWithContext method")
//			},
//			DeleteOpenIDConnectProviderFunc: func(deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
//				panic("mock out the DeleteOpenIDConnectProvider method")
//			},
//			DeleteOpenIDConnectProviderRequestFunc: func(deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput) {
//				panic("mock out the DeleteOpenIDConnectProviderRequest method")
//			},
//			DeleteOpenIDConnectProviderWithContextFunc: func(contextMoqParam context.Context, deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput, options ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
//				panic("mock out the DeleteOpenIDConnectProviderWithContext method")
//			},
//			DeletePolicyFunc: func(deletePolicyInput *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
//				panic("mock out the DeletePolicy method")
//			},
//			DeletePolicyRequestFunc: func(deletePolicyInput *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput) {
//				panic("mock out the DeletePolicyRequest method")
//			},
//			DeletePolicyVersionFunc: func(deletePolicyVersionInput *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
//				panic("mock out the DeletePolicyVersion method")
//			},
//			DeletePolicyVersionRequestFunc: func(deletePolicyVersionInput *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput) {
//				panic("mock out the DeletePolicyVersionRequest method")
//			},
//			DeletePolicyVersionWithContextFunc: func(contextMoqParam context.Context, deletePolicyVersionInput *iam.DeletePolicyVersionInput, options ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
//				panic("mock out the DeletePolicyVersionWithContext method")
//			},
//			DeletePolicyWithContextFunc: func(contextMoqParam context.Context, deletePolicyInput *iam.DeletePolicyInput, options ...request.Option) (*iam.DeletePolicyOutput, error) {
//				panic("mock out the DeletePolicyWithContext method")
//			},
//			DeleteRoleFunc: func(deleteRoleInput *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
//				panic("mock out the DeleteRole method")
//			},
//			DeleteRolePermissionsBoundaryFunc: func(deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
//				panic("mock out the DeleteRolePermissionsBoundary method")
//			},
//			DeleteRolePermissionsBoundaryRequestFunc: func(deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput) {
//				panic("mock out the DeleteRolePermissionsBoundaryRequest method")
//			},
//			DeleteRolePermissionsBoundaryWithContextFunc: func(contextMoqParam context.Context, deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput, options ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
//				panic("mock out the DeleteRolePermissionsBoundaryWithContext method")
//			},
//			DeleteRolePolicyFunc: func(deleteRolePolicyInput *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
//				panic("mock out the DeleteRolePolicy method")
//			},
//			DeleteRolePolicyRequestFunc: func(deleteRolePolicyInput *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput) {
//				panic("mock out the DeleteRolePolicyRequest method")
//			},
//			DeleteRolePolicyWithContextFunc: func(contextMoqParam context.Context, deleteRolePolicyInput *iam.DeleteRolePolicyInput, options ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
//				panic("mock out the DeleteRolePolicyWithContext method")
//			},
//			DeleteRoleRequestFunc: func(deleteRoleInput *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput) {
//				panic("mock out the DeleteRoleRequest method")
//			},
//			DeleteRoleWithContextFunc: func(contextMoqParam context.Context, deleteRoleInput *iam.DeleteRoleInput, options ...request.Option) (*iam.DeleteRoleOutput, error) {
//				panic("mock out the DeleteRoleWithContext method")
//			},
//			DeleteSAMLProviderFunc: func(deleteSAMLProviderInput *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
//				panic("mock out the DeleteSAMLProvider method")
//			},
//			DeleteSAMLProviderRequestFunc: func(deleteSAMLProviderInput *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput) {
//				panic("mock out the DeleteSAMLProviderRequest method")
//			},
//			DeleteSAMLProviderWithContextFunc: func(contextMoqParam context.Context, deleteSAMLProviderInput *iam.DeleteSAMLProviderInput, options ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
//				panic("mock out the DeleteSAMLProviderWithContext method")
//			},
//			DeleteSSHPublicKeyFunc: func(deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
//				panic("mock out the DeleteSSHPublicKey method")
//			},
//			DeleteSSHPublicKeyRequestFunc: func(deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput) {
//				panic("mock out the DeleteSSHPublicKeyRequest method")
//			},
//			DeleteSSHPublicKeyWithContextFunc: func(contextMoqParam context.Context, deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput, options ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
//				panic("mock out the DeleteSSHPublicKeyWithContext method")
//			},
//			DeleteServerCertificateFunc: func(deleteServerCertificateInput *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
//				panic("mock out the DeleteServerCertificate method")
//			},
//			DeleteServerCertificateRequestFunc: func(deleteServerCertificateInput *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput) {
//				panic("mock out the DeleteServerCertificateRequest method")
//			},
//			DeleteServerCertificateWithContextFunc: func(contextMoqParam context.Context, deleteServerCertificateInput *iam.DeleteServerCertificateInput, options ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
//				panic("mock out the DeleteServerCertificateWithContext method")
//			},
//			DeleteServiceLinkedRoleFunc: func(deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
//				panic("mock out the DeleteServiceLinkedRole method")
//			},
//			DeleteServiceLinkedRoleRequestFunc: func(deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput) {
//				panic("mock out the DeleteServiceLinkedRoleRequest method")
//			},
//			DeleteServiceLinkedRoleWithContextFunc: func(contextMoqParam context.Context, deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput, options ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
//				panic("mock out the DeleteServiceLinkedRoleWithContext method")
//			},
//			DeleteServiceSpecificCredentialFunc: func(deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
//				panic("mock out the DeleteServiceSpecificCredential method")
//			},
//			DeleteServiceSpecificCredentialRequestFunc: func(deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput) {
//				panic("mock out the DeleteServiceSpecificCredentialRequest method")
//			},
//			DeleteServiceSpecificCredentialWithContextFunc: func(contextMoqParam context.Context, deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput, options ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
//				panic("mock out the DeleteServiceSpecificCredentialWithContext method")
//			},
//			DeleteSigningCertificateFunc: func(deleteSigningCertificateInput *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
//				panic("mock out the DeleteSigningCertificate method")
//			},
//			DeleteSigningCertificateRequestFunc: func(deleteSigningCertificateInput *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput) {
//				panic("mock out the DeleteSigningCertificateRequest method")
//			},
//			DeleteSigningCertificateWithContextFunc: func(contextMoqParam context.Context, deleteSigningCertificateInput *iam.DeleteSigningCertificateInput, options ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
//				panic("mock out the DeleteSigningCertificateWithContext method")
//			},
//			DeleteUserFunc: func(deleteUserInput *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
//				panic("mock out the DeleteUser method")
//			},
//			DeleteUserPermissionsBoundaryFunc: func(deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
//				panic("mock out the DeleteUserPermissionsBoundary method")
//			},
//			DeleteUserPermissionsBoundaryRequestFunc: func(deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput) {
//				panic("mock out the DeleteUserPermissionsBoundaryRequest method")
//			},
//			DeleteUserPermissionsBoundaryWithContextFunc: func(contextMoqParam context.Context, deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput, options ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
//				panic("mock out the DeleteUserPermissionsBoundaryWithContext method")
//			},
//			DeleteUserPolicyFunc: func(deleteUserPolicyInput *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
//				panic("mock out the DeleteUserPolicy method")
//			},
//			DeleteUserPolicyRequestFunc: func(deleteUserPolicyInput *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput) {
//				panic("mock out the DeleteUserPolicyRequest method")
//			},
//			DeleteUserPolicyWithContextFunc: func(contextMoqParam context.Context, deleteUserPolicyInput *iam.DeleteUserPolicyInput, options ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
//				panic("mock out the DeleteUserPolicyWithContext method")
//			},
//			DeleteUserRequestFunc: func(deleteUserInput *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput) {
//				panic("mock out the DeleteUserRequest method")
//			},
//			DeleteUserWithContextFunc: func(contextMoqParam context.Context, deleteUserInput *iam.DeleteUserInput, options ...request.Option) (*iam.DeleteUserOutput, error) {
//				panic("mock out the DeleteUserWithContext method")
//			},
//			DeleteVirtualMFADeviceFunc: func(deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
//				panic("mock out the DeleteVirtualMFADevice method")
//			},
//			DeleteVirtualMFADeviceRequestFunc: func(deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput) {
//				panic("mock out the DeleteVirtualMFADeviceRequest method")
//			},
//			DeleteVirtualMFADeviceWithContextFunc: func(contextMoqParam context.Context, deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput, options ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
//				panic("mock out the DeleteVirtualMFADeviceWithContext method")
//			},
//			DetachGroupPolicyFunc: func(detachGroupPolicyInput *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
//				panic("mock out the DetachGroupPolicy method")
//			},
//			DetachGroupPolicyRequestFunc: func(detachGroupPolicyInput *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput) {
//				panic("mock out the DetachGroupPolicyRequest method")
//			},
//			DetachGroupPolicyWithContextFunc: func(contextMoqParam context.Context, detachGroupPolicyInput *iam.DetachGroupPolicyInput, options ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
//				panic("mock out the DetachGroupPolicyWithContext method")
//			},
//			DetachRolePolicyFunc: func(detachRolePolicyInput *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
//				panic("mock out the DetachRolePolicy method")
//			},
//			DetachRolePolicyRequestFunc: func(detachRolePolicyInput *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput) {
//				panic("mock out the DetachRolePolicyRequest method")
//			},
//			DetachRolePolicyWithContextFunc: func(contextMoqParam context.Context, detachRolePolicyInput *iam.DetachRolePolicyInput, options ...request.Option) (*iam.DetachRolePolicyOutput, error) {
//				panic("mock out the DetachRolePolicyWithContext method")
//			},
//			DetachUserPolicyFunc: func(detachUserPolicyInput *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
//				panic("mock out the DetachUserPolicy method")
//			},
//			DetachUserPolicyRequestFunc: func(detachUserPolicyInput *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput) {
//				panic("mock out the DetachUserPolicyRequest method")
//			},
//			DetachUserPolicyWithContextFunc: func(contextMoqParam context.Context, detachUserPolicyInput *iam.DetachUserPolicyInput, options ...request.Option) (*iam.DetachUserPolicyOutput, error) {
//				panic("mock out the DetachUserPolicyWithContext method")
//			},
//			EnableMFADeviceFunc: func(enableMFADeviceInput *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
//				panic("mock out the EnableMFADevice method")
//			},
//			EnableMFADeviceRequestFunc: func(enableMFADeviceInput *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput) {
//				panic("mock out the EnableMFADeviceRequest method")
//			},
//			EnableMFADeviceWithContextFunc: func(contextMoqParam context.Context, enableMFADeviceInput *iam.EnableMFADeviceInput, options ...request.Option) (*iam.EnableMFADeviceOutput, error) {
//				panic("mock out the EnableMFADeviceWithContext method")
//			},
//			GenerateCredentialReportFunc: func(generateCredentialReportInput *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
//				panic("mock out the GenerateCredentialReport method")
//			},
//			GenerateCredentialReportRequestFunc: func(generateCredentialReportInput *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput) {
//				panic("mock out the GenerateCredentialReportRequest method")
//			},
//			GenerateCredentialReportWithContextFunc: func(contextMoqParam context.Context, generateCredentialReportInput *iam.GenerateCredentialReportInput, options ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
//				panic("mock out the GenerateCredentialReportWithContext method")
//			},
//			GenerateOrganizationsAccessReportFunc: func(generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
//				panic("mock out the GenerateOrganizationsAccessReport method")
//			},
//			GenerateOrganizationsAccessReportRequestFunc: func(generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput) {
//				panic("mock out the GenerateOrganizationsAccessReportRequest method")
//			},
//			GenerateOrganizationsAccessReportWithContextFunc: func(contextMoqParam context.Context, generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput, options ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {
//				panic("mock out the GenerateOrganizationsAccessReportWithContext method")
//			},
//			GenerateServiceLastAccessedDetailsFunc: func(generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
//				panic("mock out the GenerateServiceLastAccessedDetails method")
//			},
//			GenerateServiceLastAccessedDetailsRequestFunc: func(generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput) {
//				panic("mock out the GenerateServiceLastAccessedDetailsRequest method")
//			},
//			GenerateServiceLastAccessedDetailsWithContextFunc: func(contextMoqParam context.Context, generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput, options ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
//				panic("mock out the GenerateServiceLastAccessedDetailsWithContext method")
//			},
//			GetAccessKeyLastUsedFunc: func(getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
//				panic("mock out the GetAccessKeyLastUsed method")
//			},
//			GetAccessKeyLastUsedRequestFunc: func(getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput) {
//				panic("mock out the GetAccessKeyLastUsedRequest method")
//			},
//			GetAccessKeyLastUsedWithContextFunc: func(contextMoqParam context.Context, getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput, options ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
//				panic("mock out the GetAccessKeyLastUsedWithContext method")
//			},
//			GetAccountAuthorizationDetailsFunc: func(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
//				panic("mock out the GetAccountAuthorizationDetails method")
//			},
//			GetAccountAuthorizationDetailsPagesFunc: func(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
//				panic("mock out the GetAccountAuthorizationDetailsPages method")
//			},
//			GetAccountAuthorizationDetailsPagesWithContextFunc: func(contextMoqParam context.Context, getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the GetAccountAuthorizationDetailsPagesWithContext method")
//			},
//			GetAccountAuthorizationDetailsRequestFunc: func(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput) {
//				panic("mock out the GetAccountAuthorizationDetailsRequest method")
//			},
//			GetAccountAuthorizationDetailsWithContextFunc: func(contextMoqParam context.Context, getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, options ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
//				panic("mock out the GetAccountAuthorizationDetailsWithContext method")
//			},
//			GetAccountPasswordPolicyFunc: func(getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
//				panic("mock out the GetAccountPasswordPolicy method")
//			},
//			GetAccountPasswordPolicyRequestFunc: func(getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput) {
//				panic("mock out the GetAccountPasswordPolicyRequest method")
//			},
//			GetAccountPasswordPolicyWithContextFunc: func(contextMoqParam context.Context, getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput, options ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
//				panic("mock out the GetAccountPasswordPolicyWithContext method")
//			},
//			GetAccountSummaryFunc: func(getAccountSummaryInput *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
//				panic("mock out the GetAccountSummary method")
//			},
//			GetAccountSummaryRequestFunc: func(getAccountSummaryInput *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput) {
//				panic("mock out the GetAccountSummaryRequest method")
//			},
//			GetAccountSummaryWithContextFunc: func(contextMoqParam context.Context, getAccountSummaryInput *iam.GetAccountSummaryInput, options ...request.Option) (*iam.GetAccountSummaryOutput, error) {
//				panic("mock out the GetAccountSummaryWithContext method")
//			},
//			GetContextKeysForCustomPolicyFunc: func(getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
//				panic("mock out the GetContextKeysForCustomPolicy method")
//			},
//			GetContextKeysForCustomPolicyRequestFunc: func(getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
//				panic("mock out the GetContextKeysForCustomPolicyRequest method")
//			},
//			GetContextKeysForCustomPolicyWithContextFunc: func(contextMoqParam context.Context, getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput, options ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
//				panic("mock out the GetContextKeysForCustomPolicyWithContext method")
//			},
//			GetContextKeysForPrincipalPolicyFunc: func(getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
//				panic("mock out the GetContextKeysForPrincipalPolicy method")
//			},
//			GetContextKeysForPrincipalPolicyRequestFunc: func(getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
//				panic("mock out the GetContextKeysForPrincipalPolicyRequest method")
//			},
//			GetContextKeysForPrincipalPolicyWithContextFunc: func(contextMoqParam context.Context, getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput, options ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
//				panic("mock out the GetContextKeysForPrincipalPolicyWithContext method")
//			},
//			GetCredentialReportFunc: func(getCredentialReportInput *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
//				panic("mock out the GetCredentialReport method")
//			},
//			GetCredentialReportRequestFunc: func(getCredentialReportInput *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput) {
//				panic("mock out the GetCredentialReportRequest method")
//			},
//			GetCredentialReportWithContextFunc: func(contextMoqParam context.Context, getCredentialReportInput *iam.GetCredentialReportInput, options ...request.Option) (*iam.GetCredentialReportOutput, error) {
//				panic("mock out the GetCredentialReportWithContext method")
//			},
//			GetGroupFunc: func(getGroupInput *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
//				panic("mock out the GetGroup method")
//			},
//			GetGroupPagesFunc: func(getGroupInput *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool) error {
//				panic("mock out the GetGroupPages method")
//			},
//			GetGroupPagesWithContextFunc: func(contextMoqParam context.Context, getGroupInput *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the GetGroupPagesWithContext method")
//			},
//			GetGroupPolicyFunc: func(getGroupPolicyInput *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
//				panic("mock out the GetGroupPolicy method")
//			},
//			GetGroupPolicyRequestFunc: func(getGroupPolicyInput *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput) {
//				panic("mock out the GetGroupPolicyRequest method")
//			},
//			GetGroupPolicyWithContextFunc: func(contextMoqParam context.Context, getGroupPolicyInput *iam.GetGroupPolicyInput, options ...request.Option) (*iam.GetGroupPolicyOutput, error) {
//				panic("mock out the GetGroupPolicyWithContext method")
//			},
//			GetGroupRequestFunc: func(getGroupInput *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput) {
//				panic("mock out the GetGroupRequest method")
//			},
//			GetGroupWithContextFunc: func(contextMoqParam context.Context, getGroupInput *iam.GetGroupInput, options ...request.Option) (*iam.GetGroupOutput, error) {
//				panic("mock out the GetGroupWithContext method")
//			},
//			GetInstanceProfileFunc: func(getInstanceProfileInput *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
//				panic("mock out the GetInstanceProfile method")
//			},
//			GetInstanceProfileRequestFunc: func(getInstanceProfileInput *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput) {
//				panic("mock out the GetInstanceProfileRequest method")
//			},
//			GetInstanceProfileWithContextFunc: func(contextMoqParam context.Context, getInstanceProfileInput *iam.GetInstanceProfileInput, options ...request.Option) (*iam.GetInstanceProfileOutput, error) {
//				panic("mock out the GetInstanceProfileWithContext method")
//			},
//			GetLoginProfileFunc: func(getLoginProfileInput *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
//				panic("mock out the GetLoginProfile method")
//			},
//			GetLoginProfileRequestFunc: func(getLoginProfileInput *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput) {
//				panic("mock out the GetLoginProfileRequest method")
//			},
//			GetLoginProfileWithContextFunc: func(contextMoqParam context.Context, getLoginProfileInput *iam.GetLoginProfileInput, options ...request.Option) (*iam.GetLoginProfileOutput, error) {
//				panic("mock out the GetLoginProfileWithContext method")
//			},
//			GetOpenIDConnectProviderFunc: func(getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
//				panic("mock out the GetOpenIDConnectProvider method")
//			},
//			GetOpenIDConnectProviderRequestFunc: func(getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput) {
//				panic("mock out the GetOpenIDConnectProviderRequest method")
//			},
//			GetOpenIDConnectProviderWithContextFunc: func(contextMoqParam context.Context, getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput, options ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
//				panic("mock out the GetOpenIDConnectProviderWithContext method")
//			},
//			GetOrganizationsAccessReportFunc: func(getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
//				panic("mock out the GetOrganizationsAccessReport method")
//			},
//			GetOrganizationsAccessReportRequestFunc: func(getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput) {
//				panic("mock out the GetOrganizationsAccessReportRequest method")
//			},
//			GetOrganizationsAccessReportWithContextFunc: func(contextMoqParam context.Context, getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput, options ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {
//				panic("mock out the GetOrganizationsAccessReportWithContext method")
//			},
//			GetPolicyFunc: func(getPolicyInput *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
//				panic("mock out the GetPolicy method")
//			},
//			GetPolicyRequestFunc: func(getPolicyInput *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput) {
//				panic("mock out the GetPolicyRequest method")
//			},
//			GetPolicyVersionFunc: func(getPolicyVersionInput *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
//				panic("mock out the GetPolicyVersion method")
//			},
//			GetPolicyVersionRequestFunc: func(getPolicyVersionInput *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput) {
//				panic("mock out the GetPolicyVersionRequest method")
//			},
//			GetPolicyVersionWithContextFunc: func(contextMoqParam context.Context, getPolicyVersionInput *iam.GetPolicyVersionInput, options ...request.Option) (*iam.GetPolicyVersionOutput, error) {
//				panic("mock out the GetPolicyVersionWithContext method")
//			},
//			GetPolicyWithContextFunc: func(contextMoqParam context.Context, getPolicyInput *iam.GetPolicyInput, options ...request.Option) (*iam.GetPolicyOutput, error) {
//				panic("mock out the GetPolicyWithContext method")
//			},
//			GetRoleFunc: func(getRoleInput *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
//				panic("mock out the GetRole method")
//			},
//			GetRolePolicyFunc: func(getRolePolicyInput *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
//				panic("mock out the GetRolePolicy method")
//			},
//			GetRolePolicyRequestFunc: func(getRolePolicyInput *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput) {
//				panic("mock out the GetRolePolicyRequest method")
//			},
//			GetRolePolicyWithContextFunc: func(contextMoqParam context.Context, getRolePolicyInput *iam.GetRolePolicyInput, options ...request.Option) (*iam.GetRolePolicyOutput, error) {
//				panic("mock out the GetRolePolicyWithContext method")
//			},
//			GetRoleRequestFunc: func(getRoleInput *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput) {
//				panic("mock out the GetRoleRequest method")
//			},
//			GetRoleWithContextFunc: func(contextMoqParam context.Context, getRoleInput *iam.GetRoleInput, options ...request.Option) (*iam.GetRoleOutput, error) {
//				panic("mock out the GetRoleWithContext method")
//			},
//			GetSAMLProviderFunc: func(getSAMLProviderInput *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
//				panic("mock out the GetSAMLProvider method")
//			},
//			GetSAMLProviderRequestFunc: func(getSAMLProviderInput *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput) {
//				panic("mock out the GetSAMLProviderRequest method")
//			},
//			GetSAMLProviderWithContextFunc: func(contextMoqParam context.Context, getSAMLProviderInput *iam.GetSAMLProviderInput, options ...request.Option) (*iam.GetSAMLProviderOutput, error) {
//				panic("mock out the GetSAMLProviderWithContext method")
//			},
//			GetSSHPublicKeyFunc: func(getSSHPublicKeyInput *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
//				panic("mock out the GetSSHPublicKey method")
//			},
//			GetSSHPublicKeyRequestFunc: func(getSSHPublicKeyInput *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput) {
//				panic("mock out the GetSSHPublicKeyRequest method")
//			},
//			GetSSHPublicKeyWithContextFunc: func(contextMoqParam context.Context, getSSHPublicKeyInput *iam.GetSSHPublicKeyInput, options ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
//				panic("mock out the GetSSHPublicKeyWithContext method")
//			},
//			GetServerCertificateFunc: func(getServerCertificateInput *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
//				panic("mock out the GetServerCertificate method")
//			},
//			GetServerCertificateRequestFunc: func(getServerCertificateInput *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput) {
//				panic("mock out the GetServerCertificateRequest method")
//			},
//			GetServerCertificateWithContextFunc: func(contextMoqParam context.Context, getServerCertificateInput *iam.GetServerCertificateInput, options ...request.Option) (*iam.GetServerCertificateOutput, error) {
//				panic("mock out the GetServerCertificateWithContext method")
//			},
//			GetServiceLastAccessedDetailsFunc: func(getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
//				panic("mock out the GetServiceLastAccessedDetails method")
//			},
//			GetServiceLastAccessedDetailsRequestFunc: func(getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput) {
//				panic("mock out the GetServiceLastAccessedDetailsRequest method")
//			},
//			GetServiceLastAccessedDetailsWithContextFunc: func(contextMoqParam context.Context, getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput, options ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {
//				panic("mock out the GetServiceLastAccessedDetailsWithContext method")
//			},
//			GetServiceLastAccessedDetailsWithEntitiesFunc: func(getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
//				panic("mock out the GetServiceLastAccessedDetailsWithEntities method")
//			},
//			GetServiceLastAccessedDetailsWithEntitiesRequestFunc: func(getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
//				panic("mock out the GetServiceLastAccessedDetailsWithEntitiesRequest method")
//			},
//			GetServiceLastAccessedDetailsWithEntitiesWithContextFunc: func(contextMoqParam context.Context, getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput, options ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
//				panic("mock out the GetServiceLastAccessedDetailsWithEntitiesWithContext method")
//			},
//			GetServiceLinkedRoleDeletionStatusFunc: func(getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
//				panic("mock out the GetServiceLinkedRoleDeletionStatus method")
//			},
//			GetServiceLinkedRoleDeletionStatusRequestFunc: func(getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput) {
//				panic("mock out the GetServiceLinkedRoleDeletionStatusRequest method")
//			},
//			GetServiceLinkedRoleDeletionStatusWithContextFunc: func(contextMoqParam context.Context, getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput, options ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
//				panic("mock out the GetServiceLinkedRoleDeletionStatusWithContext method")
//			},
//			GetUserFunc: func(getUserInput *iam.GetUserInput) (*iam.GetUserOutput, error) {
//				panic("mock out the GetUser method")
//			},
//			GetUserPolicyFunc: func(getUserPolicyInput *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
//				panic("mock out the GetUserPolicy method")
//			},
//			GetUserPolicyRequestFunc: func(getUserPolicyInput *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput) {
//				panic("mock out the GetUserPolicyRequest method")
//			},
//			GetUserPolicyWithContextFunc: func(contextMoqParam context.Context, getUserPolicyInput *iam.GetUserPolicyInput, options ...request.Option) (*iam.GetUserPolicyOutput, error) {
//				panic("mock out the GetUserPolicyWithContext method")
//			},
//			GetUserRequestFunc: func(getUserInput *iam.GetUserInput) (*request.Request, *iam.GetUserOutput) {
//				panic("mock out the GetUserRequest method")
//			},
//			GetUserWithContextFunc: func(contextMoqParam context.Context, getUserInput *iam.GetUserInput, options ...request.Option) (*iam.GetUserOutput, error) {
//				panic("mock out the GetUserWithContext method")
//			},
//			ListAccessKeysFunc: func(listAccessKeysInput *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
//				panic("mock out the ListAccessKeys method")
//			},
//			ListAccessKeysPagesFunc: func(listAccessKeysInput *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool) error {
//				panic("mock out the ListAccessKeysPages method")
//			},
//			ListAccessKeysPagesWithContextFunc: func(contextMoqParam context.Context, listAccessKeysInput *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListAccessKeysPagesWithContext method")
//			},
//			ListAccessKeysRequestFunc: func(listAccessKeysInput *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput) {
//				panic("mock out the ListAccessKeysRequest method")
//			},
//			ListAccessKeysWithContextFunc: func(contextMoqParam context.Context, listAccessKeysInput *iam.ListAccessKeysInput, options ...request.Option) (*iam.ListAccessKeysOutput, error) {
//				panic("mock out the ListAccessKeysWithContext method")
//			},
//			ListAccountAliasesFunc: func(listAccountAliasesInput *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
//				panic("mock out the ListAccountAliases method")
//			},
//			ListAccountAliasesPagesFunc: func(listAccountAliasesInput *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool) error {
//				panic("mock out the ListAccountAliasesPages method")
//			},
//			ListAccountAliasesPagesWithContextFunc: func(contextMoqParam context.Context, listAccountAliasesInput *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListAccountAliasesPagesWithContext method")
//			},
//			ListAccountAliasesRequestFunc: func(listAccountAliasesInput *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput) {
//				panic("mock out the ListAccountAliasesRequest method")
//			},
//			ListAccountAliasesWithContextFunc: func(contextMoqParam context.Context, listAccountAliasesInput *iam.ListAccountAliasesInput, options ...request.Option) (*iam.ListAccountAliasesOutput, error) {
//				panic("mock out the ListAccountAliasesWithContext method")
//			},
//			ListAttachedGroupPoliciesFunc: func(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
//				panic("mock out the ListAttachedGroupPolicies method")
//			},
//			ListAttachedGroupPoliciesPagesFunc: func(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
//				panic("mock out the ListAttachedGroupPoliciesPages method")
//			},
//			ListAttachedGroupPoliciesPagesWithContextFunc: func(contextMoqParam context.Context, listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListAttachedGroupPoliciesPagesWithContext method")
//			},
//			ListAttachedGroupPoliciesRequestFunc: func(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput) {
//				panic("mock out the ListAttachedGroupPoliciesRequest method")
//			},
//			ListAttachedGroupPoliciesWithContextFunc: func(contextMoqParam context.Context, listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, options ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
//				panic("mock out the ListAttachedGroupPoliciesWithContext method")
//			},
//			ListAttachedRolePoliciesFunc: func(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
//				panic("mock out the ListAttachedRolePolicies method")
//			},
//			ListAttachedRolePoliciesPagesFunc: func(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
//				panic("mock out the ListAttachedRolePoliciesPages method")
//			},
//			ListAttachedRolePoliciesPagesWithContextFunc: func(contextMoqParam context.Context, listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListAttachedRolePoliciesPagesWithContext method")
//			},
//			ListAttachedRolePoliciesRequestFunc: func(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput) {
//				panic("mock out the ListAttachedRolePoliciesRequest method")
//			},
//			ListAttachedRolePoliciesWithContextFunc: func(contextMoqParam context.Context, listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, options ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
//				panic("mock out the ListAttachedRolePoliciesWithContext method")
//			},
//			ListAttachedUserPoliciesFunc: func(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
//				panic("mock out the ListAttachedUserPolicies method")
//			},
//			ListAttachedUserPoliciesPagesFunc: func(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
//				panic("mock out the ListAttachedUserPoliciesPages method")
//			},
//			ListAttachedUserPoliciesPagesWithContextFunc: func(contextMoqParam context.Context, listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListAttachedUserPoliciesPagesWithContext method")
//			},
//			ListAttachedUserPoliciesRequestFunc: func(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput) {
//				panic("mock out the ListAttachedUserPoliciesRequest method")
//			},
//			ListAttachedUserPoliciesWithContextFunc: func(contextMoqParam context.Context, listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, options ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
//				panic("mock out the ListAttachedUserPoliciesWithContext method")
//			},
//			ListEntitiesForPolicyFunc: func(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
//				panic("mock out the ListEntitiesForPolicy method")
//			},
//			ListEntitiesForPolicyPagesFunc: func(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
//				panic("mock out the ListEntitiesForPolicyPages method")
//			},
//			ListEntitiesForPolicyPagesWithContextFunc: func(contextMoqParam context.Context, listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListEntitiesForPolicyPagesWithContext method")
//			},
//			ListEntitiesForPolicyRequestFunc: func(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput) {
//				panic("mock out the ListEntitiesForPolicyRequest method")
//			},
//			ListEntitiesForPolicyWithContextFunc: func(contextMoqParam context.Context, listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, options ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
//				panic("mock out the ListEntitiesForPolicyWithContext method")
//			},
//			ListGroupPoliciesFunc: func(listGroupPoliciesInput *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
//				panic("mock out the ListGroupPolicies method")
//			},
//			ListGroupPoliciesPagesFunc: func(listGroupPoliciesInput *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool) error {
//				panic("mock out the ListGroupPoliciesPages method")
//			},
//			ListGroupPoliciesPagesWithContextFunc: func(contextMoqParam context.Context, listGroupPoliciesInput *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListGroupPoliciesPagesWithContext method")
//			},
//			ListGroupPoliciesRequestFunc: func(listGroupPoliciesInput *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput) {
//				panic("mock out the ListGroupPoliciesRequest method")
//			},
//			ListGroupPoliciesWithContextFunc: func(contextMoqParam context.Context, listGroupPoliciesInput *iam.ListGroupPoliciesInput, options ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
//				panic("mock out the ListGroupPoliciesWithContext method")
//			},
//			ListGroupsFunc: func(listGroupsInput *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
//				panic("mock out the ListGroups method")
//			},
//			ListGroupsForUserFunc: func(listGroupsForUserInput *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
//				panic("mock out the ListGroupsForUser method")
//			},
//			ListGroupsForUserPagesFunc: func(listGroupsForUserInput *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool) error {
//				panic("mock out the ListGroupsForUserPages method")
//			},
//			ListGroupsForUserPagesWithContextFunc: func(contextMoqParam context.Context, listGroupsForUserInput *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListGroupsForUserPagesWithContext method")
//			},
//			ListGroupsForUserRequestFunc: func(listGroupsForUserInput *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput) {
//				panic("mock out the ListGroupsForUserRequest method")
//			},
//			ListGroupsForUserWithContextFunc: func(contextMoqParam context.Context, listGroupsForUserInput *iam.ListGroupsForUserInput, options ...request.Option) (*iam.ListGroupsForUserOutput, error) {
//				panic("mock out the ListGroupsForUserWithContext method")
//			},
//			ListGroupsPagesFunc: func(listGroupsInput *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool) error {
//				panic("mock out the ListGroupsPages method")
//			},
//			ListGroupsPagesWithContextFunc: func(contextMoqParam context.Context, listGroupsInput *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListGroupsPagesWithContext method")
//			},
//			ListGroupsRequestFunc: func(listGroupsInput *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput) {
//				panic("mock out the ListGroupsRequest method")
//			},
//			ListGroupsWithContextFunc: func(contextMoqParam context.Context, listGroupsInput *iam.ListGroupsInput, options ...request.Option) (*iam.ListGroupsOutput, error) {
//				panic("mock out the ListGroupsWithContext method")
//			},
//			ListInstanceProfilesFunc: func(listInstanceProfilesInput *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
//				panic("mock out the ListInstanceProfiles method")
//			},
//			ListInstanceProfilesForRoleFunc: func(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
//				panic("mock out the ListInstanceProfilesForRole method")
//			},
//			ListInstanceProfilesForRolePagesFunc: func(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
//				panic("mock out the ListInstanceProfilesForRolePages method")
//			},
//			ListInstanceProfilesForRolePagesWithContextFunc: func(contextMoqParam context.Context, listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListInstanceProfilesForRolePagesWithContext method")
//			},
//			ListInstanceProfilesForRoleRequestFunc: func(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput) {
//				panic("mock out the ListInstanceProfilesForRoleRequest method")
//			},
//			ListInstanceProfilesForRoleWithContextFunc: func(contextMoqParam context.Context, listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, options ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
//				panic("mock out the ListInstanceProfilesForRoleWithContext method")
//			},
//			ListInstanceProfilesPagesFunc: func(listInstanceProfilesInput *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool) error {
//				panic("mock out the ListInstanceProfilesPages method")
//			},
//			ListInstanceProfilesPagesWithContextFunc: func(contextMoqParam context.Context, listInstanceProfilesInput *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListInstanceProfilesPagesWithContext method")
//			},
//			ListInstanceProfilesRequestFunc: func(listInstanceProfilesInput *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput) {
//				panic("mock out the ListInstanceProfilesRequest method")
//			},
//			ListInstanceProfilesWithContextFunc: func(contextMoqParam context.Context, listInstanceProfilesInput *iam.ListInstanceProfilesInput, options ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
//				panic("mock out the ListInstanceProfilesWithContext method")
//			},
//			ListMFADevicesFunc: func(listMFADevicesInput *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
//				panic("mock out the ListMFADevices method")
//			},
//			ListMFADevicesPagesFunc: func(listMFADevicesInput *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool) error {
//				panic("mock out the ListMFADevicesPages method")
//			},
//			ListMFADevicesPagesWithContextFunc: func(contextMoqParam context.Context, listMFADevicesInput *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListMFADevicesPagesWithContext method")
//			},
//			ListMFADevicesRequestFunc: func(listMFADevicesInput *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput) {
//				panic("mock out the ListMFADevicesRequest method")
//			},
//			ListMFADevicesWithContextFunc: func(contextMoqParam context.Context, listMFADevicesInput *iam.ListMFADevicesInput, options ...request.Option) (*iam.ListMFADevicesOutput, error) {
//				panic("mock out the ListMFADevicesWithContext method")
//			},
//			ListOpenIDConnectProvidersFunc: func(listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
//				panic("mock out the ListOpenIDConnectProviders method")
//			},
//			ListOpenIDConnectProvidersRequestFunc: func(listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput) {
//				panic("mock out the ListOpenIDConnectProvidersRequest method")
//			},
//			ListOpenIDConnectProvidersWithContextFunc: func(contextMoqParam context.Context, listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput, options ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
//				panic("mock out the ListOpenIDConnectProvidersWithContext method")
//			},
//			ListPoliciesFunc: func(listPoliciesInput *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
//				panic("mock out the ListPolicies method")
//			},
//			ListPoliciesGrantingServiceAccessFunc: func(listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
//				panic("mock out the ListPoliciesGrantingServiceAccess method")
//			},
//			ListPoliciesGrantingServiceAccessRequestFunc: func(listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput) {
//				panic("mock out the ListPoliciesGrantingServiceAccessRequest method")
//			},
//			ListPoliciesGrantingServiceAccessWithContextFunc: func(contextMoqParam context.Context, listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput, options ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
//				panic("mock out the ListPoliciesGrantingServiceAccessWithContext method")
//			},
//			ListPoliciesPagesFunc: func(listPoliciesInput *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool) error {
//				panic("mock out the ListPoliciesPages method")
//			},
//			ListPoliciesPagesWithContextFunc: func(contextMoqParam context.Context, listPoliciesInput *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListPoliciesPagesWithContext method")
//			},
//			ListPoliciesRequestFunc: func(listPoliciesInput *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput) {
//				panic("mock out the ListPoliciesRequest method")
//			},
//			ListPoliciesWithContextFunc: func(contextMoqParam context.Context, listPoliciesInput *iam.ListPoliciesInput, options ...request.Option) (*iam.ListPoliciesOutput, error) {
//				panic("mock out the ListPoliciesWithContext method")
//			},
//			ListPolicyVersionsFunc: func(listPolicyVersionsInput *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
//				panic("mock out the ListPolicyVersions method")
//			},
//			ListPolicyVersionsPagesFunc: func(listPolicyVersionsInput *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool) error {
//				panic("mock out the ListPolicyVersionsPages method")
//			},
//			ListPolicyVersionsPagesWithContextFunc: func(contextMoqParam context.Context, listPolicyVersionsInput *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListPolicyVersionsPagesWithContext method")
//			},
//			ListPolicyVersionsRequestFunc: func(listPolicyVersionsInput *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput) {
//				panic("mock out the ListPolicyVersionsRequest method")
//			},
//			ListPolicyVersionsWithContextFunc: func(contextMoqParam context.Context, listPolicyVersionsInput *iam.ListPolicyVersionsInput, options ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
//				panic("mock out the ListPolicyVersionsWithContext method")
//			},
//			ListRolePoliciesFunc: func(listRolePoliciesInput *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
//				panic("mock out the ListRolePolicies method")
//			},
//			ListRolePoliciesPagesFunc: func(listRolePoliciesInput *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool) error {
//				panic("mock out the ListRolePoliciesPages method")
//			},
//			ListRolePoliciesPagesWithContextFunc: func(contextMoqParam context.Context, listRolePoliciesInput *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListRolePoliciesPagesWithContext method")
//			},
//			ListRolePoliciesRequestFunc: func(listRolePoliciesInput *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput) {
//				panic("mock out the ListRolePoliciesRequest method")
//			},
//			ListRolePoliciesWithContextFunc: func(contextMoqParam context.Context, listRolePoliciesInput *iam.ListRolePoliciesInput, options ...request.Option) (*iam.ListRolePoliciesOutput, error) {
//				panic("mock out the ListRolePoliciesWithContext method")
//			},
//			ListRoleTagsFunc: func(listRoleTagsInput *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
//				panic("mock out the ListRoleTags method")
//			},
//			ListRoleTagsRequestFunc: func(listRoleTagsInput *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput) {
//				panic("mock out the ListRoleTagsRequest method")
//			},
//			ListRoleTagsWithContextFunc: func(contextMoqParam context.Context, listRoleTagsInput *iam.ListRoleTagsInput, options ...request.Option) (*iam.ListRoleTagsOutput, error) {
//				panic("mock out the ListRoleTagsWithContext method")
//			},
//			ListRolesFunc: func(listRolesInput *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
//				panic("mock out the ListRoles method")
//			},
//			ListRolesPagesFunc: func(listRolesInput *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool) error {
//				panic("mock out the ListRolesPages method")
//			},
//			ListRolesPagesWithContextFunc: func(contextMoqParam context.Context, listRolesInput *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListRolesPagesWithContext method")
//			},
//			ListRolesRequestFunc: func(listRolesInput *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput) {
//				panic("mock out the ListRolesRequest method")
//			},
//			ListRolesWithContextFunc: func(contextMoqParam context.Context, listRolesInput *iam.ListRolesInput, options ...request.Option) (*iam.ListRolesOutput, error) {
//				panic("mock out the ListRolesWithContext method")
//			},
//			ListSAMLProvidersFunc: func(listSAMLProvidersInput *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
//				panic("mock out the ListSAMLProviders method")
//			},
//			ListSAMLProvidersRequestFunc: func(listSAMLProvidersInput *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput) {
//				panic("mock out the ListSAMLProvidersRequest method")
//			},
//			ListSAMLProvidersWithContextFunc: func(contextMoqParam context.Context, listSAMLProvidersInput *iam.ListSAMLProvidersInput, options ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
//				panic("mock out the ListSAMLProvidersWithContext method")
//			},
//			ListSSHPublicKeysFunc: func(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
//				panic("mock out the ListSSHPublicKeys method")
//			},
//			ListSSHPublicKeysPagesFunc: func(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool) error {
//				panic("mock out the ListSSHPublicKeysPages method")
//			},
//			ListSSHPublicKeysPagesWithContextFunc: func(contextMoqParam context.Context, listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListSSHPublicKeysPagesWithContext method")
//			},
//			ListSSHPublicKeysRequestFunc: func(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput) {
//				panic("mock out the ListSSHPublicKeysRequest method")
//			},
//			ListSSHPublicKeysWithContextFunc: func(contextMoqParam context.Context, listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, options ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
//				panic("mock out the ListSSHPublicKeysWithContext method")
//			},
//			ListServerCertificatesFunc: func(listServerCertificatesInput *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
//				panic("mock out the ListServerCertificates method")
//			},
//			ListServerCertificatesPagesFunc: func(listServerCertificatesInput *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool) error {
//				panic("mock out the ListServerCertificatesPages method")
//			},
//			ListServerCertificatesPagesWithContextFunc: func(contextMoqParam context.Context, listServerCertificatesInput *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListServerCertificatesPagesWithContext method")
//			},
//			ListServerCertificatesRequestFunc: func(listServerCertificatesInput *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput) {
//				panic("mock out the ListServerCertificatesRequest method")
//			},
//			ListServerCertificatesWithContextFunc: func(contextMoqParam context.Context, listServerCertificatesInput *iam.ListServerCertificatesInput, options ...request.Option) (*iam.ListServerCertificatesOutput, error) {
//				panic("mock out the ListServerCertificatesWithContext method")
//			},
//			ListServiceSpecificCredentialsFunc: func(listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
//				panic("mock out the ListServiceSpecificCredentials method")
//			},
//			ListServiceSpecificCredentialsRequestFunc: func(listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput) {
//				panic("mock out the ListServiceSpecificCredentialsRequest method")
//			},
//			ListServiceSpecificCredentialsWithContextFunc: func(contextMoqParam context.Context, listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput, options ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
//				panic("mock out the ListServiceSpecificCredentialsWithContext method")
//			},
//			ListSigningCertificatesFunc: func(listSigningCertificatesInput *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
//				panic("mock out the ListSigningCertificates method")
//			},
//			ListSigningCertificatesPagesFunc: func(listSigningCertificatesInput *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool) error {
//				panic("mock out the ListSigningCertificatesPages method")
//			},
//			ListSigningCertificatesPagesWithContextFunc: func(contextMoqParam context.Context, listSigningCertificatesInput *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListSigningCertificatesPagesWithContext method")
//			},
//			ListSigningCertificatesRequestFunc: func(listSigningCertificatesInput *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput) {
//				panic("mock out the ListSigningCertificatesRequest method")
//			},
//			ListSigningCertificatesWithContextFunc: func(contextMoqParam context.Context, listSigningCertificatesInput *iam.ListSigningCertificatesInput, options ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
//				panic("mock out the ListSigningCertificatesWithContext method")
//			},
//			ListUserPoliciesFunc: func(listUserPoliciesInput *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
//				panic("mock out the ListUserPolicies method")
//			},
//			ListUserPoliciesPagesFunc: func(listUserPoliciesInput *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool) error {
//				panic("mock out the ListUserPoliciesPages method")
//			},
//			ListUserPoliciesPagesWithContextFunc: func(contextMoqParam context.Context, listUserPoliciesInput *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListUserPoliciesPagesWithContext method")
//			},
//			ListUserPoliciesRequestFunc: func(listUserPoliciesInput *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput) {
//				panic("mock out the ListUserPoliciesRequest method")
//			},
//			ListUserPoliciesWithContextFunc: func(contextMoqParam context.Context, listUserPoliciesInput *iam.ListUserPoliciesInput, options ...request.Option) (*iam.ListUserPoliciesOutput, error) {
//				panic("mock out the ListUserPoliciesWithContext method")
//			},
//			ListUserTagsFunc: func(listUserTagsInput *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
//				panic("mock out the ListUserTags method")
//			},
//			ListUserTagsRequestFunc: func(listUserTagsInput *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput) {
//				panic("mock out the ListUserTagsRequest method")
//			},
//			ListUserTagsWithContextFunc: func(contextMoqParam context.Context, listUserTagsInput *iam.ListUserTagsInput, options ...request.Option) (*iam.ListUserTagsOutput, error) {
//				panic("mock out the ListUserTagsWithContext method")
//			},
//			ListUsersFunc: func(listUsersInput *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
//				panic("mock out the ListUsers method")
//			},
//			ListUsersPagesFunc: func(listUsersInput *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool) error {
//				panic("mock out the ListUsersPages method")
//			},
//			ListUsersPagesWithContextFunc: func(contextMoqParam context.Context, listUsersInput *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListUsersPagesWithContext method")
//			},
//			ListUsersRequestFunc: func(listUsersInput *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput) {
//				panic("mock out the ListUsersRequest method")
//			},
//			ListUsersWithContextFunc: func(contextMoqParam context.Context, listUsersInput *iam.ListUsersInput, options ...request.Option) (*iam.ListUsersOutput, error) {
//				panic("mock out the ListUsersWithContext method")
//			},
//			ListVirtualMFADevicesFunc: func(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
//				panic("mock out the ListVirtualMFADevices method")
//			},
//			ListVirtualMFADevicesPagesFunc: func(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
//				panic("mock out the ListVirtualMFADevicesPages method")
//			},
//			ListVirtualMFADevicesPagesWithContextFunc: func(contextMoqParam context.Context, listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListVirtualMFADevicesPagesWithContext method")
//			},
//			ListVirtualMFADevicesRequestFunc: func(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput) {
//				panic("mock out the ListVirtualMFADevicesRequest method")
//			},
//			ListVirtualMFADevicesWithContextFunc: func(contextMoqParam context.Context, listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, options ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
//				panic("mock out the ListVirtualMFADevicesWithContext method")
//			},
//			PutGroupPolicyFunc: func(putGroupPolicyInput *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
//				panic("mock out the PutGroupPolicy method")
//			},
//			PutGroupPolicyRequestFunc: func(putGroupPolicyInput *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput) {
//				panic("mock out the PutGroupPolicyRequest method")
//			},
//			PutGroupPolicyWithContextFunc: func(contextMoqParam context.Context, putGroupPolicyInput *iam.PutGroupPolicyInput, options ...request.Option) (*iam.PutGroupPolicyOutput, error) {
//				panic("mock out the PutGroupPolicyWithContext method")
//			},
//			PutRolePermissionsBoundaryFunc: func(putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
//				panic("mock out the PutRolePermissionsBoundary method")
//			},
//			PutRolePermissionsBoundaryRequestFunc: func(putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput) {
//				panic("mock out the PutRolePermissionsBoundaryRequest method")
//			},
//			PutRolePermissionsBoundaryWithContextFunc: func(contextMoqParam context.Context, putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput, options ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {
//				panic("mock out the PutRolePermissionsBoundaryWithContext method")
//			},
//			PutRolePolicyFunc: func(putRolePolicyInput *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
//				panic("mock out the PutRolePolicy method")
//			},
//			PutRolePolicyRequestFunc: func(putRolePolicyInput *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput) {
//				panic("mock out the PutRolePolicyRequest method")
//			},
//			PutRolePolicyWithContextFunc: func(contextMoqParam context.Context, putRolePolicyInput *iam.PutRolePolicyInput, options ...request.Option) (*iam.PutRolePolicyOutput, error) {
//				panic("mock out the PutRolePolicyWithContext method")
//			},
//			PutUserPermissionsBoundaryFunc: func(putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
//				panic("mock out the PutUserPermissionsBoundary method")
//			},
//			PutUserPermissionsBoundaryRequestFunc: func(putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput) {
//				panic("mock out the PutUserPermissionsBoundaryRequest method")
//			},
//			PutUserPermissionsBoundaryWithContextFunc: func(contextMoqParam context.Context, putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput, options ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {
//				panic("mock out the PutUserPermissionsBoundaryWithContext method")
//			},
//			PutUserPolicyFunc: func(putUserPolicyInput *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
//				panic("mock out the PutUserPolicy method")
//			},
//			PutUserPolicyRequestFunc: func(putUserPolicyInput *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput) {
//				panic("mock out the PutUserPolicyRequest method")
//			},
//			PutUserPolicyWithContextFunc: func(contextMoqParam context.Context, putUserPolicyInput *iam.PutUserPolicyInput, options ...request.Option) (*iam.PutUserPolicyOutput, error) {
//				panic("mock out the PutUserPolicyWithContext method")
//			},
//			RemoveClientIDFromOpenIDConnectProviderFunc: func(removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
//				panic("mock out the RemoveClientIDFromOpenIDConnectProvider method")
//			},
//			RemoveClientIDFromOpenIDConnectProviderRequestFunc: func(removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
//				panic("mock out the RemoveClientIDFromOpenIDConnectProviderRequest method")
//			},
//			RemoveClientIDFromOpenIDConnectProviderWithContextFunc: func(contextMoqParam context.Context, removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput, options ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
//				panic("mock out the RemoveClientIDFromOpenIDConnectProviderWithContext method")
//			},
//			RemoveRoleFromInstanceProfileFunc: func(removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
//				panic("mock out the RemoveRoleFromInstanceProfile method")
//			},
//			RemoveRoleFromInstanceProfileRequestFunc: func(removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput) {
//				panic("mock out the RemoveRoleFromInstanceProfileRequest method")
//			},
//			RemoveRoleFromInstanceProfileWithContextFunc: func(contextMoqParam context.Context, removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput, options ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
//				panic("mock out the RemoveRoleFromInstanceProfileWithContext method")
//			},
//			RemoveUserFromGroupFunc: func(removeUserFromGroupInput *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
//				panic("mock out the RemoveUserFromGroup method")
//			},
//			RemoveUserFromGroupRequestFunc: func(removeUserFromGroupInput *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput) {
//				panic("mock out the RemoveUserFromGroupRequest method")
//			},
//			RemoveUserFromGroupWithContextFunc: func(contextMoqParam context.Context, removeUserFromGroupInput *iam.RemoveUserFromGroupInput, options ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
//				panic("mock out the RemoveUserFromGroupWithContext method")
//			},
//			ResetServiceSpecificCredentialFunc: func(resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
//				panic("mock out the ResetServiceSpecificCredential method")
//			},
//			ResetServiceSpecificCredentialRequestFunc: func(resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput) {
//				panic("mock out the ResetServiceSpecificCredentialRequest method")
//			},
//			ResetServiceSpecificCredentialWithContextFunc: func(contextMoqParam context.Context, resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput, options ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
//				panic("mock out the ResetServiceSpecificCredentialWithContext method")
//			},
//			ResyncMFADeviceFunc: func(resyncMFADeviceInput *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
//				panic("mock out the ResyncMFADevice method")
//			},
//			ResyncMFADeviceRequestFunc: func(resyncMFADeviceInput *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput) {
//				panic("mock out the ResyncMFADeviceRequest method")
//			},
//			ResyncMFADeviceWithContextFunc: func(contextMoqParam context.Context, resyncMFADeviceInput *iam.ResyncMFADeviceInput, options ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
//				panic("mock out the ResyncMFADeviceWithContext method")
//			},
//			SetDefaultPolicyVersionFunc: func(setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
//				panic("mock out the SetDefaultPolicyVersion method")
//			},
//			SetDefaultPolicyVersionRequestFunc: func(setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput) {
//				panic("mock out the SetDefaultPolicyVersionRequest method")
//			},
//			SetDefaultPolicyVersionWithContextFunc: func(contextMoqParam context.Context, setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput, options ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
//				panic("mock out the SetDefaultPolicyVersionWithContext method")
//			},
//			SetSecurityTokenServicePreferencesFunc: func(setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
//				panic("mock out the SetSecurityTokenServicePreferences method")
//			},
//			SetSecurityTokenServicePreferencesRequestFunc: func(setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput) {
//				panic("mock out the SetSecurityTokenServicePreferencesRequest method")
//			},
//			SetSecurityTokenServicePreferencesWithContextFunc: func(contextMoqParam context.Context, setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput, options ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
//				panic("mock out the SetSecurityTokenServicePreferencesWithContext method")
//			},
//			SimulateCustomPolicyFunc: func(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
//				panic("mock out the SimulateCustomPolicy method")
//			},
//			SimulateCustomPolicyPagesFunc: func(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error {
//				panic("mock out the SimulateCustomPolicyPages method")
//			},
//			SimulateCustomPolicyPagesWithContextFunc: func(contextMoqParam context.Context, simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, options ...request.Option) error {
//				panic("mock out the SimulateCustomPolicyPagesWithContext method")
//			},
//			SimulateCustomPolicyRequestFunc: func(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
//				panic("mock out the SimulateCustomPolicyRequest method")
//			},
//			SimulateCustomPolicyWithContextFunc: func(contextMoqParam context.Context, simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, options ...request.Option) (*iam.SimulatePolicyResponse, error) {
//				panic("mock out the SimulateCustomPolicyWithContext method")
//			},
//			SimulatePrincipalPolicyFunc: func(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
//				panic("mock out the SimulatePrincipalPolicy method")
//			},
//			SimulatePrincipalPolicyPagesFunc: func(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error {
//				panic("mock out the SimulatePrincipalPolicyPages method")
//			},
//			SimulatePrincipalPolicyPagesWithContextFunc: func(contextMoqParam context.Context, simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, options ...request.Option) error {
//				panic("mock out the SimulatePrincipalPolicyPagesWithContext method")
//			},
//			SimulatePrincipalPolicyRequestFunc: func(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
//				panic("mock out the SimulatePrincipalPolicyRequest method")
//			},
//			SimulatePrincipalPolicyWithContextFunc: func(contextMoqParam context.Context, simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, options ...request.Option) (*iam.SimulatePolicyResponse, error) {
//				panic("mock out the SimulatePrincipalPolicyWithContext method")
//			},
//			TagRoleFunc: func(tagRoleInput *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
//				panic("mock out the TagRole method")
//			},
//			TagRoleRequestFunc: func(tagRoleInput *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput) {
//				panic("mock out the TagRoleRequest method")
//			},
//			TagRoleWithContextFunc: func(contextMoqParam context.Context, tagRoleInput *iam.TagRoleInput, options ...request.Option) (*iam.TagRoleOutput, error) {
//				panic("mock out the TagRoleWithContext method")
//			},
//			TagUserFunc: func(tagUserInput *iam.TagUserInput) (*iam.TagUserOutput, error) {
//				panic("mock out the TagUser method")
//			},
//			TagUserRequestFunc: func(tagUserInput *iam.TagUserInput) (*request.Request, *iam.TagUserOutput) {
//				panic("mock out the TagUserRequest method")
//			},
//			TagUserWithContextFunc: func(contextMoqParam context.Context, tagUserInput *iam.TagUserInput, options ...request.Option) (*iam.TagUserOutput, error) {
//				panic("mock out the TagUserWithContext method")
//			},
//			UntagRoleFunc: func(untagRoleInput *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
//				panic("mock out the UntagRole method")
//			},
//			UntagRoleRequestFunc: func(untagRoleInput *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput) {
//				panic("mock out the UntagRoleRequest method")
//			},
//			UntagRoleWithContextFunc: func(contextMoqParam context.Context, untagRoleInput *iam.UntagRoleInput, options ...request.Option) (*iam.UntagRoleOutput, error) {
//				panic("mock out the UntagRoleWithContext method")
//			},
//			UntagUserFunc: func(untagUserInput *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
//				panic("mock out the UntagUser method")
//			},
//			UntagUserRequestFunc: func(untagUserInput *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput) {
//				panic("mock out the UntagUserRequest method")
//			},
//			UntagUserWithContextFunc: func(contextMoqParam context.Context, untagUserInput *iam.UntagUserInput, options ...request.Option) (*iam.UntagUserOutput, error) {
//				panic("mock out the UntagUserWithContext method")
//			},
//			UpdateAccessKeyFunc: func(updateAccessKeyInput *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
//				panic("mock out the UpdateAccessKey method")
//			},
//			UpdateAccessKeyRequestFunc: func(updateAccessKeyInput *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput) {
//				panic("mock out the UpdateAccessKeyRequest method")
//			},
//			UpdateAccessKeyWithContextFunc: func(contextMoqParam context.Context, updateAccessKeyInput *iam.UpdateAccessKeyInput, options ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
//				panic("mock out the UpdateAccessKeyWithContext method")
//			},
//			UpdateAccountPasswordPolicyFunc: func(updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
//				panic("mock out the UpdateAccountPasswordPolicy method")
//			},
//			UpdateAccountPasswordPolicyRequestFunc: func(updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput) {
//				panic("mock out the UpdateAccountPasswordPolicyRequest method")
//			},
//			UpdateAccountPasswordPolicyWithContextFunc: func(contextMoqParam context.Context, updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput, options ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
//				panic("mock out the UpdateAccountPasswordPolicyWithContext method")
//			},
//			UpdateAssumeRolePolicyFunc: func(updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
//				panic("mock out the UpdateAssumeRolePolicy method")
//			},
//			UpdateAssumeRolePolicyRequestFunc: func(updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput) {
//				panic("mock out the UpdateAssumeRolePolicyRequest method")
//			},
//			UpdateAssumeRolePolicyWithContextFunc: func(contextMoqParam context.Context, updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput, options ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
//				panic("mock out the UpdateAssumeRolePolicyWithContext method")
//			},
//			UpdateGroupFunc: func(updateGroupInput *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
//				panic("mock out the UpdateGroup method")
//			},
//			UpdateGroupRequestFunc: func(updateGroupInput *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput) {
//				panic("mock out the UpdateGroupRequest method")
//			},
//			UpdateGroupWithContextFunc: func(contextMoqParam context.Context, updateGroupInput *iam.UpdateGroupInput, options ...request.Option) (*iam.UpdateGroupOutput, error) {
//				panic("mock out the UpdateGroupWithContext method")
//			},
//			UpdateLoginProfileFunc: func(updateLoginProfileInput *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
//				panic("mock out the UpdateLoginProfile method")
//			},
//			UpdateLoginProfileRequestFunc: func(updateLoginProfileInput *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput) {
//				panic("mock out the UpdateLoginProfileRequest method")
//			},
//			UpdateLoginProfileWithContextFunc: func(contextMoqParam context.Context, updateLoginProfileInput *iam.UpdateLoginProfileInput, options ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
//				panic("mock out the UpdateLoginProfileWithContext method")
//			},
//			UpdateOpenIDConnectProviderThumbprintFunc: func(updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
//				panic("mock out the UpdateOpenIDConnectProviderThumbprint method")
//			},
//			UpdateOpenIDConnectProviderThumbprintRequestFunc: func(updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
//				panic("mock out the UpdateOpenIDConnectProviderThumbprintRequest method")
//			},
//			UpdateOpenIDConnectProviderThumbprintWithContextFunc: func(contextMoqParam context.Context, updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput, options ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
//				panic("mock out the UpdateOpenIDConnectProviderThumbprintWithContext method")
//			},
//			UpdateRoleFunc: func(updateRoleInput *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
//				panic("mock out the UpdateRole method")
//			},
//			UpdateRoleDescriptionFunc: func(updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
//				panic("mock out the UpdateRoleDescription method")
//			},
//			UpdateRoleDescriptionRequestFunc: func(updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput) {
//				panic("mock out the UpdateRoleDescriptionRequest method")
//			},
//			UpdateRoleDescriptionWithContextFunc: func(contextMoqParam context.Context, updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput, options ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
//				panic("mock out the UpdateRoleDescriptionWithContext method")
//			},
//			UpdateRoleRequestFunc: func(updateRoleInput *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput) {
//				panic("mock out the UpdateRoleRequest method")
//			},
//			UpdateRoleWithContextFunc: func(contextMoqParam context.Context, updateRoleInput *iam.UpdateRoleInput, options ...request.Option) (*iam.UpdateRoleOutput, error) {
//				panic("mock out the UpdateRoleWithContext method")
//			},
//			UpdateSAMLProviderFunc: func(updateSAMLProviderInput *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
//				panic("mock out the UpdateSAMLProvider method")
//			},
//			UpdateSAMLProviderRequestFunc: func(updateSAMLProviderInput *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput) {
//				panic("mock out the UpdateSAMLProviderRequest method")
//			},
//			UpdateSAMLProviderWithContextFunc: func(contextMoqParam context.Context, updateSAMLProviderInput *iam.UpdateSAMLProviderInput, options ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
//				panic("mock out the UpdateSAMLProviderWithContext method")
//			},
//			UpdateSSHPublicKeyFunc: func(updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
//				panic("mock out the UpdateSSHPublicKey method")
//			},
//			UpdateSSHPublicKeyRequestFunc: func(updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput) {
//				panic("mock out the UpdateSSHPublicKeyRequest method")
//			},
//			UpdateSSHPublicKeyWithContextFunc: func(contextMoqParam context.Context, updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput, options ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
//				panic("mock out the UpdateSSHPublicKeyWithContext method")
//			},
//			UpdateServerCertificateFunc: func(updateServerCertificateInput *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
//				panic("mock out the UpdateServerCertificate method")
//			},
//			UpdateServerCertificateRequestFunc: func(updateServerCertificateInput *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput) {
//				panic("mock out the UpdateServerCertificateRequest method")
//			},
//			UpdateServerCertificateWithContextFunc: func(contextMoqParam context.Context, updateServerCertificateInput *iam.UpdateServerCertificateInput, options ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
//				panic("mock out the UpdateServerCertificateWithContext method")
//			},
//			UpdateServiceSpecificCredentialFunc: func(updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
//				panic("mock out the UpdateServiceSpecificCredential method")
//			},
//			UpdateServiceSpecificCredentialRequestFunc: func(updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput) {
//				panic("mock out the UpdateServiceSpecificCredentialRequest method")
//			},
//			UpdateServiceSpecificCredentialWithContextFunc: func(contextMoqParam context.Context, updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput, options ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
//				panic("mock out the UpdateServiceSpecificCredentialWithContext method")
//			},
//			UpdateSigningCertificateFunc: func(updateSigningCertificateInput *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
//				panic("mock out the UpdateSigningCertificate method")
//			},
//			UpdateSigningCertificateRequestFunc: func(updateSigningCertificateInput *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput) {
//				panic("mock out the UpdateSigningCertificateRequest method")
//			},
//			UpdateSigningCertificateWithContextFunc: func(contextMoqParam context.Context, updateSigningCertificateInput *iam.UpdateSigningCertificateInput, options ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
//				panic("mock out the UpdateSigningCertificateWithContext method")
//			},
//			UpdateUserFunc: func(updateUserInput *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
//				panic("mock out the UpdateUser method")
//			},
//			UpdateUserRequestFunc: func(updateUserInput *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput) {
//				panic("mock out the UpdateUserRequest method")
//			},
//			UpdateUserWithContextFunc: func(contextMoqParam context.Context, updateUserInput *iam.UpdateUserInput, options ...request.Option) (*iam.UpdateUserOutput, error) {
//				panic("mock out the UpdateUserWithContext method")
//			},
//			UploadSSHPublicKeyFunc: func(uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
//				panic("mock out the UploadSSHPublicKey method")
//			},
//			UploadSSHPublicKeyRequestFunc: func(uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput) {
//				panic("mock out the UploadSSHPublicKeyRequest method")
//			},
//			UploadSSHPublicKeyWithContextFunc: func(contextMoqParam context.Context, uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput, options ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
//				panic("mock out the UploadSSHPublicKeyWithContext method")
//			},
//			UploadServerCertificateFunc: func(uploadServerCertificateInput *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
//				panic("mock out the UploadServerCertificate method")
//			},
//			UploadServerCertificateRequestFunc: func(uploadServerCertificateInput *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput) {
//				panic("mock out the UploadServerCertificateRequest method")
//			},
//			UploadServerCertificateWithContextFunc: func(contextMoqParam context.Context, uploadServerCertificateInput *iam.UploadServerCertificateInput, options ...request.Option) (*iam.UploadServerCertificateOutput, error) {
//				panic("mock out the UploadServerCertificateWithContext method")
//			},
//			UploadSigningCertificateFunc: func(uploadSigningCertificateInput *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
//				panic("mock out the UploadSigningCertificate method")
//			},
//			UploadSigningCertificateRequestFunc: func(uploadSigningCertificateInput *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput) {
//				panic("mock out the UploadSigningCertificateRequest method")
//			},
//			UploadSigningCertificateWithContextFunc: func(contextMoqParam context.Context, uploadSigningCertificateInput *iam.UploadSigningCertificateInput, options ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
//				panic("mock out the UploadSigningCertificateWithContext method")
//			},
//			WaitUntilInstanceProfileExistsFunc: func(getInstanceProfileInput *iam.GetInstanceProfileInput) error {
//				panic("mock out the WaitUntilInstanceProfileExists method")
//			},
//			WaitUntilInstanceProfileExistsWithContextFunc: func(contextMoqParam context.Context, getInstanceProfileInput *iam.GetInstanceProfileInput, waiterOptions ...request.WaiterOption) error {
//				panic("mock out the WaitUntilInstanceProfileExistsWithContext method")
//			},
//			WaitUntilPolicyExistsFunc: func(getPolicyInput *iam.GetPolicyInput) error {
//				panic("mock out the WaitUntilPolicyExists method")
//			},
//			WaitUntilPolicyExistsWithContextFunc: func(contextMoqParam context.Context, getPolicyInput *iam.GetPolicyInput, waiterOptions ...request.WaiterOption) error {
//				panic("mock out the WaitUntilPolicyExistsWithContext method")
//			},
//			WaitUntilRoleExistsFunc: func(getRoleInput *iam.GetRoleInput) error {
//				panic("mock out the WaitUntilRoleExists method")
//			},
//			WaitUntilRoleExistsWithContextFunc: func(contextMoqParam context.Context, getRoleInput *iam.GetRoleInput, waiterOptions ...request.WaiterOption) error {
//				panic("mock out the WaitUntilRoleExistsWithContext method")
//			},
//			WaitUntilUserExistsFunc: func(getUserInput *iam.GetUserInput) error {
//				panic("mock out the WaitUntilUserExists method")
//			},
//			WaitUntilUserExistsWithContextFunc: func(contextMoqParam context.Context, getUserInput *iam.GetUserInput, waiterOptions ...request.WaiterOption) error {
//				panic("mock out the WaitUntilUserExistsWithContext method")
//			},
//		}
//
//		// use mockedIAMAPI in code that requires iamiface.IAMAPI
//		// and then make assertions.
//
//	}
type IAMAPIMock struct {
	// AddClientIDToOpenIDConnectProviderFunc mocks the AddClientIDToOpenIDConnectProvider method.
	AddClientIDToOpenIDConnectProviderFunc func(addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)

	// AddClientIDToOpenIDConnectProviderRequestFunc mocks the AddClientIDToOpenIDConnectProviderRequest method.
	AddClientIDToOpenIDConnectProviderRequestFunc func(addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput)

	// AddClientIDToOpenIDConnectProviderWithContextFunc mocks the AddClientIDToOpenIDConnectProviderWithContext method.
	AddClientIDToOpenIDConnectProviderWithContextFunc func(contextMoqParam context.Context, addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput, options ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)

	// AddRoleToInstanceProfileFunc mocks the AddRoleToInstanceProfile method.
	AddRoleToInstanceProfileFunc func(addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)

	// AddRoleToInstanceProfileRequestFunc mocks the AddRoleToInstanceProfileRequest method.
	AddRoleToInstanceProfileRequestFunc func(addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput)

	// AddRoleToInstanceProfileWithContextFunc mocks the AddRoleToInstanceProfileWithContext method.
	AddRoleToInstanceProfileWithContextFunc func(contextMoqParam context.Context, addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput, options ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error)

	// AddUserToGroupFunc mocks the AddUserToGroup method.
	AddUserToGroupFunc func(addUserToGroupInput *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)

	// AddUserToGroupRequestFunc mocks the AddUserToGroupRequest method.
	AddUserToGroupRequestFunc func(addUserToGroupInput *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput)

	// AddUserToGroupWithContextFunc mocks the AddUserToGroupWithContext method.
	AddUserToGroupWithContextFunc func(contextMoqParam context.Context, addUserToGroupInput *iam.AddUserToGroupInput, options ...request.Option) (*iam.AddUserToGroupOutput, error)

	// AttachGroupPolicyFunc mocks the AttachGroupPolicy method.
	AttachGroupPolicyFunc func(attachGroupPolicyInput *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)

	// AttachGroupPolicyRequestFunc mocks the AttachGroupPolicyRequest method.
	AttachGroupPolicyRequestFunc func(attachGroupPolicyInput *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput)

	// AttachGroupPolicyWithContextFunc mocks the AttachGroupPolicyWithContext method.
	AttachGroupPolicyWithContextFunc func(contextMoqParam context.Context, attachGroupPolicyInput *iam.AttachGroupPolicyInput, options ...request.Option) (*iam.AttachGroupPolicyOutput, error)

	// AttachRolePolicyFunc mocks the AttachRolePolicy method.
	AttachRolePolicyFunc func(attachRolePolicyInput *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)

	// AttachRolePolicyRequestFunc mocks the AttachRolePolicyRequest method.
	AttachRolePolicyRequestFunc func(attachRolePolicyInput *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput)

	// AttachRolePolicyWithContextFunc mocks the AttachRolePolicyWithContext method.
	AttachRolePolicyWithContextFunc func(contextMoqParam context.Context, attachRolePolicyInput *iam.AttachRolePolicyInput, options ...request.Option) (*iam.AttachRolePolicyOutput, error)

	// AttachUserPolicyFunc mocks the AttachUserPolicy method.
	AttachUserPolicyFunc func(attachUserPolicyInput *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)

	// AttachUserPolicyRequestFunc mocks the AttachUserPolicyRequest method.
	AttachUserPolicyRequestFunc func(attachUserPolicyInput *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput)

	// AttachUserPolicyWithContextFunc mocks the AttachUserPolicyWithContext method.
	AttachUserPolicyWithContextFunc func(contextMoqParam context.Context, attachUserPolicyInput *iam.AttachUserPolicyInput, options ...request.Option) (*iam.AttachUserPolicyOutput, error)

	// ChangePasswordFunc mocks the ChangePassword method.
	ChangePasswordFunc func(changePasswordInput *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)

	// ChangePasswordRequestFunc mocks the ChangePasswordRequest method.
	ChangePasswordRequestFunc func(changePasswordInput *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput)

	// ChangePasswordWithContextFunc mocks the ChangePasswordWithContext method.
	ChangePasswordWithContextFunc func(contextMoqParam context.Context, changePasswordInput *iam.ChangePasswordInput, options ...request.Option) (*iam.ChangePasswordOutput, error)

	// CreateAccessKeyFunc mocks the CreateAccessKey method.
	CreateAccessKeyFunc func(createAccessKeyInput *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)

	// CreateAccessKeyRequestFunc mocks the CreateAccessKeyRequest method.
	CreateAccessKeyRequestFunc func(createAccessKeyInput *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput)

	// CreateAccessKeyWithContextFunc mocks the CreateAccessKeyWithContext method.
	CreateAccessKeyWithContextFunc func(contextMoqParam context.Context, createAccessKeyInput *iam.CreateAccessKeyInput, options ...request.Option) (*iam.CreateAccessKeyOutput, error)

	// CreateAccountAliasFunc mocks the CreateAccountAlias method.
	CreateAccountAliasFunc func(createAccountAliasInput *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)

	// CreateAccountAliasRequestFunc mocks the CreateAccountAliasRequest method.
	CreateAccountAliasRequestFunc func(createAccountAliasInput *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput)

	// CreateAccountAliasWithContextFunc mocks the CreateAccountAliasWithContext method.
	CreateAccountAliasWithContextFunc func(contextMoqParam context.Context, createAccountAliasInput *iam.CreateAccountAliasInput, options ...request.Option) (*iam.CreateAccountAliasOutput, error)

	// CreateGroupFunc mocks the CreateGroup method.
	CreateGroupFunc func(createGroupInput *iam.CreateGroupInput) (*iam.CreateGroupOutput, error)

	// CreateGroupRequestFunc mocks the CreateGroupRequest method.
	CreateGroupRequestFunc func(createGroupInput *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput)

	// CreateGroupWithContextFunc mocks the CreateGroupWithContext method.
	CreateGroupWithContextFunc func(contextMoqParam context.Context, createGroupInput *iam.CreateGroupInput, options ...request.Option) (*iam.CreateGroupOutput, error)

	// CreateInstanceProfileFunc mocks the CreateInstanceProfile method.
	CreateInstanceProfileFunc func(createInstanceProfileInput *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)

	// CreateInstanceProfileRequestFunc mocks the CreateInstanceProfileRequest method.
	CreateInstanceProfileRequestFunc func(createInstanceProfileInput *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput)

	// CreateInstanceProfileWithContextFunc mocks the CreateInstanceProfileWithContext method.
	CreateInstanceProfileWithContextFunc func(contextMoqParam context.Context, createInstanceProfileInput *iam.CreateInstanceProfileInput, options ...request.Option) (*iam.CreateInstanceProfileOutput, error)

	// CreateLoginProfileFunc mocks the CreateLoginProfile method.
	CreateLoginProfileFunc func(createLoginProfileInput *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)

	// CreateLoginProfileRequestFunc mocks the CreateLoginProfileRequest method.
	CreateLoginProfileRequestFunc func(createLoginProfileInput *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput)

	// CreateLoginProfileWithContextFunc mocks the CreateLoginProfileWithContext method.
	CreateLoginProfileWithContextFunc func(contextMoqParam context.Context, createLoginProfileInput *iam.CreateLoginProfileInput, options ...request.Option) (*iam.CreateLoginProfileOutput, error)

	// CreateOpenIDConnectProviderFunc mocks the CreateOpenIDConnectProvider method.
	CreateOpenIDConnectProviderFunc func(createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)

	// CreateOpenIDConnectProviderRequestFunc mocks the CreateOpenIDConnectProviderRequest method.
	CreateOpenIDConnectProviderRequestFunc func(createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput)

	// CreateOpenIDConnectProviderWithContextFunc mocks the CreateOpenIDConnectProviderWithContext method.
	CreateOpenIDConnectProviderWithContextFunc func(contextMoqParam context.Context, createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput, options ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error)

	// CreatePolicyFunc mocks the CreatePolicy method.
	CreatePolicyFunc func(createPolicyInput *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)

	// CreatePolicyRequestFunc mocks the CreatePolicyRequest method.
	CreatePolicyRequestFunc func(createPolicyInput *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput)

	// CreatePolicyVersionFunc mocks the CreatePolicyVersion method.
	CreatePolicyVersionFunc func(createPolicyVersionInput *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)

	// CreatePolicyVersionRequestFunc mocks the CreatePolicyVersionRequest method.
	CreatePolicyVersionRequestFunc func(createPolicyVersionInput *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput)

	// CreatePolicyVersionWithContextFunc mocks the CreatePolicyVersionWithContext method.
	CreatePolicyVersionWithContextFunc func(contextMoqParam context.Context, createPolicyVersionInput *iam.CreatePolicyVersionInput, options ...request.Option) (*iam.CreatePolicyVersionOutput, error)

	// CreatePolicyWithContextFunc mocks the CreatePolicyWithContext method.
	CreatePolicyWithContextFunc func(contextMoqParam context.Context, createPolicyInput *iam.CreatePolicyInput, options ...request.Option) (*iam.CreatePolicyOutput, error)

	// CreateRoleFunc mocks the CreateRole method.
	CreateRoleFunc func(createRoleInput *iam.CreateRoleInput) (*iam.CreateRoleOutput, error)

	// CreateRoleRequestFunc mocks the CreateRoleRequest method.
	CreateRoleRequestFunc func(createRoleInput *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput)

	// CreateRoleWithContextFunc mocks the CreateRoleWithContext method.
	CreateRoleWithContextFunc func(contextMoqParam context.Context, createRoleInput *iam.CreateRoleInput, options ...request.Option) (*iam.CreateRoleOutput, error)

	// CreateSAMLProviderFunc mocks the CreateSAMLProvider method.
	CreateSAMLProviderFunc func(createSAMLProviderInput *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)

	// CreateSAMLProviderRequestFunc mocks the CreateSAMLProviderRequest method.
	CreateSAMLProviderRequestFunc func(createSAMLProviderInput *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput)

	// CreateSAMLProviderWithContextFunc mocks the CreateSAMLProviderWithContext method.
	CreateSAMLProviderWithContextFunc func(contextMoqParam context.Context, createSAMLProviderInput *iam.CreateSAMLProviderInput, options ...request.Option) (*iam.CreateSAMLProviderOutput, error)

	// CreateServiceLinkedRoleFunc mocks the CreateServiceLinkedRole method.
	CreateServiceLinkedRoleFunc func(createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)

	// CreateServiceLinkedRoleRequestFunc mocks the CreateServiceLinkedRoleRequest method.
	CreateServiceLinkedRoleRequestFunc func(createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput)

	// CreateServiceLinkedRoleWithContextFunc mocks the CreateServiceLinkedRoleWithContext method.
	CreateServiceLinkedRoleWithContextFunc func(contextMoqParam context.Context, createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput, options ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error)

	// CreateServiceSpecificCredentialFunc mocks the CreateServiceSpecificCredential method.
	CreateServiceSpecificCredentialFunc func(createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)

	// CreateServiceSpecificCredentialRequestFunc mocks the CreateServiceSpecificCredentialRequest method.
	CreateServiceSpecificCredentialRequestFunc func(createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput)

	// CreateServiceSpecificCredentialWithContextFunc mocks the CreateServiceSpecificCredentialWithContext method.
	CreateServiceSpecificCredentialWithContextFunc func(contextMoqParam context.Context, createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput, options ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(createUserInput *iam.CreateUserInput) (*iam.CreateUserOutput, error)

	// CreateUserRequestFunc mocks the CreateUserRequest method.
	CreateUserRequestFunc func(createUserInput *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput)

	// CreateUserWithContextFunc mocks the CreateUserWithContext method.
	CreateUserWithContextFunc func(contextMoqParam context.Context, createUserInput *iam.CreateUserInput, options ...request.Option) (*iam.CreateUserOutput, error)

	// CreateVirtualMFADeviceFunc mocks the CreateVirtualMFADevice method.
	CreateVirtualMFADeviceFunc func(createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)

	// CreateVirtualMFADeviceRequestFunc mocks the CreateVirtualMFADeviceRequest method.
	CreateVirtualMFADeviceRequestFunc func(createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput)

	// CreateVirtualMFADeviceWithContextFunc mocks the CreateVirtualMFADeviceWithContext method.
	CreateVirtualMFADeviceWithContextFunc func(contextMoqParam context.Context, createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput, options ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error)

	// DeactivateMFADeviceFunc mocks the DeactivateMFADevice method.
	DeactivateMFADeviceFunc func(deactivateMFADeviceInput *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)

	// DeactivateMFADeviceRequestFunc mocks the DeactivateMFADeviceRequest method.
	DeactivateMFADeviceRequestFunc func(deactivateMFADeviceInput *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput)

	// DeactivateMFADeviceWithContextFunc mocks the DeactivateMFADeviceWithContext method.
	DeactivateMFADeviceWithContextFunc func(contextMoqParam context.Context, deactivateMFADeviceInput *iam.DeactivateMFADeviceInput, options ...request.Option) (*iam.DeactivateMFADeviceOutput, error)

	// DeleteAccessKeyFunc mocks the DeleteAccessKey method.
	DeleteAccessKeyFunc func(deleteAccessKeyInput *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)

	// DeleteAccessKeyRequestFunc mocks the DeleteAccessKeyRequest method.
	DeleteAccessKeyRequestFunc func(deleteAccessKeyInput *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput)

	// DeleteAccessKeyWithContextFunc mocks the DeleteAccessKeyWithContext method.
	DeleteAccessKeyWithContextFunc func(contextMoqParam context.Context, deleteAccessKeyInput *iam.DeleteAccessKeyInput, options ...request.Option) (*iam.DeleteAccessKeyOutput, error)

	// DeleteAccountAliasFunc mocks the DeleteAccountAlias method.
	DeleteAccountAliasFunc func(deleteAccountAliasInput *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)

	// DeleteAccountAliasRequestFunc mocks the DeleteAccountAliasRequest method.
	DeleteAccountAliasRequestFunc func(deleteAccountAliasInput *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput)

	// DeleteAccountAliasWithContextFunc mocks the DeleteAccountAliasWithContext method.
	DeleteAccountAliasWithContextFunc func(contextMoqParam context.Context, deleteAccountAliasInput *iam.DeleteAccountAliasInput, options ...request.Option) (*iam.DeleteAccountAliasOutput, error)

	// DeleteAccountPasswordPolicyFunc mocks the DeleteAccountPasswordPolicy method.
	DeleteAccountPasswordPolicyFunc func(deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)

	// DeleteAccountPasswordPolicyRequestFunc mocks the DeleteAccountPasswordPolicyRequest method.
	DeleteAccountPasswordPolicyRequestFunc func(deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput)

	// DeleteAccountPasswordPolicyWithContextFunc mocks the DeleteAccountPasswordPolicyWithContext method.
	DeleteAccountPasswordPolicyWithContextFunc func(contextMoqParam context.Context, deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput, options ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error)

	// DeleteGroupFunc mocks the DeleteGroup method.
	DeleteGroupFunc func(deleteGroupInput *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)

	// DeleteGroupPolicyFunc mocks the DeleteGroupPolicy method.
	DeleteGroupPolicyFunc func(deleteGroupPolicyInput *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)

	// DeleteGroupPolicyRequestFunc mocks the DeleteGroupPolicyRequest method.
	DeleteGroupPolicyRequestFunc func(deleteGroupPolicyInput *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput)

	// DeleteGroupPolicyWithContextFunc mocks the DeleteGroupPolicyWithContext method.
	DeleteGroupPolicyWithContextFunc func(contextMoqParam context.Context, deleteGroupPolicyInput *iam.DeleteGroupPolicyInput, options ...request.Option) (*iam.DeleteGroupPolicyOutput, error)

	// DeleteGroupRequestFunc mocks the DeleteGroupRequest method.
	DeleteGroupRequestFunc func(deleteGroupInput *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput)

	// DeleteGroupWithContextFunc mocks the DeleteGroupWithContext method.
	DeleteGroupWithContextFunc func(contextMoqParam context.Context, deleteGroupInput *iam.DeleteGroupInput, options ...request.Option) (*iam.DeleteGroupOutput, error)

	// DeleteInstanceProfileFunc mocks the DeleteInstanceProfile method.
	DeleteInstanceProfileFunc func(deleteInstanceProfileInput *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)

	// DeleteInstanceProfileRequestFunc mocks the DeleteInstanceProfileRequest method.
	DeleteInstanceProfileRequestFunc func(deleteInstanceProfileInput *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput)

	// DeleteInstanceProfileWithContextFunc mocks the DeleteInstanceProfileWithContext method.
	DeleteInstanceProfileWithContextFunc func(contextMoqParam context.Context, deleteInstanceProfileInput *iam.DeleteInstanceProfileInput, options ...request.Option) (*iam.DeleteInstanceProfileOutput, error)

	// DeleteLoginProfileFunc mocks the DeleteLoginProfile method.
	DeleteLoginProfileFunc func(deleteLoginProfileInput *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)

	// DeleteLoginProfileRequestFunc mocks the DeleteLoginProfileRequest method.
	DeleteLoginProfileRequestFunc func(deleteLoginProfileInput *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput)

	// DeleteLoginProfileWithContextFunc mocks the DeleteLoginProfileWithContext method.
	DeleteLoginProfileWithContextFunc func(contextMoqParam context.Context, deleteLoginProfileInput *iam.DeleteLoginProfileInput, options ...request.Option) (*iam.DeleteLoginProfileOutput, error)

	// DeleteOpenIDConnectProviderFunc mocks the DeleteOpenIDConnectProvider method.
	DeleteOpenIDConnectProviderFunc func(deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)

	// DeleteOpenIDConnectProviderRequestFunc mocks the DeleteOpenIDConnectProviderRequest method.
	DeleteOpenIDConnectProviderRequestFunc func(deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput)

	// DeleteOpenIDConnectProviderWithContextFunc mocks the DeleteOpenIDConnectProviderWithContext method.
	DeleteOpenIDConnectProviderWithContextFunc func(contextMoqParam context.Context, deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput, options ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error)

	// DeletePolicyFunc mocks the DeletePolicy method.
	DeletePolicyFunc func(deletePolicyInput *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)

	// DeletePolicyRequestFunc mocks the DeletePolicyRequest method.
	DeletePolicyRequestFunc func(deletePolicyInput *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput)

	// DeletePolicyVersionFunc mocks the DeletePolicyVersion method.
	DeletePolicyVersionFunc func(deletePolicyVersionInput *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)

	// DeletePolicyVersionRequestFunc mocks the DeletePolicyVersionRequest method.
	DeletePolicyVersionRequestFunc func(deletePolicyVersionInput *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput)

	// DeletePolicyVersionWithContextFunc mocks the DeletePolicyVersionWithContext method.
	DeletePolicyVersionWithContextFunc func(contextMoqParam context.Context, deletePolicyVersionInput *iam.DeletePolicyVersionInput, options ...request.Option) (*iam.DeletePolicyVersionOutput, error)

	// DeletePolicyWithContextFunc mocks the DeletePolicyWithContext method.
	DeletePolicyWithContextFunc func(contextMoqParam context.Context, deletePolicyInput *iam.DeletePolicyInput, options ...request.Option) (*iam.DeletePolicyOutput, error)

	// DeleteRoleFunc mocks the DeleteRole method.
	DeleteRoleFunc func(deleteRoleInput *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)

	// DeleteRolePermissionsBoundaryFunc mocks the DeleteRolePermissionsBoundary method.
	DeleteRolePermissionsBoundaryFunc func(deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)

	// DeleteRolePermissionsBoundaryRequestFunc mocks the DeleteRolePermissionsBoundaryRequest method.
	DeleteRolePermissionsBoundaryRequestFunc func(deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput)

	// DeleteRolePermissionsBoundaryWithContextFunc mocks the DeleteRolePermissionsBoundaryWithContext method.
	DeleteRolePermissionsBoundaryWithContextFunc func(contextMoqParam context.Context, deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput, options ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error)

	// DeleteRolePolicyFunc mocks the DeleteRolePolicy method.
	DeleteRolePolicyFunc func(deleteRolePolicyInput *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)

	// DeleteRolePolicyRequestFunc mocks the DeleteRolePolicyRequest method.
	DeleteRolePolicyRequestFunc func(deleteRolePolicyInput *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput)

	// DeleteRolePolicyWithContextFunc mocks the DeleteRolePolicyWithContext method.
	DeleteRolePolicyWithContextFunc func(contextMoqParam context.Context, deleteRolePolicyInput *iam.DeleteRolePolicyInput, options ...request.Option) (*iam.DeleteRolePolicyOutput, error)

	// DeleteRoleRequestFunc mocks the DeleteRoleRequest method.
	DeleteRoleRequestFunc func(deleteRoleInput *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput)

	// DeleteRoleWithContextFunc mocks the DeleteRoleWithContext method.
	DeleteRoleWithContextFunc func(contextMoqParam context.Context, deleteRoleInput *iam.DeleteRoleInput, options ...request.Option) (*iam.DeleteRoleOutput, error)

	// DeleteSAMLProviderFunc mocks the DeleteSAMLProvider method.
	DeleteSAMLProviderFunc func(deleteSAMLProviderInput *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)

	// DeleteSAMLProviderRequestFunc mocks the DeleteSAMLProviderRequest method.
	DeleteSAMLProviderRequestFunc func(deleteSAMLProviderInput *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput)

	// DeleteSAMLProviderWithContextFunc mocks the DeleteSAMLProviderWithContext method.
	DeleteSAMLProviderWithContextFunc func(contextMoqParam context.Context, deleteSAMLProviderInput *iam.DeleteSAMLProviderInput, options ...request.Option) (*iam.DeleteSAMLProviderOutput, error)

	// DeleteSSHPublicKeyFunc mocks the DeleteSSHPublicKey method.
	DeleteSSHPublicKeyFunc func(deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)

	// DeleteSSHPublicKeyRequestFunc mocks the DeleteSSHPublicKeyRequest method.
	DeleteSSHPublicKeyRequestFunc func(deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput)

	// DeleteSSHPublicKeyWithContextFunc mocks the DeleteSSHPublicKeyWithContext method.
	DeleteSSHPublicKeyWithContextFunc func(contextMoqParam context.Context, deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput, options ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error)

	// DeleteServerCertificateFunc mocks the DeleteServerCertificate method.
	DeleteServerCertificateFunc func(deleteServerCertificateInput *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)

	// DeleteServerCertificateRequestFunc mocks the DeleteServerCertificateRequest method.
	DeleteServerCertificateRequestFunc func(deleteServerCertificateInput *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput)

	// DeleteServerCertificateWithContextFunc mocks the DeleteServerCertificateWithContext method.
	DeleteServerCertificateWithContextFunc func(contextMoqParam context.Context, deleteServerCertificateInput *iam.DeleteServerCertificateInput, options ...request.Option) (*iam.DeleteServerCertificateOutput, error)

	// DeleteServiceLinkedRoleFunc mocks the DeleteServiceLinkedRole method.
	DeleteServiceLinkedRoleFunc func(deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)

	// DeleteServiceLinkedRoleRequestFunc mocks the DeleteServiceLinkedRoleRequest method.
	DeleteServiceLinkedRoleRequestFunc func(deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput)

	// DeleteServiceLinkedRoleWithContextFunc mocks the DeleteServiceLinkedRoleWithContext method.
	DeleteServiceLinkedRoleWithContextFunc func(contextMoqParam context.Context, deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput, options ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error)

	// DeleteServiceSpecificCredentialFunc mocks the DeleteServiceSpecificCredential method.
	DeleteServiceSpecificCredentialFunc func(deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)

	// DeleteServiceSpecificCredentialRequestFunc mocks the DeleteServiceSpecificCredentialRequest method.
	DeleteServiceSpecificCredentialRequestFunc func(deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput)

	// DeleteServiceSpecificCredentialWithContextFunc mocks the DeleteServiceSpecificCredentialWithContext method.
	DeleteServiceSpecificCredentialWithContextFunc func(contextMoqParam context.Context, deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput, options ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error)

	// DeleteSigningCertificateFunc mocks the DeleteSigningCertificate method.
	DeleteSigningCertificateFunc func(deleteSigningCertificateInput *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)

	// DeleteSigningCertificateRequestFunc mocks the DeleteSigningCertificateRequest method.
	DeleteSigningCertificateRequestFunc func(deleteSigningCertificateInput *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput)

	// DeleteSigningCertificateWithContextFunc mocks the DeleteSigningCertificateWithContext method.
	DeleteSigningCertificateWithContextFunc func(contextMoqParam context.Context, deleteSigningCertificateInput *iam.DeleteSigningCertificateInput, options ...request.Option) (*iam.DeleteSigningCertificateOutput, error)

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(deleteUserInput *iam.DeleteUserInput) (*iam.DeleteUserOutput, error)

	// DeleteUserPermissionsBoundaryFunc mocks the DeleteUserPermissionsBoundary method.
	DeleteUserPermissionsBoundaryFunc func(deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)

	// DeleteUserPermissionsBoundaryRequestFunc mocks the DeleteUserPermissionsBoundaryRequest method.
	DeleteUserPermissionsBoundaryRequestFunc func(deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput)

	// DeleteUserPermissionsBoundaryWithContextFunc mocks the DeleteUserPermissionsBoundaryWithContext method.
	DeleteUserPermissionsBoundaryWithContextFunc func(contextMoqParam context.Context, deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput, options ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error)

	// DeleteUserPolicyFunc mocks the DeleteUserPolicy method.
	DeleteUserPolicyFunc func(deleteUserPolicyInput *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)

	// DeleteUserPolicyRequestFunc mocks the DeleteUserPolicyRequest method.
	DeleteUserPolicyRequestFunc func(deleteUserPolicyInput *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput)

	// DeleteUserPolicyWithContextFunc mocks the DeleteUserPolicyWithContext method.
	DeleteUserPolicyWithContextFunc func(contextMoqParam context.Context, deleteUserPolicyInput *iam.DeleteUserPolicyInput, options ...request.Option) (*iam.DeleteUserPolicyOutput, error)

	// DeleteUserRequestFunc mocks the DeleteUserRequest method.
	DeleteUserRequestFunc func(deleteUserInput *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput)

	// DeleteUserWithContextFunc mocks the DeleteUserWithContext method.
	DeleteUserWithContextFunc func(contextMoqParam context.Context, deleteUserInput *iam.DeleteUserInput, options ...request.Option) (*iam.DeleteUserOutput, error)

	// DeleteVirtualMFADeviceFunc mocks the DeleteVirtualMFADevice method.
	DeleteVirtualMFADeviceFunc func(deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)

	// DeleteVirtualMFADeviceRequestFunc mocks the DeleteVirtualMFADeviceRequest method.
	DeleteVirtualMFADeviceRequestFunc func(deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput)

	// DeleteVirtualMFADeviceWithContextFunc mocks the DeleteVirtualMFADeviceWithContext method.
	DeleteVirtualMFADeviceWithContextFunc func(contextMoqParam context.Context, deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput, options ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error)

	// DetachGroupPolicyFunc mocks the DetachGroupPolicy method.
	DetachGroupPolicyFunc func(detachGroupPolicyInput *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)

	// DetachGroupPolicyRequestFunc mocks the DetachGroupPolicyRequest method.
	DetachGroupPolicyRequestFunc func(detachGroupPolicyInput *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput)

	// DetachGroupPolicyWithContextFunc mocks the DetachGroupPolicyWithContext method.
	DetachGroupPolicyWithContextFunc func(contextMoqParam context.Context, detachGroupPolicyInput *iam.DetachGroupPolicyInput, options ...request.Option) (*iam.DetachGroupPolicyOutput, error)

	// DetachRolePolicyFunc mocks the DetachRolePolicy method.
	DetachRolePolicyFunc func(detachRolePolicyInput *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)

	// DetachRolePolicyRequestFunc mocks the DetachRolePolicyRequest method.
	DetachRolePolicyRequestFunc func(detachRolePolicyInput *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput)

	// DetachRolePolicyWithContextFunc mocks the DetachRolePolicyWithContext method.
	DetachRolePolicyWithContextFunc func(contextMoqParam context.Context, detachRolePolicyInput *iam.DetachRolePolicyInput, options ...request.Option) (*iam.DetachRolePolicyOutput, error)

	// DetachUserPolicyFunc mocks the DetachUserPolicy method.
	DetachUserPolicyFunc func(detachUserPolicyInput *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)

	// DetachUserPolicyRequestFunc mocks the DetachUserPolicyRequest method.
	DetachUserPolicyRequestFunc func(detachUserPolicyInput *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput)

	// DetachUserPolicyWithContextFunc mocks the DetachUserPolicyWithContext method.
	DetachUserPolicyWithContextFunc func(contextMoqParam context.Context, detachUserPolicyInput *iam.DetachUserPolicyInput, options ...request.Option) (*iam.DetachUserPolicyOutput, error)

	// EnableMFADeviceFunc mocks the EnableMFADevice method.
	EnableMFADeviceFunc func(enableMFADeviceInput *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)

	// EnableMFADeviceRequestFunc mocks the EnableMFADeviceRequest method.
	EnableMFADeviceRequestFunc func(enableMFADeviceInput *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput)

	// EnableMFADeviceWithContextFunc mocks the EnableMFADeviceWithContext method.
	EnableMFADeviceWithContextFunc func(contextMoqParam context.Context, enableMFADeviceInput *iam.EnableMFADeviceInput, options ...request.Option) (*iam.EnableMFADeviceOutput, error)

	// GenerateCredentialReportFunc mocks the GenerateCredentialReport method.
	GenerateCredentialReportFunc func(generateCredentialReportInput *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)

	// GenerateCredentialReportRequestFunc mocks the GenerateCredentialReportRequest method.
	GenerateCredentialReportRequestFunc func(generateCredentialReportInput *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput)

	// GenerateCredentialReportWithContextFunc mocks the GenerateCredentialReportWithContext method.
	GenerateCredentialReportWithContextFunc func(contextMoqParam context.Context, generateCredentialReportInput *iam.GenerateCredentialReportInput, options ...request.Option) (*iam.GenerateCredentialReportOutput, error)

	// GenerateOrganizationsAccessReportFunc mocks the GenerateOrganizationsAccessReport method.
	GenerateOrganizationsAccessReportFunc func(generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)

	// GenerateOrganizationsAccessReportRequestFunc mocks the GenerateOrganizationsAccessReportRequest method.
	GenerateOrganizationsAccessReportRequestFunc func(generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput)

	// GenerateOrganizationsAccessReportWithContextFunc mocks the GenerateOrganizationsAccessReportWithContext method.
	GenerateOrganizationsAccessReportWithContextFunc func(contextMoqParam context.Context, generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput, options ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error)

	// GenerateServiceLastAccessedDetailsFunc mocks the GenerateServiceLastAccessedDetails method.
	GenerateServiceLastAccessedDetailsFunc func(generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)

	// GenerateServiceLastAccessedDetailsRequestFunc mocks the GenerateServiceLastAccessedDetailsRequest method.
	GenerateServiceLastAccessedDetailsRequestFunc func(generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput)

	// GenerateServiceLastAccessedDetailsWithContextFunc mocks the GenerateServiceLastAccessedDetailsWithContext method.
	GenerateServiceLastAccessedDetailsWithContextFunc func(contextMoqParam context.Context, generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput, options ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error)

	// GetAccessKeyLastUsedFunc mocks the GetAccessKeyLastUsed method.
	GetAccessKeyLastUsedFunc func(getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)

	// GetAccessKeyLastUsedRequestFunc mocks the GetAccessKeyLastUsedRequest method.
	GetAccessKeyLastUsedRequestFunc func(getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput)

	// GetAccessKeyLastUsedWithContextFunc mocks the GetAccessKeyLastUsedWithContext method.
	GetAccessKeyLastUsedWithContextFunc func(contextMoqParam context.Context, getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput, options ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error)

	// GetAccountAuthorizationDetailsFunc mocks the GetAccountAuthorizationDetails method.
	GetAccountAuthorizationDetailsFunc func(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)

	// GetAccountAuthorizationDetailsPagesFunc mocks the GetAccountAuthorizationDetailsPages method.
	GetAccountAuthorizationDetailsPagesFunc func(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error

	// GetAccountAuthorizationDetailsPagesWithContextFunc mocks the GetAccountAuthorizationDetailsPagesWithContext method.
	GetAccountAuthorizationDetailsPagesWithContextFunc func(contextMoqParam context.Context, getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, options ...request.Option) error

	// GetAccountAuthorizationDetailsRequestFunc mocks the GetAccountAuthorizationDetailsRequest method.
	GetAccountAuthorizationDetailsRequestFunc func(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput)

	// GetAccountAuthorizationDetailsWithContextFunc mocks the GetAccountAuthorizationDetailsWithContext method.
	GetAccountAuthorizationDetailsWithContextFunc func(contextMoqParam context.Context, getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, options ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error)

	// GetAccountPasswordPolicyFunc mocks the GetAccountPasswordPolicy method.
	GetAccountPasswordPolicyFunc func(getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)

	// GetAccountPasswordPolicyRequestFunc mocks the GetAccountPasswordPolicyRequest method.
	GetAccountPasswordPolicyRequestFunc func(getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput)

	// GetAccountPasswordPolicyWithContextFunc mocks the GetAccountPasswordPolicyWithContext method.
	GetAccountPasswordPolicyWithContextFunc func(contextMoqParam context.Context, getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput, options ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error)

	// GetAccountSummaryFunc mocks the GetAccountSummary method.
	GetAccountSummaryFunc func(getAccountSummaryInput *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)

	// GetAccountSummaryRequestFunc mocks the GetAccountSummaryRequest method.
	GetAccountSummaryRequestFunc func(getAccountSummaryInput *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput)

	// GetAccountSummaryWithContextFunc mocks the GetAccountSummaryWithContext method.
	GetAccountSummaryWithContextFunc func(contextMoqParam context.Context, getAccountSummaryInput *iam.GetAccountSummaryInput, options ...request.Option) (*iam.GetAccountSummaryOutput, error)

	// GetContextKeysForCustomPolicyFunc mocks the GetContextKeysForCustomPolicy method.
	GetContextKeysForCustomPolicyFunc func(getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)

	// GetContextKeysForCustomPolicyRequestFunc mocks the GetContextKeysForCustomPolicyRequest method.
	GetContextKeysForCustomPolicyRequestFunc func(getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)

	// GetContextKeysForCustomPolicyWithContextFunc mocks the GetContextKeysForCustomPolicyWithContext method.
	GetContextKeysForCustomPolicyWithContextFunc func(contextMoqParam context.Context, getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput, options ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)

	// GetContextKeysForPrincipalPolicyFunc mocks the GetContextKeysForPrincipalPolicy method.
	GetContextKeysForPrincipalPolicyFunc func(getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)

	// GetContextKeysForPrincipalPolicyRequestFunc mocks the GetContextKeysForPrincipalPolicyRequest method.
	GetContextKeysForPrincipalPolicyRequestFunc func(getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)

	// GetContextKeysForPrincipalPolicyWithContextFunc mocks the GetContextKeysForPrincipalPolicyWithContext method.
	GetContextKeysForPrincipalPolicyWithContextFunc func(contextMoqParam context.Context, getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput, options ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)

	// GetCredentialReportFunc mocks the GetCredentialReport method.
	GetCredentialReportFunc func(getCredentialReportInput *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)

	// GetCredentialReportRequestFunc mocks the GetCredentialReportRequest method.
	GetCredentialReportRequestFunc func(getCredentialReportInput *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput)

	// GetCredentialReportWithContextFunc mocks the GetCredentialReportWithContext method.
	GetCredentialReportWithContextFunc func(contextMoqParam context.Context, getCredentialReportInput *iam.GetCredentialReportInput, options ...request.Option) (*iam.GetCredentialReportOutput, error)

	// GetGroupFunc mocks the GetGroup method.
	GetGroupFunc func(getGroupInput *iam.GetGroupInput) (*iam.GetGroupOutput, error)

	// GetGroupPagesFunc mocks the GetGroupPages method.
	GetGroupPagesFunc func(getGroupInput *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool) error

	// GetGroupPagesWithContextFunc mocks the GetGroupPagesWithContext method.
	GetGroupPagesWithContextFunc func(contextMoqParam context.Context, getGroupInput *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool, options ...request.Option) error

	// GetGroupPolicyFunc mocks the GetGroupPolicy method.
	GetGroupPolicyFunc func(getGroupPolicyInput *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)

	// GetGroupPolicyRequestFunc mocks the GetGroupPolicyRequest method.
	GetGroupPolicyRequestFunc func(getGroupPolicyInput *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput)

	// GetGroupPolicyWithContextFunc mocks the GetGroupPolicyWithContext method.
	GetGroupPolicyWithContextFunc func(contextMoqParam context.Context, getGroupPolicyInput *iam.GetGroupPolicyInput, options ...request.Option) (*iam.GetGroupPolicyOutput, error)

	// GetGroupRequestFunc mocks the GetGroupRequest method.
	GetGroupRequestFunc func(getGroupInput *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput)

	// GetGroupWithContextFunc mocks the GetGroupWithContext method.
	GetGroupWithContextFunc func(contextMoqParam context.Context, getGroupInput *iam.GetGroupInput, options ...request.Option) (*iam.GetGroupOutput, error)

	// GetInstanceProfileFunc mocks the GetInstanceProfile method.
	GetInstanceProfileFunc func(getInstanceProfileInput *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)

	// GetInstanceProfileRequestFunc mocks the GetInstanceProfileRequest method.
	GetInstanceProfileRequestFunc func(getInstanceProfileInput *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput)

	// GetInstanceProfileWithContextFunc mocks the GetInstanceProfileWithContext method.
	GetInstanceProfileWithContextFunc func(contextMoqParam context.Context, getInstanceProfileInput *iam.GetInstanceProfileInput, options ...request.Option) (*iam.GetInstanceProfileOutput, error)

	// GetLoginProfileFunc mocks the GetLoginProfile method.
	GetLoginProfileFunc func(getLoginProfileInput *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)

	// GetLoginProfileRequestFunc mocks the GetLoginProfileRequest method.
	GetLoginProfileRequestFunc func(getLoginProfileInput *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput)

	// GetLoginProfileWithContextFunc mocks the GetLoginProfileWithContext method.
	GetLoginProfileWithContextFunc func(contextMoqParam context.Context, getLoginProfileInput *iam.GetLoginProfileInput, options ...request.Option) (*iam.GetLoginProfileOutput, error)

	// GetOpenIDConnectProviderFunc mocks the GetOpenIDConnectProvider method.
	GetOpenIDConnectProviderFunc func(getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)

	// GetOpenIDConnectProviderRequestFunc mocks the GetOpenIDConnectProviderRequest method.
	GetOpenIDConnectProviderRequestFunc func(getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput)

	// GetOpenIDConnectProviderWithContextFunc mocks the GetOpenIDConnectProviderWithContext method.
	GetOpenIDConnectProviderWithContextFunc func(contextMoqParam context.Context, getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput, options ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error)

	// GetOrganizationsAccessReportFunc mocks the GetOrganizationsAccessReport method.
	GetOrganizationsAccessReportFunc func(getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)

	// GetOrganizationsAccessReportRequestFunc mocks the GetOrganizationsAccessReportRequest method.
	GetOrganizationsAccessReportRequestFunc func(getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput)

	// GetOrganizationsAccessReportWithContextFunc mocks the GetOrganizationsAccessReportWithContext method.
	GetOrganizationsAccessReportWithContextFunc func(contextMoqParam context.Context, getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput, options ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error)

	// GetPolicyFunc mocks the GetPolicy method.
	GetPolicyFunc func(getPolicyInput *iam.GetPolicyInput) (*iam.GetPolicyOutput, error)

	// GetPolicyRequestFunc mocks the GetPolicyRequest method.
	GetPolicyRequestFunc func(getPolicyInput *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput)

	// GetPolicyVersionFunc mocks the GetPolicyVersion method.
	GetPolicyVersionFunc func(getPolicyVersionInput *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)

	// GetPolicyVersionRequestFunc mocks the GetPolicyVersionRequest method.
	GetPolicyVersionRequestFunc func(getPolicyVersionInput *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput)

	// GetPolicyVersionWithContextFunc mocks the GetPolicyVersionWithContext method.
	GetPolicyVersionWithContextFunc func(contextMoqParam context.Context, getPolicyVersionInput *iam.GetPolicyVersionInput, options ...request.Option) (*iam.GetPolicyVersionOutput, error)

	// GetPolicyWithContextFunc mocks the GetPolicyWithContext method.
	GetPolicyWithContextFunc func(contextMoqParam context.Context, getPolicyInput *iam.GetPolicyInput, options ...request.Option) (*iam.GetPolicyOutput, error)

	// GetRoleFunc mocks the GetRole method.
	GetRoleFunc func(getRoleInput *iam.GetRoleInput) (*iam.GetRoleOutput, error)

	// GetRolePolicyFunc mocks the GetRolePolicy method.
	GetRolePolicyFunc func(getRolePolicyInput *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)

	// GetRolePolicyRequestFunc mocks the GetRolePolicyRequest method.
	GetRolePolicyRequestFunc func(getRolePolicyInput *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput)

	// GetRolePolicyWithContextFunc mocks the GetRolePolicyWithContext method.
	GetRolePolicyWithContextFunc func(contextMoqParam context.Context, getRolePolicyInput *iam.GetRolePolicyInput, options ...request.Option) (*iam.GetRolePolicyOutput, error)

	// GetRoleRequestFunc mocks the GetRoleRequest method.
	GetRoleRequestFunc func(getRoleInput *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput)

	// GetRoleWithContextFunc mocks the GetRoleWithContext method.
	GetRoleWithContextFunc func(contextMoqParam context.Context, getRoleInput *iam.GetRoleInput, options ...request.Option) (*iam.GetRoleOutput, error)

	// GetSAMLProviderFunc mocks the GetSAMLProvider method.
	GetSAMLProviderFunc func(getSAMLProviderInput *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)

	// GetSAMLProviderRequestFunc mocks the GetSAMLProviderRequest method.
	GetSAMLProviderRequestFunc func(getSAMLProviderInput *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput)

	// GetSAMLProviderWithContextFunc mocks the GetSAMLProviderWithContext method.
	GetSAMLProviderWithContextFunc func(contextMoqParam context.Context, getSAMLProviderInput *iam.GetSAMLProviderInput, options ...request.Option) (*iam.GetSAMLProviderOutput, error)

	// GetSSHPublicKeyFunc mocks the GetSSHPublicKey method.
	GetSSHPublicKeyFunc func(getSSHPublicKeyInput *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)

	// GetSSHPublicKeyRequestFunc mocks the GetSSHPublicKeyRequest method.
	GetSSHPublicKeyRequestFunc func(getSSHPublicKeyInput *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput)

	// GetSSHPublicKeyWithContextFunc mocks the GetSSHPublicKeyWithContext method.
	GetSSHPublicKeyWithContextFunc func(contextMoqParam context.Context, getSSHPublicKeyInput *iam.GetSSHPublicKeyInput, options ...request.Option) (*iam.GetSSHPublicKeyOutput, error)

	// GetServerCertificateFunc mocks the GetServerCertificate method.
	GetServerCertificateFunc func(getServerCertificateInput *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)

	// GetServerCertificateRequestFunc mocks the GetServerCertificateRequest method.
	GetServerCertificateRequestFunc func(getServerCertificateInput *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput)

	// GetServerCertificateWithContextFunc mocks the GetServerCertificateWithContext method.
	GetServerCertificateWithContextFunc func(contextMoqParam context.Context, getServerCertificateInput *iam.GetServerCertificateInput, options ...request.Option) (*iam.GetServerCertificateOutput, error)

	// GetServiceLastAccessedDetailsFunc mocks the GetServiceLastAccessedDetails method.
	GetServiceLastAccessedDetailsFunc func(getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)

	// GetServiceLastAccessedDetailsRequestFunc mocks the GetServiceLastAccessedDetailsRequest method.
	GetServiceLastAccessedDetailsRequestFunc func(getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput)

	// GetServiceLastAccessedDetailsWithContextFunc mocks the GetServiceLastAccessedDetailsWithContext method.
	GetServiceLastAccessedDetailsWithContextFunc func(contextMoqParam context.Context, getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput, options ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error)

	// GetServiceLastAccessedDetailsWithEntitiesFunc mocks the GetServiceLastAccessedDetailsWithEntities method.
	GetServiceLastAccessedDetailsWithEntitiesFunc func(getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)

	// GetServiceLastAccessedDetailsWithEntitiesRequestFunc mocks the GetServiceLastAccessedDetailsWithEntitiesRequest method.
	GetServiceLastAccessedDetailsWithEntitiesRequestFunc func(getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput)

	// GetServiceLastAccessedDetailsWithEntitiesWithContextFunc mocks the GetServiceLastAccessedDetailsWithEntitiesWithContext method.
	GetServiceLastAccessedDetailsWithEntitiesWithContextFunc func(contextMoqParam context.Context, getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput, options ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)

	// GetServiceLinkedRoleDeletionStatusFunc mocks the GetServiceLinkedRoleDeletionStatus method.
	GetServiceLinkedRoleDeletionStatusFunc func(getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)

	// GetServiceLinkedRoleDeletionStatusRequestFunc mocks the GetServiceLinkedRoleDeletionStatusRequest method.
	GetServiceLinkedRoleDeletionStatusRequestFunc func(getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput)

	// GetServiceLinkedRoleDeletionStatusWithContextFunc mocks the GetServiceLinkedRoleDeletionStatusWithContext method.
	GetServiceLinkedRoleDeletionStatusWithContextFunc func(contextMoqParam context.Context, getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput, options ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(getUserInput *iam.GetUserInput) (*iam.GetUserOutput, error)

	// GetUserPolicyFunc mocks the GetUserPolicy method.
	GetUserPolicyFunc func(getUserPolicyInput *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)

	// GetUserPolicyRequestFunc mocks the GetUserPolicyRequest method.
	GetUserPolicyRequestFunc func(getUserPolicyInput *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput)

	// GetUserPolicyWithContextFunc mocks the GetUserPolicyWithContext method.
	GetUserPolicyWithContextFunc func(contextMoqParam context.Context, getUserPolicyInput *iam.GetUserPolicyInput, options ...request.Option) (*iam.GetUserPolicyOutput, error)

	// GetUserRequestFunc mocks the GetUserRequest method.
	GetUserRequestFunc func(getUserInput *iam.GetUserInput) (*request.Request, *iam.GetUserOutput)

	// GetUserWithContextFunc mocks the GetUserWithContext method.
	GetUserWithContextFunc func(contextMoqParam context.Context, getUserInput *iam.GetUserInput, options ...request.Option) (*iam.GetUserOutput, error)

	// ListAccessKeysFunc mocks the ListAccessKeys method.
	ListAccessKeysFunc func(listAccessKeysInput *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)

	// ListAccessKeysPagesFunc mocks the ListAccessKeysPages method.
	ListAccessKeysPagesFunc func(listAccessKeysInput *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool) error

	// ListAccessKeysPagesWithContextFunc mocks the ListAccessKeysPagesWithContext method.
	ListAccessKeysPagesWithContextFunc func(contextMoqParam context.Context, listAccessKeysInput *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool, options ...request.Option) error

	// ListAccessKeysRequestFunc mocks the ListAccessKeysRequest method.
	ListAccessKeysRequestFunc func(listAccessKeysInput *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput)

	// ListAccessKeysWithContextFunc mocks the ListAccessKeysWithContext method.
	ListAccessKeysWithContextFunc func(contextMoqParam context.Context, listAccessKeysInput *iam.ListAccessKeysInput, options ...request.Option) (*iam.ListAccessKeysOutput, error)

	// ListAccountAliasesFunc mocks the ListAccountAliases method.
	ListAccountAliasesFunc func(listAccountAliasesInput *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)

	// ListAccountAliasesPagesFunc mocks the ListAccountAliasesPages method.
	ListAccountAliasesPagesFunc func(listAccountAliasesInput *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool) error

	// ListAccountAliasesPagesWithContextFunc mocks the ListAccountAliasesPagesWithContext method.
	ListAccountAliasesPagesWithContextFunc func(contextMoqParam context.Context, listAccountAliasesInput *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool, options ...request.Option) error

	// ListAccountAliasesRequestFunc mocks the ListAccountAliasesRequest method.
	ListAccountAliasesRequestFunc func(listAccountAliasesInput *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput)

	// ListAccountAliasesWithContextFunc mocks the ListAccountAliasesWithContext method.
	ListAccountAliasesWithContextFunc func(contextMoqParam context.Context, listAccountAliasesInput *iam.ListAccountAliasesInput, options ...request.Option) (*iam.ListAccountAliasesOutput, error)

	// ListAttachedGroupPoliciesFunc mocks the ListAttachedGroupPolicies method.
	ListAttachedGroupPoliciesFunc func(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)

	// ListAttachedGroupPoliciesPagesFunc mocks the ListAttachedGroupPoliciesPages method.
	ListAttachedGroupPoliciesPagesFunc func(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error

	// ListAttachedGroupPoliciesPagesWithContextFunc mocks the ListAttachedGroupPoliciesPagesWithContext method.
	ListAttachedGroupPoliciesPagesWithContextFunc func(contextMoqParam context.Context, listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, options ...request.Option) error

	// ListAttachedGroupPoliciesRequestFunc mocks the ListAttachedGroupPoliciesRequest method.
	ListAttachedGroupPoliciesRequestFunc func(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput)

	// ListAttachedGroupPoliciesWithContextFunc mocks the ListAttachedGroupPoliciesWithContext method.
	ListAttachedGroupPoliciesWithContextFunc func(contextMoqParam context.Context, listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, options ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error)

	// ListAttachedRolePoliciesFunc mocks the ListAttachedRolePolicies method.
	ListAttachedRolePoliciesFunc func(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)

	// ListAttachedRolePoliciesPagesFunc mocks the ListAttachedRolePoliciesPages method.
	ListAttachedRolePoliciesPagesFunc func(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error

	// ListAttachedRolePoliciesPagesWithContextFunc mocks the ListAttachedRolePoliciesPagesWithContext method.
	ListAttachedRolePoliciesPagesWithContextFunc func(contextMoqParam context.Context, listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool, options ...request.Option) error

	// ListAttachedRolePoliciesRequestFunc mocks the ListAttachedRolePoliciesRequest method.
	ListAttachedRolePoliciesRequestFunc func(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput)

	// ListAttachedRolePoliciesWithContextFunc mocks the ListAttachedRolePoliciesWithContext method.
	ListAttachedRolePoliciesWithContextFunc func(contextMoqParam context.Context, listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, options ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error)

	// ListAttachedUserPoliciesFunc mocks the ListAttachedUserPolicies method.
	ListAttachedUserPoliciesFunc func(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)

	// ListAttachedUserPoliciesPagesFunc mocks the ListAttachedUserPoliciesPages method.
	ListAttachedUserPoliciesPagesFunc func(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error

	// ListAttachedUserPoliciesPagesWithContextFunc mocks the ListAttachedUserPoliciesPagesWithContext method.
	ListAttachedUserPoliciesPagesWithContextFunc func(contextMoqParam context.Context, listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool, options ...request.Option) error

	// ListAttachedUserPoliciesRequestFunc mocks the ListAttachedUserPoliciesRequest method.
	ListAttachedUserPoliciesRequestFunc func(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput)

	// ListAttachedUserPoliciesWithContextFunc mocks the ListAttachedUserPoliciesWithContext method.
	ListAttachedUserPoliciesWithContextFunc func(contextMoqParam context.Context, listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, options ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error)

	// ListEntitiesForPolicyFunc mocks the ListEntitiesForPolicy method.
	ListEntitiesForPolicyFunc func(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)

	// ListEntitiesForPolicyPagesFunc mocks the ListEntitiesForPolicyPages method.
	ListEntitiesForPolicyPagesFunc func(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool) error

	// ListEntitiesForPolicyPagesWithContextFunc mocks the ListEntitiesForPolicyPagesWithContext method.
	ListEntitiesForPolicyPagesWithContextFunc func(contextMoqParam context.Context, listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool, options ...request.Option) error

	// ListEntitiesForPolicyRequestFunc mocks the ListEntitiesForPolicyRequest method.
	ListEntitiesForPolicyRequestFunc func(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput)

	// ListEntitiesForPolicyWithContextFunc mocks the ListEntitiesForPolicyWithContext method.
	ListEntitiesForPolicyWithContextFunc func(contextMoqParam context.Context, listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, options ...request.Option) (*iam.ListEntitiesForPolicyOutput, error)

	// ListGroupPoliciesFunc mocks the ListGroupPolicies method.
	ListGroupPoliciesFunc func(listGroupPoliciesInput *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)

	// ListGroupPoliciesPagesFunc mocks the ListGroupPoliciesPages method.
	ListGroupPoliciesPagesFunc func(listGroupPoliciesInput *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool) error

	// ListGroupPoliciesPagesWithContextFunc mocks the ListGroupPoliciesPagesWithContext method.
	ListGroupPoliciesPagesWithContextFunc func(contextMoqParam context.Context, listGroupPoliciesInput *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool, options ...request.Option) error

	// ListGroupPoliciesRequestFunc mocks the ListGroupPoliciesRequest method.
	ListGroupPoliciesRequestFunc func(listGroupPoliciesInput *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput)

	// ListGroupPoliciesWithContextFunc mocks the ListGroupPoliciesWithContext method.
	ListGroupPoliciesWithContextFunc func(contextMoqParam context.Context, listGroupPoliciesInput *iam.ListGroupPoliciesInput, options ...request.Option) (*iam.ListGroupPoliciesOutput, error)

	// ListGroupsFunc mocks the ListGroups method.
	ListGroupsFunc func(listGroupsInput *iam.ListGroupsInput) (*iam.ListGroupsOutput, error)

	// ListGroupsForUserFunc mocks the ListGroupsForUser method.
	ListGroupsForUserFunc func(listGroupsForUserInput *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)

	// ListGroupsForUserPagesFunc mocks the ListGroupsForUserPages method.
	ListGroupsForUserPagesFunc func(listGroupsForUserInput *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool) error

	// ListGroupsForUserPagesWithContextFunc mocks the ListGroupsForUserPagesWithContext method.
	ListGroupsForUserPagesWithContextFunc func(contextMoqParam context.Context, listGroupsForUserInput *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool, options ...request.Option) error

	// ListGroupsForUserRequestFunc mocks the ListGroupsForUserRequest method.
	ListGroupsForUserRequestFunc func(listGroupsForUserInput *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput)

	// ListGroupsForUserWithContextFunc mocks the ListGroupsForUserWithContext method.
	ListGroupsForUserWithContextFunc func(contextMoqParam context.Context, listGroupsForUserInput *iam.ListGroupsForUserInput, options ...request.Option) (*iam.ListGroupsForUserOutput, error)

	// ListGroupsPagesFunc mocks the ListGroupsPages method.
	ListGroupsPagesFunc func(listGroupsInput *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool) error

	// ListGroupsPagesWithContextFunc mocks the ListGroupsPagesWithContext method.
	ListGroupsPagesWithContextFunc func(contextMoqParam context.Context, listGroupsInput *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool, options ...request.Option) error

	// ListGroupsRequestFunc mocks the ListGroupsRequest method.
	ListGroupsRequestFunc func(listGroupsInput *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput)

	// ListGroupsWithContextFunc mocks the ListGroupsWithContext method.
	ListGroupsWithContextFunc func(contextMoqParam context.Context, listGroupsInput *iam.ListGroupsInput, options ...request.Option) (*iam.ListGroupsOutput, error)

	// ListInstanceProfilesFunc mocks the ListInstanceProfiles method.
	ListInstanceProfilesFunc func(listInstanceProfilesInput *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)

	// ListInstanceProfilesForRoleFunc mocks the ListInstanceProfilesForRole method.
	ListInstanceProfilesForRoleFunc func(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)

	// ListInstanceProfilesForRolePagesFunc mocks the ListInstanceProfilesForRolePages method.
	ListInstanceProfilesForRolePagesFunc func(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error

	// ListInstanceProfilesForRolePagesWithContextFunc mocks the ListInstanceProfilesForRolePagesWithContext method.
	ListInstanceProfilesForRolePagesWithContextFunc func(contextMoqParam context.Context, listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, options ...request.Option) error

	// ListInstanceProfilesForRoleRequestFunc mocks the ListInstanceProfilesForRoleRequest method.
	ListInstanceProfilesForRoleRequestFunc func(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput)

	// ListInstanceProfilesForRoleWithContextFunc mocks the ListInstanceProfilesForRoleWithContext method.
	ListInstanceProfilesForRoleWithContextFunc func(contextMoqParam context.Context, listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, options ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error)

	// ListInstanceProfilesPagesFunc mocks the ListInstanceProfilesPages method.
	ListInstanceProfilesPagesFunc func(listInstanceProfilesInput *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool) error

	// ListInstanceProfilesPagesWithContextFunc mocks the ListInstanceProfilesPagesWithContext method.
	ListInstanceProfilesPagesWithContextFunc func(contextMoqParam context.Context, listInstanceProfilesInput *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool, options ...request.Option) error

	// ListInstanceProfilesRequestFunc mocks the ListInstanceProfilesRequest method.
	ListInstanceProfilesRequestFunc func(listInstanceProfilesInput *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput)

	// ListInstanceProfilesWithContextFunc mocks the ListInstanceProfilesWithContext method.
	ListInstanceProfilesWithContextFunc func(contextMoqParam context.Context, listInstanceProfilesInput *iam.ListInstanceProfilesInput, options ...request.Option) (*iam.ListInstanceProfilesOutput, error)

	// ListMFADevicesFunc mocks the ListMFADevices method.
	ListMFADevicesFunc func(listMFADevicesInput *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)

	// ListMFADevicesPagesFunc mocks the ListMFADevicesPages method.
	ListMFADevicesPagesFunc func(listMFADevicesInput *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool) error

	// ListMFADevicesPagesWithContextFunc mocks the ListMFADevicesPagesWithContext method.
	ListMFADevicesPagesWithContextFunc func(contextMoqParam context.Context, listMFADevicesInput *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool, options ...request.Option) error

	// ListMFADevicesRequestFunc mocks the ListMFADevicesRequest method.
	ListMFADevicesRequestFunc func(listMFADevicesInput *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput)

	// ListMFADevicesWithContextFunc mocks the ListMFADevicesWithContext method.
	ListMFADevicesWithContextFunc func(contextMoqParam context.Context, listMFADevicesInput *iam.ListMFADevicesInput, options ...request.Option) (*iam.ListMFADevicesOutput, error)

	// ListOpenIDConnectProvidersFunc mocks the ListOpenIDConnectProviders method.
	ListOpenIDConnectProvidersFunc func(listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)

	// ListOpenIDConnectProvidersRequestFunc mocks the ListOpenIDConnectProvidersRequest method.
	ListOpenIDConnectProvidersRequestFunc func(listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput)

	// ListOpenIDConnectProvidersWithContextFunc mocks the ListOpenIDConnectProvidersWithContext method.
	ListOpenIDConnectProvidersWithContextFunc func(contextMoqParam context.Context, listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput, options ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error)

	// ListPoliciesFunc mocks the ListPolicies method.
	ListPoliciesFunc func(listPoliciesInput *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)

	// ListPoliciesGrantingServiceAccessFunc mocks the ListPoliciesGrantingServiceAccess method.
	ListPoliciesGrantingServiceAccessFunc func(listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)

	// ListPoliciesGrantingServiceAccessRequestFunc mocks the ListPoliciesGrantingServiceAccessRequest method.
	ListPoliciesGrantingServiceAccessRequestFunc func(listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput)

	// ListPoliciesGrantingServiceAccessWithContextFunc mocks the ListPoliciesGrantingServiceAccessWithContext method.
	ListPoliciesGrantingServiceAccessWithContextFunc func(contextMoqParam context.Context, listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput, options ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error)

	// ListPoliciesPagesFunc mocks the ListPoliciesPages method.
	ListPoliciesPagesFunc func(listPoliciesInput *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool) error

	// ListPoliciesPagesWithContextFunc mocks the ListPoliciesPagesWithContext method.
	ListPoliciesPagesWithContextFunc func(contextMoqParam context.Context, listPoliciesInput *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool, options ...request.Option) error

	// ListPoliciesRequestFunc mocks the ListPoliciesRequest method.
	ListPoliciesRequestFunc func(listPoliciesInput *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput)

	// ListPoliciesWithContextFunc mocks the ListPoliciesWithContext method.
	ListPoliciesWithContextFunc func(contextMoqParam context.Context, listPoliciesInput *iam.ListPoliciesInput, options ...request.Option) (*iam.ListPoliciesOutput, error)

	// ListPolicyVersionsFunc mocks the ListPolicyVersions method.
	ListPolicyVersionsFunc func(listPolicyVersionsInput *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)

	// ListPolicyVersionsPagesFunc mocks the ListPolicyVersionsPages method.
	ListPolicyVersionsPagesFunc func(listPolicyVersionsInput *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool) error

	// ListPolicyVersionsPagesWithContextFunc mocks the ListPolicyVersionsPagesWithContext method.
	ListPolicyVersionsPagesWithContextFunc func(contextMoqParam context.Context, listPolicyVersionsInput *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool, options ...request.Option) error

	// ListPolicyVersionsRequestFunc mocks the ListPolicyVersionsRequest method.
	ListPolicyVersionsRequestFunc func(listPolicyVersionsInput *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput)

	// ListPolicyVersionsWithContextFunc mocks the ListPolicyVersionsWithContext method.
	ListPolicyVersionsWithContextFunc func(contextMoqParam context.Context, listPolicyVersionsInput *iam.ListPolicyVersionsInput, options ...request.Option) (*iam.ListPolicyVersionsOutput, error)

	// ListRolePoliciesFunc mocks the ListRolePolicies method.
	ListRolePoliciesFunc func(listRolePoliciesInput *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)

	// ListRolePoliciesPagesFunc mocks the ListRolePoliciesPages method.
	ListRolePoliciesPagesFunc func(listRolePoliciesInput *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool) error

	// ListRolePoliciesPagesWithContextFunc mocks the ListRolePoliciesPagesWithContext method.
	ListRolePoliciesPagesWithContextFunc func(contextMoqParam context.Context, listRolePoliciesInput *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool, options ...request.Option) error

	// ListRolePoliciesRequestFunc mocks the ListRolePoliciesRequest method.
	ListRolePoliciesRequestFunc func(listRolePoliciesInput *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput)

	// ListRolePoliciesWithContextFunc mocks the ListRolePoliciesWithContext method.
	ListRolePoliciesWithContextFunc func(contextMoqParam context.Context, listRolePoliciesInput *iam.ListRolePoliciesInput, options ...request.Option) (*iam.ListRolePoliciesOutput, error)

	// ListRoleTagsFunc mocks the ListRoleTags method.
	ListRoleTagsFunc func(listRoleTagsInput *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)

	// ListRoleTagsRequestFunc mocks the ListRoleTagsRequest method.
	ListRoleTagsRequestFunc func(listRoleTagsInput *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput)

	// ListRoleTagsWithContextFunc mocks the ListRoleTagsWithContext method.
	ListRoleTagsWithContextFunc func(contextMoqParam context.Context, listRoleTagsInput *iam.ListRoleTagsInput, options ...request.Option) (*iam.ListRoleTagsOutput, error)

	// ListRolesFunc mocks the ListRoles method.
	ListRolesFunc func(listRolesInput *iam.ListRolesInput) (*iam.ListRolesOutput, error)

	// ListRolesPagesFunc mocks the ListRolesPages method.
	ListRolesPagesFunc func(listRolesInput *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool) error

	// ListRolesPagesWithContextFunc mocks the ListRolesPagesWithContext method.
	ListRolesPagesWithContextFunc func(contextMoqParam context.Context, listRolesInput *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool, options ...request.Option) error

	// ListRolesRequestFunc mocks the ListRolesRequest method.
	ListRolesRequestFunc func(listRolesInput *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput)

	// ListRolesWithContextFunc mocks the ListRolesWithContext method.
	ListRolesWithContextFunc func(contextMoqParam context.Context, listRolesInput *iam.ListRolesInput, options ...request.Option) (*iam.ListRolesOutput, error)

	// ListSAMLProvidersFunc mocks the ListSAMLProviders method.
	ListSAMLProvidersFunc func(listSAMLProvidersInput *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)

	// ListSAMLProvidersRequestFunc mocks the ListSAMLProvidersRequest method.
	ListSAMLProvidersRequestFunc func(listSAMLProvidersInput *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput)

	// ListSAMLProvidersWithContextFunc mocks the ListSAMLProvidersWithContext method.
	ListSAMLProvidersWithContextFunc func(contextMoqParam context.Context, listSAMLProvidersInput *iam.ListSAMLProvidersInput, options ...request.Option) (*iam.ListSAMLProvidersOutput, error)

	// ListSSHPublicKeysFunc mocks the ListSSHPublicKeys method.
	ListSSHPublicKeysFunc func(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)

	// ListSSHPublicKeysPagesFunc mocks the ListSSHPublicKeysPages method.
	ListSSHPublicKeysPagesFunc func(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool) error

	// ListSSHPublicKeysPagesWithContextFunc mocks the ListSSHPublicKeysPagesWithContext method.
	ListSSHPublicKeysPagesWithContextFunc func(contextMoqParam context.Context, listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool, options ...request.Option) error

	// ListSSHPublicKeysRequestFunc mocks the ListSSHPublicKeysRequest method.
	ListSSHPublicKeysRequestFunc func(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput)

	// ListSSHPublicKeysWithContextFunc mocks the ListSSHPublicKeysWithContext method.
	ListSSHPublicKeysWithContextFunc func(contextMoqParam context.Context, listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, options ...request.Option) (*iam.ListSSHPublicKeysOutput, error)

	// ListServerCertificatesFunc mocks the ListServerCertificates method.
	ListServerCertificatesFunc func(listServerCertificatesInput *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)

	// ListServerCertificatesPagesFunc mocks the ListServerCertificatesPages method.
	ListServerCertificatesPagesFunc func(listServerCertificatesInput *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool) error

	// ListServerCertificatesPagesWithContextFunc mocks the ListServerCertificatesPagesWithContext method.
	ListServerCertificatesPagesWithContextFunc func(contextMoqParam context.Context, listServerCertificatesInput *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool, options ...request.Option) error

	// ListServerCertificatesRequestFunc mocks the ListServerCertificatesRequest method.
	ListServerCertificatesRequestFunc func(listServerCertificatesInput *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput)

	// ListServerCertificatesWithContextFunc mocks the ListServerCertificatesWithContext method.
	ListServerCertificatesWithContextFunc func(contextMoqParam context.Context, listServerCertificatesInput *iam.ListServerCertificatesInput, options ...request.Option) (*iam.ListServerCertificatesOutput, error)

	// ListServiceSpecificCredentialsFunc mocks the ListServiceSpecificCredentials method.
	ListServiceSpecificCredentialsFunc func(listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)

	// ListServiceSpecificCredentialsRequestFunc mocks the ListServiceSpecificCredentialsRequest method.
	ListServiceSpecificCredentialsRequestFunc func(listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput)

	// ListServiceSpecificCredentialsWithContextFunc mocks the ListServiceSpecificCredentialsWithContext method.
	ListServiceSpecificCredentialsWithContextFunc func(contextMoqParam context.Context, listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput, options ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error)

	// ListSigningCertificatesFunc mocks the ListSigningCertificates method.
	ListSigningCertificatesFunc func(listSigningCertificatesInput *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)

	// ListSigningCertificatesPagesFunc mocks the ListSigningCertificatesPages method.
	ListSigningCertificatesPagesFunc func(listSigningCertificatesInput *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool) error

	// ListSigningCertificatesPagesWithContextFunc mocks the ListSigningCertificatesPagesWithContext method.
	ListSigningCertificatesPagesWithContextFunc func(contextMoqParam context.Context, listSigningCertificatesInput *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool, options ...request.Option) error

	// ListSigningCertificatesRequestFunc mocks the ListSigningCertificatesRequest method.
	ListSigningCertificatesRequestFunc func(listSigningCertificatesInput *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput)

	// ListSigningCertificatesWithContextFunc mocks the ListSigningCertificatesWithContext method.
	ListSigningCertificatesWithContextFunc func(contextMoqParam context.Context, listSigningCertificatesInput *iam.ListSigningCertificatesInput, options ...request.Option) (*iam.ListSigningCertificatesOutput, error)

	// ListUserPoliciesFunc mocks the ListUserPolicies method.
	ListUserPoliciesFunc func(listUserPoliciesInput *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)

	// ListUserPoliciesPagesFunc mocks the ListUserPoliciesPages method.
	ListUserPoliciesPagesFunc func(listUserPoliciesInput *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool) error

	// ListUserPoliciesPagesWithContextFunc mocks the ListUserPoliciesPagesWithContext method.
	ListUserPoliciesPagesWithContextFunc func(contextMoqParam context.Context, listUserPoliciesInput *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool, options ...request.Option) error

	// ListUserPoliciesRequestFunc mocks the ListUserPoliciesRequest method.
	ListUserPoliciesRequestFunc func(listUserPoliciesInput *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput)

	// ListUserPoliciesWithContextFunc mocks the ListUserPoliciesWithContext method.
	ListUserPoliciesWithContextFunc func(contextMoqParam context.Context, listUserPoliciesInput *iam.ListUserPoliciesInput, options ...request.Option) (*iam.ListUserPoliciesOutput, error)

	// ListUserTagsFunc mocks the ListUserTags method.
	ListUserTagsFunc func(listUserTagsInput *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)

	// ListUserTagsRequestFunc mocks the ListUserTagsRequest method.
	ListUserTagsRequestFunc func(listUserTagsInput *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput)

	// ListUserTagsWithContextFunc mocks the ListUserTagsWithContext method.
	ListUserTagsWithContextFunc func(contextMoqParam context.Context, listUserTagsInput *iam.ListUserTagsInput, options ...request.Option) (*iam.ListUserTagsOutput, error)

	// ListUsersFunc mocks the ListUsers method.
	ListUsersFunc func(listUsersInput *iam.ListUsersInput) (*iam.ListUsersOutput, error)

	// ListUsersPagesFunc mocks the ListUsersPages method.
	ListUsersPagesFunc func(listUsersInput *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool) error

	// ListUsersPagesWithContextFunc mocks the ListUsersPagesWithContext method.
	ListUsersPagesWithContextFunc func(contextMoqParam context.Context, listUsersInput *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool, options ...request.Option) error

	// ListUsersRequestFunc mocks the ListUsersRequest method.
	ListUsersRequestFunc func(listUsersInput *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput)

	// ListUsersWithContextFunc mocks the ListUsersWithContext method.
	ListUsersWithContextFunc func(contextMoqParam context.Context, listUsersInput *iam.ListUsersInput, options ...request.Option) (*iam.ListUsersOutput, error)

	// ListVirtualMFADevicesFunc mocks the ListVirtualMFADevices method.
	ListVirtualMFADevicesFunc func(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)

	// ListVirtualMFADevicesPagesFunc mocks the ListVirtualMFADevicesPages method.
	ListVirtualMFADevicesPagesFunc func(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool) error

	// ListVirtualMFADevicesPagesWithContextFunc mocks the ListVirtualMFADevicesPagesWithContext method.
	ListVirtualMFADevicesPagesWithContextFunc func(contextMoqParam context.Context, listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool, options ...request.Option) error

	// ListVirtualMFADevicesRequestFunc mocks the ListVirtualMFADevicesRequest method.
	ListVirtualMFADevicesRequestFunc func(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput)

	// ListVirtualMFADevicesWithContextFunc mocks the ListVirtualMFADevicesWithContext method.
	ListVirtualMFADevicesWithContextFunc func(contextMoqParam context.Context, listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, options ...request.Option) (*iam.ListVirtualMFADevicesOutput, error)

	// PutGroupPolicyFunc mocks the PutGroupPolicy method.
	PutGroupPolicyFunc func(putGroupPolicyInput *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)

	// PutGroupPolicyRequestFunc mocks the PutGroupPolicyRequest method.
	PutGroupPolicyRequestFunc func(putGroupPolicyInput *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput)

	// PutGroupPolicyWithContextFunc mocks the PutGroupPolicyWithContext method.
	PutGroupPolicyWithContextFunc func(contextMoqParam context.Context, putGroupPolicyInput *iam.PutGroupPolicyInput, options ...request.Option) (*iam.PutGroupPolicyOutput, error)

	// PutRolePermissionsBoundaryFunc mocks the PutRolePermissionsBoundary method.
	PutRolePermissionsBoundaryFunc func(putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)

	// PutRolePermissionsBoundaryRequestFunc mocks the PutRolePermissionsBoundaryRequest method.
	PutRolePermissionsBoundaryRequestFunc func(putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput)

	// PutRolePermissionsBoundaryWithContextFunc mocks the PutRolePermissionsBoundaryWithContext method.
	PutRolePermissionsBoundaryWithContextFunc func(contextMoqParam context.Context, putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput, options ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error)

	// PutRolePolicyFunc mocks the PutRolePolicy method.
	PutRolePolicyFunc func(putRolePolicyInput *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)

	// PutRolePolicyRequestFunc mocks the PutRolePolicyRequest method.
	PutRolePolicyRequestFunc func(putRolePolicyInput *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput)

	// PutRolePolicyWithContextFunc mocks the PutRolePolicyWithContext method.
	PutRolePolicyWithContextFunc func(contextMoqParam context.Context, putRolePolicyInput *iam.PutRolePolicyInput, options ...request.Option) (*iam.PutRolePolicyOutput, error)

	// PutUserPermissionsBoundaryFunc mocks the PutUserPermissionsBoundary method.
	PutUserPermissionsBoundaryFunc func(putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)

	// PutUserPermissionsBoundaryRequestFunc mocks the PutUserPermissionsBoundaryRequest method.
	PutUserPermissionsBoundaryRequestFunc func(putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput)

	// PutUserPermissionsBoundaryWithContextFunc mocks the PutUserPermissionsBoundaryWithContext method.
	PutUserPermissionsBoundaryWithContextFunc func(contextMoqParam context.Context, putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput, options ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error)

	// PutUserPolicyFunc mocks the PutUserPolicy method.
	PutUserPolicyFunc func(putUserPolicyInput *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)

	// PutUserPolicyRequestFunc mocks the PutUserPolicyRequest method.
	PutUserPolicyRequestFunc func(putUserPolicyInput *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput)

	// PutUserPolicyWithContextFunc mocks the PutUserPolicyWithContext method.
	PutUserPolicyWithContextFunc func(contextMoqParam context.Context, putUserPolicyInput *iam.PutUserPolicyInput, options ...request.Option) (*iam.PutUserPolicyOutput, error)

	// RemoveClientIDFromOpenIDConnectProviderFunc mocks the RemoveClientIDFromOpenIDConnectProvider method.
	RemoveClientIDFromOpenIDConnectProviderFunc func(removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)

	// RemoveClientIDFromOpenIDConnectProviderRequestFunc mocks the RemoveClientIDFromOpenIDConnectProviderRequest method.
	RemoveClientIDFromOpenIDConnectProviderRequestFunc func(removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput)

	// RemoveClientIDFromOpenIDConnectProviderWithContextFunc mocks the RemoveClientIDFromOpenIDConnectProviderWithContext method.
	RemoveClientIDFromOpenIDConnectProviderWithContextFunc func(contextMoqParam context.Context, removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput, options ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)

	// RemoveRoleFromInstanceProfileFunc mocks the RemoveRoleFromInstanceProfile method.
	RemoveRoleFromInstanceProfileFunc func(removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)

	// RemoveRoleFromInstanceProfileRequestFunc mocks the RemoveRoleFromInstanceProfileRequest method.
	RemoveRoleFromInstanceProfileRequestFunc func(removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput)

	// RemoveRoleFromInstanceProfileWithContextFunc mocks the RemoveRoleFromInstanceProfileWithContext method.
	RemoveRoleFromInstanceProfileWithContextFunc func(contextMoqParam context.Context, removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput, options ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error)

	// RemoveUserFromGroupFunc mocks the RemoveUserFromGroup method.
	RemoveUserFromGroupFunc func(removeUserFromGroupInput *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)

	// RemoveUserFromGroupRequestFunc mocks the RemoveUserFromGroupRequest method.
	RemoveUserFromGroupRequestFunc func(removeUserFromGroupInput *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput)

	// RemoveUserFromGroupWithContextFunc mocks the RemoveUserFromGroupWithContext method.
	RemoveUserFromGroupWithContextFunc func(contextMoqParam context.Context, removeUserFromGroupInput *iam.RemoveUserFromGroupInput, options ...request.Option) (*iam.RemoveUserFromGroupOutput, error)

	// ResetServiceSpecificCredentialFunc mocks the ResetServiceSpecificCredential method.
	ResetServiceSpecificCredentialFunc func(resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)

	// ResetServiceSpecificCredentialRequestFunc mocks the ResetServiceSpecificCredentialRequest method.
	ResetServiceSpecificCredentialRequestFunc func(resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput)

	// ResetServiceSpecificCredentialWithContextFunc mocks the ResetServiceSpecificCredentialWithContext method.
	ResetServiceSpecificCredentialWithContextFunc func(contextMoqParam context.Context, resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput, options ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error)

	// ResyncMFADeviceFunc mocks the ResyncMFADevice method.
	ResyncMFADeviceFunc func(resyncMFADeviceInput *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)

	// ResyncMFADeviceRequestFunc mocks the ResyncMFADeviceRequest method.
	ResyncMFADeviceRequestFunc func(resyncMFADeviceInput *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput)

	// ResyncMFADeviceWithContextFunc mocks the ResyncMFADeviceWithContext method.
	ResyncMFADeviceWithContextFunc func(contextMoqParam context.Context, resyncMFADeviceInput *iam.ResyncMFADeviceInput, options ...request.Option) (*iam.ResyncMFADeviceOutput, error)

	// SetDefaultPolicyVersionFunc mocks the SetDefaultPolicyVersion method.
	SetDefaultPolicyVersionFunc func(setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)

	// SetDefaultPolicyVersionRequestFunc mocks the SetDefaultPolicyVersionRequest method.
	SetDefaultPolicyVersionRequestFunc func(setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput)

	// SetDefaultPolicyVersionWithContextFunc mocks the SetDefaultPolicyVersionWithContext method.
	SetDefaultPolicyVersionWithContextFunc func(contextMoqParam context.Context, setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput, options ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error)

	// SetSecurityTokenServicePreferencesFunc mocks the SetSecurityTokenServicePreferences method.
	SetSecurityTokenServicePreferencesFunc func(setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)

	// SetSecurityTokenServicePreferencesRequestFunc mocks the SetSecurityTokenServicePreferencesRequest method.
	SetSecurityTokenServicePreferencesRequestFunc func(setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput)

	// SetSecurityTokenServicePreferencesWithContextFunc mocks the SetSecurityTokenServicePreferencesWithContext method.
	SetSecurityTokenServicePreferencesWithContextFunc func(contextMoqParam context.Context, setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput, options ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error)

	// SimulateCustomPolicyFunc mocks the SimulateCustomPolicy method.
	SimulateCustomPolicyFunc func(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)

	// SimulateCustomPolicyPagesFunc mocks the SimulateCustomPolicyPages method.
	SimulateCustomPolicyPagesFunc func(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error

	// SimulateCustomPolicyPagesWithContextFunc mocks the SimulateCustomPolicyPagesWithContext method.
	SimulateCustomPolicyPagesWithContextFunc func(contextMoqParam context.Context, simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, options ...request.Option) error

	// SimulateCustomPolicyRequestFunc mocks the SimulateCustomPolicyRequest method.
	SimulateCustomPolicyRequestFunc func(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)

	// SimulateCustomPolicyWithContextFunc mocks the SimulateCustomPolicyWithContext method.
	SimulateCustomPolicyWithContextFunc func(contextMoqParam context.Context, simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, options ...request.Option) (*iam.SimulatePolicyResponse, error)

	// SimulatePrincipalPolicyFunc mocks the SimulatePrincipalPolicy method.
	SimulatePrincipalPolicyFunc func(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)

	// SimulatePrincipalPolicyPagesFunc mocks the SimulatePrincipalPolicyPages method.
	SimulatePrincipalPolicyPagesFunc func(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error

	// SimulatePrincipalPolicyPagesWithContextFunc mocks the SimulatePrincipalPolicyPagesWithContext method.
	SimulatePrincipalPolicyPagesWithContextFunc func(contextMoqParam context.Context, simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, options ...request.Option) error

	// SimulatePrincipalPolicyRequestFunc mocks the SimulatePrincipalPolicyRequest method.
	SimulatePrincipalPolicyRequestFunc func(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)

	// SimulatePrincipalPolicyWithContextFunc mocks the SimulatePrincipalPolicyWithContext method.
	SimulatePrincipalPolicyWithContextFunc func(contextMoqParam context.Context, simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, options ...request.Option) (*iam.SimulatePolicyResponse, error)

	// TagRoleFunc mocks the TagRole method.
	TagRoleFunc func(tagRoleInput *iam.TagRoleInput) (*iam.TagRoleOutput, error)

	// TagRoleRequestFunc mocks the TagRoleRequest method.
	TagRoleRequestFunc func(tagRoleInput *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput)

	// TagRoleWithContextFunc mocks the TagRoleWithContext method.
	TagRoleWithContextFunc func(contextMoqParam context.Context, tagRoleInput *iam.TagRoleInput, options ...request.Option) (*iam.TagRoleOutput, error)

	// TagUserFunc mocks the TagUser method.
	TagUserFunc func(tagUserInput *iam.TagUserInput) (*iam.TagUserOutput, error)

	// TagUserRequestFunc mocks the TagUserRequest method.
	TagUserRequestFunc func(tagUserInput *iam.TagUserInput) (*request.Request, *iam.TagUserOutput)

	// TagUserWithContextFunc mocks the TagUserWithContext method.
	TagUserWithContextFunc func(contextMoqParam context.Context, tagUserInput *iam.TagUserInput, options ...request.Option) (*iam.TagUserOutput, error)

	// UntagRoleFunc mocks the UntagRole method.
	UntagRoleFunc func(untagRoleInput *iam.UntagRoleInput) (*iam.UntagRoleOutput, error)

	// UntagRoleRequestFunc mocks the UntagRoleRequest method.
	UntagRoleRequestFunc func(untagRoleInput *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput)

	// UntagRoleWithContextFunc mocks the UntagRoleWithContext method.
	UntagRoleWithContextFunc func(contextMoqParam context.Context, untagRoleInput *iam.UntagRoleInput, options ...request.Option) (*iam.UntagRoleOutput, error)

	// UntagUserFunc mocks the UntagUser method.
	UntagUserFunc func(untagUserInput *iam.UntagUserInput) (*iam.UntagUserOutput, error)

	// UntagUserRequestFunc mocks the UntagUserRequest method.
	UntagUserRequestFunc func(untagUserInput *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput)

	// UntagUserWithContextFunc mocks the UntagUserWithContext method.
	UntagUserWithContextFunc func(contextMoqParam context.Context, untagUserInput *iam.UntagUserInput, options ...request.Option) (*iam.UntagUserOutput, error)

	// UpdateAccessKeyFunc mocks the UpdateAccessKey method.
	UpdateAccessKeyFunc func(updateAccessKeyInput *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)

	// UpdateAccessKeyRequestFunc mocks the UpdateAccessKeyRequest method.
	UpdateAccessKeyRequestFunc func(updateAccessKeyInput *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput)

	// UpdateAccessKeyWithContextFunc mocks the UpdateAccessKeyWithContext method.
	UpdateAccessKeyWithContextFunc func(contextMoqParam context.Context, updateAccessKeyInput *iam.UpdateAccessKeyInput, options ...request.Option) (*iam.UpdateAccessKeyOutput, error)

	// UpdateAccountPasswordPolicyFunc mocks the UpdateAccountPasswordPolicy method.
	UpdateAccountPasswordPolicyFunc func(updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)

	// UpdateAccountPasswordPolicyRequestFunc mocks the UpdateAccountPasswordPolicyRequest method.
	UpdateAccountPasswordPolicyRequestFunc func(updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput)

	// UpdateAccountPasswordPolicyWithContextFunc mocks the UpdateAccountPasswordPolicyWithContext method.
	UpdateAccountPasswordPolicyWithContextFunc func(contextMoqParam context.Context, updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput, options ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error)

	// UpdateAssumeRolePolicyFunc mocks the UpdateAssumeRolePolicy method.
	UpdateAssumeRolePolicyFunc func(updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)

	// UpdateAssumeRolePolicyRequestFunc mocks the UpdateAssumeRolePolicyRequest method.
	UpdateAssumeRolePolicyRequestFunc func(updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput)

	// UpdateAssumeRolePolicyWithContextFunc mocks the UpdateAssumeRolePolicyWithContext method.
	UpdateAssumeRolePolicyWithContextFunc func(contextMoqParam context.Context, updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput, options ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error)

	// UpdateGroupFunc mocks the UpdateGroup method.
	UpdateGroupFunc func(updateGroupInput *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)

	// UpdateGroupRequestFunc mocks the UpdateGroupRequest method.
	UpdateGroupRequestFunc func(updateGroupInput *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput)

	// UpdateGroupWithContextFunc mocks the UpdateGroupWithContext method.
	UpdateGroupWithContextFunc func(contextMoqParam context.Context, updateGroupInput *iam.UpdateGroupInput, options ...request.Option) (*iam.UpdateGroupOutput, error)

	// UpdateLoginProfileFunc mocks the UpdateLoginProfile method.
	UpdateLoginProfileFunc func(updateLoginProfileInput *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)

	// UpdateLoginProfileRequestFunc mocks the UpdateLoginProfileRequest method.
	UpdateLoginProfileRequestFunc func(updateLoginProfileInput *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput)

	// UpdateLoginProfileWithContextFunc mocks the UpdateLoginProfileWithContext method.
	UpdateLoginProfileWithContextFunc func(contextMoqParam context.Context, updateLoginProfileInput *iam.UpdateLoginProfileInput, options ...request.Option) (*iam.UpdateLoginProfileOutput, error)

	// UpdateOpenIDConnectProviderThumbprintFunc mocks the UpdateOpenIDConnectProviderThumbprint method.
	UpdateOpenIDConnectProviderThumbprintFunc func(updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)

	// UpdateOpenIDConnectProviderThumbprintRequestFunc mocks the UpdateOpenIDConnectProviderThumbprintRequest method.
	UpdateOpenIDConnectProviderThumbprintRequestFunc func(updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput)

	// UpdateOpenIDConnectProviderThumbprintWithContextFunc mocks the UpdateOpenIDConnectProviderThumbprintWithContext method.
	UpdateOpenIDConnectProviderThumbprintWithContextFunc func(contextMoqParam context.Context, updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput, options ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)

	// UpdateRoleFunc mocks the UpdateRole method.
	UpdateRoleFunc func(updateRoleInput *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)

	// UpdateRoleDescriptionFunc mocks the UpdateRoleDescription method.
	UpdateRoleDescriptionFunc func(updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)

	// UpdateRoleDescriptionRequestFunc mocks the UpdateRoleDescriptionRequest method.
	UpdateRoleDescriptionRequestFunc func(updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput)

	// UpdateRoleDescriptionWithContextFunc mocks the UpdateRoleDescriptionWithContext method.
	UpdateRoleDescriptionWithContextFunc func(contextMoqParam context.Context, updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput, options ...request.Option) (*iam.UpdateRoleDescriptionOutput, error)

	// UpdateRoleRequestFunc mocks the UpdateRoleRequest method.
	UpdateRoleRequestFunc func(updateRoleInput *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput)

	// UpdateRoleWithContextFunc mocks the UpdateRoleWithContext method.
	UpdateRoleWithContextFunc func(contextMoqParam context.Context, updateRoleInput *iam.UpdateRoleInput, options ...request.Option) (*iam.UpdateRoleOutput, error)

	// UpdateSAMLProviderFunc mocks the UpdateSAMLProvider method.
	UpdateSAMLProviderFunc func(updateSAMLProviderInput *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)

	// UpdateSAMLProviderRequestFunc mocks the UpdateSAMLProviderRequest method.
	UpdateSAMLProviderRequestFunc func(updateSAMLProviderInput *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput)

	// UpdateSAMLProviderWithContextFunc mocks the UpdateSAMLProviderWithContext method.
	UpdateSAMLProviderWithContextFunc func(contextMoqParam context.Context, updateSAMLProviderInput *iam.UpdateSAMLProviderInput, options ...request.Option) (*iam.UpdateSAMLProviderOutput, error)

	// UpdateSSHPublicKeyFunc mocks the UpdateSSHPublicKey method.
	UpdateSSHPublicKeyFunc func(updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)

	// UpdateSSHPublicKeyRequestFunc mocks the UpdateSSHPublicKeyRequest method.
	UpdateSSHPublicKeyRequestFunc func(updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput)

	// UpdateSSHPublicKeyWithContextFunc mocks the UpdateSSHPublicKeyWithContext method.
	UpdateSSHPublicKeyWithContextFunc func(contextMoqParam context.Context, updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput, options ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error)

	// UpdateServerCertificateFunc mocks the UpdateServerCertificate method.
	UpdateServerCertificateFunc func(updateServerCertificateInput *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)

	// UpdateServerCertificateRequestFunc mocks the UpdateServerCertificateRequest method.
	UpdateServerCertificateRequestFunc func(updateServerCertificateInput *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput)

	// UpdateServerCertificateWithContextFunc mocks the UpdateServerCertificateWithContext method.
	UpdateServerCertificateWithContextFunc func(contextMoqParam context.Context, updateServerCertificateInput *iam.UpdateServerCertificateInput, options ...request.Option) (*iam.UpdateServerCertificateOutput, error)

	// UpdateServiceSpecificCredentialFunc mocks the UpdateServiceSpecificCredential method.
	UpdateServiceSpecificCredentialFunc func(updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)

	// UpdateServiceSpecificCredentialRequestFunc mocks the UpdateServiceSpecificCredentialRequest method.
	UpdateServiceSpecificCredentialRequestFunc func(updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput)

	// UpdateServiceSpecificCredentialWithContextFunc mocks the UpdateServiceSpecificCredentialWithContext method.
	UpdateServiceSpecificCredentialWithContextFunc func(contextMoqParam context.Context, updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput, options ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error)

	// UpdateSigningCertificateFunc mocks the UpdateSigningCertificate method.
	UpdateSigningCertificateFunc func(updateSigningCertificateInput *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)

	// UpdateSigningCertificateRequestFunc mocks the UpdateSigningCertificateRequest method.
	UpdateSigningCertificateRequestFunc func(updateSigningCertificateInput *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput)

	// UpdateSigningCertificateWithContextFunc mocks the UpdateSigningCertificateWithContext method.
	UpdateSigningCertificateWithContextFunc func(contextMoqParam context.Context, updateSigningCertificateInput *iam.UpdateSigningCertificateInput, options ...request.Option) (*iam.UpdateSigningCertificateOutput, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(updateUserInput *iam.UpdateUserInput) (*iam.UpdateUserOutput, error)

	// UpdateUserRequestFunc mocks the UpdateUserRequest method.
	UpdateUserRequestFunc func(updateUserInput *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput)

	// UpdateUserWithContextFunc mocks the UpdateUserWithContext method.
	UpdateUserWithContextFunc func(contextMoqParam context.Context, updateUserInput *iam.UpdateUserInput, options ...request.Option) (*iam.UpdateUserOutput, error)

	// UploadSSHPublicKeyFunc mocks the UploadSSHPublicKey method.
	UploadSSHPublicKeyFunc func(uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)

	// UploadSSHPublicKeyRequestFunc mocks the UploadSSHPublicKeyRequest method.
	UploadSSHPublicKeyRequestFunc func(uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput)

	// UploadSSHPublicKeyWithContextFunc mocks the UploadSSHPublicKeyWithContext method.
	UploadSSHPublicKeyWithContextFunc func(contextMoqParam context.Context, uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput, options ...request.Option) (*iam.UploadSSHPublicKeyOutput, error)

	// UploadServerCertificateFunc mocks the UploadServerCertificate method.
	UploadServerCertificateFunc func(uploadServerCertificateInput *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)

	// UploadServerCertificateRequestFunc mocks the UploadServerCertificateRequest method.
	UploadServerCertificateRequestFunc func(uploadServerCertificateInput *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput)

	// UploadServerCertificateWithContextFunc mocks the UploadServerCertificateWithContext method.
	UploadServerCertificateWithContextFunc func(contextMoqParam context.Context, uploadServerCertificateInput *iam.UploadServerCertificateInput, options ...request.Option) (*iam.UploadServerCertificateOutput, error)

	// UploadSigningCertificateFunc mocks the UploadSigningCertificate method.
	UploadSigningCertificateFunc func(uploadSigningCertificateInput *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)

	// UploadSigningCertificateRequestFunc mocks the UploadSigningCertificateRequest method.
	UploadSigningCertificateRequestFunc func(uploadSigningCertificateInput *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput)

	// UploadSigningCertificateWithContextFunc mocks the UploadSigningCertificateWithContext method.
	UploadSigningCertificateWithContextFunc func(contextMoqParam context.Context, uploadSigningCertificateInput *iam.UploadSigningCertificateInput, options ...request.Option) (*iam.UploadSigningCertificateOutput, error)

	// WaitUntilInstanceProfileExistsFunc mocks the WaitUntilInstanceProfileExists method.
	WaitUntilInstanceProfileExistsFunc func(getInstanceProfileInput *iam.GetInstanceProfileInput) error

	// WaitUntilInstanceProfileExistsWithContextFunc mocks the WaitUntilInstanceProfileExistsWithContext method.
	WaitUntilInstanceProfileExistsWithContextFunc func(contextMoqParam context.Context, getInstanceProfileInput *iam.GetInstanceProfileInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilPolicyExistsFunc mocks the WaitUntilPolicyExists method.
	WaitUntilPolicyExistsFunc func(getPolicyInput *iam.GetPolicyInput) error

	// WaitUntilPolicyExistsWithContextFunc mocks the WaitUntilPolicyExistsWithContext method.
	WaitUntilPolicyExistsWithContextFunc func(contextMoqParam context.Context, getPolicyInput *iam.GetPolicyInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilRoleExistsFunc mocks the WaitUntilRoleExists method.
	WaitUntilRoleExistsFunc func(getRoleInput *iam.GetRoleInput) error

	// WaitUntilRoleExistsWithContextFunc mocks the WaitUntilRoleExistsWithContext method.
	WaitUntilRoleExistsWithContextFunc func(contextMoqParam context.Context, getRoleInput *iam.GetRoleInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilUserExistsFunc mocks the WaitUntilUserExists method.
	WaitUntilUserExistsFunc func(getUserInput *iam.GetUserInput) error

	// WaitUntilUserExistsWithContextFunc mocks the WaitUntilUserExistsWithContext method.
	WaitUntilUserExistsWithContextFunc func(contextMoqParam context.Context, getUserInput *iam.GetUserInput, waiterOptions ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClientIDToOpenIDConnectProvider holds details about calls to the AddClientIDToOpenIDConnectProvider method.
		AddClientIDToOpenIDConnectProvider []struct {
			// AddClientIDToOpenIDConnectProviderInput is the addClientIDToOpenIDConnectProviderInput argument value.
			AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
		}
		// AddClientIDToOpenIDConnectProviderRequest holds details about calls to the AddClientIDToOpenIDConnectProviderRequest method.
		AddClientIDToOpenIDConnectProviderRequest []struct {
			// AddClientIDToOpenIDConnectProviderInput is the addClientIDToOpenIDConnectProviderInput argument value.
			AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
		}
		// AddClientIDToOpenIDConnectProviderWithContext holds details about calls to the AddClientIDToOpenIDConnectProviderWithContext method.
		AddClientIDToOpenIDConnectProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddClientIDToOpenIDConnectProviderInput is the addClientIDToOpenIDConnectProviderInput argument value.
			AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AddRoleToInstanceProfile holds details about calls to the AddRoleToInstanceProfile method.
		AddRoleToInstanceProfile []struct {
			// AddRoleToInstanceProfileInput is the addRoleToInstanceProfileInput argument value.
			AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
		}
		// AddRoleToInstanceProfileRequest holds details about calls to the AddRoleToInstanceProfileRequest method.
		AddRoleToInstanceProfileRequest []struct {
			// AddRoleToInstanceProfileInput is the addRoleToInstanceProfileInput argument value.
			AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
		}
		// AddRoleToInstanceProfileWithContext holds details about calls to the AddRoleToInstanceProfileWithContext method.
		AddRoleToInstanceProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddRoleToInstanceProfileInput is the addRoleToInstanceProfileInput argument value.
			AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AddUserToGroup holds details about calls to the AddUserToGroup method.
		AddUserToGroup []struct {
			// AddUserToGroupInput is the addUserToGroupInput argument value.
			AddUserToGroupInput *iam.AddUserToGroupInput
		}
		// AddUserToGroupRequest holds details about calls to the AddUserToGroupRequest method.
		AddUserToGroupRequest []struct {
			// AddUserToGroupInput is the addUserToGroupInput argument value.
			AddUserToGroupInput *iam.AddUserToGroupInput
		}
		// AddUserToGroupWithContext holds details about calls to the AddUserToGroupWithContext method.
		AddUserToGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddUserToGroupInput is the addUserToGroupInput argument value.
			AddUserToGroupInput *iam.AddUserToGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AttachGroupPolicy holds details about calls to the AttachGroupPolicy method.
		AttachGroupPolicy []struct {
			// AttachGroupPolicyInput is the attachGroupPolicyInput argument value.
			AttachGroupPolicyInput *iam.AttachGroupPolicyInput
		}
		// AttachGroupPolicyRequest holds details about calls to the AttachGroupPolicyRequest method.
		AttachGroupPolicyRequest []struct {
			// AttachGroupPolicyInput is the attachGroupPolicyInput argument value.
			AttachGroupPolicyInput *iam.AttachGroupPolicyInput
		}
		// AttachGroupPolicyWithContext holds details about calls to the AttachGroupPolicyWithContext method.
		AttachGroupPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AttachGroupPolicyInput is the attachGroupPolicyInput argument value.
			AttachGroupPolicyInput *iam.AttachGroupPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AttachRolePolicy holds details about calls to the AttachRolePolicy method.
		AttachRolePolicy []struct {
			// AttachRolePolicyInput is the attachRolePolicyInput argument value.
			AttachRolePolicyInput *iam.AttachRolePolicyInput
		}
		// AttachRolePolicyRequest holds details about calls to the AttachRolePolicyRequest method.
		AttachRolePolicyRequest []struct {
			// AttachRolePolicyInput is the attachRolePolicyInput argument value.
			AttachRolePolicyInput *iam.AttachRolePolicyInput
		}
		// AttachRolePolicyWithContext holds details about calls to the AttachRolePolicyWithContext method.
		AttachRolePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AttachRolePolicyInput is the attachRolePolicyInput argument value.
			AttachRolePolicyInput *iam.AttachRolePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AttachUserPolicy holds details about calls to the AttachUserPolicy method.
		AttachUserPolicy []struct {
			// AttachUserPolicyInput is the attachUserPolicyInput argument value.
			AttachUserPolicyInput *iam.AttachUserPolicyInput
		}
		// AttachUserPolicyRequest holds details about calls to the AttachUserPolicyRequest method.
		AttachUserPolicyRequest []struct {
			// AttachUserPolicyInput is the attachUserPolicyInput argument value.
			AttachUserPolicyInput *iam.AttachUserPolicyInput
		}
		// AttachUserPolicyWithContext holds details about calls to the AttachUserPolicyWithContext method.
		AttachUserPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AttachUserPolicyInput is the attachUserPolicyInput argument value.
			AttachUserPolicyInput *iam.AttachUserPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ChangePassword holds details about calls to the ChangePassword method.
		ChangePassword []struct {
			// ChangePasswordInput is the changePasswordInput argument value.
			ChangePasswordInput *iam.ChangePasswordInput
		}
		// ChangePasswordRequest holds details about calls to the ChangePasswordRequest method.
		ChangePasswordRequest []struct {
			// ChangePasswordInput is the changePasswordInput argument value.
			ChangePasswordInput *iam.ChangePasswordInput
		}
		// ChangePasswordWithContext holds details about calls to the ChangePasswordWithContext method.
		ChangePasswordWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ChangePasswordInput is the changePasswordInput argument value.
			ChangePasswordInput *iam.ChangePasswordInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateAccessKey holds details about calls to the CreateAccessKey method.
		CreateAccessKey []struct {
			// CreateAccessKeyInput is the createAccessKeyInput argument value.
			CreateAccessKeyInput *iam.CreateAccessKeyInput
		}
		// CreateAccessKeyRequest holds details about calls to the CreateAccessKeyRequest method.
		CreateAccessKeyRequest []struct {
			// CreateAccessKeyInput is the createAccessKeyInput argument value.
			CreateAccessKeyInput *iam.CreateAccessKeyInput
		}
		// CreateAccessKeyWithContext holds details about calls to the CreateAccessKeyWithContext method.
		CreateAccessKeyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateAccessKeyInput is the createAccessKeyInput argument value.
			CreateAccessKeyInput *iam.CreateAccessKeyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateAccountAlias holds details about calls to the CreateAccountAlias method.
		CreateAccountAlias []struct {
			// CreateAccountAliasInput is the createAccountAliasInput argument value.
			CreateAccountAliasInput *iam.CreateAccountAliasInput
		}
		// CreateAccountAliasRequest holds details about calls to the CreateAccountAliasRequest method.
		CreateAccountAliasRequest []struct {
			// CreateAccountAliasInput is the createAccountAliasInput argument value.
			CreateAccountAliasInput *iam.CreateAccountAliasInput
		}
		// CreateAccountAliasWithContext holds details about calls to the CreateAccountAliasWithContext method.
		CreateAccountAliasWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateAccountAliasInput is the createAccountAliasInput argument value.
			CreateAccountAliasInput *iam.CreateAccountAliasInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateGroup holds details about calls to the CreateGroup method.
		CreateGroup []struct {
			// CreateGroupInput is the createGroupInput argument value.
			CreateGroupInput *iam.CreateGroupInput
		}
		// CreateGroupRequest holds details about calls to the CreateGroupRequest method.
		CreateGroupRequest []struct {
			// CreateGroupInput is the createGroupInput argument value.
			CreateGroupInput *iam.CreateGroupInput
		}
		// CreateGroupWithContext holds details about calls to the CreateGroupWithContext method.
		CreateGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateGroupInput is the createGroupInput argument value.
			CreateGroupInput *iam.CreateGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateInstanceProfile holds details about calls to the CreateInstanceProfile method.
		CreateInstanceProfile []struct {
			// CreateInstanceProfileInput is the createInstanceProfileInput argument value.
			CreateInstanceProfileInput *iam.CreateInstanceProfileInput
		}
		// CreateInstanceProfileRequest holds details about calls to the CreateInstanceProfileRequest method.
		CreateInstanceProfileRequest []struct {
			// CreateInstanceProfileInput is the createInstanceProfileInput argument value.
			CreateInstanceProfileInput *iam.CreateInstanceProfileInput
		}
		// CreateInstanceProfileWithContext holds details about calls to the CreateInstanceProfileWithContext method.
		CreateInstanceProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateInstanceProfileInput is the createInstanceProfileInput argument value.
			CreateInstanceProfileInput *iam.CreateInstanceProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateLoginProfile holds details about calls to the CreateLoginProfile method.
		CreateLoginProfile []struct {
			// CreateLoginProfileInput is the createLoginProfileInput argument value.
			CreateLoginProfileInput *iam.CreateLoginProfileInput
		}
		// CreateLoginProfileRequest holds details about calls to the CreateLoginProfileRequest method.
		CreateLoginProfileRequest []struct {
			// CreateLoginProfileInput is the createLoginProfileInput argument value.
			CreateLoginProfileInput *iam.CreateLoginProfileInput
		}
		// CreateLoginProfileWithContext holds details about calls to the CreateLoginProfileWithContext method.
		CreateLoginProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateLoginProfileInput is the createLoginProfileInput argument value.
			CreateLoginProfileInput *iam.CreateLoginProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateOpenIDConnectProvider holds details about calls to the CreateOpenIDConnectProvider method.
		CreateOpenIDConnectProvider []struct {
			// CreateOpenIDConnectProviderInput is the createOpenIDConnectProviderInput argument value.
			CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
		}
		// CreateOpenIDConnectProviderRequest holds details about calls to the CreateOpenIDConnectProviderRequest method.
		CreateOpenIDConnectProviderRequest []struct {
			// CreateOpenIDConnectProviderInput is the createOpenIDConnectProviderInput argument value.
			CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
		}
		// CreateOpenIDConnectProviderWithContext holds details about calls to the CreateOpenIDConnectProviderWithContext method.
		CreateOpenIDConnectProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateOpenIDConnectProviderInput is the createOpenIDConnectProviderInput argument value.
			CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreatePolicy holds details about calls to the CreatePolicy method.
		CreatePolicy []struct {
			// CreatePolicyInput is the createPolicyInput argument value.
			CreatePolicyInput *iam.CreatePolicyInput
		}
		// CreatePolicyRequest holds details about calls to the CreatePolicyRequest method.
		CreatePolicyRequest []struct {
			// CreatePolicyInput is the createPolicyInput argument value.
			CreatePolicyInput *iam.CreatePolicyInput
		}
		// CreatePolicyVersion holds details about calls to the CreatePolicyVersion method.
		CreatePolicyVersion []struct {
			// CreatePolicyVersionInput is the createPolicyVersionInput argument value.
			CreatePolicyVersionInput *iam.CreatePolicyVersionInput
		}
		// CreatePolicyVersionRequest holds details about calls to the CreatePolicyVersionRequest method.
		CreatePolicyVersionRequest []struct {
			// CreatePolicyVersionInput is the createPolicyVersionInput argument value.
			CreatePolicyVersionInput *iam.CreatePolicyVersionInput
		}
		// CreatePolicyVersionWithContext holds details about calls to the CreatePolicyVersionWithContext method.
		CreatePolicyVersionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreatePolicyVersionInput is the createPolicyVersionInput argument value.
			CreatePolicyVersionInput *iam.CreatePolicyVersionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreatePolicyWithContext holds details about calls to the CreatePolicyWithContext method.
		CreatePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreatePolicyInput is the createPolicyInput argument value.
			CreatePolicyInput *iam.CreatePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateRole holds details about calls to the CreateRole method.
		CreateRole []struct {
			// CreateRoleInput is the createRoleInput argument value.
			CreateRoleInput *iam.CreateRoleInput
		}
		// CreateRoleRequest holds details about calls to the CreateRoleRequest method.
		CreateRoleRequest []struct {
			// CreateRoleInput is the createRoleInput argument value.
			CreateRoleInput *iam.CreateRoleInput
		}
		// CreateRoleWithContext holds details about calls to the CreateRoleWithContext method.
		CreateRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateRoleInput is the createRoleInput argument value.
			CreateRoleInput *iam.CreateRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateSAMLProvider holds details about calls to the CreateSAMLProvider method.
		CreateSAMLProvider []struct {
			// CreateSAMLProviderInput is the createSAMLProviderInput argument value.
			CreateSAMLProviderInput *iam.CreateSAMLProviderInput
		}
		// CreateSAMLProviderRequest holds details about calls to the CreateSAMLProviderRequest method.
		CreateSAMLProviderRequest []struct {
			// CreateSAMLProviderInput is the createSAMLProviderInput argument value.
			CreateSAMLProviderInput *iam.CreateSAMLProviderInput
		}
		// CreateSAMLProviderWithContext holds details about calls to the CreateSAMLProviderWithContext method.
		CreateSAMLProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateSAMLProviderInput is the createSAMLProviderInput argument value.
			CreateSAMLProviderInput *iam.CreateSAMLProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateServiceLinkedRole holds details about calls to the CreateServiceLinkedRole method.
		CreateServiceLinkedRole []struct {
			// CreateServiceLinkedRoleInput is the createServiceLinkedRoleInput argument value.
			CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
		}
		// CreateServiceLinkedRoleRequest holds details about calls to the CreateServiceLinkedRoleRequest method.
		CreateServiceLinkedRoleRequest []struct {
			// CreateServiceLinkedRoleInput is the createServiceLinkedRoleInput argument value.
			CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
		}
		// CreateServiceLinkedRoleWithContext holds details about calls to the CreateServiceLinkedRoleWithContext method.
		CreateServiceLinkedRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateServiceLinkedRoleInput is the createServiceLinkedRoleInput argument value.
			CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateServiceSpecificCredential holds details about calls to the CreateServiceSpecificCredential method.
		CreateServiceSpecificCredential []struct {
			// CreateServiceSpecificCredentialInput is the createServiceSpecificCredentialInput argument value.
			CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
		}
		// CreateServiceSpecificCredentialRequest holds details about calls to the CreateServiceSpecificCredentialRequest method.
		CreateServiceSpecificCredentialRequest []struct {
			// CreateServiceSpecificCredentialInput is the createServiceSpecificCredentialInput argument value.
			CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
		}
		// CreateServiceSpecificCredentialWithContext holds details about calls to the CreateServiceSpecificCredentialWithContext method.
		CreateServiceSpecificCredentialWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateServiceSpecificCredentialInput is the createServiceSpecificCredentialInput argument value.
			CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// CreateUserInput is the createUserInput argument value.
			CreateUserInput *iam.CreateUserInput
		}
		// CreateUserRequest holds details about calls to the CreateUserRequest method.
		CreateUserRequest []struct {
			// CreateUserInput is the createUserInput argument value.
			CreateUserInput *iam.CreateUserInput
		}
		// CreateUserWithContext holds details about calls to the CreateUserWithContext method.
		CreateUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateUserInput is the createUserInput argument value.
			CreateUserInput *iam.CreateUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateVirtualMFADevice holds details about calls to the CreateVirtualMFADevice method.
		CreateVirtualMFADevice []struct {
			// CreateVirtualMFADeviceInput is the createVirtualMFADeviceInput argument value.
			CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
		}
		// CreateVirtualMFADeviceRequest holds details about calls to the CreateVirtualMFADeviceRequest method.
		CreateVirtualMFADeviceRequest []struct {
			// CreateVirtualMFADeviceInput is the createVirtualMFADeviceInput argument value.
			CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
		}
		// CreateVirtualMFADeviceWithContext holds details about calls to the CreateVirtualMFADeviceWithContext method.
		CreateVirtualMFADeviceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateVirtualMFADeviceInput is the createVirtualMFADeviceInput argument value.
			CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeactivateMFADevice holds details about calls to the DeactivateMFADevice method.
		DeactivateMFADevice []struct {
			// DeactivateMFADeviceInput is the deactivateMFADeviceInput argument value.
			DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
		}
		// DeactivateMFADeviceRequest holds details about calls to the DeactivateMFADeviceRequest method.
		DeactivateMFADeviceRequest []struct {
			// DeactivateMFADeviceInput is the deactivateMFADeviceInput argument value.
			DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
		}
		// DeactivateMFADeviceWithContext holds details about calls to the DeactivateMFADeviceWithContext method.
		DeactivateMFADeviceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeactivateMFADeviceInput is the deactivateMFADeviceInput argument value.
			DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteAccessKey holds details about calls to the DeleteAccessKey method.
		DeleteAccessKey []struct {
			// DeleteAccessKeyInput is the deleteAccessKeyInput argument value.
			DeleteAccessKeyInput *iam.DeleteAccessKeyInput
		}
		// DeleteAccessKeyRequest holds details about calls to the DeleteAccessKeyRequest method.
		DeleteAccessKeyRequest []struct {
			// DeleteAccessKeyInput is the deleteAccessKeyInput argument value.
			DeleteAccessKeyInput *iam.DeleteAccessKeyInput
		}
		// DeleteAccessKeyWithContext holds details about calls to the DeleteAccessKeyWithContext method.
		DeleteAccessKeyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteAccessKeyInput is the deleteAccessKeyInput argument value.
			DeleteAccessKeyInput *iam.DeleteAccessKeyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteAccountAlias holds details about calls to the DeleteAccountAlias method.
		DeleteAccountAlias []struct {
			// DeleteAccountAliasInput is the deleteAccountAliasInput argument value.
			DeleteAccountAliasInput *iam.DeleteAccountAliasInput
		}
		// DeleteAccountAliasRequest holds details about calls to the DeleteAccountAliasRequest method.
		DeleteAccountAliasRequest []struct {
			// DeleteAccountAliasInput is the deleteAccountAliasInput argument value.
			DeleteAccountAliasInput *iam.DeleteAccountAliasInput
		}
		// DeleteAccountAliasWithContext holds details about calls to the DeleteAccountAliasWithContext method.
		DeleteAccountAliasWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteAccountAliasInput is the deleteAccountAliasInput argument value.
			DeleteAccountAliasInput *iam.DeleteAccountAliasInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteAccountPasswordPolicy holds details about calls to the DeleteAccountPasswordPolicy method.
		DeleteAccountPasswordPolicy []struct {
			// DeleteAccountPasswordPolicyInput is the deleteAccountPasswordPolicyInput argument value.
			DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
		}
		// DeleteAccountPasswordPolicyRequest holds details about calls to the DeleteAccountPasswordPolicyRequest method.
		DeleteAccountPasswordPolicyRequest []struct {
			// DeleteAccountPasswordPolicyInput is the deleteAccountPasswordPolicyInput argument value.
			DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
		}
		// DeleteAccountPasswordPolicyWithContext holds details about calls to the DeleteAccountPasswordPolicyWithContext method.
		DeleteAccountPasswordPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteAccountPasswordPolicyInput is the deleteAccountPasswordPolicyInput argument value.
			DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteGroup holds details about calls to the DeleteGroup method.
		DeleteGroup []struct {
			// DeleteGroupInput is the deleteGroupInput argument value.
			DeleteGroupInput *iam.DeleteGroupInput
		}
		// DeleteGroupPolicy holds details about calls to the DeleteGroupPolicy method.
		DeleteGroupPolicy []struct {
			// DeleteGroupPolicyInput is the deleteGroupPolicyInput argument value.
			DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
		}
		// DeleteGroupPolicyRequest holds details about calls to the DeleteGroupPolicyRequest method.
		DeleteGroupPolicyRequest []struct {
			// DeleteGroupPolicyInput is the deleteGroupPolicyInput argument value.
			DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
		}
		// DeleteGroupPolicyWithContext holds details about calls to the DeleteGroupPolicyWithContext method.
		DeleteGroupPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteGroupPolicyInput is the deleteGroupPolicyInput argument value.
			DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteGroupRequest holds details about calls to the DeleteGroupRequest method.
		DeleteGroupRequest []struct {
			// DeleteGroupInput is the deleteGroupInput argument value.
			DeleteGroupInput *iam.DeleteGroupInput
		}
		// DeleteGroupWithContext holds details about calls to the DeleteGroupWithContext method.
		DeleteGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteGroupInput is the deleteGroupInput argument value.
			DeleteGroupInput *iam.DeleteGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteInstanceProfile holds details about calls to the DeleteInstanceProfile method.
		DeleteInstanceProfile []struct {
			// DeleteInstanceProfileInput is the deleteInstanceProfileInput argument value.
			DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
		}
		// DeleteInstanceProfileRequest holds details about calls to the DeleteInstanceProfileRequest method.
		DeleteInstanceProfileRequest []struct {
			// DeleteInstanceProfileInput is the deleteInstanceProfileInput argument value.
			DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
		}
		// DeleteInstanceProfileWithContext holds details about calls to the DeleteInstanceProfileWithContext method.
		DeleteInstanceProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteInstanceProfileInput is the deleteInstanceProfileInput argument value.
			DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteLoginProfile holds details about calls to the DeleteLoginProfile method.
		DeleteLoginProfile []struct {
			// DeleteLoginProfileInput is the deleteLoginProfileInput argument value.
			DeleteLoginProfileInput *iam.DeleteLoginProfileInput
		}
		// DeleteLoginProfileRequest holds details about calls to the DeleteLoginProfileRequest method.
		DeleteLoginProfileRequest []struct {
			// DeleteLoginProfileInput is the deleteLoginProfileInput argument value.
			DeleteLoginProfileInput *iam.DeleteLoginProfileInput
		}
		// DeleteLoginProfileWithContext holds details about calls to the DeleteLoginProfileWithContext method.
		DeleteLoginProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteLoginProfileInput is the deleteLoginProfileInput argument value.
			DeleteLoginProfileInput *iam.DeleteLoginProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteOpenIDConnectProvider holds details about calls to the DeleteOpenIDConnectProvider method.
		DeleteOpenIDConnectProvider []struct {
			// DeleteOpenIDConnectProviderInput is the deleteOpenIDConnectProviderInput argument value.
			DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
		}
		// DeleteOpenIDConnectProviderRequest holds details about calls to the DeleteOpenIDConnectProviderRequest method.
		DeleteOpenIDConnectProviderRequest []struct {
			// DeleteOpenIDConnectProviderInput is the deleteOpenIDConnectProviderInput argument value.
			DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
		}
		// DeleteOpenIDConnectProviderWithContext holds details about calls to the DeleteOpenIDConnectProviderWithContext method.
		DeleteOpenIDConnectProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteOpenIDConnectProviderInput is the deleteOpenIDConnectProviderInput argument value.
			DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeletePolicy holds details about calls to the DeletePolicy method.
		DeletePolicy []struct {
			// DeletePolicyInput is the deletePolicyInput argument value.
			DeletePolicyInput *iam.DeletePolicyInput
		}
		// DeletePolicyRequest holds details about calls to the DeletePolicyRequest method.
		DeletePolicyRequest []struct {
			// DeletePolicyInput is the deletePolicyInput argument value.
			DeletePolicyInput *iam.DeletePolicyInput
		}
		// DeletePolicyVersion holds details about calls to the DeletePolicyVersion method.
		DeletePolicyVersion []struct {
			// DeletePolicyVersionInput is the deletePolicyVersionInput argument value.
			DeletePolicyVersionInput *iam.DeletePolicyVersionInput
		}
		// DeletePolicyVersionRequest holds details about calls to the DeletePolicyVersionRequest method.
		DeletePolicyVersionRequest []struct {
			// DeletePolicyVersionInput is the deletePolicyVersionInput argument value.
			DeletePolicyVersionInput *iam.DeletePolicyVersionInput
		}
		// DeletePolicyVersionWithContext holds details about calls to the DeletePolicyVersionWithContext method.
		DeletePolicyVersionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeletePolicyVersionInput is the deletePolicyVersionInput argument value.
			DeletePolicyVersionInput *iam.DeletePolicyVersionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeletePolicyWithContext holds details about calls to the DeletePolicyWithContext method.
		DeletePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeletePolicyInput is the deletePolicyInput argument value.
			DeletePolicyInput *iam.DeletePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteRole holds details about calls to the DeleteRole method.
		DeleteRole []struct {
			// DeleteRoleInput is the deleteRoleInput argument value.
			DeleteRoleInput *iam.DeleteRoleInput
		}
		// DeleteRolePermissionsBoundary holds details about calls to the DeleteRolePermissionsBoundary method.
		DeleteRolePermissionsBoundary []struct {
			// DeleteRolePermissionsBoundaryInput is the deleteRolePermissionsBoundaryInput argument value.
			DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
		}
		// DeleteRolePermissionsBoundaryRequest holds details about calls to the DeleteRolePermissionsBoundaryRequest method.
		DeleteRolePermissionsBoundaryRequest []struct {
			// DeleteRolePermissionsBoundaryInput is the deleteRolePermissionsBoundaryInput argument value.
			DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
		}
		// DeleteRolePermissionsBoundaryWithContext holds details about calls to the DeleteRolePermissionsBoundaryWithContext method.
		DeleteRolePermissionsBoundaryWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteRolePermissionsBoundaryInput is the deleteRolePermissionsBoundaryInput argument value.
			DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteRolePolicy holds details about calls to the DeleteRolePolicy method.
		DeleteRolePolicy []struct {
			// DeleteRolePolicyInput is the deleteRolePolicyInput argument value.
			DeleteRolePolicyInput *iam.DeleteRolePolicyInput
		}
		// DeleteRolePolicyRequest holds details about calls to the DeleteRolePolicyRequest method.
		DeleteRolePolicyRequest []struct {
			// DeleteRolePolicyInput is the deleteRolePolicyInput argument value.
			DeleteRolePolicyInput *iam.DeleteRolePolicyInput
		}
		// DeleteRolePolicyWithContext holds details about calls to the DeleteRolePolicyWithContext method.
		DeleteRolePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteRolePolicyInput is the deleteRolePolicyInput argument value.
			DeleteRolePolicyInput *iam.DeleteRolePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteRoleRequest holds details about calls to the DeleteRoleRequest method.
		DeleteRoleRequest []struct {
			// DeleteRoleInput is the deleteRoleInput argument value.
			DeleteRoleInput *iam.DeleteRoleInput
		}
		// DeleteRoleWithContext holds details about calls to the DeleteRoleWithContext method.
		DeleteRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteRoleInput is the deleteRoleInput argument value.
			DeleteRoleInput *iam.DeleteRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteSAMLProvider holds details about calls to the DeleteSAMLProvider method.
		DeleteSAMLProvider []struct {
			// DeleteSAMLProviderInput is the deleteSAMLProviderInput argument value.
			DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
		}
		// DeleteSAMLProviderRequest holds details about calls to the DeleteSAMLProviderRequest method.
		DeleteSAMLProviderRequest []struct {
			// DeleteSAMLProviderInput is the deleteSAMLProviderInput argument value.
			DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
		}
		// DeleteSAMLProviderWithContext holds details about calls to the DeleteSAMLProviderWithContext method.
		DeleteSAMLProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteSAMLProviderInput is the deleteSAMLProviderInput argument value.
			DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteSSHPublicKey holds details about calls to the DeleteSSHPublicKey method.
		DeleteSSHPublicKey []struct {
			// DeleteSSHPublicKeyInput is the deleteSSHPublicKeyInput argument value.
			DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
		}
		// DeleteSSHPublicKeyRequest holds details about calls to the DeleteSSHPublicKeyRequest method.
		DeleteSSHPublicKeyRequest []struct {
			// DeleteSSHPublicKeyInput is the deleteSSHPublicKeyInput argument value.
			DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
		}
		// DeleteSSHPublicKeyWithContext holds details about calls to the DeleteSSHPublicKeyWithContext method.
		DeleteSSHPublicKeyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteSSHPublicKeyInput is the deleteSSHPublicKeyInput argument value.
			DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteServerCertificate holds details about calls to the DeleteServerCertificate method.
		DeleteServerCertificate []struct {
			// DeleteServerCertificateInput is the deleteServerCertificateInput argument value.
			DeleteServerCertificateInput *iam.DeleteServerCertificateInput
		}
		// DeleteServerCertificateRequest holds details about calls to the DeleteServerCertificateRequest method.
		DeleteServerCertificateRequest []struct {
			// DeleteServerCertificateInput is the deleteServerCertificateInput argument value.
			DeleteServerCertificateInput *iam.DeleteServerCertificateInput
		}
		// DeleteServerCertificateWithContext holds details about calls to the DeleteServerCertificateWithContext method.
		DeleteServerCertificateWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteServerCertificateInput is the deleteServerCertificateInput argument value.
			DeleteServerCertificateInput *iam.DeleteServerCertificateInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteServiceLinkedRole holds details about calls to the DeleteServiceLinkedRole method.
		DeleteServiceLinkedRole []struct {
			// DeleteServiceLinkedRoleInput is the deleteServiceLinkedRoleInput argument value.
			DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
		}
		// DeleteServiceLinkedRoleRequest holds details about calls to the DeleteServiceLinkedRoleRequest method.
		DeleteServiceLinkedRoleRequest []struct {
			// DeleteServiceLinkedRoleInput is the deleteServiceLinkedRoleInput argument value.
			DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
		}
		// DeleteServiceLinkedRoleWithContext holds details about calls to the DeleteServiceLinkedRoleWithContext method.
		DeleteServiceLinkedRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteServiceLinkedRoleInput is the deleteServiceLinkedRoleInput argument value.
			DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteServiceSpecificCredential holds details about calls to the DeleteServiceSpecificCredential method.
		DeleteServiceSpecificCredential []struct {
			// DeleteServiceSpecificCredentialInput is the deleteServiceSpecificCredentialInput argument value.
			DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
		}
		// DeleteServiceSpecificCredentialRequest holds details about calls to the DeleteServiceSpecificCredentialRequest method.
		DeleteServiceSpecificCredentialRequest []struct {
			// DeleteServiceSpecificCredentialInput is the deleteServiceSpecificCredentialInput argument value.
			DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
		}
		// DeleteServiceSpecificCredentialWithContext holds details about calls to the DeleteServiceSpecificCredentialWithContext method.
		DeleteServiceSpecificCredentialWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteServiceSpecificCredentialInput is the deleteServiceSpecificCredentialInput argument value.
			DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteSigningCertificate holds details about calls to the DeleteSigningCertificate method.
		DeleteSigningCertificate []struct {
			// DeleteSigningCertificateInput is the deleteSigningCertificateInput argument value.
			DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
		}
		// DeleteSigningCertificateRequest holds details about calls to the DeleteSigningCertificateRequest method.
		DeleteSigningCertificateRequest []struct {
			// DeleteSigningCertificateInput is the deleteSigningCertificateInput argument value.
			DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
		}
		// DeleteSigningCertificateWithContext holds details about calls to the DeleteSigningCertificateWithContext method.
		DeleteSigningCertificateWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteSigningCertificateInput is the deleteSigningCertificateInput argument value.
			DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// DeleteUserInput is the deleteUserInput argument value.
			DeleteUserInput *iam.DeleteUserInput
		}
		// DeleteUserPermissionsBoundary holds details about calls to the DeleteUserPermissionsBoundary method.
		DeleteUserPermissionsBoundary []struct {
			// DeleteUserPermissionsBoundaryInput is the deleteUserPermissionsBoundaryInput argument value.
			DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
		}
		// DeleteUserPermissionsBoundaryRequest holds details about calls to the DeleteUserPermissionsBoundaryRequest method.
		DeleteUserPermissionsBoundaryRequest []struct {
			// DeleteUserPermissionsBoundaryInput is the deleteUserPermissionsBoundaryInput argument value.
			DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
		}
		// DeleteUserPermissionsBoundaryWithContext holds details about calls to the DeleteUserPermissionsBoundaryWithContext method.
		DeleteUserPermissionsBoundaryWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteUserPermissionsBoundaryInput is the deleteUserPermissionsBoundaryInput argument value.
			DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteUserPolicy holds details about calls to the DeleteUserPolicy method.
		DeleteUserPolicy []struct {
			// DeleteUserPolicyInput is the deleteUserPolicyInput argument value.
			DeleteUserPolicyInput *iam.DeleteUserPolicyInput
		}
		// DeleteUserPolicyRequest holds details about calls to the DeleteUserPolicyRequest method.
		DeleteUserPolicyRequest []struct {
			// DeleteUserPolicyInput is the deleteUserPolicyInput argument value.
			DeleteUserPolicyInput *iam.DeleteUserPolicyInput
		}
		// DeleteUserPolicyWithContext holds details about calls to the DeleteUserPolicyWithContext method.
		DeleteUserPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteUserPolicyInput is the deleteUserPolicyInput argument value.
			DeleteUserPolicyInput *iam.DeleteUserPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteUserRequest holds details about calls to the DeleteUserRequest method.
		DeleteUserRequest []struct {
			// DeleteUserInput is the deleteUserInput argument value.
			DeleteUserInput *iam.DeleteUserInput
		}
		// DeleteUserWithContext holds details about calls to the DeleteUserWithContext method.
		DeleteUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteUserInput is the deleteUserInput argument value.
			DeleteUserInput *iam.DeleteUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteVirtualMFADevice holds details about calls to the DeleteVirtualMFADevice method.
		DeleteVirtualMFADevice []struct {
			// DeleteVirtualMFADeviceInput is the deleteVirtualMFADeviceInput argument value.
			DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
		}
		// DeleteVirtualMFADeviceRequest holds details about calls to the DeleteVirtualMFADeviceRequest method.
		DeleteVirtualMFADeviceRequest []struct {
			// DeleteVirtualMFADeviceInput is the deleteVirtualMFADeviceInput argument value.
			DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
		}
		// DeleteVirtualMFADeviceWithContext holds details about calls to the DeleteVirtualMFADeviceWithContext method.
		DeleteVirtualMFADeviceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteVirtualMFADeviceInput is the deleteVirtualMFADeviceInput argument value.
			DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DetachGroupPolicy holds details about calls to the DetachGroupPolicy method.
		DetachGroupPolicy []struct {
			// DetachGroupPolicyInput is the detachGroupPolicyInput argument value.
			DetachGroupPolicyInput *iam.DetachGroupPolicyInput
		}
		// DetachGroupPolicyRequest holds details about calls to the DetachGroupPolicyRequest method.
		DetachGroupPolicyRequest []struct {
			// DetachGroupPolicyInput is the detachGroupPolicyInput argument value.
			DetachGroupPolicyInput *iam.DetachGroupPolicyInput
		}
		// DetachGroupPolicyWithContext holds details about calls to the DetachGroupPolicyWithContext method.
		DetachGroupPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DetachGroupPolicyInput is the detachGroupPolicyInput argument value.
			DetachGroupPolicyInput *iam.DetachGroupPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DetachRolePolicy holds details about calls to the DetachRolePolicy method.
		DetachRolePolicy []struct {
			// DetachRolePolicyInput is the detachRolePolicyInput argument value.
			DetachRolePolicyInput *iam.DetachRolePolicyInput
		}
		// DetachRolePolicyRequest holds details about calls to the DetachRolePolicyRequest method.
		DetachRolePolicyRequest []struct {
			// DetachRolePolicyInput is the detachRolePolicyInput argument value.
			DetachRolePolicyInput *iam.DetachRolePolicyInput
		}
		// DetachRolePolicyWithContext holds details about calls to the DetachRolePolicyWithContext method.
		DetachRolePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DetachRolePolicyInput is the detachRolePolicyInput argument value.
			DetachRolePolicyInput *iam.DetachRolePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DetachUserPolicy holds details about calls to the DetachUserPolicy method.
		DetachUserPolicy []struct {
			// DetachUserPolicyInput is the detachUserPolicyInput argument value.
			DetachUserPolicyInput *iam.DetachUserPolicyInput
		}
		// DetachUserPolicyRequest holds details about calls to the DetachUserPolicyRequest method.
		DetachUserPolicyRequest []struct {
			// DetachUserPolicyInput is the detachUserPolicyInput argument value.
			DetachUserPolicyInput *iam.DetachUserPolicyInput
		}
		// DetachUserPolicyWithContext holds details about calls to the DetachUserPolicyWithContext method.
		DetachUserPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DetachUserPolicyInput is the detachUserPolicyInput argument value.
			DetachUserPolicyInput *iam.DetachUserPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// EnableMFADevice holds details about calls to the EnableMFADevice method.
		EnableMFADevice []struct {
			// EnableMFADeviceInput is the enableMFADeviceInput argument value.
			EnableMFADeviceInput *iam.EnableMFADeviceInput
		}
		// EnableMFADeviceRequest holds details about calls to the EnableMFADeviceRequest method.
		EnableMFADeviceRequest []struct {
			// EnableMFADeviceInput is the enableMFADeviceInput argument value.
			EnableMFADeviceInput *iam.EnableMFADeviceInput
		}
		// EnableMFADeviceWithContext holds details about calls to the EnableMFADeviceWithContext method.
		EnableMFADeviceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// EnableMFADeviceInput is the enableMFADeviceInput argument value.
			EnableMFADeviceInput *iam.EnableMFADeviceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GenerateCredentialReport holds details about calls to the GenerateCredentialReport method.
		GenerateCredentialReport []struct {
			// GenerateCredentialReportInput is the generateCredentialReportInput argument value.
			GenerateCredentialReportInput *iam.GenerateCredentialReportInput
		}
		// GenerateCredentialReportRequest holds details about calls to the GenerateCredentialReportRequest method.
		GenerateCredentialReportRequest []struct {
			// GenerateCredentialReportInput is the generateCredentialReportInput argument value.
			GenerateCredentialReportInput *iam.GenerateCredentialReportInput
		}
		// GenerateCredentialReportWithContext holds details about calls to the GenerateCredentialReportWithContext method.
		GenerateCredentialReportWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GenerateCredentialReportInput is the generateCredentialReportInput argument value.
			GenerateCredentialReportInput *iam.GenerateCredentialReportInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GenerateOrganizationsAccessReport holds details about calls to the GenerateOrganizationsAccessReport method.
		GenerateOrganizationsAccessReport []struct {
			// GenerateOrganizationsAccessReportInput is the generateOrganizationsAccessReportInput argument value.
			GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
		}
		// GenerateOrganizationsAccessReportRequest holds details about calls to the GenerateOrganizationsAccessReportRequest method.
		GenerateOrganizationsAccessReportRequest []struct {
			// GenerateOrganizationsAccessReportInput is the generateOrganizationsAccessReportInput argument value.
			GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
		}
		// GenerateOrganizationsAccessReportWithContext holds details about calls to the GenerateOrganizationsAccessReportWithContext method.
		GenerateOrganizationsAccessReportWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GenerateOrganizationsAccessReportInput is the generateOrganizationsAccessReportInput argument value.
			GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GenerateServiceLastAccessedDetails holds details about calls to the GenerateServiceLastAccessedDetails method.
		GenerateServiceLastAccessedDetails []struct {
			// GenerateServiceLastAccessedDetailsInput is the generateServiceLastAccessedDetailsInput argument value.
			GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
		}
		// GenerateServiceLastAccessedDetailsRequest holds details about calls to the GenerateServiceLastAccessedDetailsRequest method.
		GenerateServiceLastAccessedDetailsRequest []struct {
			// GenerateServiceLastAccessedDetailsInput is the generateServiceLastAccessedDetailsInput argument value.
			GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
		}
		// GenerateServiceLastAccessedDetailsWithContext holds details about calls to the GenerateServiceLastAccessedDetailsWithContext method.
		GenerateServiceLastAccessedDetailsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GenerateServiceLastAccessedDetailsInput is the generateServiceLastAccessedDetailsInput argument value.
			GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetAccessKeyLastUsed holds details about calls to the GetAccessKeyLastUsed method.
		GetAccessKeyLastUsed []struct {
			// GetAccessKeyLastUsedInput is the getAccessKeyLastUsedInput argument value.
			GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
		}
		// GetAccessKeyLastUsedRequest holds details about calls to the GetAccessKeyLastUsedRequest method.
		GetAccessKeyLastUsedRequest []struct {
			// GetAccessKeyLastUsedInput is the getAccessKeyLastUsedInput argument value.
			GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
		}
		// GetAccessKeyLastUsedWithContext holds details about calls to the GetAccessKeyLastUsedWithContext method.
		GetAccessKeyLastUsedWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAccessKeyLastUsedInput is the getAccessKeyLastUsedInput argument value.
			GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetAccountAuthorizationDetails holds details about calls to the GetAccountAuthorizationDetails method.
		GetAccountAuthorizationDetails []struct {
			// GetAccountAuthorizationDetailsInput is the getAccountAuthorizationDetailsInput argument value.
			GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		}
		// GetAccountAuthorizationDetailsPages holds details about calls to the GetAccountAuthorizationDetailsPages method.
		GetAccountAuthorizationDetailsPages []struct {
			// GetAccountAuthorizationDetailsInput is the getAccountAuthorizationDetailsInput argument value.
			GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
			// Fn is the fn argument value.
			Fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		}
		// GetAccountAuthorizationDetailsPagesWithContext holds details about calls to the GetAccountAuthorizationDetailsPagesWithContext method.
		GetAccountAuthorizationDetailsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAccountAuthorizationDetailsInput is the getAccountAuthorizationDetailsInput argument value.
			GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
			// Fn is the fn argument value.
			Fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// GetAccountAuthorizationDetailsRequest holds details about calls to the GetAccountAuthorizationDetailsRequest method.
		GetAccountAuthorizationDetailsRequest []struct {
			// GetAccountAuthorizationDetailsInput is the getAccountAuthorizationDetailsInput argument value.
			GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		}
		// GetAccountAuthorizationDetailsWithContext holds details about calls to the GetAccountAuthorizationDetailsWithContext method.
		GetAccountAuthorizationDetailsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAccountAuthorizationDetailsInput is the getAccountAuthorizationDetailsInput argument value.
			GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetAccountPasswordPolicy holds details about calls to the GetAccountPasswordPolicy method.
		GetAccountPasswordPolicy []struct {
			// GetAccountPasswordPolicyInput is the getAccountPasswordPolicyInput argument value.
			GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
		}
		// GetAccountPasswordPolicyRequest holds details about calls to the GetAccountPasswordPolicyRequest method.
		GetAccountPasswordPolicyRequest []struct {
			// GetAccountPasswordPolicyInput is the getAccountPasswordPolicyInput argument value.
			GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
		}
		// GetAccountPasswordPolicyWithContext holds details about calls to the GetAccountPasswordPolicyWithContext method.
		GetAccountPasswordPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAccountPasswordPolicyInput is the getAccountPasswordPolicyInput argument value.
			GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetAccountSummary holds details about calls to the GetAccountSummary method.
		GetAccountSummary []struct {
			// GetAccountSummaryInput is the getAccountSummaryInput argument value.
			GetAccountSummaryInput *iam.GetAccountSummaryInput
		}
		// GetAccountSummaryRequest holds details about calls to the GetAccountSummaryRequest method.
		GetAccountSummaryRequest []struct {
			// GetAccountSummaryInput is the getAccountSummaryInput argument value.
			GetAccountSummaryInput *iam.GetAccountSummaryInput
		}
		// GetAccountSummaryWithContext holds details about calls to the GetAccountSummaryWithContext method.
		GetAccountSummaryWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAccountSummaryInput is the getAccountSummaryInput argument value.
			GetAccountSummaryInput *iam.GetAccountSummaryInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetContextKeysForCustomPolicy holds details about calls to the GetContextKeysForCustomPolicy method.
		GetContextKeysForCustomPolicy []struct {
			// GetContextKeysForCustomPolicyInput is the getContextKeysForCustomPolicyInput argument value.
			GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
		}
		// GetContextKeysForCustomPolicyRequest holds details about calls to the GetContextKeysForCustomPolicyRequest method.
		GetContextKeysForCustomPolicyRequest []struct {
			// GetContextKeysForCustomPolicyInput is the getContextKeysForCustomPolicyInput argument value.
			GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
		}
		// GetContextKeysForCustomPolicyWithContext holds details about calls to the GetContextKeysForCustomPolicyWithContext method.
		GetContextKeysForCustomPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetContextKeysForCustomPolicyInput is the getContextKeysForCustomPolicyInput argument value.
			GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetContextKeysForPrincipalPolicy holds details about calls to the GetContextKeysForPrincipalPolicy method.
		GetContextKeysForPrincipalPolicy []struct {
			// GetContextKeysForPrincipalPolicyInput is the getContextKeysForPrincipalPolicyInput argument value.
			GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
		}
		// GetContextKeysForPrincipalPolicyRequest holds details about calls to the GetContextKeysForPrincipalPolicyRequest method.
		GetContextKeysForPrincipalPolicyRequest []struct {
			// GetContextKeysForPrincipalPolicyInput is the getContextKeysForPrincipalPolicyInput argument value.
			GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
		}
		// GetContextKeysForPrincipalPolicyWithContext holds details about calls to the GetContextKeysForPrincipalPolicyWithContext method.
		GetContextKeysForPrincipalPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetContextKeysForPrincipalPolicyInput is the getContextKeysForPrincipalPolicyInput argument value.
			GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetCredentialReport holds details about calls to the GetCredentialReport method.
		GetCredentialReport []struct {
			// GetCredentialReportInput is the getCredentialReportInput argument value.
			GetCredentialReportInput *iam.GetCredentialReportInput
		}
		// GetCredentialReportRequest holds details about calls to the GetCredentialReportRequest method.
		GetCredentialReportRequest []struct {
			// GetCredentialReportInput is the getCredentialReportInput argument value.
			GetCredentialReportInput *iam.GetCredentialReportInput
		}
		// GetCredentialReportWithContext holds details about calls to the GetCredentialReportWithContext method.
		GetCredentialReportWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetCredentialReportInput is the getCredentialReportInput argument value.
			GetCredentialReportInput *iam.GetCredentialReportInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetGroup holds details about calls to the GetGroup method.
		GetGroup []struct {
			// GetGroupInput is the getGroupInput argument value.
			GetGroupInput *iam.GetGroupInput
		}
		// GetGroupPages holds details about calls to the GetGroupPages method.
		GetGroupPages []struct {
			// GetGroupInput is the getGroupInput argument value.
			GetGroupInput *iam.GetGroupInput
			// Fn is the fn argument value.
			Fn func(*iam.GetGroupOutput, bool) bool
		}
		// GetGroupPagesWithContext holds details about calls to the GetGroupPagesWithContext method.
		GetGroupPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetGroupInput is the getGroupInput argument value.
			GetGroupInput *iam.GetGroupInput
			// Fn is the fn argument value.
			Fn func(*iam.GetGroupOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// GetGroupPolicy holds details about calls to the GetGroupPolicy method.
		GetGroupPolicy []struct {
			// GetGroupPolicyInput is the getGroupPolicyInput argument value.
			GetGroupPolicyInput *iam.GetGroupPolicyInput
		}
		// GetGroupPolicyRequest holds details about calls to the GetGroupPolicyRequest method.
		GetGroupPolicyRequest []struct {
			// GetGroupPolicyInput is the getGroupPolicyInput argument value.
			GetGroupPolicyInput *iam.GetGroupPolicyInput
		}
		// GetGroupPolicyWithContext holds details about calls to the GetGroupPolicyWithContext method.
		GetGroupPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetGroupPolicyInput is the getGroupPolicyInput argument value.
			GetGroupPolicyInput *iam.GetGroupPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetGroupRequest holds details about calls to the GetGroupRequest method.
		GetGroupRequest []struct {
			// GetGroupInput is the getGroupInput argument value.
			GetGroupInput *iam.GetGroupInput
		}
		// GetGroupWithContext holds details about calls to the GetGroupWithContext method.
		GetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetGroupInput is the getGroupInput argument value.
			GetGroupInput *iam.GetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetInstanceProfile holds details about calls to the GetInstanceProfile method.
		GetInstanceProfile []struct {
			// GetInstanceProfileInput is the getInstanceProfileInput argument value.
			GetInstanceProfileInput *iam.GetInstanceProfileInput
		}
		// GetInstanceProfileRequest holds details about calls to the GetInstanceProfileRequest method.
		GetInstanceProfileRequest []struct {
			// GetInstanceProfileInput is the getInstanceProfileInput argument value.
			GetInstanceProfileInput *iam.GetInstanceProfileInput
		}
		// GetInstanceProfileWithContext holds details about calls to the GetInstanceProfileWithContext method.
		GetInstanceProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetInstanceProfileInput is the getInstanceProfileInput argument value.
			GetInstanceProfileInput *iam.GetInstanceProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetLoginProfile holds details about calls to the GetLoginProfile method.
		GetLoginProfile []struct {
			// GetLoginProfileInput is the getLoginProfileInput argument value.
			GetLoginProfileInput *iam.GetLoginProfileInput
		}
		// GetLoginProfileRequest holds details about calls to the GetLoginProfileRequest method.
		GetLoginProfileRequest []struct {
			// GetLoginProfileInput is the getLoginProfileInput argument value.
			GetLoginProfileInput *iam.GetLoginProfileInput
		}
		// GetLoginProfileWithContext holds details about calls to the GetLoginProfileWithContext method.
		GetLoginProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetLoginProfileInput is the getLoginProfileInput argument value.
			GetLoginProfileInput *iam.GetLoginProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetOpenIDConnectProvider holds details about calls to the GetOpenIDConnectProvider method.
		GetOpenIDConnectProvider []struct {
			// GetOpenIDConnectProviderInput is the getOpenIDConnectProviderInput argument value.
			GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
		}
		// GetOpenIDConnectProviderRequest holds details about calls to the GetOpenIDConnectProviderRequest method.
		GetOpenIDConnectProviderRequest []struct {
			// GetOpenIDConnectProviderInput is the getOpenIDConnectProviderInput argument value.
			GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
		}
		// GetOpenIDConnectProviderWithContext holds details about calls to the GetOpenIDConnectProviderWithContext method.
		GetOpenIDConnectProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetOpenIDConnectProviderInput is the getOpenIDConnectProviderInput argument value.
			GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetOrganizationsAccessReport holds details about calls to the GetOrganizationsAccessReport method.
		GetOrganizationsAccessReport []struct {
			// GetOrganizationsAccessReportInput is the getOrganizationsAccessReportInput argument value.
			GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
		}
		// GetOrganizationsAccessReportRequest holds details about calls to the GetOrganizationsAccessReportRequest method.
		GetOrganizationsAccessReportRequest []struct {
			// GetOrganizationsAccessReportInput is the getOrganizationsAccessReportInput argument value.
			GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
		}
		// GetOrganizationsAccessReportWithContext holds details about calls to the GetOrganizationsAccessReportWithContext method.
		GetOrganizationsAccessReportWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetOrganizationsAccessReportInput is the getOrganizationsAccessReportInput argument value.
			GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetPolicy holds details about calls to the GetPolicy method.
		GetPolicy []struct {
			// GetPolicyInput is the getPolicyInput argument value.
			GetPolicyInput *iam.GetPolicyInput
		}
		// GetPolicyRequest holds details about calls to the GetPolicyRequest method.
		GetPolicyRequest []struct {
			// GetPolicyInput is the getPolicyInput argument value.
			GetPolicyInput *iam.GetPolicyInput
		}
		// GetPolicyVersion holds details about calls to the GetPolicyVersion method.
		GetPolicyVersion []struct {
			// GetPolicyVersionInput is the getPolicyVersionInput argument value.
			GetPolicyVersionInput *iam.GetPolicyVersionInput
		}
		// GetPolicyVersionRequest holds details about calls to the GetPolicyVersionRequest method.
		GetPolicyVersionRequest []struct {
			// GetPolicyVersionInput is the getPolicyVersionInput argument value.
			GetPolicyVersionInput *iam.GetPolicyVersionInput
		}
		// GetPolicyVersionWithContext holds details about calls to the GetPolicyVersionWithContext method.
		GetPolicyVersionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetPolicyVersionInput is the getPolicyVersionInput argument value.
			GetPolicyVersionInput *iam.GetPolicyVersionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetPolicyWithContext holds details about calls to the GetPolicyWithContext method.
		GetPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetPolicyInput is the getPolicyInput argument value.
			GetPolicyInput *iam.GetPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetRole holds details about calls to the GetRole method.
		GetRole []struct {
			// GetRoleInput is the getRoleInput argument value.
			GetRoleInput *iam.GetRoleInput
		}
		// GetRolePolicy holds details about calls to the GetRolePolicy method.
		GetRolePolicy []struct {
			// GetRolePolicyInput is the getRolePolicyInput argument value.
			GetRolePolicyInput *iam.GetRolePolicyInput
		}
		// GetRolePolicyRequest holds details about calls to the GetRolePolicyRequest method.
		GetRolePolicyRequest []struct {
			// GetRolePolicyInput is the getRolePolicyInput argument value.
			GetRolePolicyInput *iam.GetRolePolicyInput
		}
		// GetRolePolicyWithContext holds details about calls to the GetRolePolicyWithContext method.
		GetRolePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetRolePolicyInput is the getRolePolicyInput argument value.
			GetRolePolicyInput *iam.GetRolePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetRoleRequest holds details about calls to the GetRoleRequest method.
		GetRoleRequest []struct {
			// GetRoleInput is the getRoleInput argument value.
			GetRoleInput *iam.GetRoleInput
		}
		// GetRoleWithContext holds details about calls to the GetRoleWithContext method.
		GetRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetRoleInput is the getRoleInput argument value.
			GetRoleInput *iam.GetRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetSAMLProvider holds details about calls to the GetSAMLProvider method.
		GetSAMLProvider []struct {
			// GetSAMLProviderInput is the getSAMLProviderInput argument value.
			GetSAMLProviderInput *iam.GetSAMLProviderInput
		}
		// GetSAMLProviderRequest holds details about calls to the GetSAMLProviderRequest method.
		GetSAMLProviderRequest []struct {
			// GetSAMLProviderInput is the getSAMLProviderInput argument value.
			GetSAMLProviderInput *iam.GetSAMLProviderInput
		}
		// GetSAMLProviderWithContext holds details about calls to the GetSAMLProviderWithContext method.
		GetSAMLProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetSAMLProviderInput is the getSAMLProviderInput argument value.
			GetSAMLProviderInput *iam.GetSAMLProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetSSHPublicKey holds details about calls to the GetSSHPublicKey method.
		GetSSHPublicKey []struct {
			// GetSSHPublicKeyInput is the getSSHPublicKeyInput argument value.
			GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
		}
		// GetSSHPublicKeyRequest holds details about calls to the GetSSHPublicKeyRequest method.
		GetSSHPublicKeyRequest []struct {
			// GetSSHPublicKeyInput is the getSSHPublicKeyInput argument value.
			GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
		}
		// GetSSHPublicKeyWithContext holds details about calls to the GetSSHPublicKeyWithContext method.
		GetSSHPublicKeyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetSSHPublicKeyInput is the getSSHPublicKeyInput argument value.
			GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetServerCertificate holds details about calls to the GetServerCertificate method.
		GetServerCertificate []struct {
			// GetServerCertificateInput is the getServerCertificateInput argument value.
			GetServerCertificateInput *iam.GetServerCertificateInput
		}
		// GetServerCertificateRequest holds details about calls to the GetServerCertificateRequest method.
		GetServerCertificateRequest []struct {
			// GetServerCertificateInput is the getServerCertificateInput argument value.
			GetServerCertificateInput *iam.GetServerCertificateInput
		}
		// GetServerCertificateWithContext holds details about calls to the GetServerCertificateWithContext method.
		GetServerCertificateWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetServerCertificateInput is the getServerCertificateInput argument value.
			GetServerCertificateInput *iam.GetServerCertificateInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetServiceLastAccessedDetails holds details about calls to the GetServiceLastAccessedDetails method.
		GetServiceLastAccessedDetails []struct {
			// GetServiceLastAccessedDetailsInput is the getServiceLastAccessedDetailsInput argument value.
			GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
		}
		// GetServiceLastAccessedDetailsRequest holds details about calls to the GetServiceLastAccessedDetailsRequest method.
		GetServiceLastAccessedDetailsRequest []struct {
			// GetServiceLastAccessedDetailsInput is the getServiceLastAccessedDetailsInput argument value.
			GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
		}
		// GetServiceLastAccessedDetailsWithContext holds details about calls to the GetServiceLastAccessedDetailsWithContext method.
		GetServiceLastAccessedDetailsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetServiceLastAccessedDetailsInput is the getServiceLastAccessedDetailsInput argument value.
			GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetServiceLastAccessedDetailsWithEntities holds details about calls to the GetServiceLastAccessedDetailsWithEntities method.
		GetServiceLastAccessedDetailsWithEntities []struct {
			// GetServiceLastAccessedDetailsWithEntitiesInput is the getServiceLastAccessedDetailsWithEntitiesInput argument value.
			GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		}
		// GetServiceLastAccessedDetailsWithEntitiesRequest holds details about calls to the GetServiceLastAccessedDetailsWithEntitiesRequest method.
		GetServiceLastAccessedDetailsWithEntitiesRequest []struct {
			// GetServiceLastAccessedDetailsWithEntitiesInput is the getServiceLastAccessedDetailsWithEntitiesInput argument value.
			GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		}
		// GetServiceLastAccessedDetailsWithEntitiesWithContext holds details about calls to the GetServiceLastAccessedDetailsWithEntitiesWithContext method.
		GetServiceLastAccessedDetailsWithEntitiesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetServiceLastAccessedDetailsWithEntitiesInput is the getServiceLastAccessedDetailsWithEntitiesInput argument value.
			GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetServiceLinkedRoleDeletionStatus holds details about calls to the GetServiceLinkedRoleDeletionStatus method.
		GetServiceLinkedRoleDeletionStatus []struct {
			// GetServiceLinkedRoleDeletionStatusInput is the getServiceLinkedRoleDeletionStatusInput argument value.
			GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
		}
		// GetServiceLinkedRoleDeletionStatusRequest holds details about calls to the GetServiceLinkedRoleDeletionStatusRequest method.
		GetServiceLinkedRoleDeletionStatusRequest []struct {
			// GetServiceLinkedRoleDeletionStatusInput is the getServiceLinkedRoleDeletionStatusInput argument value.
			GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
		}
		// GetServiceLinkedRoleDeletionStatusWithContext holds details about calls to the GetServiceLinkedRoleDeletionStatusWithContext method.
		GetServiceLinkedRoleDeletionStatusWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetServiceLinkedRoleDeletionStatusInput is the getServiceLinkedRoleDeletionStatusInput argument value.
			GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// GetUserInput is the getUserInput argument value.
			GetUserInput *iam.GetUserInput
		}
		// GetUserPolicy holds details about calls to the GetUserPolicy method.
		GetUserPolicy []struct {
			// GetUserPolicyInput is the getUserPolicyInput argument value.
			GetUserPolicyInput *iam.GetUserPolicyInput
		}
		// GetUserPolicyRequest holds details about calls to the GetUserPolicyRequest method.
		GetUserPolicyRequest []struct {
			// GetUserPolicyInput is the getUserPolicyInput argument value.
			GetUserPolicyInput *iam.GetUserPolicyInput
		}
		// GetUserPolicyWithContext holds details about calls to the GetUserPolicyWithContext method.
		GetUserPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetUserPolicyInput is the getUserPolicyInput argument value.
			GetUserPolicyInput *iam.GetUserPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetUserRequest holds details about calls to the GetUserRequest method.
		GetUserRequest []struct {
			// GetUserInput is the getUserInput argument value.
			GetUserInput *iam.GetUserInput
		}
		// GetUserWithContext holds details about calls to the GetUserWithContext method.
		GetUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetUserInput is the getUserInput argument value.
			GetUserInput *iam.GetUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAccessKeys holds details about calls to the ListAccessKeys method.
		ListAccessKeys []struct {
			// ListAccessKeysInput is the listAccessKeysInput argument value.
			ListAccessKeysInput *iam.ListAccessKeysInput
		}
		// ListAccessKeysPages holds details about calls to the ListAccessKeysPages method.
		ListAccessKeysPages []struct {
			// ListAccessKeysInput is the listAccessKeysInput argument value.
			ListAccessKeysInput *iam.ListAccessKeysInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAccessKeysOutput, bool) bool
		}
		// ListAccessKeysPagesWithContext holds details about calls to the ListAccessKeysPagesWithContext method.
		ListAccessKeysPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAccessKeysInput is the listAccessKeysInput argument value.
			ListAccessKeysInput *iam.ListAccessKeysInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAccessKeysOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAccessKeysRequest holds details about calls to the ListAccessKeysRequest method.
		ListAccessKeysRequest []struct {
			// ListAccessKeysInput is the listAccessKeysInput argument value.
			ListAccessKeysInput *iam.ListAccessKeysInput
		}
		// ListAccessKeysWithContext holds details about calls to the ListAccessKeysWithContext method.
		ListAccessKeysWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAccessKeysInput is the listAccessKeysInput argument value.
			ListAccessKeysInput *iam.ListAccessKeysInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAccountAliases holds details about calls to the ListAccountAliases method.
		ListAccountAliases []struct {
			// ListAccountAliasesInput is the listAccountAliasesInput argument value.
			ListAccountAliasesInput *iam.ListAccountAliasesInput
		}
		// ListAccountAliasesPages holds details about calls to the ListAccountAliasesPages method.
		ListAccountAliasesPages []struct {
			// ListAccountAliasesInput is the listAccountAliasesInput argument value.
			ListAccountAliasesInput *iam.ListAccountAliasesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAccountAliasesOutput, bool) bool
		}
		// ListAccountAliasesPagesWithContext holds details about calls to the ListAccountAliasesPagesWithContext method.
		ListAccountAliasesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAccountAliasesInput is the listAccountAliasesInput argument value.
			ListAccountAliasesInput *iam.ListAccountAliasesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAccountAliasesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAccountAliasesRequest holds details about calls to the ListAccountAliasesRequest method.
		ListAccountAliasesRequest []struct {
			// ListAccountAliasesInput is the listAccountAliasesInput argument value.
			ListAccountAliasesInput *iam.ListAccountAliasesInput
		}
		// ListAccountAliasesWithContext holds details about calls to the ListAccountAliasesWithContext method.
		ListAccountAliasesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAccountAliasesInput is the listAccountAliasesInput argument value.
			ListAccountAliasesInput *iam.ListAccountAliasesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAttachedGroupPolicies holds details about calls to the ListAttachedGroupPolicies method.
		ListAttachedGroupPolicies []struct {
			// ListAttachedGroupPoliciesInput is the listAttachedGroupPoliciesInput argument value.
			ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		}
		// ListAttachedGroupPoliciesPages holds details about calls to the ListAttachedGroupPoliciesPages method.
		ListAttachedGroupPoliciesPages []struct {
			// ListAttachedGroupPoliciesInput is the listAttachedGroupPoliciesInput argument value.
			ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		}
		// ListAttachedGroupPoliciesPagesWithContext holds details about calls to the ListAttachedGroupPoliciesPagesWithContext method.
		ListAttachedGroupPoliciesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAttachedGroupPoliciesInput is the listAttachedGroupPoliciesInput argument value.
			ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAttachedGroupPoliciesRequest holds details about calls to the ListAttachedGroupPoliciesRequest method.
		ListAttachedGroupPoliciesRequest []struct {
			// ListAttachedGroupPoliciesInput is the listAttachedGroupPoliciesInput argument value.
			ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		}
		// ListAttachedGroupPoliciesWithContext holds details about calls to the ListAttachedGroupPoliciesWithContext method.
		ListAttachedGroupPoliciesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAttachedGroupPoliciesInput is the listAttachedGroupPoliciesInput argument value.
			ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAttachedRolePolicies holds details about calls to the ListAttachedRolePolicies method.
		ListAttachedRolePolicies []struct {
			// ListAttachedRolePoliciesInput is the listAttachedRolePoliciesInput argument value.
			ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		}
		// ListAttachedRolePoliciesPages holds details about calls to the ListAttachedRolePoliciesPages method.
		ListAttachedRolePoliciesPages []struct {
			// ListAttachedRolePoliciesInput is the listAttachedRolePoliciesInput argument value.
			ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		}
		// ListAttachedRolePoliciesPagesWithContext holds details about calls to the ListAttachedRolePoliciesPagesWithContext method.
		ListAttachedRolePoliciesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAttachedRolePoliciesInput is the listAttachedRolePoliciesInput argument value.
			ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAttachedRolePoliciesRequest holds details about calls to the ListAttachedRolePoliciesRequest method.
		ListAttachedRolePoliciesRequest []struct {
			// ListAttachedRolePoliciesInput is the listAttachedRolePoliciesInput argument value.
			ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		}
		// ListAttachedRolePoliciesWithContext holds details about calls to the ListAttachedRolePoliciesWithContext method.
		ListAttachedRolePoliciesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAttachedRolePoliciesInput is the listAttachedRolePoliciesInput argument value.
			ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAttachedUserPolicies holds details about calls to the ListAttachedUserPolicies method.
		ListAttachedUserPolicies []struct {
			// ListAttachedUserPoliciesInput is the listAttachedUserPoliciesInput argument value.
			ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		}
		// ListAttachedUserPoliciesPages holds details about calls to the ListAttachedUserPoliciesPages method.
		ListAttachedUserPoliciesPages []struct {
			// ListAttachedUserPoliciesInput is the listAttachedUserPoliciesInput argument value.
			ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		}
		// ListAttachedUserPoliciesPagesWithContext holds details about calls to the ListAttachedUserPoliciesPagesWithContext method.
		ListAttachedUserPoliciesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAttachedUserPoliciesInput is the listAttachedUserPoliciesInput argument value.
			ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAttachedUserPoliciesRequest holds details about calls to the ListAttachedUserPoliciesRequest method.
		ListAttachedUserPoliciesRequest []struct {
			// ListAttachedUserPoliciesInput is the listAttachedUserPoliciesInput argument value.
			ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		}
		// ListAttachedUserPoliciesWithContext holds details about calls to the ListAttachedUserPoliciesWithContext method.
		ListAttachedUserPoliciesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAttachedUserPoliciesInput is the listAttachedUserPoliciesInput argument value.
			ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListEntitiesForPolicy holds details about calls to the ListEntitiesForPolicy method.
		ListEntitiesForPolicy []struct {
			// ListEntitiesForPolicyInput is the listEntitiesForPolicyInput argument value.
			ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		}
		// ListEntitiesForPolicyPages holds details about calls to the ListEntitiesForPolicyPages method.
		ListEntitiesForPolicyPages []struct {
			// ListEntitiesForPolicyInput is the listEntitiesForPolicyInput argument value.
			ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
			// Fn is the fn argument value.
			Fn func(*iam.ListEntitiesForPolicyOutput, bool) bool
		}
		// ListEntitiesForPolicyPagesWithContext holds details about calls to the ListEntitiesForPolicyPagesWithContext method.
		ListEntitiesForPolicyPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListEntitiesForPolicyInput is the listEntitiesForPolicyInput argument value.
			ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
			// Fn is the fn argument value.
			Fn func(*iam.ListEntitiesForPolicyOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListEntitiesForPolicyRequest holds details about calls to the ListEntitiesForPolicyRequest method.
		ListEntitiesForPolicyRequest []struct {
			// ListEntitiesForPolicyInput is the listEntitiesForPolicyInput argument value.
			ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		}
		// ListEntitiesForPolicyWithContext holds details about calls to the ListEntitiesForPolicyWithContext method.
		ListEntitiesForPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListEntitiesForPolicyInput is the listEntitiesForPolicyInput argument value.
			ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListGroupPolicies holds details about calls to the ListGroupPolicies method.
		ListGroupPolicies []struct {
			// ListGroupPoliciesInput is the listGroupPoliciesInput argument value.
			ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		}
		// ListGroupPoliciesPages holds details about calls to the ListGroupPoliciesPages method.
		ListGroupPoliciesPages []struct {
			// ListGroupPoliciesInput is the listGroupPoliciesInput argument value.
			ListGroupPoliciesInput *iam.ListGroupPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListGroupPoliciesOutput, bool) bool
		}
		// ListGroupPoliciesPagesWithContext holds details about calls to the ListGroupPoliciesPagesWithContext method.
		ListGroupPoliciesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListGroupPoliciesInput is the listGroupPoliciesInput argument value.
			ListGroupPoliciesInput *iam.ListGroupPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListGroupPoliciesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListGroupPoliciesRequest holds details about calls to the ListGroupPoliciesRequest method.
		ListGroupPoliciesRequest []struct {
			// ListGroupPoliciesInput is the listGroupPoliciesInput argument value.
			ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		}
		// ListGroupPoliciesWithContext holds details about calls to the ListGroupPoliciesWithContext method.
		ListGroupPoliciesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListGroupPoliciesInput is the listGroupPoliciesInput argument value.
			ListGroupPoliciesInput *iam.ListGroupPoliciesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListGroups holds details about calls to the ListGroups method.
		ListGroups []struct {
			// ListGroupsInput is the listGroupsInput argument value.
			ListGroupsInput *iam.ListGroupsInput
		}
		// ListGroupsForUser holds details about calls to the ListGroupsForUser method.
		ListGroupsForUser []struct {
			// ListGroupsForUserInput is the listGroupsForUserInput argument value.
			ListGroupsForUserInput *iam.ListGroupsForUserInput
		}
		// ListGroupsForUserPages holds details about calls to the ListGroupsForUserPages method.
		ListGroupsForUserPages []struct {
			// ListGroupsForUserInput is the listGroupsForUserInput argument value.
			ListGroupsForUserInput *iam.ListGroupsForUserInput
			// Fn is the fn argument value.
			Fn func(*iam.ListGroupsForUserOutput, bool) bool
		}
		// ListGroupsForUserPagesWithContext holds details about calls to the ListGroupsForUserPagesWithContext method.
		ListGroupsForUserPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListGroupsForUserInput is the listGroupsForUserInput argument value.
			ListGroupsForUserInput *iam.ListGroupsForUserInput
			// Fn is the fn argument value.
			Fn func(*iam.ListGroupsForUserOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListGroupsForUserRequest holds details about calls to the ListGroupsForUserRequest method.
		ListGroupsForUserRequest []struct {
			// ListGroupsForUserInput is the listGroupsForUserInput argument value.
			ListGroupsForUserInput *iam.ListGroupsForUserInput
		}
		// ListGroupsForUserWithContext holds details about calls to the ListGroupsForUserWithContext method.
		ListGroupsForUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListGroupsForUserInput is the listGroupsForUserInput argument value.
			ListGroupsForUserInput *iam.ListGroupsForUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListGroupsPages holds details about calls to the ListGroupsPages method.
		ListGroupsPages []struct {
			// ListGroupsInput is the listGroupsInput argument value.
			ListGroupsInput *iam.ListGroupsInput
			// Fn is the fn argument value.
			Fn func(*iam.ListGroupsOutput, bool) bool
		}
		// ListGroupsPagesWithContext holds details about calls to the ListGroupsPagesWithContext method.
		ListGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListGroupsInput is the listGroupsInput argument value.
			ListGroupsInput *iam.ListGroupsInput
			// Fn is the fn argument value.
			Fn func(*iam.ListGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListGroupsRequest holds details about calls to the ListGroupsRequest method.
		ListGroupsRequest []struct {
			// ListGroupsInput is the listGroupsInput argument value.
			ListGroupsInput *iam.ListGroupsInput
		}
		// ListGroupsWithContext holds details about calls to the ListGroupsWithContext method.
		ListGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListGroupsInput is the listGroupsInput argument value.
			ListGroupsInput *iam.ListGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListInstanceProfiles holds details about calls to the ListInstanceProfiles method.
		ListInstanceProfiles []struct {
			// ListInstanceProfilesInput is the listInstanceProfilesInput argument value.
			ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		}
		// ListInstanceProfilesForRole holds details about calls to the ListInstanceProfilesForRole method.
		ListInstanceProfilesForRole []struct {
			// ListInstanceProfilesForRoleInput is the listInstanceProfilesForRoleInput argument value.
			ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		}
		// ListInstanceProfilesForRolePages holds details about calls to the ListInstanceProfilesForRolePages method.
		ListInstanceProfilesForRolePages []struct {
			// ListInstanceProfilesForRoleInput is the listInstanceProfilesForRoleInput argument value.
			ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
			// Fn is the fn argument value.
			Fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		}
		// ListInstanceProfilesForRolePagesWithContext holds details about calls to the ListInstanceProfilesForRolePagesWithContext method.
		ListInstanceProfilesForRolePagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListInstanceProfilesForRoleInput is the listInstanceProfilesForRoleInput argument value.
			ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
			// Fn is the fn argument value.
			Fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListInstanceProfilesForRoleRequest holds details about calls to the ListInstanceProfilesForRoleRequest method.
		ListInstanceProfilesForRoleRequest []struct {
			// ListInstanceProfilesForRoleInput is the listInstanceProfilesForRoleInput argument value.
			ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		}
		// ListInstanceProfilesForRoleWithContext holds details about calls to the ListInstanceProfilesForRoleWithContext method.
		ListInstanceProfilesForRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListInstanceProfilesForRoleInput is the listInstanceProfilesForRoleInput argument value.
			ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListInstanceProfilesPages holds details about calls to the ListInstanceProfilesPages method.
		ListInstanceProfilesPages []struct {
			// ListInstanceProfilesInput is the listInstanceProfilesInput argument value.
			ListInstanceProfilesInput *iam.ListInstanceProfilesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListInstanceProfilesOutput, bool) bool
		}
		// ListInstanceProfilesPagesWithContext holds details about calls to the ListInstanceProfilesPagesWithContext method.
		ListInstanceProfilesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListInstanceProfilesInput is the listInstanceProfilesInput argument value.
			ListInstanceProfilesInput *iam.ListInstanceProfilesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListInstanceProfilesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListInstanceProfilesRequest holds details about calls to the ListInstanceProfilesRequest method.
		ListInstanceProfilesRequest []struct {
			// ListInstanceProfilesInput is the listInstanceProfilesInput argument value.
			ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		}
		// ListInstanceProfilesWithContext holds details about calls to the ListInstanceProfilesWithContext method.
		ListInstanceProfilesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListInstanceProfilesInput is the listInstanceProfilesInput argument value.
			ListInstanceProfilesInput *iam.ListInstanceProfilesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListMFADevices holds details about calls to the ListMFADevices method.
		ListMFADevices []struct {
			// ListMFADevicesInput is the listMFADevicesInput argument value.
			ListMFADevicesInput *iam.ListMFADevicesInput
		}
		// ListMFADevicesPages holds details about calls to the ListMFADevicesPages method.
		ListMFADevicesPages []struct {
			// ListMFADevicesInput is the listMFADevicesInput argument value.
			ListMFADevicesInput *iam.ListMFADevicesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListMFADevicesOutput, bool) bool
		}
		// ListMFADevicesPagesWithContext holds details about calls to the ListMFADevicesPagesWithContext method.
		ListMFADevicesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListMFADevicesInput is the listMFADevicesInput argument value.
			ListMFADevicesInput *iam.ListMFADevicesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListMFADevicesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListMFADevicesRequest holds details about calls to the ListMFADevicesRequest method.
		ListMFADevicesRequest []struct {
			// ListMFADevicesInput is the listMFADevicesInput argument value.
			ListMFADevicesInput *iam.ListMFADevicesInput
		}
		// ListMFADevicesWithContext holds details about calls to the ListMFADevicesWithContext method.
		ListMFADevicesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListMFADevicesInput is the listMFADevicesInput argument value.
			ListMFADevicesInput *iam.ListMFADevicesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListOpenIDConnectProviders holds details about calls to the ListOpenIDConnectProviders method.
		ListOpenIDConnectProviders []struct {
			// ListOpenIDConnectProvidersInput is the listOpenIDConnectProvidersInput argument value.
			ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
		}
		// ListOpenIDConnectProvidersRequest holds details about calls to the ListOpenIDConnectProvidersRequest method.
		ListOpenIDConnectProvidersRequest []struct {
			// ListOpenIDConnectProvidersInput is the listOpenIDConnectProvidersInput argument value.
			ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
		}
		// ListOpenIDConnectProvidersWithContext holds details about calls to the ListOpenIDConnectProvidersWithContext method.
		ListOpenIDConnectProvidersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListOpenIDConnectProvidersInput is the listOpenIDConnectProvidersInput argument value.
			ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListPolicies holds details about calls to the ListPolicies method.
		ListPolicies []struct {
			// ListPoliciesInput is the listPoliciesInput argument value.
			ListPoliciesInput *iam.ListPoliciesInput
		}
		// ListPoliciesGrantingServiceAccess holds details about calls to the ListPoliciesGrantingServiceAccess method.
		ListPoliciesGrantingServiceAccess []struct {
			// ListPoliciesGrantingServiceAccessInput is the listPoliciesGrantingServiceAccessInput argument value.
			ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
		}
		// ListPoliciesGrantingServiceAccessRequest holds details about calls to the ListPoliciesGrantingServiceAccessRequest method.
		ListPoliciesGrantingServiceAccessRequest []struct {
			// ListPoliciesGrantingServiceAccessInput is the listPoliciesGrantingServiceAccessInput argument value.
			ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
		}
		// ListPoliciesGrantingServiceAccessWithContext holds details about calls to the ListPoliciesGrantingServiceAccessWithContext method.
		ListPoliciesGrantingServiceAccessWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPoliciesGrantingServiceAccessInput is the listPoliciesGrantingServiceAccessInput argument value.
			ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListPoliciesPages holds details about calls to the ListPoliciesPages method.
		ListPoliciesPages []struct {
			// ListPoliciesInput is the listPoliciesInput argument value.
			ListPoliciesInput *iam.ListPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListPoliciesOutput, bool) bool
		}
		// ListPoliciesPagesWithContext holds details about calls to the ListPoliciesPagesWithContext method.
		ListPoliciesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPoliciesInput is the listPoliciesInput argument value.
			ListPoliciesInput *iam.ListPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListPoliciesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListPoliciesRequest holds details about calls to the ListPoliciesRequest method.
		ListPoliciesRequest []struct {
			// ListPoliciesInput is the listPoliciesInput argument value.
			ListPoliciesInput *iam.ListPoliciesInput
		}
		// ListPoliciesWithContext holds details about calls to the ListPoliciesWithContext method.
		ListPoliciesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPoliciesInput is the listPoliciesInput argument value.
			ListPoliciesInput *iam.ListPoliciesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListPolicyVersions holds details about calls to the ListPolicyVersions method.
		ListPolicyVersions []struct {
			// ListPolicyVersionsInput is the listPolicyVersionsInput argument value.
			ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		}
		// ListPolicyVersionsPages holds details about calls to the ListPolicyVersionsPages method.
		ListPolicyVersionsPages []struct {
			// ListPolicyVersionsInput is the listPolicyVersionsInput argument value.
			ListPolicyVersionsInput *iam.ListPolicyVersionsInput
			// Fn is the fn argument value.
			Fn func(*iam.ListPolicyVersionsOutput, bool) bool
		}
		// ListPolicyVersionsPagesWithContext holds details about calls to the ListPolicyVersionsPagesWithContext method.
		ListPolicyVersionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPolicyVersionsInput is the listPolicyVersionsInput argument value.
			ListPolicyVersionsInput *iam.ListPolicyVersionsInput
			// Fn is the fn argument value.
			Fn func(*iam.ListPolicyVersionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListPolicyVersionsRequest holds details about calls to the ListPolicyVersionsRequest method.
		ListPolicyVersionsRequest []struct {
			// ListPolicyVersionsInput is the listPolicyVersionsInput argument value.
			ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		}
		// ListPolicyVersionsWithContext holds details about calls to the ListPolicyVersionsWithContext method.
		ListPolicyVersionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPolicyVersionsInput is the listPolicyVersionsInput argument value.
			ListPolicyVersionsInput *iam.ListPolicyVersionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListRolePolicies holds details about calls to the ListRolePolicies method.
		ListRolePolicies []struct {
			// ListRolePoliciesInput is the listRolePoliciesInput argument value.
			ListRolePoliciesInput *iam.ListRolePoliciesInput
		}
		// ListRolePoliciesPages holds details about calls to the ListRolePoliciesPages method.
		ListRolePoliciesPages []struct {
			// ListRolePoliciesInput is the listRolePoliciesInput argument value.
			ListRolePoliciesInput *iam.ListRolePoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListRolePoliciesOutput, bool) bool
		}
		// ListRolePoliciesPagesWithContext holds details about calls to the ListRolePoliciesPagesWithContext method.
		ListRolePoliciesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListRolePoliciesInput is the listRolePoliciesInput argument value.
			ListRolePoliciesInput *iam.ListRolePoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListRolePoliciesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListRolePoliciesRequest holds details about calls to the ListRolePoliciesRequest method.
		ListRolePoliciesRequest []struct {
			// ListRolePoliciesInput is the listRolePoliciesInput argument value.
			ListRolePoliciesInput *iam.ListRolePoliciesInput
		}
		// ListRolePoliciesWithContext holds details about calls to the ListRolePoliciesWithContext method.
		ListRolePoliciesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListRolePoliciesInput is the listRolePoliciesInput argument value.
			ListRolePoliciesInput *iam.ListRolePoliciesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListRoleTags holds details about calls to the ListRoleTags method.
		ListRoleTags []struct {
			// ListRoleTagsInput is the listRoleTagsInput argument value.
			ListRoleTagsInput *iam.ListRoleTagsInput
		}
		// ListRoleTagsRequest holds details about calls to the ListRoleTagsRequest method.
		ListRoleTagsRequest []struct {
			// ListRoleTagsInput is the listRoleTagsInput argument value.
			ListRoleTagsInput *iam.ListRoleTagsInput
		}
		// ListRoleTagsWithContext holds details about calls to the ListRoleTagsWithContext method.
		ListRoleTagsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListRoleTagsInput is the listRoleTagsInput argument value.
			ListRoleTagsInput *iam.ListRoleTagsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListRoles holds details about calls to the ListRoles method.
		ListRoles []struct {
			// ListRolesInput is the listRolesInput argument value.
			ListRolesInput *iam.ListRolesInput
		}
		// ListRolesPages holds details about calls to the ListRolesPages method.
		ListRolesPages []struct {
			// ListRolesInput is the listRolesInput argument value.
			ListRolesInput *iam.ListRolesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListRolesOutput, bool) bool
		}
		// ListRolesPagesWithContext holds details about calls to the ListRolesPagesWithContext method.
		ListRolesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListRolesInput is the listRolesInput argument value.
			ListRolesInput *iam.ListRolesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListRolesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListRolesRequest holds details about calls to the ListRolesRequest method.
		ListRolesRequest []struct {
			// ListRolesInput is the listRolesInput argument value.
			ListRolesInput *iam.ListRolesInput
		}
		// ListRolesWithContext holds details about calls to the ListRolesWithContext method.
		ListRolesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListRolesInput is the listRolesInput argument value.
			ListRolesInput *iam.ListRolesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSAMLProviders holds details about calls to the ListSAMLProviders method.
		ListSAMLProviders []struct {
			// ListSAMLProvidersInput is the listSAMLProvidersInput argument value.
			ListSAMLProvidersInput *iam.ListSAMLProvidersInput
		}
		// ListSAMLProvidersRequest holds details about calls to the ListSAMLProvidersRequest method.
		ListSAMLProvidersRequest []struct {
			// ListSAMLProvidersInput is the listSAMLProvidersInput argument value.
			ListSAMLProvidersInput *iam.ListSAMLProvidersInput
		}
		// ListSAMLProvidersWithContext holds details about calls to the ListSAMLProvidersWithContext method.
		ListSAMLProvidersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSAMLProvidersInput is the listSAMLProvidersInput argument value.
			ListSAMLProvidersInput *iam.ListSAMLProvidersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSSHPublicKeys holds details about calls to the ListSSHPublicKeys method.
		ListSSHPublicKeys []struct {
			// ListSSHPublicKeysInput is the listSSHPublicKeysInput argument value.
			ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		}
		// ListSSHPublicKeysPages holds details about calls to the ListSSHPublicKeysPages method.
		ListSSHPublicKeysPages []struct {
			// ListSSHPublicKeysInput is the listSSHPublicKeysInput argument value.
			ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
			// Fn is the fn argument value.
			Fn func(*iam.ListSSHPublicKeysOutput, bool) bool
		}
		// ListSSHPublicKeysPagesWithContext holds details about calls to the ListSSHPublicKeysPagesWithContext method.
		ListSSHPublicKeysPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSSHPublicKeysInput is the listSSHPublicKeysInput argument value.
			ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
			// Fn is the fn argument value.
			Fn func(*iam.ListSSHPublicKeysOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSSHPublicKeysRequest holds details about calls to the ListSSHPublicKeysRequest method.
		ListSSHPublicKeysRequest []struct {
			// ListSSHPublicKeysInput is the listSSHPublicKeysInput argument value.
			ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		}
		// ListSSHPublicKeysWithContext holds details about calls to the ListSSHPublicKeysWithContext method.
		ListSSHPublicKeysWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSSHPublicKeysInput is the listSSHPublicKeysInput argument value.
			ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListServerCertificates holds details about calls to the ListServerCertificates method.
		ListServerCertificates []struct {
			// ListServerCertificatesInput is the listServerCertificatesInput argument value.
			ListServerCertificatesInput *iam.ListServerCertificatesInput
		}
		// ListServerCertificatesPages holds details about calls to the ListServerCertificatesPages method.
		ListServerCertificatesPages []struct {
			// ListServerCertificatesInput is the listServerCertificatesInput argument value.
			ListServerCertificatesInput *iam.ListServerCertificatesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListServerCertificatesOutput, bool) bool
		}
		// ListServerCertificatesPagesWithContext holds details about calls to the ListServerCertificatesPagesWithContext method.
		ListServerCertificatesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListServerCertificatesInput is the listServerCertificatesInput argument value.
			ListServerCertificatesInput *iam.ListServerCertificatesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListServerCertificatesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListServerCertificatesRequest holds details about calls to the ListServerCertificatesRequest method.
		ListServerCertificatesRequest []struct {
			// ListServerCertificatesInput is the listServerCertificatesInput argument value.
			ListServerCertificatesInput *iam.ListServerCertificatesInput
		}
		// ListServerCertificatesWithContext holds details about calls to the ListServerCertificatesWithContext method.
		ListServerCertificatesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListServerCertificatesInput is the listServerCertificatesInput argument value.
			ListServerCertificatesInput *iam.ListServerCertificatesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListServiceSpecificCredentials holds details about calls to the ListServiceSpecificCredentials method.
		ListServiceSpecificCredentials []struct {
			// ListServiceSpecificCredentialsInput is the listServiceSpecificCredentialsInput argument value.
			ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
		}
		// ListServiceSpecificCredentialsRequest holds details about calls to the ListServiceSpecificCredentialsRequest method.
		ListServiceSpecificCredentialsRequest []struct {
			// ListServiceSpecificCredentialsInput is the listServiceSpecificCredentialsInput argument value.
			ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
		}
		// ListServiceSpecificCredentialsWithContext holds details about calls to the ListServiceSpecificCredentialsWithContext method.
		ListServiceSpecificCredentialsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListServiceSpecificCredentialsInput is the listServiceSpecificCredentialsInput argument value.
			ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSigningCertificates holds details about calls to the ListSigningCertificates method.
		ListSigningCertificates []struct {
			// ListSigningCertificatesInput is the listSigningCertificatesInput argument value.
			ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		}
		// ListSigningCertificatesPages holds details about calls to the ListSigningCertificatesPages method.
		ListSigningCertificatesPages []struct {
			// ListSigningCertificatesInput is the listSigningCertificatesInput argument value.
			ListSigningCertificatesInput *iam.ListSigningCertificatesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListSigningCertificatesOutput, bool) bool
		}
		// ListSigningCertificatesPagesWithContext holds details about calls to the ListSigningCertificatesPagesWithContext method.
		ListSigningCertificatesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSigningCertificatesInput is the listSigningCertificatesInput argument value.
			ListSigningCertificatesInput *iam.ListSigningCertificatesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListSigningCertificatesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSigningCertificatesRequest holds details about calls to the ListSigningCertificatesRequest method.
		ListSigningCertificatesRequest []struct {
			// ListSigningCertificatesInput is the listSigningCertificatesInput argument value.
			ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		}
		// ListSigningCertificatesWithContext holds details about calls to the ListSigningCertificatesWithContext method.
		ListSigningCertificatesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSigningCertificatesInput is the listSigningCertificatesInput argument value.
			ListSigningCertificatesInput *iam.ListSigningCertificatesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListUserPolicies holds details about calls to the ListUserPolicies method.
		ListUserPolicies []struct {
			// ListUserPoliciesInput is the listUserPoliciesInput argument value.
			ListUserPoliciesInput *iam.ListUserPoliciesInput
		}
		// ListUserPoliciesPages holds details about calls to the ListUserPoliciesPages method.
		ListUserPoliciesPages []struct {
			// ListUserPoliciesInput is the listUserPoliciesInput argument value.
			ListUserPoliciesInput *iam.ListUserPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListUserPoliciesOutput, bool) bool
		}
		// ListUserPoliciesPagesWithContext holds details about calls to the ListUserPoliciesPagesWithContext method.
		ListUserPoliciesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListUserPoliciesInput is the listUserPoliciesInput argument value.
			ListUserPoliciesInput *iam.ListUserPoliciesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListUserPoliciesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListUserPoliciesRequest holds details about calls to the ListUserPoliciesRequest method.
		ListUserPoliciesRequest []struct {
			// ListUserPoliciesInput is the listUserPoliciesInput argument value.
			ListUserPoliciesInput *iam.ListUserPoliciesInput
		}
		// ListUserPoliciesWithContext holds details about calls to the ListUserPoliciesWithContext method.
		ListUserPoliciesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListUserPoliciesInput is the listUserPoliciesInput argument value.
			ListUserPoliciesInput *iam.ListUserPoliciesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListUserTags holds details about calls to the ListUserTags method.
		ListUserTags []struct {
			// ListUserTagsInput is the listUserTagsInput argument value.
			ListUserTagsInput *iam.ListUserTagsInput
		}
		// ListUserTagsRequest holds details about calls to the ListUserTagsRequest method.
		ListUserTagsRequest []struct {
			// ListUserTagsInput is the listUserTagsInput argument value.
			ListUserTagsInput *iam.ListUserTagsInput
		}
		// ListUserTagsWithContext holds details about calls to the ListUserTagsWithContext method.
		ListUserTagsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListUserTagsInput is the listUserTagsInput argument value.
			ListUserTagsInput *iam.ListUserTagsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListUsers holds details about calls to the ListUsers method.
		ListUsers []struct {
			// ListUsersInput is the listUsersInput argument value.
			ListUsersInput *iam.ListUsersInput
		}
		// ListUsersPages holds details about calls to the ListUsersPages method.
		ListUsersPages []struct {
			// ListUsersInput is the listUsersInput argument value.
			ListUsersInput *iam.ListUsersInput
			// Fn is the fn argument value.
			Fn func(*iam.ListUsersOutput, bool) bool
		}
		// ListUsersPagesWithContext holds details about calls to the ListUsersPagesWithContext method.
		ListUsersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListUsersInput is the listUsersInput argument value.
			ListUsersInput *iam.ListUsersInput
			// Fn is the fn argument value.
			Fn func(*iam.ListUsersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListUsersRequest holds details about calls to the ListUsersRequest method.
		ListUsersRequest []struct {
			// ListUsersInput is the listUsersInput argument value.
			ListUsersInput *iam.ListUsersInput
		}
		// ListUsersWithContext holds details about calls to the ListUsersWithContext method.
		ListUsersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListUsersInput is the listUsersInput argument value.
			ListUsersInput *iam.ListUsersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListVirtualMFADevices holds details about calls to the ListVirtualMFADevices method.
		ListVirtualMFADevices []struct {
			// ListVirtualMFADevicesInput is the listVirtualMFADevicesInput argument value.
			ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		}
		// ListVirtualMFADevicesPages holds details about calls to the ListVirtualMFADevicesPages method.
		ListVirtualMFADevicesPages []struct {
			// ListVirtualMFADevicesInput is the listVirtualMFADevicesInput argument value.
			ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListVirtualMFADevicesOutput, bool) bool
		}
		// ListVirtualMFADevicesPagesWithContext holds details about calls to the ListVirtualMFADevicesPagesWithContext method.
		ListVirtualMFADevicesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListVirtualMFADevicesInput is the listVirtualMFADevicesInput argument value.
			ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
			// Fn is the fn argument value.
			Fn func(*iam.ListVirtualMFADevicesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListVirtualMFADevicesRequest holds details about calls to the ListVirtualMFADevicesRequest method.
		ListVirtualMFADevicesRequest []struct {
			// ListVirtualMFADevicesInput is the listVirtualMFADevicesInput argument value.
			ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		}
		// ListVirtualMFADevicesWithContext holds details about calls to the ListVirtualMFADevicesWithContext method.
		ListVirtualMFADevicesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListVirtualMFADevicesInput is the listVirtualMFADevicesInput argument value.
			ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutGroupPolicy holds details about calls to the PutGroupPolicy method.
		PutGroupPolicy []struct {
			// PutGroupPolicyInput is the putGroupPolicyInput argument value.
			PutGroupPolicyInput *iam.PutGroupPolicyInput
		}
		// PutGroupPolicyRequest holds details about calls to the PutGroupPolicyRequest method.
		PutGroupPolicyRequest []struct {
			// PutGroupPolicyInput is the putGroupPolicyInput argument value.
			PutGroupPolicyInput *iam.PutGroupPolicyInput
		}
		// PutGroupPolicyWithContext holds details about calls to the PutGroupPolicyWithContext method.
		PutGroupPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutGroupPolicyInput is the putGroupPolicyInput argument value.
			PutGroupPolicyInput *iam.PutGroupPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutRolePermissionsBoundary holds details about calls to the PutRolePermissionsBoundary method.
		PutRolePermissionsBoundary []struct {
			// PutRolePermissionsBoundaryInput is the putRolePermissionsBoundaryInput argument value.
			PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
		}
		// PutRolePermissionsBoundaryRequest holds details about calls to the PutRolePermissionsBoundaryRequest method.
		PutRolePermissionsBoundaryRequest []struct {
			// PutRolePermissionsBoundaryInput is the putRolePermissionsBoundaryInput argument value.
			PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
		}
		// PutRolePermissionsBoundaryWithContext holds details about calls to the PutRolePermissionsBoundaryWithContext method.
		PutRolePermissionsBoundaryWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutRolePermissionsBoundaryInput is the putRolePermissionsBoundaryInput argument value.
			PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutRolePolicy holds details about calls to the PutRolePolicy method.
		PutRolePolicy []struct {
			// PutRolePolicyInput is the putRolePolicyInput argument value.
			PutRolePolicyInput *iam.PutRolePolicyInput
		}
		// PutRolePolicyRequest holds details about calls to the PutRolePolicyRequest method.
		PutRolePolicyRequest []struct {
			// PutRolePolicyInput is the putRolePolicyInput argument value.
			PutRolePolicyInput *iam.PutRolePolicyInput
		}
		// PutRolePolicyWithContext holds details about calls to the PutRolePolicyWithContext method.
		PutRolePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutRolePolicyInput is the putRolePolicyInput argument value.
			PutRolePolicyInput *iam.PutRolePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutUserPermissionsBoundary holds details about calls to the PutUserPermissionsBoundary method.
		PutUserPermissionsBoundary []struct {
			// PutUserPermissionsBoundaryInput is the putUserPermissionsBoundaryInput argument value.
			PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
		}
		// PutUserPermissionsBoundaryRequest holds details about calls to the PutUserPermissionsBoundaryRequest method.
		PutUserPermissionsBoundaryRequest []struct {
			// PutUserPermissionsBoundaryInput is the putUserPermissionsBoundaryInput argument value.
			PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
		}
		// PutUserPermissionsBoundaryWithContext holds details about calls to the PutUserPermissionsBoundaryWithContext method.
		PutUserPermissionsBoundaryWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutUserPermissionsBoundaryInput is the putUserPermissionsBoundaryInput argument value.
			PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutUserPolicy holds details about calls to the PutUserPolicy method.
		PutUserPolicy []struct {
			// PutUserPolicyInput is the putUserPolicyInput argument value.
			PutUserPolicyInput *iam.PutUserPolicyInput
		}
		// PutUserPolicyRequest holds details about calls to the PutUserPolicyRequest method.
		PutUserPolicyRequest []struct {
			// PutUserPolicyInput is the putUserPolicyInput argument value.
			PutUserPolicyInput *iam.PutUserPolicyInput
		}
		// PutUserPolicyWithContext holds details about calls to the PutUserPolicyWithContext method.
		PutUserPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutUserPolicyInput is the putUserPolicyInput argument value.
			PutUserPolicyInput *iam.PutUserPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveClientIDFromOpenIDConnectProvider holds details about calls to the RemoveClientIDFromOpenIDConnectProvider method.
		RemoveClientIDFromOpenIDConnectProvider []struct {
			// RemoveClientIDFromOpenIDConnectProviderInput is the removeClientIDFromOpenIDConnectProviderInput argument value.
			RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
		}
		// RemoveClientIDFromOpenIDConnectProviderRequest holds details about calls to the RemoveClientIDFromOpenIDConnectProviderRequest method.
		RemoveClientIDFromOpenIDConnectProviderRequest []struct {
			// RemoveClientIDFromOpenIDConnectProviderInput is the removeClientIDFromOpenIDConnectProviderInput argument value.
			RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
		}
		// RemoveClientIDFromOpenIDConnectProviderWithContext holds details about calls to the RemoveClientIDFromOpenIDConnectProviderWithContext method.
		RemoveClientIDFromOpenIDConnectProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveClientIDFromOpenIDConnectProviderInput is the removeClientIDFromOpenIDConnectProviderInput argument value.
			RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveRoleFromInstanceProfile holds details about calls to the RemoveRoleFromInstanceProfile method.
		RemoveRoleFromInstanceProfile []struct {
			// RemoveRoleFromInstanceProfileInput is the removeRoleFromInstanceProfileInput argument value.
			RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
		}
		// RemoveRoleFromInstanceProfileRequest holds details about calls to the RemoveRoleFromInstanceProfileRequest method.
		RemoveRoleFromInstanceProfileRequest []struct {
			// RemoveRoleFromInstanceProfileInput is the removeRoleFromInstanceProfileInput argument value.
			RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
		}
		// RemoveRoleFromInstanceProfileWithContext holds details about calls to the RemoveRoleFromInstanceProfileWithContext method.
		RemoveRoleFromInstanceProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveRoleFromInstanceProfileInput is the removeRoleFromInstanceProfileInput argument value.
			RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveUserFromGroup holds details about calls to the RemoveUserFromGroup method.
		RemoveUserFromGroup []struct {
			// RemoveUserFromGroupInput is the removeUserFromGroupInput argument value.
			RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
		}
		// RemoveUserFromGroupRequest holds details about calls to the RemoveUserFromGroupRequest method.
		RemoveUserFromGroupRequest []struct {
			// RemoveUserFromGroupInput is the removeUserFromGroupInput argument value.
			RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
		}
		// RemoveUserFromGroupWithContext holds details about calls to the RemoveUserFromGroupWithContext method.
		RemoveUserFromGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveUserFromGroupInput is the removeUserFromGroupInput argument value.
			RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ResetServiceSpecificCredential holds details about calls to the ResetServiceSpecificCredential method.
		ResetServiceSpecificCredential []struct {
			// ResetServiceSpecificCredentialInput is the resetServiceSpecificCredentialInput argument value.
			ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
		}
		// ResetServiceSpecificCredentialRequest holds details about calls to the ResetServiceSpecificCredentialRequest method.
		ResetServiceSpecificCredentialRequest []struct {
			// ResetServiceSpecificCredentialInput is the resetServiceSpecificCredentialInput argument value.
			ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
		}
		// ResetServiceSpecificCredentialWithContext holds details about calls to the ResetServiceSpecificCredentialWithContext method.
		ResetServiceSpecificCredentialWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ResetServiceSpecificCredentialInput is the resetServiceSpecificCredentialInput argument value.
			ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ResyncMFADevice holds details about calls to the ResyncMFADevice method.
		ResyncMFADevice []struct {
			// ResyncMFADeviceInput is the resyncMFADeviceInput argument value.
			ResyncMFADeviceInput *iam.ResyncMFADeviceInput
		}
		// ResyncMFADeviceRequest holds details about calls to the ResyncMFADeviceRequest method.
		ResyncMFADeviceRequest []struct {
			// ResyncMFADeviceInput is the resyncMFADeviceInput argument value.
			ResyncMFADeviceInput *iam.ResyncMFADeviceInput
		}
		// ResyncMFADeviceWithContext holds details about calls to the ResyncMFADeviceWithContext method.
		ResyncMFADeviceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ResyncMFADeviceInput is the resyncMFADeviceInput argument value.
			ResyncMFADeviceInput *iam.ResyncMFADeviceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SetDefaultPolicyVersion holds details about calls to the SetDefaultPolicyVersion method.
		SetDefaultPolicyVersion []struct {
			// SetDefaultPolicyVersionInput is the setDefaultPolicyVersionInput argument value.
			SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
		}
		// SetDefaultPolicyVersionRequest holds details about calls to the SetDefaultPolicyVersionRequest method.
		SetDefaultPolicyVersionRequest []struct {
			// SetDefaultPolicyVersionInput is the setDefaultPolicyVersionInput argument value.
			SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
		}
		// SetDefaultPolicyVersionWithContext holds details about calls to the SetDefaultPolicyVersionWithContext method.
		SetDefaultPolicyVersionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SetDefaultPolicyVersionInput is the setDefaultPolicyVersionInput argument value.
			SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SetSecurityTokenServicePreferences holds details about calls to the SetSecurityTokenServicePreferences method.
		SetSecurityTokenServicePreferences []struct {
			// SetSecurityTokenServicePreferencesInput is the setSecurityTokenServicePreferencesInput argument value.
			SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
		}
		// SetSecurityTokenServicePreferencesRequest holds details about calls to the SetSecurityTokenServicePreferencesRequest method.
		SetSecurityTokenServicePreferencesRequest []struct {
			// SetSecurityTokenServicePreferencesInput is the setSecurityTokenServicePreferencesInput argument value.
			SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
		}
		// SetSecurityTokenServicePreferencesWithContext holds details about calls to the SetSecurityTokenServicePreferencesWithContext method.
		SetSecurityTokenServicePreferencesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SetSecurityTokenServicePreferencesInput is the setSecurityTokenServicePreferencesInput argument value.
			SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SimulateCustomPolicy holds details about calls to the SimulateCustomPolicy method.
		SimulateCustomPolicy []struct {
			// SimulateCustomPolicyInput is the simulateCustomPolicyInput argument value.
			SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		}
		// SimulateCustomPolicyPages holds details about calls to the SimulateCustomPolicyPages method.
		SimulateCustomPolicyPages []struct {
			// SimulateCustomPolicyInput is the simulateCustomPolicyInput argument value.
			SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
			// Fn is the fn argument value.
			Fn func(*iam.SimulatePolicyResponse, bool) bool
		}
		// SimulateCustomPolicyPagesWithContext holds details about calls to the SimulateCustomPolicyPagesWithContext method.
		SimulateCustomPolicyPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SimulateCustomPolicyInput is the simulateCustomPolicyInput argument value.
			SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
			// Fn is the fn argument value.
			Fn func(*iam.SimulatePolicyResponse, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// SimulateCustomPolicyRequest holds details about calls to the SimulateCustomPolicyRequest method.
		SimulateCustomPolicyRequest []struct {
			// SimulateCustomPolicyInput is the simulateCustomPolicyInput argument value.
			SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		}
		// SimulateCustomPolicyWithContext holds details about calls to the SimulateCustomPolicyWithContext method.
		SimulateCustomPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SimulateCustomPolicyInput is the simulateCustomPolicyInput argument value.
			SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SimulatePrincipalPolicy holds details about calls to the SimulatePrincipalPolicy method.
		SimulatePrincipalPolicy []struct {
			// SimulatePrincipalPolicyInput is the simulatePrincipalPolicyInput argument value.
			SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		}
		// SimulatePrincipalPolicyPages holds details about calls to the SimulatePrincipalPolicyPages method.
		SimulatePrincipalPolicyPages []struct {
			// SimulatePrincipalPolicyInput is the simulatePrincipalPolicyInput argument value.
			SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
			// Fn is the fn argument value.
			Fn func(*iam.SimulatePolicyResponse, bool) bool
		}
		// SimulatePrincipalPolicyPagesWithContext holds details about calls to the SimulatePrincipalPolicyPagesWithContext method.
		SimulatePrincipalPolicyPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SimulatePrincipalPolicyInput is the simulatePrincipalPolicyInput argument value.
			SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
			// Fn is the fn argument value.
			Fn func(*iam.SimulatePolicyResponse, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// SimulatePrincipalPolicyRequest holds details about calls to the SimulatePrincipalPolicyRequest method.
		SimulatePrincipalPolicyRequest []struct {
			// SimulatePrincipalPolicyInput is the simulatePrincipalPolicyInput argument value.
			SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		}
		// SimulatePrincipalPolicyWithContext holds details about calls to the SimulatePrincipalPolicyWithContext method.
		SimulatePrincipalPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SimulatePrincipalPolicyInput is the simulatePrincipalPolicyInput argument value.
			SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// TagRole holds details about calls to the TagRole method.
		TagRole []struct {
			// TagRoleInput is the tagRoleInput argument value.
			TagRoleInput *iam.TagRoleInput
		}
		// TagRoleRequest holds details about calls to the TagRoleRequest method.
		TagRoleRequest []struct {
			// TagRoleInput is the tagRoleInput argument value.
			TagRoleInput *iam.TagRoleInput
		}
		// TagRoleWithContext holds details about calls to the TagRoleWithContext method.
		TagRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// TagRoleInput is the tagRoleInput argument value.
			TagRoleInput *iam.TagRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// TagUser holds details about calls to the TagUser method.
		TagUser []struct {
			// TagUserInput is the tagUserInput argument value.
			TagUserInput *iam.TagUserInput
		}
		// TagUserRequest holds details about calls to the TagUserRequest method.
		TagUserRequest []struct {
			// TagUserInput is the tagUserInput argument value.
			TagUserInput *iam.TagUserInput
		}
		// TagUserWithContext holds details about calls to the TagUserWithContext method.
		TagUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// TagUserInput is the tagUserInput argument value.
			TagUserInput *iam.TagUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UntagRole holds details about calls to the UntagRole method.
		UntagRole []struct {
			// UntagRoleInput is the untagRoleInput argument value.
			UntagRoleInput *iam.UntagRoleInput
		}
		// UntagRoleRequest holds details about calls to the UntagRoleRequest method.
		UntagRoleRequest []struct {
			// UntagRoleInput is the untagRoleInput argument value.
			UntagRoleInput *iam.UntagRoleInput
		}
		// UntagRoleWithContext holds details about calls to the UntagRoleWithContext method.
		UntagRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UntagRoleInput is the untagRoleInput argument value.
			UntagRoleInput *iam.UntagRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UntagUser holds details about calls to the UntagUser method.
		UntagUser []struct {
			// UntagUserInput is the untagUserInput argument value.
			UntagUserInput *iam.UntagUserInput
		}
		// UntagUserRequest holds details about calls to the UntagUserRequest method.
		UntagUserRequest []struct {
			// UntagUserInput is the untagUserInput argument value.
			UntagUserInput *iam.UntagUserInput
		}
		// UntagUserWithContext holds details about calls to the UntagUserWithContext method.
		UntagUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UntagUserInput is the untagUserInput argument value.
			UntagUserInput *iam.UntagUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateAccessKey holds details about calls to the UpdateAccessKey method.
		UpdateAccessKey []struct {
			// UpdateAccessKeyInput is the updateAccessKeyInput argument value.
			UpdateAccessKeyInput *iam.UpdateAccessKeyInput
		}
		// UpdateAccessKeyRequest holds details about calls to the UpdateAccessKeyRequest method.
		UpdateAccessKeyRequest []struct {
			// UpdateAccessKeyInput is the updateAccessKeyInput argument value.
			UpdateAccessKeyInput *iam.UpdateAccessKeyInput
		}
		// UpdateAccessKeyWithContext holds details about calls to the UpdateAccessKeyWithContext method.
		UpdateAccessKeyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateAccessKeyInput is the updateAccessKeyInput argument value.
			UpdateAccessKeyInput *iam.UpdateAccessKeyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateAccountPasswordPolicy holds details about calls to the UpdateAccountPasswordPolicy method.
		UpdateAccountPasswordPolicy []struct {
			// UpdateAccountPasswordPolicyInput is the updateAccountPasswordPolicyInput argument value.
			UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
		}
		// UpdateAccountPasswordPolicyRequest holds details about calls to the UpdateAccountPasswordPolicyRequest method.
		UpdateAccountPasswordPolicyRequest []struct {
			// UpdateAccountPasswordPolicyInput is the updateAccountPasswordPolicyInput argument value.
			UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
		}
		// UpdateAccountPasswordPolicyWithContext holds details about calls to the UpdateAccountPasswordPolicyWithContext method.
		UpdateAccountPasswordPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateAccountPasswordPolicyInput is the updateAccountPasswordPolicyInput argument value.
			UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateAssumeRolePolicy holds details about calls to the UpdateAssumeRolePolicy method.
		UpdateAssumeRolePolicy []struct {
			// UpdateAssumeRolePolicyInput is the updateAssumeRolePolicyInput argument value.
			UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
		}
		// UpdateAssumeRolePolicyRequest holds details about calls to the UpdateAssumeRolePolicyRequest method.
		UpdateAssumeRolePolicyRequest []struct {
			// UpdateAssumeRolePolicyInput is the updateAssumeRolePolicyInput argument value.
			UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
		}
		// UpdateAssumeRolePolicyWithContext holds details about calls to the UpdateAssumeRolePolicyWithContext method.
		UpdateAssumeRolePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateAssumeRolePolicyInput is the updateAssumeRolePolicyInput argument value.
			UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateGroup holds details about calls to the UpdateGroup method.
		UpdateGroup []struct {
			// UpdateGroupInput is the updateGroupInput argument value.
			UpdateGroupInput *iam.UpdateGroupInput
		}
		// UpdateGroupRequest holds details about calls to the UpdateGroupRequest method.
		UpdateGroupRequest []struct {
			// UpdateGroupInput is the updateGroupInput argument value.
			UpdateGroupInput *iam.UpdateGroupInput
		}
		// UpdateGroupWithContext holds details about calls to the UpdateGroupWithContext method.
		UpdateGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateGroupInput is the updateGroupInput argument value.
			UpdateGroupInput *iam.UpdateGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateLoginProfile holds details about calls to the UpdateLoginProfile method.
		UpdateLoginProfile []struct {
			// UpdateLoginProfileInput is the updateLoginProfileInput argument value.
			UpdateLoginProfileInput *iam.UpdateLoginProfileInput
		}
		// UpdateLoginProfileRequest holds details about calls to the UpdateLoginProfileRequest method.
		UpdateLoginProfileRequest []struct {
			// UpdateLoginProfileInput is the updateLoginProfileInput argument value.
			UpdateLoginProfileInput *iam.UpdateLoginProfileInput
		}
		// UpdateLoginProfileWithContext holds details about calls to the UpdateLoginProfileWithContext method.
		UpdateLoginProfileWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateLoginProfileInput is the updateLoginProfileInput argument value.
			UpdateLoginProfileInput *iam.UpdateLoginProfileInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateOpenIDConnectProviderThumbprint holds details about calls to the UpdateOpenIDConnectProviderThumbprint method.
		UpdateOpenIDConnectProviderThumbprint []struct {
			// UpdateOpenIDConnectProviderThumbprintInput is the updateOpenIDConnectProviderThumbprintInput argument value.
			UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
		}
		// UpdateOpenIDConnectProviderThumbprintRequest holds details about calls to the UpdateOpenIDConnectProviderThumbprintRequest method.
		UpdateOpenIDConnectProviderThumbprintRequest []struct {
			// UpdateOpenIDConnectProviderThumbprintInput is the updateOpenIDConnectProviderThumbprintInput argument value.
			UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
		}
		// UpdateOpenIDConnectProviderThumbprintWithContext holds details about calls to the UpdateOpenIDConnectProviderThumbprintWithContext method.
		UpdateOpenIDConnectProviderThumbprintWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateOpenIDConnectProviderThumbprintInput is the updateOpenIDConnectProviderThumbprintInput argument value.
			UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateRole holds details about calls to the UpdateRole method.
		UpdateRole []struct {
			// UpdateRoleInput is the updateRoleInput argument value.
			UpdateRoleInput *iam.UpdateRoleInput
		}
		// UpdateRoleDescription holds details about calls to the UpdateRoleDescription method.
		UpdateRoleDescription []struct {
			// UpdateRoleDescriptionInput is the updateRoleDescriptionInput argument value.
			UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
		}
		// UpdateRoleDescriptionRequest holds details about calls to the UpdateRoleDescriptionRequest method.
		UpdateRoleDescriptionRequest []struct {
			// UpdateRoleDescriptionInput is the updateRoleDescriptionInput argument value.
			UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
		}
		// UpdateRoleDescriptionWithContext holds details about calls to the UpdateRoleDescriptionWithContext method.
		UpdateRoleDescriptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateRoleDescriptionInput is the updateRoleDescriptionInput argument value.
			UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateRoleRequest holds details about calls to the UpdateRoleRequest method.
		UpdateRoleRequest []struct {
			// UpdateRoleInput is the updateRoleInput argument value.
			UpdateRoleInput *iam.UpdateRoleInput
		}
		// UpdateRoleWithContext holds details about calls to the UpdateRoleWithContext method.
		UpdateRoleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateRoleInput is the updateRoleInput argument value.
			UpdateRoleInput *iam.UpdateRoleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateSAMLProvider holds details about calls to the UpdateSAMLProvider method.
		UpdateSAMLProvider []struct {
			// UpdateSAMLProviderInput is the updateSAMLProviderInput argument value.
			UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
		}
		// UpdateSAMLProviderRequest holds details about calls to the UpdateSAMLProviderRequest method.
		UpdateSAMLProviderRequest []struct {
			// UpdateSAMLProviderInput is the updateSAMLProviderInput argument value.
			UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
		}
		// UpdateSAMLProviderWithContext holds details about calls to the UpdateSAMLProviderWithContext method.
		UpdateSAMLProviderWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateSAMLProviderInput is the updateSAMLProviderInput argument value.
			UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateSSHPublicKey holds details about calls to the UpdateSSHPublicKey method.
		UpdateSSHPublicKey []struct {
			// UpdateSSHPublicKeyInput is the updateSSHPublicKeyInput argument value.
			UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
		}
		// UpdateSSHPublicKeyRequest holds details about calls to the UpdateSSHPublicKeyRequest method.
		UpdateSSHPublicKeyRequest []struct {
			// UpdateSSHPublicKeyInput is the updateSSHPublicKeyInput argument value.
			UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
		}
		// UpdateSSHPublicKeyWithContext holds details about calls to the UpdateSSHPublicKeyWithContext method.
		UpdateSSHPublicKeyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateSSHPublicKeyInput is the updateSSHPublicKeyInput argument value.
			UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateServerCertificate holds details about calls to the UpdateServerCertificate method.
		UpdateServerCertificate []struct {
			// UpdateServerCertificateInput is the updateServerCertificateInput argument value.
			UpdateServerCertificateInput *iam.UpdateServerCertificateInput
		}
		// UpdateServerCertificateRequest holds details about calls to the UpdateServerCertificateRequest method.
		UpdateServerCertificateRequest []struct {
			// UpdateServerCertificateInput is the updateServerCertificateInput argument value.
			UpdateServerCertificateInput *iam.UpdateServerCertificateInput
		}
		// UpdateServerCertificateWithContext holds details about calls to the UpdateServerCertificateWithContext method.
		UpdateServerCertificateWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateServerCertificateInput is the updateServerCertificateInput argument value.
			UpdateServerCertificateInput *iam.UpdateServerCertificateInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateServiceSpecificCredential holds details about calls to the UpdateServiceSpecificCredential method.
		UpdateServiceSpecificCredential []struct {
			// UpdateServiceSpecificCredentialInput is the updateServiceSpecificCredentialInput argument value.
			UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
		}
		// UpdateServiceSpecificCredentialRequest holds details about calls to the UpdateServiceSpecificCredentialRequest method.
		UpdateServiceSpecificCredentialRequest []struct {
			// UpdateServiceSpecificCredentialInput is the updateServiceSpecificCredentialInput argument value.
			UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
		}
		// UpdateServiceSpecificCredentialWithContext holds details about calls to the UpdateServiceSpecificCredentialWithContext method.
		UpdateServiceSpecificCredentialWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateServiceSpecificCredentialInput is the updateServiceSpecificCredentialInput argument value.
			UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateSigningCertificate holds details about calls to the UpdateSigningCertificate method.
		UpdateSigningCertificate []struct {
			// UpdateSigningCertificateInput is the updateSigningCertificateInput argument value.
			UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
		}
		// UpdateSigningCertificateRequest holds details about calls to the UpdateSigningCertificateRequest method.
		UpdateSigningCertificateRequest []struct {
			// UpdateSigningCertificateInput is the updateSigningCertificateInput argument value.
			UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
		}
		// UpdateSigningCertificateWithContext holds details about calls to the UpdateSigningCertificateWithContext method.
		UpdateSigningCertificateWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateSigningCertificateInput is the updateSigningCertificateInput argument value.
			UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// UpdateUserInput is the updateUserInput argument value.
			UpdateUserInput *iam.UpdateUserInput
		}
		// UpdateUserRequest holds details about calls to the UpdateUserRequest method.
		UpdateUserRequest []struct {
			// UpdateUserInput is the updateUserInput argument value.
			UpdateUserInput *iam.UpdateUserInput
		}
		// UpdateUserWithContext holds details about calls to the UpdateUserWithContext method.
		UpdateUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateUserInput is the updateUserInput argument value.
			UpdateUserInput *iam.UpdateUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UploadSSHPublicKey holds details about calls to the UploadSSHPublicKey method.
		UploadSSHPublicKey []struct {
			// UploadSSHPublicKeyInput is the uploadSSHPublicKeyInput argument value.
			UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
		}
		// UploadSSHPublicKeyRequest holds details about calls to the UploadSSHPublicKeyRequest method.
		UploadSSHPublicKeyRequest []struct {
			// UploadSSHPublicKeyInput is the uploadSSHPublicKeyInput argument value.
			UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
		}
		// UploadSSHPublicKeyWithContext holds details about calls to the UploadSSHPublicKeyWithContext method.
		UploadSSHPublicKeyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadSSHPublicKeyInput is the uploadSSHPublicKeyInput argument value.
			UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UploadServerCertificate holds details about calls to the UploadServerCertificate method.
		UploadServerCertificate []struct {
			// UploadServerCertificateInput is the uploadServerCertificateInput argument value.
			UploadServerCertificateInput *iam.UploadServerCertificateInput
		}
		// UploadServerCertificateRequest holds details about calls to the UploadServerCertificateRequest method.
		UploadServerCertificateRequest []struct {
			// UploadServerCertificateInput is the uploadServerCertificateInput argument value.
			UploadServerCertificateInput *iam.UploadServerCertificateInput
		}
		// UploadServerCertificateWithContext holds details about calls to the UploadServerCertificateWithContext method.
		UploadServerCertificateWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadServerCertificateInput is the uploadServerCertificateInput argument value.
			UploadServerCertificateInput *iam.UploadServerCertificateInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UploadSigningCertificate holds details about calls to the UploadSigningCertificate method.
		UploadSigningCertificate []struct {
			// UploadSigningCertificateInput is the uploadSigningCertificateInput argument value.
			UploadSigningCertificateInput *iam.UploadSigningCertificateInput
		}
		// UploadSigningCertificateRequest holds details about calls to the UploadSigningCertificateRequest method.
		UploadSigningCertificateRequest []struct {
			// UploadSigningCertificateInput is the uploadSigningCertificateInput argument value.
			UploadSigningCertificateInput *iam.UploadSigningCertificateInput
		}
		// UploadSigningCertificateWithContext holds details about calls to the UploadSigningCertificateWithContext method.
		UploadSigningCertificateWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadSigningCertificateInput is the uploadSigningCertificateInput argument value.
			UploadSigningCertificateInput *iam.UploadSigningCertificateInput
			// Options is the options argument value.
			Options []request.Option
		}
		// WaitUntilInstanceProfileExists holds details about calls to the WaitUntilInstanceProfileExists method.
		WaitUntilInstanceProfileExists []struct {
			// GetInstanceProfileInput is the getInstanceProfileInput argument value.
			GetInstanceProfileInput *iam.GetInstanceProfileInput
		}
		// WaitUntilInstanceProfileExistsWithContext holds details about calls to the WaitUntilInstanceProfileExistsWithContext method.
		WaitUntilInstanceProfileExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetInstanceProfileInput is the getInstanceProfileInput argument value.
			GetInstanceProfileInput *iam.GetInstanceProfileInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilPolicyExists holds details about calls to the WaitUntilPolicyExists method.
		WaitUntilPolicyExists []struct {
			// GetPolicyInput is the getPolicyInput argument value.
			GetPolicyInput *iam.GetPolicyInput
		}
		// WaitUntilPolicyExistsWithContext holds details about calls to the WaitUntilPolicyExistsWithContext method.
		WaitUntilPolicyExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetPolicyInput is the getPolicyInput argument value.
			GetPolicyInput *iam.GetPolicyInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilRoleExists holds details about calls to the WaitUntilRoleExists method.
		WaitUntilRoleExists []struct {
			// GetRoleInput is the getRoleInput argument value.
			GetRoleInput *iam.GetRoleInput
		}
		// WaitUntilRoleExistsWithContext holds details about calls to the WaitUntilRoleExistsWithContext method.
		WaitUntilRoleExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetRoleInput is the getRoleInput argument value.
			GetRoleInput *iam.GetRoleInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilUserExists holds details about calls to the WaitUntilUserExists method.
		WaitUntilUserExists []struct {
			// GetUserInput is the getUserInput argument value.
			GetUserInput *iam.GetUserInput
		}
		// WaitUntilUserExistsWithContext holds details about calls to the WaitUntilUserExistsWithContext method.
		WaitUntilUserExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetUserInput is the getUserInput argument value.
			GetUserInput *iam.GetUserInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
	}
	lockAddClientIDToOpenIDConnectProvider                   sync.RWMutex
	lockAddClientIDToOpenIDConnectProviderRequest            sync.RWMutex
	lockAddClientIDToOpenIDConnectProviderWithContext        sync.RWMutex
	lockAddRoleToInstanceProfile                             sync.RWMutex
	lockAddRoleToInstanceProfileRequest                      sync.RWMutex
	lockAddRoleToInstanceProfileWithContext                  sync.RWMutex
	lockAddUserToGroup                                       sync.RWMutex
	lockAddUserToGroupRequest                                sync.RWMutex
	lockAddUserToGroupWithContext                            sync.RWMutex
	lockAttachGroupPolicy                                    sync.RWMutex
	lockAttachGroupPolicyRequest                             sync.RWMutex
	lockAttachGroupPolicyWithContext                         sync.RWMutex
	lockAttachRolePolicy                                     sync.RWMutex
	lockAttachRolePolicyRequest                              sync.RWMutex
	lockAttachRolePolicyWithContext                          sync.RWMutex
	lockAttachUserPolicy                                     sync.RWMutex
	lockAttachUserPolicyRequest                              sync.RWMutex
	lockAttachUserPolicyWithContext                          sync.RWMutex
	lockChangePassword                                       sync.RWMutex
	lockChangePasswordRequest                                sync.RWMutex
	lockChangePasswordWithContext                            sync.RWMutex
	lockCreateAccessKey                                      sync.RWMutex
	lockCreateAccessKeyRequest                               sync.RWMutex
	lockCreateAccessKeyWithContext                           sync.RWMutex
	lockCreateAccountAlias                                   sync.RWMutex
	lockCreateAccountAliasRequest                            sync.RWMutex
	lockCreateAccountAliasWithContext                        sync.RWMutex
	lockCreateGroup                                          sync.RWMutex
	lockCreateGroupRequest                                   sync.RWMutex
	lockCreateGroupWithContext                               sync.RWMutex
	lockCreateInstanceProfile                                sync.RWMutex
	lockCreateInstanceProfileRequest                         sync.RWMutex
	lockCreateInstanceProfileWithContext                     sync.RWMutex
	lockCreateLoginProfile                                   sync.RWMutex
	lockCreateLoginProfileRequest                            sync.RWMutex
	lockCreateLoginProfileWithContext                        sync.RWMutex
	lockCreateOpenIDConnectProvider                          sync.RWMutex
	lockCreateOpenIDConnectProviderRequest                   sync.RWMutex
	lockCreateOpenIDConnectProviderWithContext               sync.RWMutex
	lockCreatePolicy                                         sync.RWMutex
	lockCreatePolicyRequest                                  sync.RWMutex
	lockCreatePolicyVersion                                  sync.RWMutex
	lockCreatePolicyVersionRequest                           sync.RWMutex
	lockCreatePolicyVersionWithContext                       sync.RWMutex
	lockCreatePolicyWithContext                              sync.RWMutex
	lockCreateRole                                           sync.RWMutex
	lockCreateRoleRequest                                    sync.RWMutex
	lockCreateRoleWithContext                                sync.RWMutex
	lockCreateSAMLProvider                                   sync.RWMutex
	lockCreateSAMLProviderRequest                            sync.RWMutex
	lockCreateSAMLProviderWithContext                        sync.RWMutex
	lockCreateServiceLinkedRole                              sync.RWMutex
	lockCreateServiceLinkedRoleRequest                       sync.RWMutex
	lockCreateServiceLinkedRoleWithContext                   sync.RWMutex
	lockCreateServiceSpecificCredential                      sync.RWMutex
	lockCreateServiceSpecificCredentialRequest               sync.RWMutex
	lockCreateServiceSpecificCredentialWithContext           sync.RWMutex
	lockCreateUser                                           sync.RWMutex
	lockCreateUserRequest                                    sync.RWMutex
	lockCreateUserWithContext                                sync.RWMutex
	lockCreateVirtualMFADevice                               sync.RWMutex
	lockCreateVirtualMFADeviceRequest                        sync.RWMutex
	lockCreateVirtualMFADeviceWithContext                    sync.RWMutex
	lockDeactivateMFADevice                                  sync.RWMutex
	lockDeactivateMFADeviceRequest                           sync.RWMutex
	lockDeactivateMFADeviceWithContext                       sync.RWMutex
	lockDeleteAccessKey                                      sync.RWMutex
	lockDeleteAccessKeyRequest                               sync.RWMutex
	lockDeleteAccessKeyWithContext                           sync.RWMutex
	lockDeleteAccountAlias                                   sync.RWMutex
	lockDeleteAccountAliasRequest                            sync.RWMutex
	lockDeleteAccountAliasWithContext                        sync.RWMutex
	lockDeleteAccountPasswordPolicy                          sync.RWMutex
	lockDeleteAccountPasswordPolicyRequest                   sync.RWMutex
	lockDeleteAccountPasswordPolicyWithContext               sync.RWMutex
	lockDeleteGroup                                          sync.RWMutex
	lockDeleteGroupPolicy                                    sync.RWMutex
	lockDeleteGroupPolicyRequest                             sync.RWMutex
	lockDeleteGroupPolicyWithContext                         sync.RWMutex
	lockDeleteGroupRequest                                   sync.RWMutex
	lockDeleteGroupWithContext                               sync.RWMutex
	lockDeleteInstanceProfile                                sync.RWMutex
	lockDeleteInstanceProfileRequest                         sync.RWMutex
	lockDeleteInstanceProfileWithContext                     sync.RWMutex
	lockDeleteLoginProfile                                   sync.RWMutex
	lockDeleteLoginProfileRequest                            sync.RWMutex
	lockDeleteLoginProfileWithContext                        sync.RWMutex
	lockDeleteOpenIDConnectProvider                          sync.RWMutex
	lockDeleteOpenIDConnectProviderRequest                   sync.RWMutex
	lockDeleteOpenIDConnectProviderWithContext               sync.RWMutex
	lockDeletePolicy                                         sync.RWMutex
	lockDeletePolicyRequest                                  sync.RWMutex
	lockDeletePolicyVersion                                  sync.RWMutex
	lockDeletePolicyVersionRequest                           sync.RWMutex
	lockDeletePolicyVersionWithContext                       sync.RWMutex
	lockDeletePolicyWithContext                              sync.RWMutex
	lockDeleteRole                                           sync.RWMutex
	lockDeleteRolePermissionsBoundary                        sync.RWMutex
	lockDeleteRolePermissionsBoundaryRequest                 sync.RWMutex
	lockDeleteRolePermissionsBoundaryWithContext             sync.RWMutex
	lockDeleteRolePolicy                                     sync.RWMutex
	lockDeleteRolePolicyRequest                              sync.RWMutex
	lockDeleteRolePolicyWithContext                          sync.RWMutex
	lockDeleteRoleRequest                                    sync.RWMutex
	lockDeleteRoleWithContext                                sync.RWMutex
	lockDeleteSAMLProvider                                   sync.RWMutex
	lockDeleteSAMLProviderRequest                            sync.RWMutex
	lockDeleteSAMLProviderWithContext                        sync.RWMutex
	lockDeleteSSHPublicKey                                   sync.RWMutex
	lockDeleteSSHPublicKeyRequest                            sync.RWMutex
	lockDeleteSSHPublicKeyWithContext                        sync.RWMutex
	lockDeleteServerCertificate                              sync.RWMutex
	lockDeleteServerCertificateRequest                       sync.RWMutex
	lockDeleteServerCertificateWithContext                   sync.RWMutex
	lockDeleteServiceLinkedRole                              sync.RWMutex
	lockDeleteServiceLinkedRoleRequest                       sync.RWMutex
	lockDeleteServiceLinkedRoleWithContext                   sync.RWMutex
	lockDeleteServiceSpecificCredential                      sync.RWMutex
	lockDeleteServiceSpecificCredentialRequest               sync.RWMutex
	lockDeleteServiceSpecificCredentialWithContext           sync.RWMutex
	lockDeleteSigningCertificate                             sync.RWMutex
	lockDeleteSigningCertificateRequest                      sync.RWMutex
	lockDeleteSigningCertificateWithContext                  sync.RWMutex
	lockDeleteUser                                           sync.RWMutex
	lockDeleteUserPermissionsBoundary                        sync.RWMutex
	lockDeleteUserPermissionsBoundaryRequest                 sync.RWMutex
	lockDeleteUserPermissionsBoundaryWithContext             sync.RWMutex
	lockDeleteUserPolicy                                     sync.RWMutex
	lockDeleteUserPolicyRequest                              sync.RWMutex
	lockDeleteUserPolicyWithContext                          sync.RWMutex
	lockDeleteUserRequest                                    sync.RWMutex
	lockDeleteUserWithContext                                sync.RWMutex
	lockDeleteVirtualMFADevice                               sync.RWMutex
	lockDeleteVirtualMFADeviceRequest                        sync.RWMutex
	lockDeleteVirtualMFADeviceWithContext                    sync.RWMutex
	lockDetachGroupPolicy                                    sync.RWMutex
	lockDetachGroupPolicyRequest                             sync.RWMutex
	lockDetachGroupPolicyWithContext                         sync.RWMutex
	lockDetachRolePolicy                                     sync.RWMutex
	lockDetachRolePolicyRequest                              sync.RWMutex
	lockDetachRolePolicyWithContext                          sync.RWMutex
	lockDetachUserPolicy                                     sync.RWMutex
	lockDetachUserPolicyRequest                              sync.RWMutex
	lockDetachUserPolicyWithContext                          sync.RWMutex
	lockEnableMFADevice                                      sync.RWMutex
	lockEnableMFADeviceRequest                               sync.RWMutex
	lockEnableMFADeviceWithContext                           sync.RWMutex
	lockGenerateCredentialReport                             sync.RWMutex
	lockGenerateCredentialReportRequest                      sync.RWMutex
	lockGenerateCredentialReportWithContext                  sync.RWMutex
	lockGenerateOrganizationsAccessReport                    sync.RWMutex
	lockGenerateOrganizationsAccessReportRequest             sync.RWMutex
	lockGenerateOrganizationsAccessReportWithContext         sync.RWMutex
	lockGenerateServiceLastAccessedDetails                   sync.RWMutex
	lockGenerateServiceLastAccessedDetailsRequest            sync.RWMutex
	lockGenerateServiceLastAccessedDetailsWithContext        sync.RWMutex
	lockGetAccessKeyLastUsed                                 sync.RWMutex
	lockGetAccessKeyLastUsedRequest                          sync.RWMutex
	lockGetAccessKeyLastUsedWithContext                      sync.RWMutex
	lockGetAccountAuthorizationDetails                       sync.RWMutex
	lockGetAccountAuthorizationDetailsPages                  sync.RWMutex
	lockGetAccountAuthorizationDetailsPagesWithContext       sync.RWMutex
	lockGetAccountAuthorizationDetailsRequest                sync.RWMutex
	lockGetAccountAuthorizationDetailsWithContext            sync.RWMutex
	lockGetAccountPasswordPolicy                             sync.RWMutex
	lockGetAccountPasswordPolicyRequest                      sync.RWMutex
	lockGetAccountPasswordPolicyWithContext                  sync.RWMutex
	lockGetAccountSummary                                    sync.RWMutex
	lockGetAccountSummaryRequest                             sync.RWMutex
	lockGetAccountSummaryWithContext                         sync.RWMutex
	lockGetContextKeysForCustomPolicy                        sync.RWMutex
	lockGetContextKeysForCustomPolicyRequest                 sync.RWMutex
	lockGetContextKeysForCustomPolicyWithContext             sync.RWMutex
	lockGetContextKeysForPrincipalPolicy                     sync.RWMutex
	lockGetContextKeysForPrincipalPolicyRequest              sync.RWMutex
	lockGetContextKeysForPrincipalPolicyWithContext          sync.RWMutex
	lockGetCredentialReport                                  sync.RWMutex
	lockGetCredentialReportRequest                           sync.RWMutex
	lockGetCredentialReportWithContext                       sync.RWMutex
	lockGetGroup                                             sync.RWMutex
	lockGetGroupPages                                        sync.RWMutex
	lockGetGroupPagesWithContext                             sync.RWMutex
	lockGetGroupPolicy                                       sync.RWMutex
	lockGetGroupPolicyRequest                                sync.RWMutex
	lockGetGroupPolicyWithContext                            sync.RWMutex
	lockGetGroupRequest                                      sync.RWMutex
	lockGetGroupWithContext                                  sync.RWMutex
	lockGetInstanceProfile                                   sync.RWMutex
	lockGetInstanceProfileRequest                            sync.RWMutex
	lockGetInstanceProfileWithContext                        sync.RWMutex
	lockGetLoginProfile                                      sync.RWMutex
	lockGetLoginProfileRequest                               sync.RWMutex
	lockGetLoginProfileWithContext                           sync.RWMutex
	lockGetOpenIDConnectProvider                             sync.RWMutex
	lockGetOpenIDConnectProviderRequest                      sync.RWMutex
	lockGetOpenIDConnectProviderWithContext                  sync.RWMutex
	lockGetOrganizationsAccessReport                         sync.RWMutex
	lockGetOrganizationsAccessReportRequest                  sync.RWMutex
	lockGetOrganizationsAccessReportWithContext              sync.RWMutex
	lockGetPolicy                                            sync.RWMutex
	lockGetPolicyRequest                                     sync.RWMutex
	lockGetPolicyVersion                                     sync.RWMutex
	lockGetPolicyVersionRequest                              sync.RWMutex
	lockGetPolicyVersionWithContext                          sync.RWMutex
	lockGetPolicyWithContext                                 sync.RWMutex
	lockGetRole                                              sync.RWMutex
	lockGetRolePolicy                                        sync.RWMutex
	lockGetRolePolicyRequest                                 sync.RWMutex
	lockGetRolePolicyWithContext                             sync.RWMutex
	lockGetRoleRequest                                       sync.RWMutex
	lockGetRoleWithContext                                   sync.RWMutex
	lockGetSAMLProvider                                      sync.RWMutex
	lockGetSAMLProviderRequest                               sync.RWMutex
	lockGetSAMLProviderWithContext                           sync.RWMutex
	lockGetSSHPublicKey                                      sync.RWMutex
	lockGetSSHPublicKeyRequest                               sync.RWMutex
	lockGetSSHPublicKeyWithContext                           sync.RWMutex
	lockGetServerCertificate                                 sync.RWMutex
	lockGetServerCertificateRequest                          sync.RWMutex
	lockGetServerCertificateWithContext                      sync.RWMutex
	lockGetServiceLastAccessedDetails                        sync.RWMutex
	lockGetServiceLastAccessedDetailsRequest                 sync.RWMutex
	lockGetServiceLastAccessedDetailsWithContext             sync.RWMutex
	lockGetServiceLastAccessedDetailsWithEntities            sync.RWMutex
	lockGetServiceLastAccessedDetailsWithEntitiesRequest     sync.RWMutex
	lockGetServiceLastAccessedDetailsWithEntitiesWithContext sync.RWMutex
	lockGetServiceLinkedRoleDeletionStatus                   sync.RWMutex
	lockGetServiceLinkedRoleDeletionStatusRequest            sync.RWMutex
	lockGetServiceLinkedRoleDeletionStatusWithContext        sync.RWMutex
	lockGetUser                                              sync.RWMutex
	lockGetUserPolicy                                        sync.RWMutex
	lockGetUserPolicyRequest                                 sync.RWMutex
	lockGetUserPolicyWithContext                             sync.RWMutex
	lockGetUserRequest                                       sync.RWMutex
	lockGetUserWithContext                                   sync.RWMutex
	lockListAccessKeys                                       sync.RWMutex
	lockListAccessKeysPages                                  sync.RWMutex
	lockListAccessKeysPagesWithContext                       sync.RWMutex
	lockListAccessKeysRequest                                sync.RWMutex
	lockListAccessKeysWithContext                            sync.RWMutex
	lockListAccountAliases                                   sync.RWMutex
	lockListAccountAliasesPages                              sync.RWMutex
	lockListAccountAliasesPagesWithContext                   sync.RWMutex
	lockListAccountAliasesRequest                            sync.RWMutex
	lockListAccountAliasesWithContext                        sync.RWMutex
	lockListAttachedGroupPolicies                            sync.RWMutex
	lockListAttachedGroupPoliciesPages                       sync.RWMutex
	lockListAttachedGroupPoliciesPagesWithContext            sync.RWMutex
	lockListAttachedGroupPoliciesRequest                     sync.RWMutex
	lockListAttachedGroupPoliciesWithContext                 sync.RWMutex
	lockListAttachedRolePolicies                             sync.RWMutex
	lockListAttachedRolePoliciesPages                        sync.RWMutex
	lockListAttachedRolePoliciesPagesWithContext             sync.RWMutex
	lockListAttachedRolePoliciesRequest                      sync.RWMutex
	lockListAttachedRolePoliciesWithContext                  sync.RWMutex
	lockListAttachedUserPolicies                             sync.RWMutex
	lockListAttachedUserPoliciesPages                        sync.RWMutex
	lockListAttachedUserPoliciesPagesWithContext             sync.RWMutex
	lockListAttachedUserPoliciesRequest                      sync.RWMutex
	lockListAttachedUserPoliciesWithContext                  sync.RWMutex
	lockListEntitiesForPolicy                                sync.RWMutex
	lockListEntitiesForPolicyPages                           sync.RWMutex
	lockListEntitiesForPolicyPagesWithContext                sync.RWMutex
	lockListEntitiesForPolicyRequest                         sync.RWMutex
	lockListEntitiesForPolicyWithContext                     sync.RWMutex
	lockListGroupPolicies                                    sync.RWMutex
	lockListGroupPoliciesPages                               sync.RWMutex
	lockListGroupPoliciesPagesWithContext                    sync.RWMutex
	lockListGroupPoliciesRequest                             sync.RWMutex
	lockListGroupPoliciesWithContext                         sync.RWMutex
	lockListGroups                                           sync.RWMutex
	lockListGroupsForUser                                    sync.RWMutex
	lockListGroupsForUserPages                               sync.RWMutex
	lockListGroupsForUserPagesWithContext                    sync.RWMutex
	lockListGroupsForUserRequest                             sync.RWMutex
	lockListGroupsForUserWithContext                         sync.RWMutex
	lockListGroupsPages                                      sync.RWMutex
	lockListGroupsPagesWithContext                           sync.RWMutex
	lockListGroupsRequest                                    sync.RWMutex
	lockListGroupsWithContext                                sync.RWMutex
	lockListInstanceProfiles                                 sync.RWMutex
	lockListInstanceProfilesForRole                          sync.RWMutex
	lockListInstanceProfilesForRolePages                     sync.RWMutex
	lockListInstanceProfilesForRolePagesWithContext          sync.RWMutex
	lockListInstanceProfilesForRoleRequest                   sync.RWMutex
	lockListInstanceProfilesForRoleWithContext               sync.RWMutex
	lockListInstanceProfilesPages                            sync.RWMutex
	lockListInstanceProfilesPagesWithContext                 sync.RWMutex
	lockListInstanceProfilesRequest                          sync.RWMutex
	lockListInstanceProfilesWithContext                      sync.RWMutex
	lockListMFADevices                                       sync.RWMutex
	lockListMFADevicesPages                                  sync.RWMutex
	lockListMFADevicesPagesWithContext                       sync.RWMutex
	lockListMFADevicesRequest                                sync.RWMutex
	lockListMFADevicesWithContext                            sync.RWMutex
	lockListOpenIDConnectProviders                           sync.RWMutex
	lockListOpenIDConnectProvidersRequest                    sync.RWMutex
	lockListOpenIDConnectProvidersWithContext                sync.RWMutex
	lockListPolicies                                         sync.RWMutex
	lockListPoliciesGrantingServiceAccess                    sync.RWMutex
	lockListPoliciesGrantingServiceAccessRequest             sync.RWMutex
	lockListPoliciesGrantingServiceAccessWithContext         sync.RWMutex
	lockListPoliciesPages                                    sync.RWMutex
	lockListPoliciesPagesWithContext                         sync.RWMutex
	lockListPoliciesRequest                                  sync.RWMutex
	lockListPoliciesWithContext                              sync.RWMutex
	lockListPolicyVersions                                   sync.RWMutex
	lockListPolicyVersionsPages                              sync.RWMutex
	lockListPolicyVersionsPagesWithContext                   sync.RWMutex
	lockListPolicyVersionsRequest                            sync.RWMutex
	lockListPolicyVersionsWithContext                        sync.RWMutex
	lockListRolePolicies                                     sync.RWMutex
	lockListRolePoliciesPages                                sync.RWMutex
	lockListRolePoliciesPagesWithContext                     sync.RWMutex
	lockListRolePoliciesRequest                              sync.RWMutex
	lockListRolePoliciesWithContext                          sync.RWMutex
	lockListRoleTags                                         sync.RWMutex
	lockListRoleTagsRequest                                  sync.RWMutex
	lockListRoleTagsWithContext                              sync.RWMutex
	lockListRoles                                            sync.RWMutex
	lockListRolesPages                                       sync.RWMutex
	lockListRolesPagesWithContext                            sync.RWMutex
	lockListRolesRequest                                     sync.RWMutex
	lockListRolesWithContext                                 sync.RWMutex
	lockListSAMLProviders                                    sync.RWMutex
	lockListSAMLProvidersRequest                             sync.RWMutex
	lockListSAMLProvidersWithContext                         sync.RWMutex
	lockListSSHPublicKeys                                    sync.RWMutex
	lockListSSHPublicKeysPages                               sync.RWMutex
	lockListSSHPublicKeysPagesWithContext                    sync.RWMutex
	lockListSSHPublicKeysRequest                             sync.RWMutex
	lockListSSHPublicKeysWithContext                         sync.RWMutex
	lockListServerCertificates                               sync.RWMutex
	lockListServerCertificatesPages                          sync.RWMutex
	lockListServerCertificatesPagesWithContext               sync.RWMutex
	lockListServerCertificatesRequest                        sync.RWMutex
	lockListServerCertificatesWithContext                    sync.RWMutex
	lockListServiceSpecificCredentials                       sync.RWMutex
	lockListServiceSpecificCredentialsRequest                sync.RWMutex
	lockListServiceSpecificCredentialsWithContext            sync.RWMutex
	lockListSigningCertificates                              sync.RWMutex
	lockListSigningCertificatesPages                         sync.RWMutex
	lockListSigningCertificatesPagesWithContext              sync.RWMutex
	lockListSigningCertificatesRequest                       sync.RWMutex
	lockListSigningCertificatesWithContext                   sync.RWMutex
	lockListUserPolicies                                     sync.RWMutex
	lockListUserPoliciesPages                                sync.RWMutex
	lockListUserPoliciesPagesWithContext                     sync.RWMutex
	lockListUserPoliciesRequest                              sync.RWMutex
	lockListUserPoliciesWithContext                          sync.RWMutex
	lockListUserTags                                         sync.RWMutex
	lockListUserTagsRequest                                  sync.RWMutex
	lockListUserTagsWithContext                              sync.RWMutex
	lockListUsers                                            sync.RWMutex
	lockListUsersPages                                       sync.RWMutex
	lockListUsersPagesWithContext                            sync.RWMutex
	lockListUsersRequest                                     sync.RWMutex
	lockListUsersWithContext                                 sync.RWMutex
	lockListVirtualMFADevices                                sync.RWMutex
	lockListVirtualMFADevicesPages                           sync.RWMutex
	lockListVirtualMFADevicesPagesWithContext                sync.RWMutex
	lockListVirtualMFADevicesRequest                         sync.RWMutex
	lockListVirtualMFADevicesWithContext                     sync.RWMutex
	lockPutGroupPolicy                                       sync.RWMutex
	lockPutGroupPolicyRequest                                sync.RWMutex
	lockPutGroupPolicyWithContext                            sync.RWMutex
	lockPutRolePermissionsBoundary                           sync.RWMutex
	lockPutRolePermissionsBoundaryRequest                    sync.RWMutex
	lockPutRolePermissionsBoundaryWithContext                sync.RWMutex
	lockPutRolePolicy                                        sync.RWMutex
	lockPutRolePolicyRequest                                 sync.RWMutex
	lockPutRolePolicyWithContext                             sync.RWMutex
	lockPutUserPermissionsBoundary                           sync.RWMutex
	lockPutUserPermissionsBoundaryRequest                    sync.RWMutex
	lockPutUserPermissionsBoundaryWithContext                sync.RWMutex
	lockPutUserPolicy                                        sync.RWMutex
	lockPutUserPolicyRequest                                 sync.RWMutex
	lockPutUserPolicyWithContext                             sync.RWMutex
	lockRemoveClientIDFromOpenIDConnectProvider              sync.RWMutex
	lockRemoveClientIDFromOpenIDConnectProviderRequest       sync.RWMutex
	lockRemoveClientIDFromOpenIDConnectProviderWithContext   sync.RWMutex
	lockRemoveRoleFromInstanceProfile                        sync.RWMutex
	lockRemoveRoleFromInstanceProfileRequest                 sync.RWMutex
	lockRemoveRoleFromInstanceProfileWithContext             sync.RWMutex
	lockRemoveUserFromGroup                                  sync.RWMutex
	lockRemoveUserFromGroupRequest                           sync.RWMutex
	lockRemoveUserFromGroupWithContext                       sync.RWMutex
	lockResetServiceSpecificCredential                       sync.RWMutex
	lockResetServiceSpecificCredentialRequest                sync.RWMutex
	lockResetServiceSpecificCredentialWithContext            sync.RWMutex
	lockResyncMFADevice                                      sync.RWMutex
	lockResyncMFADeviceRequest                               sync.RWMutex
	lockResyncMFADeviceWithContext                           sync.RWMutex
	lockSetDefaultPolicyVersion                              sync.RWMutex
	lockSetDefaultPolicyVersionRequest                       sync.RWMutex
	lockSetDefaultPolicyVersionWithContext                   sync.RWMutex
	lockSetSecurityTokenServicePreferences                   sync.RWMutex
	lockSetSecurityTokenServicePreferencesRequest            sync.RWMutex
	lockSetSecurityTokenServicePreferencesWithContext        sync.RWMutex
	lockSimulateCustomPolicy                                 sync.RWMutex
	lockSimulateCustomPolicyPages                            sync.RWMutex
	lockSimulateCustomPolicyPagesWithContext                 sync.RWMutex
	lockSimulateCustomPolicyRequest                          sync.RWMutex
	lockSimulateCustomPolicyWithContext                      sync.RWMutex
	lockSimulatePrincipalPolicy                              sync.RWMutex
	lockSimulatePrincipalPolicyPages                         sync.RWMutex
	lockSimulatePrincipalPolicyPagesWithContext              sync.RWMutex
	lockSimulatePrincipalPolicyRequest                       sync.RWMutex
	lockSimulatePrincipalPolicyWithContext                   sync.RWMutex
	lockTagRole                                              sync.RWMutex
	lockTagRoleRequest                                       sync.RWMutex
	lockTagRoleWithContext                                   sync.RWMutex
	lockTagUser                                              sync.RWMutex
	lockTagUserRequest                                       sync.RWMutex
	lockTagUserWithContext                                   sync.RWMutex
	lockUntagRole                                            sync.RWMutex
	lockUntagRoleRequest                                     sync.RWMutex
	lockUntagRoleWithContext                                 sync.RWMutex
	lockUntagUser                                            sync.RWMutex
	lockUntagUserRequest                                     sync.RWMutex
	lockUntagUserWithContext                                 sync.RWMutex
	lockUpdateAccessKey                                      sync.RWMutex
	lockUpdateAccessKeyRequest                               sync.RWMutex
	lockUpdateAccessKeyWithContext                           sync.RWMutex
	lockUpdateAccountPasswordPolicy                          sync.RWMutex
	lockUpdateAccountPasswordPolicyRequest                   sync.RWMutex
	lockUpdateAccountPasswordPolicyWithContext               sync.RWMutex
	lockUpdateAssumeRolePolicy                               sync.RWMutex
	lockUpdateAssumeRolePolicyRequest                        sync.RWMutex
	lockUpdateAssumeRolePolicyWithContext                    sync.RWMutex
	lockUpdateGroup                                          sync.RWMutex
	lockUpdateGroupRequest                                   sync.RWMutex
	lockUpdateGroupWithContext                               sync.RWMutex
	lockUpdateLoginProfile                                   sync.RWMutex
	lockUpdateLoginProfileRequest                            sync.RWMutex
	lockUpdateLoginProfileWithContext                        sync.RWMutex
	lockUpdateOpenIDConnectProviderThumbprint                sync.RWMutex
	lockUpdateOpenIDConnectProviderThumbprintRequest         sync.RWMutex
	lockUpdateOpenIDConnectProviderThumbprintWithContext     sync.RWMutex
	lockUpdateRole                                           sync.RWMutex
	lockUpdateRoleDescription                                sync.RWMutex
	lockUpdateRoleDescriptionRequest                         sync.RWMutex
	lockUpdateRoleDescriptionWithContext                     sync.RWMutex
	lockUpdateRoleRequest                                    sync.RWMutex
	lockUpdateRoleWithContext                                sync.RWMutex
	lockUpdateSAMLProvider                                   sync.RWMutex
	lockUpdateSAMLProviderRequest                            sync.RWMutex
	lockUpdateSAMLProviderWithContext                        sync.RWMutex
	lockUpdateSSHPublicKey                                   sync.RWMutex
	lockUpdateSSHPublicKeyRequest                            sync.RWMutex
	lockUpdateSSHPublicKeyWithContext                        sync.RWMutex
	lockUpdateServerCertificate                              sync.RWMutex
	lockUpdateServerCertificateRequest                       sync.RWMutex
	lockUpdateServerCertificateWithContext                   sync.RWMutex
	lockUpdateServiceSpecificCredential                      sync.RWMutex
	lockUpdateServiceSpecificCredentialRequest               sync.RWMutex
	lockUpdateServiceSpecificCredentialWithContext           sync.RWMutex
	lockUpdateSigningCertificate                             sync.RWMutex
	lockUpdateSigningCertificateRequest                      sync.RWMutex
	lockUpdateSigningCertificateWithContext                  sync.RWMutex
	lockUpdateUser                                           sync.RWMutex
	lockUpdateUserRequest                                    sync.RWMutex
	lockUpdateUserWithContext                                sync.RWMutex
	lockUploadSSHPublicKey                                   sync.RWMutex
	lockUploadSSHPublicKeyRequest                            sync.RWMutex
	lockUploadSSHPublicKeyWithContext                        sync.RWMutex
	lockUploadServerCertificate                              sync.RWMutex
	lockUploadServerCertificateRequest                       sync.RWMutex
	lockUploadServerCertificateWithContext                   sync.RWMutex
	lockUploadSigningCertificate                             sync.RWMutex
	lockUploadSigningCertificateRequest                      sync.RWMutex
	lockUploadSigningCertificateWithContext                  sync.RWMutex
	lockWaitUntilInstanceProfileExists                       sync.RWMutex
	lockWaitUntilInstanceProfileExistsWithContext            sync.RWMutex
	lockWaitUntilPolicyExists                                sync.RWMutex
	lockWaitUntilPolicyExistsWithContext                     sync.RWMutex
	lockWaitUntilRoleExists                                  sync.RWMutex
	lockWaitUntilRoleExistsWithContext                       sync.RWMutex
	lockWaitUntilUserExists                                  sync.RWMutex
	lockWaitUntilUserExistsWithContext                       sync.RWMutex
}

// AddClientIDToOpenIDConnectProvider calls AddClientIDToOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProvider(addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	if mock.AddClientIDToOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.AddClientIDToOpenIDConnectProviderFunc: method is nil but IAMAPI.AddClientIDToOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
	}{
		AddClientIDToOpenIDConnectProviderInput: addClientIDToOpenIDConnectProviderInput,
	}
	mock.lockAddClientIDToOpenIDConnectProvider.Lock()
	mock.calls.AddClientIDToOpenIDConnectProvider = append(mock.calls.AddClientIDToOpenIDConnectProvider, callInfo)
	mock.lockAddClientIDToOpenIDConnectProvider.Unlock()
	return mock.AddClientIDToOpenIDConnectProviderFunc(addClientIDToOpenIDConnectProviderInput)
}

// AddClientIDToOpenIDConnectProviderCalls gets all the calls that were made to AddClientIDToOpenIDConnectProvider.
// Check the length with:
//
//	len(mockedIAMAPI.AddClientIDToOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderCalls() []struct {
	AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
} {
	var calls []struct {
		AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
	}
	mock.lockAddClientIDToOpenIDConnectProvider.RLock()
	calls = mock.calls.AddClientIDToOpenIDConnectProvider
	mock.lockAddClientIDToOpenIDConnectProvider.RUnlock()
	return calls
}

// AddClientIDToOpenIDConnectProviderRequest calls AddClientIDToOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderRequest(addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput) {
	if mock.AddClientIDToOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.AddClientIDToOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.AddClientIDToOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
	}{
		AddClientIDToOpenIDConnectProviderInput: addClientIDToOpenIDConnectProviderInput,
	}
	mock.lockAddClientIDToOpenIDConnectProviderRequest.Lock()
	mock.calls.AddClientIDToOpenIDConnectProviderRequest = append(mock.calls.AddClientIDToOpenIDConnectProviderRequest, callInfo)
	mock.lockAddClientIDToOpenIDConnectProviderRequest.Unlock()
	return mock.AddClientIDToOpenIDConnectProviderRequestFunc(addClientIDToOpenIDConnectProviderInput)
}

// AddClientIDToOpenIDConnectProviderRequestCalls gets all the calls that were made to AddClientIDToOpenIDConnectProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.AddClientIDToOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderRequestCalls() []struct {
	AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
} {
	var calls []struct {
		AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
	}
	mock.lockAddClientIDToOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.AddClientIDToOpenIDConnectProviderRequest
	mock.lockAddClientIDToOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// AddClientIDToOpenIDConnectProviderWithContext calls AddClientIDToOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderWithContext(contextMoqParam context.Context, addClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput, options ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	if mock.AddClientIDToOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.AddClientIDToOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.AddClientIDToOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		AddClientIDToOpenIDConnectProviderInput: addClientIDToOpenIDConnectProviderInput,
		Options:                                 options,
	}
	mock.lockAddClientIDToOpenIDConnectProviderWithContext.Lock()
	mock.calls.AddClientIDToOpenIDConnectProviderWithContext = append(mock.calls.AddClientIDToOpenIDConnectProviderWithContext, callInfo)
	mock.lockAddClientIDToOpenIDConnectProviderWithContext.Unlock()
	return mock.AddClientIDToOpenIDConnectProviderWithContextFunc(contextMoqParam, addClientIDToOpenIDConnectProviderInput, options...)
}

// AddClientIDToOpenIDConnectProviderWithContextCalls gets all the calls that were made to AddClientIDToOpenIDConnectProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.AddClientIDToOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) AddClientIDToOpenIDConnectProviderWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		AddClientIDToOpenIDConnectProviderInput *iam.AddClientIDToOpenIDConnectProviderInput
		Options                                 []request.Option
	}
	mock.lockAddClientIDToOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.AddClientIDToOpenIDConnectProviderWithContext
	mock.lockAddClientIDToOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// AddRoleToInstanceProfile calls AddRoleToInstanceProfileFunc.
func (mock *IAMAPIMock) AddRoleToInstanceProfile(addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	if mock.AddRoleToInstanceProfileFunc == nil {
		panic("IAMAPIMock.AddRoleToInstanceProfileFunc: method is nil but IAMAPI.AddRoleToInstanceProfile was just called")
	}
	callInfo := struct {
		AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
	}{
		AddRoleToInstanceProfileInput: addRoleToInstanceProfileInput,
	}
	mock.lockAddRoleToInstanceProfile.Lock()
	mock.calls.AddRoleToInstanceProfile = append(mock.calls.AddRoleToInstanceProfile, callInfo)
	mock.lockAddRoleToInstanceProfile.Unlock()
	return mock.AddRoleToInstanceProfileFunc(addRoleToInstanceProfileInput)
}

// AddRoleToInstanceProfileCalls gets all the calls that were made to AddRoleToInstanceProfile.
// Check the length with:
//
//	len(mockedIAMAPI.AddRoleToInstanceProfileCalls())
func (mock *IAMAPIMock) AddRoleToInstanceProfileCalls() []struct {
	AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
} {
	var calls []struct {
		AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
	}
	mock.lockAddRoleToInstanceProfile.RLock()
	calls = mock.calls.AddRoleToInstanceProfile
	mock.lockAddRoleToInstanceProfile.RUnlock()
	return calls
}

// AddRoleToInstanceProfileRequest calls AddRoleToInstanceProfileRequestFunc.
func (mock *IAMAPIMock) AddRoleToInstanceProfileRequest(addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput) {
	if mock.AddRoleToInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.AddRoleToInstanceProfileRequestFunc: method is nil but IAMAPI.AddRoleToInstanceProfileRequest was just called")
	}
	callInfo := struct {
		AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
	}{
		AddRoleToInstanceProfileInput: addRoleToInstanceProfileInput,
	}
	mock.lockAddRoleToInstanceProfileRequest.Lock()
	mock.calls.AddRoleToInstanceProfileRequest = append(mock.calls.AddRoleToInstanceProfileRequest, callInfo)
	mock.lockAddRoleToInstanceProfileRequest.Unlock()
	return mock.AddRoleToInstanceProfileRequestFunc(addRoleToInstanceProfileInput)
}

// AddRoleToInstanceProfileRequestCalls gets all the calls that were made to AddRoleToInstanceProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.AddRoleToInstanceProfileRequestCalls())
func (mock *IAMAPIMock) AddRoleToInstanceProfileRequestCalls() []struct {
	AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
} {
	var calls []struct {
		AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
	}
	mock.lockAddRoleToInstanceProfileRequest.RLock()
	calls = mock.calls.AddRoleToInstanceProfileRequest
	mock.lockAddRoleToInstanceProfileRequest.RUnlock()
	return calls
}

// AddRoleToInstanceProfileWithContext calls AddRoleToInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) AddRoleToInstanceProfileWithContext(contextMoqParam context.Context, addRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput, options ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
	if mock.AddRoleToInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.AddRoleToInstanceProfileWithContextFunc: method is nil but IAMAPI.AddRoleToInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		AddRoleToInstanceProfileInput: addRoleToInstanceProfileInput,
		Options:                       options,
	}
	mock.lockAddRoleToInstanceProfileWithContext.Lock()
	mock.calls.AddRoleToInstanceProfileWithContext = append(mock.calls.AddRoleToInstanceProfileWithContext, callInfo)
	mock.lockAddRoleToInstanceProfileWithContext.Unlock()
	return mock.AddRoleToInstanceProfileWithContextFunc(contextMoqParam, addRoleToInstanceProfileInput, options...)
}

// AddRoleToInstanceProfileWithContextCalls gets all the calls that were made to AddRoleToInstanceProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.AddRoleToInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) AddRoleToInstanceProfileWithContextCalls() []struct {
	ContextMoqParam               context.Context
	AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		AddRoleToInstanceProfileInput *iam.AddRoleToInstanceProfileInput
		Options                       []request.Option
	}
	mock.lockAddRoleToInstanceProfileWithContext.RLock()
	calls = mock.calls.AddRoleToInstanceProfileWithContext
	mock.lockAddRoleToInstanceProfileWithContext.RUnlock()
	return calls
}

// AddUserToGroup calls AddUserToGroupFunc.
func (mock *IAMAPIMock) AddUserToGroup(addUserToGroupInput *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	if mock.AddUserToGroupFunc == nil {
		panic("IAMAPIMock.AddUserToGroupFunc: method is nil but IAMAPI.AddUserToGroup was just called")
	}
	callInfo := struct {
		AddUserToGroupInput *iam.AddUserToGroupInput
	}{
		AddUserToGroupInput: addUserToGroupInput,
	}
	mock.lockAddUserToGroup.Lock()
	mock.calls.AddUserToGroup = append(mock.calls.AddUserToGroup, callInfo)
	mock.lockAddUserToGroup.Unlock()
	return mock.AddUserToGroupFunc(addUserToGroupInput)
}

// AddUserToGroupCalls gets all the calls that were made to AddUserToGroup.
// Check the length with:
//
//	len(mockedIAMAPI.AddUserToGroupCalls())
func (mock *IAMAPIMock) AddUserToGroupCalls() []struct {
	AddUserToGroupInput *iam.AddUserToGroupInput
} {
	var calls []struct {
		AddUserToGroupInput *iam.AddUserToGroupInput
	}
	mock.lockAddUserToGroup.RLock()
	calls = mock.calls.AddUserToGroup
	mock.lockAddUserToGroup.RUnlock()
	return calls
}

// AddUserToGroupRequest calls AddUserToGroupRequestFunc.
func (mock *IAMAPIMock) AddUserToGroupRequest(addUserToGroupInput *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput) {
	if mock.AddUserToGroupRequestFunc == nil {
		panic("IAMAPIMock.AddUserToGroupRequestFunc: method is nil but IAMAPI.AddUserToGroupRequest was just called")
	}
	callInfo := struct {
		AddUserToGroupInput *iam.AddUserToGroupInput
	}{
		AddUserToGroupInput: addUserToGroupInput,
	}
	mock.lockAddUserToGroupRequest.Lock()
	mock.calls.AddUserToGroupRequest = append(mock.calls.AddUserToGroupRequest, callInfo)
	mock.lockAddUserToGroupRequest.Unlock()
	return mock.AddUserToGroupRequestFunc(addUserToGroupInput)
}

// AddUserToGroupRequestCalls gets all the calls that were made to AddUserToGroupRequest.
// Check the length with:
//
//	len(mockedIAMAPI.AddUserToGroupRequestCalls())
func (mock *IAMAPIMock) AddUserToGroupRequestCalls() []struct {
	AddUserToGroupInput *iam.AddUserToGroupInput
} {
	var calls []struct {
		AddUserToGroupInput *iam.AddUserToGroupInput
	}
	mock.lockAddUserToGroupRequest.RLock()
	calls = mock.calls.AddUserToGroupRequest
	mock.lockAddUserToGroupRequest.RUnlock()
	return calls
}

// AddUserToGroupWithContext calls AddUserToGroupWithContextFunc.
func (mock *IAMAPIMock) AddUserToGroupWithContext(contextMoqParam context.Context, addUserToGroupInput *iam.AddUserToGroupInput, options ...request.Option) (*iam.AddUserToGroupOutput, error) {
	if mock.AddUserToGroupWithContextFunc == nil {
		panic("IAMAPIMock.AddUserToGroupWithContextFunc: method is nil but IAMAPI.AddUserToGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		AddUserToGroupInput *iam.AddUserToGroupInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		AddUserToGroupInput: addUserToGroupInput,
		Options:             options,
	}
	mock.lockAddUserToGroupWithContext.Lock()
	mock.calls.AddUserToGroupWithContext = append(mock.calls.AddUserToGroupWithContext, callInfo)
	mock.lockAddUserToGroupWithContext.Unlock()
	return mock.AddUserToGroupWithContextFunc(contextMoqParam, addUserToGroupInput, options...)
}

// AddUserToGroupWithContextCalls gets all the calls that were made to AddUserToGroupWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.AddUserToGroupWithContextCalls())
func (mock *IAMAPIMock) AddUserToGroupWithContextCalls() []struct {
	ContextMoqParam     context.Context
	AddUserToGroupInput *iam.AddUserToGroupInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		AddUserToGroupInput *iam.AddUserToGroupInput
		Options             []request.Option
	}
	mock.lockAddUserToGroupWithContext.RLock()
	calls = mock.calls.AddUserToGroupWithContext
	mock.lockAddUserToGroupWithContext.RUnlock()
	return calls
}

// AttachGroupPolicy calls AttachGroupPolicyFunc.
func (mock *IAMAPIMock) AttachGroupPolicy(attachGroupPolicyInput *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	if mock.AttachGroupPolicyFunc == nil {
		panic("IAMAPIMock.AttachGroupPolicyFunc: method is nil but IAMAPI.AttachGroupPolicy was just called")
	}
	callInfo := struct {
		AttachGroupPolicyInput *iam.AttachGroupPolicyInput
	}{
		AttachGroupPolicyInput: attachGroupPolicyInput,
	}
	mock.lockAttachGroupPolicy.Lock()
	mock.calls.AttachGroupPolicy = append(mock.calls.AttachGroupPolicy, callInfo)
	mock.lockAttachGroupPolicy.Unlock()
	return mock.AttachGroupPolicyFunc(attachGroupPolicyInput)
}

// AttachGroupPolicyCalls gets all the calls that were made to AttachGroupPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.AttachGroupPolicyCalls())
func (mock *IAMAPIMock) AttachGroupPolicyCalls() []struct {
	AttachGroupPolicyInput *iam.AttachGroupPolicyInput
} {
	var calls []struct {
		AttachGroupPolicyInput *iam.AttachGroupPolicyInput
	}
	mock.lockAttachGroupPolicy.RLock()
	calls = mock.calls.AttachGroupPolicy
	mock.lockAttachGroupPolicy.RUnlock()
	return calls
}

// AttachGroupPolicyRequest calls AttachGroupPolicyRequestFunc.
func (mock *IAMAPIMock) AttachGroupPolicyRequest(attachGroupPolicyInput *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput) {
	if mock.AttachGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.AttachGroupPolicyRequestFunc: method is nil but IAMAPI.AttachGroupPolicyRequest was just called")
	}
	callInfo := struct {
		AttachGroupPolicyInput *iam.AttachGroupPolicyInput
	}{
		AttachGroupPolicyInput: attachGroupPolicyInput,
	}
	mock.lockAttachGroupPolicyRequest.Lock()
	mock.calls.AttachGroupPolicyRequest = append(mock.calls.AttachGroupPolicyRequest, callInfo)
	mock.lockAttachGroupPolicyRequest.Unlock()
	return mock.AttachGroupPolicyRequestFunc(attachGroupPolicyInput)
}

// AttachGroupPolicyRequestCalls gets all the calls that were made to AttachGroupPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.AttachGroupPolicyRequestCalls())
func (mock *IAMAPIMock) AttachGroupPolicyRequestCalls() []struct {
	AttachGroupPolicyInput *iam.AttachGroupPolicyInput
} {
	var calls []struct {
		AttachGroupPolicyInput *iam.AttachGroupPolicyInput
	}
	mock.lockAttachGroupPolicyRequest.RLock()
	calls = mock.calls.AttachGroupPolicyRequest
	mock.lockAttachGroupPolicyRequest.RUnlock()
	return calls
}

// AttachGroupPolicyWithContext calls AttachGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) AttachGroupPolicyWithContext(contextMoqParam context.Context, attachGroupPolicyInput *iam.AttachGroupPolicyInput, options ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
	if mock.AttachGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.AttachGroupPolicyWithContextFunc: method is nil but IAMAPI.AttachGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		AttachGroupPolicyInput *iam.AttachGroupPolicyInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		AttachGroupPolicyInput: attachGroupPolicyInput,
		Options:                options,
	}
	mock.lockAttachGroupPolicyWithContext.Lock()
	mock.calls.AttachGroupPolicyWithContext = append(mock.calls.AttachGroupPolicyWithContext, callInfo)
	mock.lockAttachGroupPolicyWithContext.Unlock()
	return mock.AttachGroupPolicyWithContextFunc(contextMoqParam, attachGroupPolicyInput, options...)
}

// AttachGroupPolicyWithContextCalls gets all the calls that were made to AttachGroupPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.AttachGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) AttachGroupPolicyWithContextCalls() []struct {
	ContextMoqParam        context.Context
	AttachGroupPolicyInput *iam.AttachGroupPolicyInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		AttachGroupPolicyInput *iam.AttachGroupPolicyInput
		Options                []request.Option
	}
	mock.lockAttachGroupPolicyWithContext.RLock()
	calls = mock.calls.AttachGroupPolicyWithContext
	mock.lockAttachGroupPolicyWithContext.RUnlock()
	return calls
}

// AttachRolePolicy calls AttachRolePolicyFunc.
func (mock *IAMAPIMock) AttachRolePolicy(attachRolePolicyInput *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	if mock.AttachRolePolicyFunc == nil {
		panic("IAMAPIMock.AttachRolePolicyFunc: method is nil but IAMAPI.AttachRolePolicy was just called")
	}
	callInfo := struct {
		AttachRolePolicyInput *iam.AttachRolePolicyInput
	}{
		AttachRolePolicyInput: attachRolePolicyInput,
	}
	mock.lockAttachRolePolicy.Lock()
	mock.calls.AttachRolePolicy = append(mock.calls.AttachRolePolicy, callInfo)
	mock.lockAttachRolePolicy.Unlock()
	return mock.AttachRolePolicyFunc(attachRolePolicyInput)
}

// AttachRolePolicyCalls gets all the calls that were made to AttachRolePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.AttachRolePolicyCalls())
func (mock *IAMAPIMock) AttachRolePolicyCalls() []struct {
	AttachRolePolicyInput *iam.AttachRolePolicyInput
} {
	var calls []struct {
		AttachRolePolicyInput *iam.AttachRolePolicyInput
	}
	mock.lockAttachRolePolicy.RLock()
	calls = mock.calls.AttachRolePolicy
	mock.lockAttachRolePolicy.RUnlock()
	return calls
}

// AttachRolePolicyRequest calls AttachRolePolicyRequestFunc.
func (mock *IAMAPIMock) AttachRolePolicyRequest(attachRolePolicyInput *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput) {
	if mock.AttachRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.AttachRolePolicyRequestFunc: method is nil but IAMAPI.AttachRolePolicyRequest was just called")
	}
	callInfo := struct {
		AttachRolePolicyInput *iam.AttachRolePolicyInput
	}{
		AttachRolePolicyInput: attachRolePolicyInput,
	}
	mock.lockAttachRolePolicyRequest.Lock()
	mock.calls.AttachRolePolicyRequest = append(mock.calls.AttachRolePolicyRequest, callInfo)
	mock.lockAttachRolePolicyRequest.Unlock()
	return mock.AttachRolePolicyRequestFunc(attachRolePolicyInput)
}

// AttachRolePolicyRequestCalls gets all the calls that were made to AttachRolePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.AttachRolePolicyRequestCalls())
func (mock *IAMAPIMock) AttachRolePolicyRequestCalls() []struct {
	AttachRolePolicyInput *iam.AttachRolePolicyInput
} {
	var calls []struct {
		AttachRolePolicyInput *iam.AttachRolePolicyInput
	}
	mock.lockAttachRolePolicyRequest.RLock()
	calls = mock.calls.AttachRolePolicyRequest
	mock.lockAttachRolePolicyRequest.RUnlock()
	return calls
}

// AttachRolePolicyWithContext calls AttachRolePolicyWithContextFunc.
func (mock *IAMAPIMock) AttachRolePolicyWithContext(contextMoqParam context.Context, attachRolePolicyInput *iam.AttachRolePolicyInput, options ...request.Option) (*iam.AttachRolePolicyOutput, error) {
	if mock.AttachRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.AttachRolePolicyWithContextFunc: method is nil but IAMAPI.AttachRolePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		AttachRolePolicyInput *iam.AttachRolePolicyInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		AttachRolePolicyInput: attachRolePolicyInput,
		Options:               options,
	}
	mock.lockAttachRolePolicyWithContext.Lock()
	mock.calls.AttachRolePolicyWithContext = append(mock.calls.AttachRolePolicyWithContext, callInfo)
	mock.lockAttachRolePolicyWithContext.Unlock()
	return mock.AttachRolePolicyWithContextFunc(contextMoqParam, attachRolePolicyInput, options...)
}

// AttachRolePolicyWithContextCalls gets all the calls that were made to AttachRolePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.AttachRolePolicyWithContextCalls())
func (mock *IAMAPIMock) AttachRolePolicyWithContextCalls() []struct {
	ContextMoqParam       context.Context
	AttachRolePolicyInput *iam.AttachRolePolicyInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		AttachRolePolicyInput *iam.AttachRolePolicyInput
		Options               []request.Option
	}
	mock.lockAttachRolePolicyWithContext.RLock()
	calls = mock.calls.AttachRolePolicyWithContext
	mock.lockAttachRolePolicyWithContext.RUnlock()
	return calls
}

// AttachUserPolicy calls AttachUserPolicyFunc.
func (mock *IAMAPIMock) AttachUserPolicy(attachUserPolicyInput *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	if mock.AttachUserPolicyFunc == nil {
		panic("IAMAPIMock.AttachUserPolicyFunc: method is nil but IAMAPI.AttachUserPolicy was just called")
	}
	callInfo := struct {
		AttachUserPolicyInput *iam.AttachUserPolicyInput
	}{
		AttachUserPolicyInput: attachUserPolicyInput,
	}
	mock.lockAttachUserPolicy.Lock()
	mock.calls.AttachUserPolicy = append(mock.calls.AttachUserPolicy, callInfo)
	mock.lockAttachUserPolicy.Unlock()
	return mock.AttachUserPolicyFunc(attachUserPolicyInput)
}

// AttachUserPolicyCalls gets all the calls that were made to AttachUserPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.AttachUserPolicyCalls())
func (mock *IAMAPIMock) AttachUserPolicyCalls() []struct {
	AttachUserPolicyInput *iam.AttachUserPolicyInput
} {
	var calls []struct {
		AttachUserPolicyInput *iam.AttachUserPolicyInput
	}
	mock.lockAttachUserPolicy.RLock()
	calls = mock.calls.AttachUserPolicy
	mock.lockAttachUserPolicy.RUnlock()
	return calls
}

// AttachUserPolicyRequest calls AttachUserPolicyRequestFunc.
func (mock *IAMAPIMock) AttachUserPolicyRequest(attachUserPolicyInput *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput) {
	if mock.AttachUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.AttachUserPolicyRequestFunc: method is nil but IAMAPI.AttachUserPolicyRequest was just called")
	}
	callInfo := struct {
		AttachUserPolicyInput *iam.AttachUserPolicyInput
	}{
		AttachUserPolicyInput: attachUserPolicyInput,
	}
	mock.lockAttachUserPolicyRequest.Lock()
	mock.calls.AttachUserPolicyRequest = append(mock.calls.AttachUserPolicyRequest, callInfo)
	mock.lockAttachUserPolicyRequest.Unlock()
	return mock.AttachUserPolicyRequestFunc(attachUserPolicyInput)
}

// AttachUserPolicyRequestCalls gets all the calls that were made to AttachUserPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.AttachUserPolicyRequestCalls())
func (mock *IAMAPIMock) AttachUserPolicyRequestCalls() []struct {
	AttachUserPolicyInput *iam.AttachUserPolicyInput
} {
	var calls []struct {
		AttachUserPolicyInput *iam.AttachUserPolicyInput
	}
	mock.lockAttachUserPolicyRequest.RLock()
	calls = mock.calls.AttachUserPolicyRequest
	mock.lockAttachUserPolicyRequest.RUnlock()
	return calls
}

// AttachUserPolicyWithContext calls AttachUserPolicyWithContextFunc.
func (mock *IAMAPIMock) AttachUserPolicyWithContext(contextMoqParam context.Context, attachUserPolicyInput *iam.AttachUserPolicyInput, options ...request.Option) (*iam.AttachUserPolicyOutput, error) {
	if mock.AttachUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.AttachUserPolicyWithContextFunc: method is nil but IAMAPI.AttachUserPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		AttachUserPolicyInput *iam.AttachUserPolicyInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		AttachUserPolicyInput: attachUserPolicyInput,
		Options:               options,
	}
	mock.lockAttachUserPolicyWithContext.Lock()
	mock.calls.AttachUserPolicyWithContext = append(mock.calls.AttachUserPolicyWithContext, callInfo)
	mock.lockAttachUserPolicyWithContext.Unlock()
	return mock.AttachUserPolicyWithContextFunc(contextMoqParam, attachUserPolicyInput, options...)
}

// AttachUserPolicyWithContextCalls gets all the calls that were made to AttachUserPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.AttachUserPolicyWithContextCalls())
func (mock *IAMAPIMock) AttachUserPolicyWithContextCalls() []struct {
	ContextMoqParam       context.Context
	AttachUserPolicyInput *iam.AttachUserPolicyInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		AttachUserPolicyInput *iam.AttachUserPolicyInput
		Options               []request.Option
	}
	mock.lockAttachUserPolicyWithContext.RLock()
	calls = mock.calls.AttachUserPolicyWithContext
	mock.lockAttachUserPolicyWithContext.RUnlock()
	return calls
}

// ChangePassword calls ChangePasswordFunc.
func (mock *IAMAPIMock) ChangePassword(changePasswordInput *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	if mock.ChangePasswordFunc == nil {
		panic("IAMAPIMock.ChangePasswordFunc: method is nil but IAMAPI.ChangePassword was just called")
	}
	callInfo := struct {
		ChangePasswordInput *iam.ChangePasswordInput
	}{
		ChangePasswordInput: changePasswordInput,
	}
	mock.lockChangePassword.Lock()
	mock.calls.ChangePassword = append(mock.calls.ChangePassword, callInfo)
	mock.lockChangePassword.Unlock()
	return mock.ChangePasswordFunc(changePasswordInput)
}

// ChangePasswordCalls gets all the calls that were made to ChangePassword.
// Check the length with:
//
//	len(mockedIAMAPI.ChangePasswordCalls())
func (mock *IAMAPIMock) ChangePasswordCalls() []struct {
	ChangePasswordInput *iam.ChangePasswordInput
} {
	var calls []struct {
		ChangePasswordInput *iam.ChangePasswordInput
	}
	mock.lockChangePassword.RLock()
	calls = mock.calls.ChangePassword
	mock.lockChangePassword.RUnlock()
	return calls
}

// ChangePasswordRequest calls ChangePasswordRequestFunc.
func (mock *IAMAPIMock) ChangePasswordRequest(changePasswordInput *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput) {
	if mock.ChangePasswordRequestFunc == nil {
		panic("IAMAPIMock.ChangePasswordRequestFunc: method is nil but IAMAPI.ChangePasswordRequest was just called")
	}
	callInfo := struct {
		ChangePasswordInput *iam.ChangePasswordInput
	}{
		ChangePasswordInput: changePasswordInput,
	}
	mock.lockChangePasswordRequest.Lock()
	mock.calls.ChangePasswordRequest = append(mock.calls.ChangePasswordRequest, callInfo)
	mock.lockChangePasswordRequest.Unlock()
	return mock.ChangePasswordRequestFunc(changePasswordInput)
}

// ChangePasswordRequestCalls gets all the calls that were made to ChangePasswordRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ChangePasswordRequestCalls())
func (mock *IAMAPIMock) ChangePasswordRequestCalls() []struct {
	ChangePasswordInput *iam.ChangePasswordInput
} {
	var calls []struct {
		ChangePasswordInput *iam.ChangePasswordInput
	}
	mock.lockChangePasswordRequest.RLock()
	calls = mock.calls.ChangePasswordRequest
	mock.lockChangePasswordRequest.RUnlock()
	return calls
}

// ChangePasswordWithContext calls ChangePasswordWithContextFunc.
func (mock *IAMAPIMock) ChangePasswordWithContext(contextMoqParam context.Context, changePasswordInput *iam.ChangePasswordInput, options ...request.Option) (*iam.ChangePasswordOutput, error) {
	if mock.ChangePasswordWithContextFunc == nil {
		panic("IAMAPIMock.ChangePasswordWithContextFunc: method is nil but IAMAPI.ChangePasswordWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		ChangePasswordInput *iam.ChangePasswordInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		ChangePasswordInput: changePasswordInput,
		Options:             options,
	}
	mock.lockChangePasswordWithContext.Lock()
	mock.calls.ChangePasswordWithContext = append(mock.calls.ChangePasswordWithContext, callInfo)
	mock.lockChangePasswordWithContext.Unlock()
	return mock.ChangePasswordWithContextFunc(contextMoqParam, changePasswordInput, options...)
}

// ChangePasswordWithContextCalls gets all the calls that were made to ChangePasswordWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ChangePasswordWithContextCalls())
func (mock *IAMAPIMock) ChangePasswordWithContextCalls() []struct {
	ContextMoqParam     context.Context
	ChangePasswordInput *iam.ChangePasswordInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		ChangePasswordInput *iam.ChangePasswordInput
		Options             []request.Option
	}
	mock.lockChangePasswordWithContext.RLock()
	calls = mock.calls.ChangePasswordWithContext
	mock.lockChangePasswordWithContext.RUnlock()
	return calls
}

// CreateAccessKey calls CreateAccessKeyFunc.
func (mock *IAMAPIMock) CreateAccessKey(createAccessKeyInput *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	if mock.CreateAccessKeyFunc == nil {
		panic("IAMAPIMock.CreateAccessKeyFunc: method is nil but IAMAPI.CreateAccessKey was just called")
	}
	callInfo := struct {
		CreateAccessKeyInput *iam.CreateAccessKeyInput
	}{
		CreateAccessKeyInput: createAccessKeyInput,
	}
	mock.lockCreateAccessKey.Lock()
	mock.calls.CreateAccessKey = append(mock.calls.CreateAccessKey, callInfo)
	mock.lockCreateAccessKey.Unlock()
	return mock.CreateAccessKeyFunc(createAccessKeyInput)
}

// CreateAccessKeyCalls gets all the calls that were made to CreateAccessKey.
// Check the length with:
//
//	len(mockedIAMAPI.CreateAccessKeyCalls())
func (mock *IAMAPIMock) CreateAccessKeyCalls() []struct {
	CreateAccessKeyInput *iam.CreateAccessKeyInput
} {
	var calls []struct {
		CreateAccessKeyInput *iam.CreateAccessKeyInput
	}
	mock.lockCreateAccessKey.RLock()
	calls = mock.calls.CreateAccessKey
	mock.lockCreateAccessKey.RUnlock()
	return calls
}

// CreateAccessKeyRequest calls CreateAccessKeyRequestFunc.
func (mock *IAMAPIMock) CreateAccessKeyRequest(createAccessKeyInput *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput) {
	if mock.CreateAccessKeyRequestFunc == nil {
		panic("IAMAPIMock.CreateAccessKeyRequestFunc: method is nil but IAMAPI.CreateAccessKeyRequest was just called")
	}
	callInfo := struct {
		CreateAccessKeyInput *iam.CreateAccessKeyInput
	}{
		CreateAccessKeyInput: createAccessKeyInput,
	}
	mock.lockCreateAccessKeyRequest.Lock()
	mock.calls.CreateAccessKeyRequest = append(mock.calls.CreateAccessKeyRequest, callInfo)
	mock.lockCreateAccessKeyRequest.Unlock()
	return mock.CreateAccessKeyRequestFunc(createAccessKeyInput)
}

// CreateAccessKeyRequestCalls gets all the calls that were made to CreateAccessKeyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateAccessKeyRequestCalls())
func (mock *IAMAPIMock) CreateAccessKeyRequestCalls() []struct {
	CreateAccessKeyInput *iam.CreateAccessKeyInput
} {
	var calls []struct {
		CreateAccessKeyInput *iam.CreateAccessKeyInput
	}
	mock.lockCreateAccessKeyRequest.RLock()
	calls = mock.calls.CreateAccessKeyRequest
	mock.lockCreateAccessKeyRequest.RUnlock()
	return calls
}

// CreateAccessKeyWithContext calls CreateAccessKeyWithContextFunc.
func (mock *IAMAPIMock) CreateAccessKeyWithContext(contextMoqParam context.Context, createAccessKeyInput *iam.CreateAccessKeyInput, options ...request.Option) (*iam.CreateAccessKeyOutput, error) {
	if mock.CreateAccessKeyWithContextFunc == nil {
		panic("IAMAPIMock.CreateAccessKeyWithContextFunc: method is nil but IAMAPI.CreateAccessKeyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		CreateAccessKeyInput *iam.CreateAccessKeyInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		CreateAccessKeyInput: createAccessKeyInput,
		Options:              options,
	}
	mock.lockCreateAccessKeyWithContext.Lock()
	mock.calls.CreateAccessKeyWithContext = append(mock.calls.CreateAccessKeyWithContext, callInfo)
	mock.lockCreateAccessKeyWithContext.Unlock()
	return mock.CreateAccessKeyWithContextFunc(contextMoqParam, createAccessKeyInput, options...)
}

// CreateAccessKeyWithContextCalls gets all the calls that were made to CreateAccessKeyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateAccessKeyWithContextCalls())
func (mock *IAMAPIMock) CreateAccessKeyWithContextCalls() []struct {
	ContextMoqParam      context.Context
	CreateAccessKeyInput *iam.CreateAccessKeyInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		CreateAccessKeyInput *iam.CreateAccessKeyInput
		Options              []request.Option
	}
	mock.lockCreateAccessKeyWithContext.RLock()
	calls = mock.calls.CreateAccessKeyWithContext
	mock.lockCreateAccessKeyWithContext.RUnlock()
	return calls
}

// CreateAccountAlias calls CreateAccountAliasFunc.
func (mock *IAMAPIMock) CreateAccountAlias(createAccountAliasInput *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	if mock.CreateAccountAliasFunc == nil {
		panic("IAMAPIMock.CreateAccountAliasFunc: method is nil but IAMAPI.CreateAccountAlias was just called")
	}
	callInfo := struct {
		CreateAccountAliasInput *iam.CreateAccountAliasInput
	}{
		CreateAccountAliasInput: createAccountAliasInput,
	}
	mock.lockCreateAccountAlias.Lock()
	mock.calls.CreateAccountAlias = append(mock.calls.CreateAccountAlias, callInfo)
	mock.lockCreateAccountAlias.Unlock()
	return mock.CreateAccountAliasFunc(createAccountAliasInput)
}

// CreateAccountAliasCalls gets all the calls that were made to CreateAccountAlias.
// Check the length with:
//
//	len(mockedIAMAPI.CreateAccountAliasCalls())
func (mock *IAMAPIMock) CreateAccountAliasCalls() []struct {
	CreateAccountAliasInput *iam.CreateAccountAliasInput
} {
	var calls []struct {
		CreateAccountAliasInput *iam.CreateAccountAliasInput
	}
	mock.lockCreateAccountAlias.RLock()
	calls = mock.calls.CreateAccountAlias
	mock.lockCreateAccountAlias.RUnlock()
	return calls
}

// CreateAccountAliasRequest calls CreateAccountAliasRequestFunc.
func (mock *IAMAPIMock) CreateAccountAliasRequest(createAccountAliasInput *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput) {
	if mock.CreateAccountAliasRequestFunc == nil {
		panic("IAMAPIMock.CreateAccountAliasRequestFunc: method is nil but IAMAPI.CreateAccountAliasRequest was just called")
	}
	callInfo := struct {
		CreateAccountAliasInput *iam.CreateAccountAliasInput
	}{
		CreateAccountAliasInput: createAccountAliasInput,
	}
	mock.lockCreateAccountAliasRequest.Lock()
	mock.calls.CreateAccountAliasRequest = append(mock.calls.CreateAccountAliasRequest, callInfo)
	mock.lockCreateAccountAliasRequest.Unlock()
	return mock.CreateAccountAliasRequestFunc(createAccountAliasInput)
}

// CreateAccountAliasRequestCalls gets all the calls that were made to CreateAccountAliasRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateAccountAliasRequestCalls())
func (mock *IAMAPIMock) CreateAccountAliasRequestCalls() []struct {
	CreateAccountAliasInput *iam.CreateAccountAliasInput
} {
	var calls []struct {
		CreateAccountAliasInput *iam.CreateAccountAliasInput
	}
	mock.lockCreateAccountAliasRequest.RLock()
	calls = mock.calls.CreateAccountAliasRequest
	mock.lockCreateAccountAliasRequest.RUnlock()
	return calls
}

// CreateAccountAliasWithContext calls CreateAccountAliasWithContextFunc.
func (mock *IAMAPIMock) CreateAccountAliasWithContext(contextMoqParam context.Context, createAccountAliasInput *iam.CreateAccountAliasInput, options ...request.Option) (*iam.CreateAccountAliasOutput, error) {
	if mock.CreateAccountAliasWithContextFunc == nil {
		panic("IAMAPIMock.CreateAccountAliasWithContextFunc: method is nil but IAMAPI.CreateAccountAliasWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		CreateAccountAliasInput *iam.CreateAccountAliasInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		CreateAccountAliasInput: createAccountAliasInput,
		Options:                 options,
	}
	mock.lockCreateAccountAliasWithContext.Lock()
	mock.calls.CreateAccountAliasWithContext = append(mock.calls.CreateAccountAliasWithContext, callInfo)
	mock.lockCreateAccountAliasWithContext.Unlock()
	return mock.CreateAccountAliasWithContextFunc(contextMoqParam, createAccountAliasInput, options...)
}

// CreateAccountAliasWithContextCalls gets all the calls that were made to CreateAccountAliasWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateAccountAliasWithContextCalls())
func (mock *IAMAPIMock) CreateAccountAliasWithContextCalls() []struct {
	ContextMoqParam         context.Context
	CreateAccountAliasInput *iam.CreateAccountAliasInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		CreateAccountAliasInput *iam.CreateAccountAliasInput
		Options                 []request.Option
	}
	mock.lockCreateAccountAliasWithContext.RLock()
	calls = mock.calls.CreateAccountAliasWithContext
	mock.lockCreateAccountAliasWithContext.RUnlock()
	return calls
}

// CreateGroup calls CreateGroupFunc.
func (mock *IAMAPIMock) CreateGroup(createGroupInput *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	if mock.CreateGroupFunc == nil {
		panic("IAMAPIMock.CreateGroupFunc: method is nil but IAMAPI.CreateGroup was just called")
	}
	callInfo := struct {
		CreateGroupInput *iam.CreateGroupInput
	}{
		CreateGroupInput: createGroupInput,
	}
	mock.lockCreateGroup.Lock()
	mock.calls.CreateGroup = append(mock.calls.CreateGroup, callInfo)
	mock.lockCreateGroup.Unlock()
	return mock.CreateGroupFunc(createGroupInput)
}

// CreateGroupCalls gets all the calls that were made to CreateGroup.
// Check the length with:
//
//	len(mockedIAMAPI.CreateGroupCalls())
func (mock *IAMAPIMock) CreateGroupCalls() []struct {
	CreateGroupInput *iam.CreateGroupInput
} {
	var calls []struct {
		CreateGroupInput *iam.CreateGroupInput
	}
	mock.lockCreateGroup.RLock()
	calls = mock.calls.CreateGroup
	mock.lockCreateGroup.RUnlock()
	return calls
}

// CreateGroupRequest calls CreateGroupRequestFunc.
func (mock *IAMAPIMock) CreateGroupRequest(createGroupInput *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput) {
	if mock.CreateGroupRequestFunc == nil {
		panic("IAMAPIMock.CreateGroupRequestFunc: method is nil but IAMAPI.CreateGroupRequest was just called")
	}
	callInfo := struct {
		CreateGroupInput *iam.CreateGroupInput
	}{
		CreateGroupInput: createGroupInput,
	}
	mock.lockCreateGroupRequest.Lock()
	mock.calls.CreateGroupRequest = append(mock.calls.CreateGroupRequest, callInfo)
	mock.lockCreateGroupRequest.Unlock()
	return mock.CreateGroupRequestFunc(createGroupInput)
}

// CreateGroupRequestCalls gets all the calls that were made to CreateGroupRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateGroupRequestCalls())
func (mock *IAMAPIMock) CreateGroupRequestCalls() []struct {
	CreateGroupInput *iam.CreateGroupInput
} {
	var calls []struct {
		CreateGroupInput *iam.CreateGroupInput
	}
	mock.lockCreateGroupRequest.RLock()
	calls = mock.calls.CreateGroupRequest
	mock.lockCreateGroupRequest.RUnlock()
	return calls
}

// CreateGroupWithContext calls CreateGroupWithContextFunc.
func (mock *IAMAPIMock) CreateGroupWithContext(contextMoqParam context.Context, createGroupInput *iam.CreateGroupInput, options ...request.Option) (*iam.CreateGroupOutput, error) {
	if mock.CreateGroupWithContextFunc == nil {
		panic("IAMAPIMock.CreateGroupWithContextFunc: method is nil but IAMAPI.CreateGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		CreateGroupInput *iam.CreateGroupInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		CreateGroupInput: createGroupInput,
		Options:          options,
	}
	mock.lockCreateGroupWithContext.Lock()
	mock.calls.CreateGroupWithContext = append(mock.calls.CreateGroupWithContext, callInfo)
	mock.lockCreateGroupWithContext.Unlock()
	return mock.CreateGroupWithContextFunc(contextMoqParam, createGroupInput, options...)
}

// CreateGroupWithContextCalls gets all the calls that were made to CreateGroupWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateGroupWithContextCalls())
func (mock *IAMAPIMock) CreateGroupWithContextCalls() []struct {
	ContextMoqParam  context.Context
	CreateGroupInput *iam.CreateGroupInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		CreateGroupInput *iam.CreateGroupInput
		Options          []request.Option
	}
	mock.lockCreateGroupWithContext.RLock()
	calls = mock.calls.CreateGroupWithContext
	mock.lockCreateGroupWithContext.RUnlock()
	return calls
}

// CreateInstanceProfile calls CreateInstanceProfileFunc.
func (mock *IAMAPIMock) CreateInstanceProfile(createInstanceProfileInput *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	if mock.CreateInstanceProfileFunc == nil {
		panic("IAMAPIMock.CreateInstanceProfileFunc: method is nil but IAMAPI.CreateInstanceProfile was just called")
	}
	callInfo := struct {
		CreateInstanceProfileInput *iam.CreateInstanceProfileInput
	}{
		CreateInstanceProfileInput: createInstanceProfileInput,
	}
	mock.lockCreateInstanceProfile.Lock()
	mock.calls.CreateInstanceProfile = append(mock.calls.CreateInstanceProfile, callInfo)
	mock.lockCreateInstanceProfile.Unlock()
	return mock.CreateInstanceProfileFunc(createInstanceProfileInput)
}

// CreateInstanceProfileCalls gets all the calls that were made to CreateInstanceProfile.
// Check the length with:
//
//	len(mockedIAMAPI.CreateInstanceProfileCalls())
func (mock *IAMAPIMock) CreateInstanceProfileCalls() []struct {
	CreateInstanceProfileInput *iam.CreateInstanceProfileInput
} {
	var calls []struct {
		CreateInstanceProfileInput *iam.CreateInstanceProfileInput
	}
	mock.lockCreateInstanceProfile.RLock()
	calls = mock.calls.CreateInstanceProfile
	mock.lockCreateInstanceProfile.RUnlock()
	return calls
}

// CreateInstanceProfileRequest calls CreateInstanceProfileRequestFunc.
func (mock *IAMAPIMock) CreateInstanceProfileRequest(createInstanceProfileInput *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput) {
	if mock.CreateInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.CreateInstanceProfileRequestFunc: method is nil but IAMAPI.CreateInstanceProfileRequest was just called")
	}
	callInfo := struct {
		CreateInstanceProfileInput *iam.CreateInstanceProfileInput
	}{
		CreateInstanceProfileInput: createInstanceProfileInput,
	}
	mock.lockCreateInstanceProfileRequest.Lock()
	mock.calls.CreateInstanceProfileRequest = append(mock.calls.CreateInstanceProfileRequest, callInfo)
	mock.lockCreateInstanceProfileRequest.Unlock()
	return mock.CreateInstanceProfileRequestFunc(createInstanceProfileInput)
}

// CreateInstanceProfileRequestCalls gets all the calls that were made to CreateInstanceProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateInstanceProfileRequestCalls())
func (mock *IAMAPIMock) CreateInstanceProfileRequestCalls() []struct {
	CreateInstanceProfileInput *iam.CreateInstanceProfileInput
} {
	var calls []struct {
		CreateInstanceProfileInput *iam.CreateInstanceProfileInput
	}
	mock.lockCreateInstanceProfileRequest.RLock()
	calls = mock.calls.CreateInstanceProfileRequest
	mock.lockCreateInstanceProfileRequest.RUnlock()
	return calls
}

// CreateInstanceProfileWithContext calls CreateInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) CreateInstanceProfileWithContext(contextMoqParam context.Context, createInstanceProfileInput *iam.CreateInstanceProfileInput, options ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
	if mock.CreateInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.CreateInstanceProfileWithContextFunc: method is nil but IAMAPI.CreateInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		CreateInstanceProfileInput *iam.CreateInstanceProfileInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		CreateInstanceProfileInput: createInstanceProfileInput,
		Options:                    options,
	}
	mock.lockCreateInstanceProfileWithContext.Lock()
	mock.calls.CreateInstanceProfileWithContext = append(mock.calls.CreateInstanceProfileWithContext, callInfo)
	mock.lockCreateInstanceProfileWithContext.Unlock()
	return mock.CreateInstanceProfileWithContextFunc(contextMoqParam, createInstanceProfileInput, options...)
}

// CreateInstanceProfileWithContextCalls gets all the calls that were made to CreateInstanceProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) CreateInstanceProfileWithContextCalls() []struct {
	ContextMoqParam            context.Context
	CreateInstanceProfileInput *iam.CreateInstanceProfileInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		CreateInstanceProfileInput *iam.CreateInstanceProfileInput
		Options                    []request.Option
	}
	mock.lockCreateInstanceProfileWithContext.RLock()
	calls = mock.calls.CreateInstanceProfileWithContext
	mock.lockCreateInstanceProfileWithContext.RUnlock()
	return calls
}

// CreateLoginProfile calls CreateLoginProfileFunc.
func (mock *IAMAPIMock) CreateLoginProfile(createLoginProfileInput *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	if mock.CreateLoginProfileFunc == nil {
		panic("IAMAPIMock.CreateLoginProfileFunc: method is nil but IAMAPI.CreateLoginProfile was just called")
	}
	callInfo := struct {
		CreateLoginProfileInput *iam.CreateLoginProfileInput
	}{
		CreateLoginProfileInput: createLoginProfileInput,
	}
	mock.lockCreateLoginProfile.Lock()
	mock.calls.CreateLoginProfile = append(mock.calls.CreateLoginProfile, callInfo)
	mock.lockCreateLoginProfile.Unlock()
	return mock.CreateLoginProfileFunc(createLoginProfileInput)
}

// CreateLoginProfileCalls gets all the calls that were made to CreateLoginProfile.
// Check the length with:
//
//	len(mockedIAMAPI.CreateLoginProfileCalls())
func (mock *IAMAPIMock) CreateLoginProfileCalls() []struct {
	CreateLoginProfileInput *iam.CreateLoginProfileInput
} {
	var calls []struct {
		CreateLoginProfileInput *iam.CreateLoginProfileInput
	}
	mock.lockCreateLoginProfile.RLock()
	calls = mock.calls.CreateLoginProfile
	mock.lockCreateLoginProfile.RUnlock()
	return calls
}

// CreateLoginProfileRequest calls CreateLoginProfileRequestFunc.
func (mock *IAMAPIMock) CreateLoginProfileRequest(createLoginProfileInput *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput) {
	if mock.CreateLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.CreateLoginProfileRequestFunc: method is nil but IAMAPI.CreateLoginProfileRequest was just called")
	}
	callInfo := struct {
		CreateLoginProfileInput *iam.CreateLoginProfileInput
	}{
		CreateLoginProfileInput: createLoginProfileInput,
	}
	mock.lockCreateLoginProfileRequest.Lock()
	mock.calls.CreateLoginProfileRequest = append(mock.calls.CreateLoginProfileRequest, callInfo)
	mock.lockCreateLoginProfileRequest.Unlock()
	return mock.CreateLoginProfileRequestFunc(createLoginProfileInput)
}

// CreateLoginProfileRequestCalls gets all the calls that were made to CreateLoginProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateLoginProfileRequestCalls())
func (mock *IAMAPIMock) CreateLoginProfileRequestCalls() []struct {
	CreateLoginProfileInput *iam.CreateLoginProfileInput
} {
	var calls []struct {
		CreateLoginProfileInput *iam.CreateLoginProfileInput
	}
	mock.lockCreateLoginProfileRequest.RLock()
	calls = mock.calls.CreateLoginProfileRequest
	mock.lockCreateLoginProfileRequest.RUnlock()
	return calls
}

// CreateLoginProfileWithContext calls CreateLoginProfileWithContextFunc.
func (mock *IAMAPIMock) CreateLoginProfileWithContext(contextMoqParam context.Context, createLoginProfileInput *iam.CreateLoginProfileInput, options ...request.Option) (*iam.CreateLoginProfileOutput, error) {
	if mock.CreateLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.CreateLoginProfileWithContextFunc: method is nil but IAMAPI.CreateLoginProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		CreateLoginProfileInput *iam.CreateLoginProfileInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		CreateLoginProfileInput: createLoginProfileInput,
		Options:                 options,
	}
	mock.lockCreateLoginProfileWithContext.Lock()
	mock.calls.CreateLoginProfileWithContext = append(mock.calls.CreateLoginProfileWithContext, callInfo)
	mock.lockCreateLoginProfileWithContext.Unlock()
	return mock.CreateLoginProfileWithContextFunc(contextMoqParam, createLoginProfileInput, options...)
}

// CreateLoginProfileWithContextCalls gets all the calls that were made to CreateLoginProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateLoginProfileWithContextCalls())
func (mock *IAMAPIMock) CreateLoginProfileWithContextCalls() []struct {
	ContextMoqParam         context.Context
	CreateLoginProfileInput *iam.CreateLoginProfileInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		CreateLoginProfileInput *iam.CreateLoginProfileInput
		Options                 []request.Option
	}
	mock.lockCreateLoginProfileWithContext.RLock()
	calls = mock.calls.CreateLoginProfileWithContext
	mock.lockCreateLoginProfileWithContext.RUnlock()
	return calls
}

// CreateOpenIDConnectProvider calls CreateOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) CreateOpenIDConnectProvider(createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	if mock.CreateOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.CreateOpenIDConnectProviderFunc: method is nil but IAMAPI.CreateOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
	}{
		CreateOpenIDConnectProviderInput: createOpenIDConnectProviderInput,
	}
	mock.lockCreateOpenIDConnectProvider.Lock()
	mock.calls.CreateOpenIDConnectProvider = append(mock.calls.CreateOpenIDConnectProvider, callInfo)
	mock.lockCreateOpenIDConnectProvider.Unlock()
	return mock.CreateOpenIDConnectProviderFunc(createOpenIDConnectProviderInput)
}

// CreateOpenIDConnectProviderCalls gets all the calls that were made to CreateOpenIDConnectProvider.
// Check the length with:
//
//	len(mockedIAMAPI.CreateOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) CreateOpenIDConnectProviderCalls() []struct {
	CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
} {
	var calls []struct {
		CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
	}
	mock.lockCreateOpenIDConnectProvider.RLock()
	calls = mock.calls.CreateOpenIDConnectProvider
	mock.lockCreateOpenIDConnectProvider.RUnlock()
	return calls
}

// CreateOpenIDConnectProviderRequest calls CreateOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) CreateOpenIDConnectProviderRequest(createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput) {
	if mock.CreateOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.CreateOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.CreateOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
	}{
		CreateOpenIDConnectProviderInput: createOpenIDConnectProviderInput,
	}
	mock.lockCreateOpenIDConnectProviderRequest.Lock()
	mock.calls.CreateOpenIDConnectProviderRequest = append(mock.calls.CreateOpenIDConnectProviderRequest, callInfo)
	mock.lockCreateOpenIDConnectProviderRequest.Unlock()
	return mock.CreateOpenIDConnectProviderRequestFunc(createOpenIDConnectProviderInput)
}

// CreateOpenIDConnectProviderRequestCalls gets all the calls that were made to CreateOpenIDConnectProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) CreateOpenIDConnectProviderRequestCalls() []struct {
	CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
} {
	var calls []struct {
		CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
	}
	mock.lockCreateOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.CreateOpenIDConnectProviderRequest
	mock.lockCreateOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// CreateOpenIDConnectProviderWithContext calls CreateOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) CreateOpenIDConnectProviderWithContext(contextMoqParam context.Context, createOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput, options ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
	if mock.CreateOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.CreateOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.CreateOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		CreateOpenIDConnectProviderInput: createOpenIDConnectProviderInput,
		Options:                          options,
	}
	mock.lockCreateOpenIDConnectProviderWithContext.Lock()
	mock.calls.CreateOpenIDConnectProviderWithContext = append(mock.calls.CreateOpenIDConnectProviderWithContext, callInfo)
	mock.lockCreateOpenIDConnectProviderWithContext.Unlock()
	return mock.CreateOpenIDConnectProviderWithContextFunc(contextMoqParam, createOpenIDConnectProviderInput, options...)
}

// CreateOpenIDConnectProviderWithContextCalls gets all the calls that were made to CreateOpenIDConnectProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) CreateOpenIDConnectProviderWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		CreateOpenIDConnectProviderInput *iam.CreateOpenIDConnectProviderInput
		Options                          []request.Option
	}
	mock.lockCreateOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.CreateOpenIDConnectProviderWithContext
	mock.lockCreateOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// CreatePolicy calls CreatePolicyFunc.
func (mock *IAMAPIMock) CreatePolicy(createPolicyInput *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	if mock.CreatePolicyFunc == nil {
		panic("IAMAPIMock.CreatePolicyFunc: method is nil but IAMAPI.CreatePolicy was just called")
	}
	callInfo := struct {
		CreatePolicyInput *iam.CreatePolicyInput
	}{
		CreatePolicyInput: createPolicyInput,
	}
	mock.lockCreatePolicy.Lock()
	mock.calls.CreatePolicy = append(mock.calls.CreatePolicy, callInfo)
	mock.lockCreatePolicy.Unlock()
	return mock.CreatePolicyFunc(createPolicyInput)
}

// CreatePolicyCalls gets all the calls that were made to CreatePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.CreatePolicyCalls())
func (mock *IAMAPIMock) CreatePolicyCalls() []struct {
	CreatePolicyInput *iam.CreatePolicyInput
} {
	var calls []struct {
		CreatePolicyInput *iam.CreatePolicyInput
	}
	mock.lockCreatePolicy.RLock()
	calls = mock.calls.CreatePolicy
	mock.lockCreatePolicy.RUnlock()
	return calls
}

// CreatePolicyRequest calls CreatePolicyRequestFunc.
func (mock *IAMAPIMock) CreatePolicyRequest(createPolicyInput *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput) {
	if mock.CreatePolicyRequestFunc == nil {
		panic("IAMAPIMock.CreatePolicyRequestFunc: method is nil but IAMAPI.CreatePolicyRequest was just called")
	}
	callInfo := struct {
		CreatePolicyInput *iam.CreatePolicyInput
	}{
		CreatePolicyInput: createPolicyInput,
	}
	mock.lockCreatePolicyRequest.Lock()
	mock.calls.CreatePolicyRequest = append(mock.calls.CreatePolicyRequest, callInfo)
	mock.lockCreatePolicyRequest.Unlock()
	return mock.CreatePolicyRequestFunc(createPolicyInput)
}

// CreatePolicyRequestCalls gets all the calls that were made to CreatePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreatePolicyRequestCalls())
func (mock *IAMAPIMock) CreatePolicyRequestCalls() []struct {
	CreatePolicyInput *iam.CreatePolicyInput
} {
	var calls []struct {
		CreatePolicyInput *iam.CreatePolicyInput
	}
	mock.lockCreatePolicyRequest.RLock()
	calls = mock.calls.CreatePolicyRequest
	mock.lockCreatePolicyRequest.RUnlock()
	return calls
}

// CreatePolicyVersion calls CreatePolicyVersionFunc.
func (mock *IAMAPIMock) CreatePolicyVersion(createPolicyVersionInput *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	if mock.CreatePolicyVersionFunc == nil {
		panic("IAMAPIMock.CreatePolicyVersionFunc: method is nil but IAMAPI.CreatePolicyVersion was just called")
	}
	callInfo := struct {
		CreatePolicyVersionInput *iam.CreatePolicyVersionInput
	}{
		CreatePolicyVersionInput: createPolicyVersionInput,
	}
	mock.lockCreatePolicyVersion.Lock()
	mock.calls.CreatePolicyVersion = append(mock.calls.CreatePolicyVersion, callInfo)
	mock.lockCreatePolicyVersion.Unlock()
	return mock.CreatePolicyVersionFunc(createPolicyVersionInput)
}

// CreatePolicyVersionCalls gets all the calls that were made to CreatePolicyVersion.
// Check the length with:
//
//	len(mockedIAMAPI.CreatePolicyVersionCalls())
func (mock *IAMAPIMock) CreatePolicyVersionCalls() []struct {
	CreatePolicyVersionInput *iam.CreatePolicyVersionInput
} {
	var calls []struct {
		CreatePolicyVersionInput *iam.CreatePolicyVersionInput
	}
	mock.lockCreatePolicyVersion.RLock()
	calls = mock.calls.CreatePolicyVersion
	mock.lockCreatePolicyVersion.RUnlock()
	return calls
}

// CreatePolicyVersionRequest calls CreatePolicyVersionRequestFunc.
func (mock *IAMAPIMock) CreatePolicyVersionRequest(createPolicyVersionInput *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput) {
	if mock.CreatePolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.CreatePolicyVersionRequestFunc: method is nil but IAMAPI.CreatePolicyVersionRequest was just called")
	}
	callInfo := struct {
		CreatePolicyVersionInput *iam.CreatePolicyVersionInput
	}{
		CreatePolicyVersionInput: createPolicyVersionInput,
	}
	mock.lockCreatePolicyVersionRequest.Lock()
	mock.calls.CreatePolicyVersionRequest = append(mock.calls.CreatePolicyVersionRequest, callInfo)
	mock.lockCreatePolicyVersionRequest.Unlock()
	return mock.CreatePolicyVersionRequestFunc(createPolicyVersionInput)
}

// CreatePolicyVersionRequestCalls gets all the calls that were made to CreatePolicyVersionRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreatePolicyVersionRequestCalls())
func (mock *IAMAPIMock) CreatePolicyVersionRequestCalls() []struct {
	CreatePolicyVersionInput *iam.CreatePolicyVersionInput
} {
	var calls []struct {
		CreatePolicyVersionInput *iam.CreatePolicyVersionInput
	}
	mock.lockCreatePolicyVersionRequest.RLock()
	calls = mock.calls.CreatePolicyVersionRequest
	mock.lockCreatePolicyVersionRequest.RUnlock()
	return calls
}

// CreatePolicyVersionWithContext calls CreatePolicyVersionWithContextFunc.
func (mock *IAMAPIMock) CreatePolicyVersionWithContext(contextMoqParam context.Context, createPolicyVersionInput *iam.CreatePolicyVersionInput, options ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
	if mock.CreatePolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.CreatePolicyVersionWithContextFunc: method is nil but IAMAPI.CreatePolicyVersionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		CreatePolicyVersionInput *iam.CreatePolicyVersionInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		CreatePolicyVersionInput: createPolicyVersionInput,
		Options:                  options,
	}
	mock.lockCreatePolicyVersionWithContext.Lock()
	mock.calls.CreatePolicyVersionWithContext = append(mock.calls.CreatePolicyVersionWithContext, callInfo)
	mock.lockCreatePolicyVersionWithContext.Unlock()
	return mock.CreatePolicyVersionWithContextFunc(contextMoqParam, createPolicyVersionInput, options...)
}

// CreatePolicyVersionWithContextCalls gets all the calls that were made to CreatePolicyVersionWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreatePolicyVersionWithContextCalls())
func (mock *IAMAPIMock) CreatePolicyVersionWithContextCalls() []struct {
	ContextMoqParam          context.Context
	CreatePolicyVersionInput *iam.CreatePolicyVersionInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		CreatePolicyVersionInput *iam.CreatePolicyVersionInput
		Options                  []request.Option
	}
	mock.lockCreatePolicyVersionWithContext.RLock()
	calls = mock.calls.CreatePolicyVersionWithContext
	mock.lockCreatePolicyVersionWithContext.RUnlock()
	return calls
}

// CreatePolicyWithContext calls CreatePolicyWithContextFunc.
func (mock *IAMAPIMock) CreatePolicyWithContext(contextMoqParam context.Context, createPolicyInput *iam.CreatePolicyInput, options ...request.Option) (*iam.CreatePolicyOutput, error) {
	if mock.CreatePolicyWithContextFunc == nil {
		panic("IAMAPIMock.CreatePolicyWithContextFunc: method is nil but IAMAPI.CreatePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		CreatePolicyInput *iam.CreatePolicyInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		CreatePolicyInput: createPolicyInput,
		Options:           options,
	}
	mock.lockCreatePolicyWithContext.Lock()
	mock.calls.CreatePolicyWithContext = append(mock.calls.CreatePolicyWithContext, callInfo)
	mock.lockCreatePolicyWithContext.Unlock()
	return mock.CreatePolicyWithContextFunc(contextMoqParam, createPolicyInput, options...)
}

// CreatePolicyWithContextCalls gets all the calls that were made to CreatePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreatePolicyWithContextCalls())
func (mock *IAMAPIMock) CreatePolicyWithContextCalls() []struct {
	ContextMoqParam   context.Context
	CreatePolicyInput *iam.CreatePolicyInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		CreatePolicyInput *iam.CreatePolicyInput
		Options           []request.Option
	}
	mock.lockCreatePolicyWithContext.RLock()
	calls = mock.calls.CreatePolicyWithContext
	mock.lockCreatePolicyWithContext.RUnlock()
	return calls
}

// CreateRole calls CreateRoleFunc.
func (mock *IAMAPIMock) CreateRole(createRoleInput *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	if mock.CreateRoleFunc == nil {
		panic("IAMAPIMock.CreateRoleFunc: method is nil but IAMAPI.CreateRole was just called")
	}
	callInfo := struct {
		CreateRoleInput *iam.CreateRoleInput
	}{
		CreateRoleInput: createRoleInput,
	}
	mock.lockCreateRole.Lock()
	mock.calls.CreateRole = append(mock.calls.CreateRole, callInfo)
	mock.lockCreateRole.Unlock()
	return mock.CreateRoleFunc(createRoleInput)
}

// CreateRoleCalls gets all the calls that were made to CreateRole.
// Check the length with:
//
//	len(mockedIAMAPI.CreateRoleCalls())
func (mock *IAMAPIMock) CreateRoleCalls() []struct {
	CreateRoleInput *iam.CreateRoleInput
} {
	var calls []struct {
		CreateRoleInput *iam.CreateRoleInput
	}
	mock.lockCreateRole.RLock()
	calls = mock.calls.CreateRole
	mock.lockCreateRole.RUnlock()
	return calls
}

// CreateRoleRequest calls CreateRoleRequestFunc.
func (mock *IAMAPIMock) CreateRoleRequest(createRoleInput *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput) {
	if mock.CreateRoleRequestFunc == nil {
		panic("IAMAPIMock.CreateRoleRequestFunc: method is nil but IAMAPI.CreateRoleRequest was just called")
	}
	callInfo := struct {
		CreateRoleInput *iam.CreateRoleInput
	}{
		CreateRoleInput: createRoleInput,
	}
	mock.lockCreateRoleRequest.Lock()
	mock.calls.CreateRoleRequest = append(mock.calls.CreateRoleRequest, callInfo)
	mock.lockCreateRoleRequest.Unlock()
	return mock.CreateRoleRequestFunc(createRoleInput)
}

// CreateRoleRequestCalls gets all the calls that were made to CreateRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateRoleRequestCalls())
func (mock *IAMAPIMock) CreateRoleRequestCalls() []struct {
	CreateRoleInput *iam.CreateRoleInput
} {
	var calls []struct {
		CreateRoleInput *iam.CreateRoleInput
	}
	mock.lockCreateRoleRequest.RLock()
	calls = mock.calls.CreateRoleRequest
	mock.lockCreateRoleRequest.RUnlock()
	return calls
}

// CreateRoleWithContext calls CreateRoleWithContextFunc.
func (mock *IAMAPIMock) CreateRoleWithContext(contextMoqParam context.Context, createRoleInput *iam.CreateRoleInput, options ...request.Option) (*iam.CreateRoleOutput, error) {
	if mock.CreateRoleWithContextFunc == nil {
		panic("IAMAPIMock.CreateRoleWithContextFunc: method is nil but IAMAPI.CreateRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CreateRoleInput *iam.CreateRoleInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		CreateRoleInput: createRoleInput,
		Options:         options,
	}
	mock.lockCreateRoleWithContext.Lock()
	mock.calls.CreateRoleWithContext = append(mock.calls.CreateRoleWithContext, callInfo)
	mock.lockCreateRoleWithContext.Unlock()
	return mock.CreateRoleWithContextFunc(contextMoqParam, createRoleInput, options...)
}

// CreateRoleWithContextCalls gets all the calls that were made to CreateRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateRoleWithContextCalls())
func (mock *IAMAPIMock) CreateRoleWithContextCalls() []struct {
	ContextMoqParam context.Context
	CreateRoleInput *iam.CreateRoleInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		CreateRoleInput *iam.CreateRoleInput
		Options         []request.Option
	}
	mock.lockCreateRoleWithContext.RLock()
	calls = mock.calls.CreateRoleWithContext
	mock.lockCreateRoleWithContext.RUnlock()
	return calls
}

// CreateSAMLProvider calls CreateSAMLProviderFunc.
func (mock *IAMAPIMock) CreateSAMLProvider(createSAMLProviderInput *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	if mock.CreateSAMLProviderFunc == nil {
		panic("IAMAPIMock.CreateSAMLProviderFunc: method is nil but IAMAPI.CreateSAMLProvider was just called")
	}
	callInfo := struct {
		CreateSAMLProviderInput *iam.CreateSAMLProviderInput
	}{
		CreateSAMLProviderInput: createSAMLProviderInput,
	}
	mock.lockCreateSAMLProvider.Lock()
	mock.calls.CreateSAMLProvider = append(mock.calls.CreateSAMLProvider, callInfo)
	mock.lockCreateSAMLProvider.Unlock()
	return mock.CreateSAMLProviderFunc(createSAMLProviderInput)
}

// CreateSAMLProviderCalls gets all the calls that were made to CreateSAMLProvider.
// Check the length with:
//
//	len(mockedIAMAPI.CreateSAMLProviderCalls())
func (mock *IAMAPIMock) CreateSAMLProviderCalls() []struct {
	CreateSAMLProviderInput *iam.CreateSAMLProviderInput
} {
	var calls []struct {
		CreateSAMLProviderInput *iam.CreateSAMLProviderInput
	}
	mock.lockCreateSAMLProvider.RLock()
	calls = mock.calls.CreateSAMLProvider
	mock.lockCreateSAMLProvider.RUnlock()
	return calls
}

// CreateSAMLProviderRequest calls CreateSAMLProviderRequestFunc.
func (mock *IAMAPIMock) CreateSAMLProviderRequest(createSAMLProviderInput *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput) {
	if mock.CreateSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.CreateSAMLProviderRequestFunc: method is nil but IAMAPI.CreateSAMLProviderRequest was just called")
	}
	callInfo := struct {
		CreateSAMLProviderInput *iam.CreateSAMLProviderInput
	}{
		CreateSAMLProviderInput: createSAMLProviderInput,
	}
	mock.lockCreateSAMLProviderRequest.Lock()
	mock.calls.CreateSAMLProviderRequest = append(mock.calls.CreateSAMLProviderRequest, callInfo)
	mock.lockCreateSAMLProviderRequest.Unlock()
	return mock.CreateSAMLProviderRequestFunc(createSAMLProviderInput)
}

// CreateSAMLProviderRequestCalls gets all the calls that were made to CreateSAMLProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateSAMLProviderRequestCalls())
func (mock *IAMAPIMock) CreateSAMLProviderRequestCalls() []struct {
	CreateSAMLProviderInput *iam.CreateSAMLProviderInput
} {
	var calls []struct {
		CreateSAMLProviderInput *iam.CreateSAMLProviderInput
	}
	mock.lockCreateSAMLProviderRequest.RLock()
	calls = mock.calls.CreateSAMLProviderRequest
	mock.lockCreateSAMLProviderRequest.RUnlock()
	return calls
}

// CreateSAMLProviderWithContext calls CreateSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) CreateSAMLProviderWithContext(contextMoqParam context.Context, createSAMLProviderInput *iam.CreateSAMLProviderInput, options ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
	if mock.CreateSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.CreateSAMLProviderWithContextFunc: method is nil but IAMAPI.CreateSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		CreateSAMLProviderInput *iam.CreateSAMLProviderInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		CreateSAMLProviderInput: createSAMLProviderInput,
		Options:                 options,
	}
	mock.lockCreateSAMLProviderWithContext.Lock()
	mock.calls.CreateSAMLProviderWithContext = append(mock.calls.CreateSAMLProviderWithContext, callInfo)
	mock.lockCreateSAMLProviderWithContext.Unlock()
	return mock.CreateSAMLProviderWithContextFunc(contextMoqParam, createSAMLProviderInput, options...)
}

// CreateSAMLProviderWithContextCalls gets all the calls that were made to CreateSAMLProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) CreateSAMLProviderWithContextCalls() []struct {
	ContextMoqParam         context.Context
	CreateSAMLProviderInput *iam.CreateSAMLProviderInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		CreateSAMLProviderInput *iam.CreateSAMLProviderInput
		Options                 []request.Option
	}
	mock.lockCreateSAMLProviderWithContext.RLock()
	calls = mock.calls.CreateSAMLProviderWithContext
	mock.lockCreateSAMLProviderWithContext.RUnlock()
	return calls
}

// CreateServiceLinkedRole calls CreateServiceLinkedRoleFunc.
func (mock *IAMAPIMock) CreateServiceLinkedRole(createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	if mock.CreateServiceLinkedRoleFunc == nil {
		panic("IAMAPIMock.CreateServiceLinkedRoleFunc: method is nil but IAMAPI.CreateServiceLinkedRole was just called")
	}
	callInfo := struct {
		CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
	}{
		CreateServiceLinkedRoleInput: createServiceLinkedRoleInput,
	}
	mock.lockCreateServiceLinkedRole.Lock()
	mock.calls.CreateServiceLinkedRole = append(mock.calls.CreateServiceLinkedRole, callInfo)
	mock.lockCreateServiceLinkedRole.Unlock()
	return mock.CreateServiceLinkedRoleFunc(createServiceLinkedRoleInput)
}

// CreateServiceLinkedRoleCalls gets all the calls that were made to CreateServiceLinkedRole.
// Check the length with:
//
//	len(mockedIAMAPI.CreateServiceLinkedRoleCalls())
func (mock *IAMAPIMock) CreateServiceLinkedRoleCalls() []struct {
	CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
} {
	var calls []struct {
		CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
	}
	mock.lockCreateServiceLinkedRole.RLock()
	calls = mock.calls.CreateServiceLinkedRole
	mock.lockCreateServiceLinkedRole.RUnlock()
	return calls
}

// CreateServiceLinkedRoleRequest calls CreateServiceLinkedRoleRequestFunc.
func (mock *IAMAPIMock) CreateServiceLinkedRoleRequest(createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput) {
	if mock.CreateServiceLinkedRoleRequestFunc == nil {
		panic("IAMAPIMock.CreateServiceLinkedRoleRequestFunc: method is nil but IAMAPI.CreateServiceLinkedRoleRequest was just called")
	}
	callInfo := struct {
		CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
	}{
		CreateServiceLinkedRoleInput: createServiceLinkedRoleInput,
	}
	mock.lockCreateServiceLinkedRoleRequest.Lock()
	mock.calls.CreateServiceLinkedRoleRequest = append(mock.calls.CreateServiceLinkedRoleRequest, callInfo)
	mock.lockCreateServiceLinkedRoleRequest.Unlock()
	return mock.CreateServiceLinkedRoleRequestFunc(createServiceLinkedRoleInput)
}

// CreateServiceLinkedRoleRequestCalls gets all the calls that were made to CreateServiceLinkedRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateServiceLinkedRoleRequestCalls())
func (mock *IAMAPIMock) CreateServiceLinkedRoleRequestCalls() []struct {
	CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
} {
	var calls []struct {
		CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
	}
	mock.lockCreateServiceLinkedRoleRequest.RLock()
	calls = mock.calls.CreateServiceLinkedRoleRequest
	mock.lockCreateServiceLinkedRoleRequest.RUnlock()
	return calls
}

// CreateServiceLinkedRoleWithContext calls CreateServiceLinkedRoleWithContextFunc.
func (mock *IAMAPIMock) CreateServiceLinkedRoleWithContext(contextMoqParam context.Context, createServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput, options ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
	if mock.CreateServiceLinkedRoleWithContextFunc == nil {
		panic("IAMAPIMock.CreateServiceLinkedRoleWithContextFunc: method is nil but IAMAPI.CreateServiceLinkedRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		CreateServiceLinkedRoleInput: createServiceLinkedRoleInput,
		Options:                      options,
	}
	mock.lockCreateServiceLinkedRoleWithContext.Lock()
	mock.calls.CreateServiceLinkedRoleWithContext = append(mock.calls.CreateServiceLinkedRoleWithContext, callInfo)
	mock.lockCreateServiceLinkedRoleWithContext.Unlock()
	return mock.CreateServiceLinkedRoleWithContextFunc(contextMoqParam, createServiceLinkedRoleInput, options...)
}

// CreateServiceLinkedRoleWithContextCalls gets all the calls that were made to CreateServiceLinkedRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateServiceLinkedRoleWithContextCalls())
func (mock *IAMAPIMock) CreateServiceLinkedRoleWithContextCalls() []struct {
	ContextMoqParam              context.Context
	CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		CreateServiceLinkedRoleInput *iam.CreateServiceLinkedRoleInput
		Options                      []request.Option
	}
	mock.lockCreateServiceLinkedRoleWithContext.RLock()
	calls = mock.calls.CreateServiceLinkedRoleWithContext
	mock.lockCreateServiceLinkedRoleWithContext.RUnlock()
	return calls
}

// CreateServiceSpecificCredential calls CreateServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) CreateServiceSpecificCredential(createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	if mock.CreateServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.CreateServiceSpecificCredentialFunc: method is nil but IAMAPI.CreateServiceSpecificCredential was just called")
	}
	callInfo := struct {
		CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
	}{
		CreateServiceSpecificCredentialInput: createServiceSpecificCredentialInput,
	}
	mock.lockCreateServiceSpecificCredential.Lock()
	mock.calls.CreateServiceSpecificCredential = append(mock.calls.CreateServiceSpecificCredential, callInfo)
	mock.lockCreateServiceSpecificCredential.Unlock()
	return mock.CreateServiceSpecificCredentialFunc(createServiceSpecificCredentialInput)
}

// CreateServiceSpecificCredentialCalls gets all the calls that were made to CreateServiceSpecificCredential.
// Check the length with:
//
//	len(mockedIAMAPI.CreateServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) CreateServiceSpecificCredentialCalls() []struct {
	CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
} {
	var calls []struct {
		CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
	}
	mock.lockCreateServiceSpecificCredential.RLock()
	calls = mock.calls.CreateServiceSpecificCredential
	mock.lockCreateServiceSpecificCredential.RUnlock()
	return calls
}

// CreateServiceSpecificCredentialRequest calls CreateServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) CreateServiceSpecificCredentialRequest(createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput) {
	if mock.CreateServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.CreateServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.CreateServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
	}{
		CreateServiceSpecificCredentialInput: createServiceSpecificCredentialInput,
	}
	mock.lockCreateServiceSpecificCredentialRequest.Lock()
	mock.calls.CreateServiceSpecificCredentialRequest = append(mock.calls.CreateServiceSpecificCredentialRequest, callInfo)
	mock.lockCreateServiceSpecificCredentialRequest.Unlock()
	return mock.CreateServiceSpecificCredentialRequestFunc(createServiceSpecificCredentialInput)
}

// CreateServiceSpecificCredentialRequestCalls gets all the calls that were made to CreateServiceSpecificCredentialRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) CreateServiceSpecificCredentialRequestCalls() []struct {
	CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
} {
	var calls []struct {
		CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
	}
	mock.lockCreateServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.CreateServiceSpecificCredentialRequest
	mock.lockCreateServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// CreateServiceSpecificCredentialWithContext calls CreateServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) CreateServiceSpecificCredentialWithContext(contextMoqParam context.Context, createServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput, options ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
	if mock.CreateServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.CreateServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.CreateServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		CreateServiceSpecificCredentialInput: createServiceSpecificCredentialInput,
		Options:                              options,
	}
	mock.lockCreateServiceSpecificCredentialWithContext.Lock()
	mock.calls.CreateServiceSpecificCredentialWithContext = append(mock.calls.CreateServiceSpecificCredentialWithContext, callInfo)
	mock.lockCreateServiceSpecificCredentialWithContext.Unlock()
	return mock.CreateServiceSpecificCredentialWithContextFunc(contextMoqParam, createServiceSpecificCredentialInput, options...)
}

// CreateServiceSpecificCredentialWithContextCalls gets all the calls that were made to CreateServiceSpecificCredentialWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) CreateServiceSpecificCredentialWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		CreateServiceSpecificCredentialInput *iam.CreateServiceSpecificCredentialInput
		Options                              []request.Option
	}
	mock.lockCreateServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.CreateServiceSpecificCredentialWithContext
	mock.lockCreateServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *IAMAPIMock) CreateUser(createUserInput *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	if mock.CreateUserFunc == nil {
		panic("IAMAPIMock.CreateUserFunc: method is nil but IAMAPI.CreateUser was just called")
	}
	callInfo := struct {
		CreateUserInput *iam.CreateUserInput
	}{
		CreateUserInput: createUserInput,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(createUserInput)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedIAMAPI.CreateUserCalls())
func (mock *IAMAPIMock) CreateUserCalls() []struct {
	CreateUserInput *iam.CreateUserInput
} {
	var calls []struct {
		CreateUserInput *iam.CreateUserInput
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// CreateUserRequest calls CreateUserRequestFunc.
func (mock *IAMAPIMock) CreateUserRequest(createUserInput *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput) {
	if mock.CreateUserRequestFunc == nil {
		panic("IAMAPIMock.CreateUserRequestFunc: method is nil but IAMAPI.CreateUserRequest was just called")
	}
	callInfo := struct {
		CreateUserInput *iam.CreateUserInput
	}{
		CreateUserInput: createUserInput,
	}
	mock.lockCreateUserRequest.Lock()
	mock.calls.CreateUserRequest = append(mock.calls.CreateUserRequest, callInfo)
	mock.lockCreateUserRequest.Unlock()
	return mock.CreateUserRequestFunc(createUserInput)
}

// CreateUserRequestCalls gets all the calls that were made to CreateUserRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateUserRequestCalls())
func (mock *IAMAPIMock) CreateUserRequestCalls() []struct {
	CreateUserInput *iam.CreateUserInput
} {
	var calls []struct {
		CreateUserInput *iam.CreateUserInput
	}
	mock.lockCreateUserRequest.RLock()
	calls = mock.calls.CreateUserRequest
	mock.lockCreateUserRequest.RUnlock()
	return calls
}

// CreateUserWithContext calls CreateUserWithContextFunc.
func (mock *IAMAPIMock) CreateUserWithContext(contextMoqParam context.Context, createUserInput *iam.CreateUserInput, options ...request.Option) (*iam.CreateUserOutput, error) {
	if mock.CreateUserWithContextFunc == nil {
		panic("IAMAPIMock.CreateUserWithContextFunc: method is nil but IAMAPI.CreateUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CreateUserInput *iam.CreateUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		CreateUserInput: createUserInput,
		Options:         options,
	}
	mock.lockCreateUserWithContext.Lock()
	mock.calls.CreateUserWithContext = append(mock.calls.CreateUserWithContext, callInfo)
	mock.lockCreateUserWithContext.Unlock()
	return mock.CreateUserWithContextFunc(contextMoqParam, createUserInput, options...)
}

// CreateUserWithContextCalls gets all the calls that were made to CreateUserWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateUserWithContextCalls())
func (mock *IAMAPIMock) CreateUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	CreateUserInput *iam.CreateUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		CreateUserInput *iam.CreateUserInput
		Options         []request.Option
	}
	mock.lockCreateUserWithContext.RLock()
	calls = mock.calls.CreateUserWithContext
	mock.lockCreateUserWithContext.RUnlock()
	return calls
}

// CreateVirtualMFADevice calls CreateVirtualMFADeviceFunc.
func (mock *IAMAPIMock) CreateVirtualMFADevice(createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	if mock.CreateVirtualMFADeviceFunc == nil {
		panic("IAMAPIMock.CreateVirtualMFADeviceFunc: method is nil but IAMAPI.CreateVirtualMFADevice was just called")
	}
	callInfo := struct {
		CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
	}{
		CreateVirtualMFADeviceInput: createVirtualMFADeviceInput,
	}
	mock.lockCreateVirtualMFADevice.Lock()
	mock.calls.CreateVirtualMFADevice = append(mock.calls.CreateVirtualMFADevice, callInfo)
	mock.lockCreateVirtualMFADevice.Unlock()
	return mock.CreateVirtualMFADeviceFunc(createVirtualMFADeviceInput)
}

// CreateVirtualMFADeviceCalls gets all the calls that were made to CreateVirtualMFADevice.
// Check the length with:
//
//	len(mockedIAMAPI.CreateVirtualMFADeviceCalls())
func (mock *IAMAPIMock) CreateVirtualMFADeviceCalls() []struct {
	CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
} {
	var calls []struct {
		CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
	}
	mock.lockCreateVirtualMFADevice.RLock()
	calls = mock.calls.CreateVirtualMFADevice
	mock.lockCreateVirtualMFADevice.RUnlock()
	return calls
}

// CreateVirtualMFADeviceRequest calls CreateVirtualMFADeviceRequestFunc.
func (mock *IAMAPIMock) CreateVirtualMFADeviceRequest(createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput) {
	if mock.CreateVirtualMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.CreateVirtualMFADeviceRequestFunc: method is nil but IAMAPI.CreateVirtualMFADeviceRequest was just called")
	}
	callInfo := struct {
		CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
	}{
		CreateVirtualMFADeviceInput: createVirtualMFADeviceInput,
	}
	mock.lockCreateVirtualMFADeviceRequest.Lock()
	mock.calls.CreateVirtualMFADeviceRequest = append(mock.calls.CreateVirtualMFADeviceRequest, callInfo)
	mock.lockCreateVirtualMFADeviceRequest.Unlock()
	return mock.CreateVirtualMFADeviceRequestFunc(createVirtualMFADeviceInput)
}

// CreateVirtualMFADeviceRequestCalls gets all the calls that were made to CreateVirtualMFADeviceRequest.
// Check the length with:
//
//	len(mockedIAMAPI.CreateVirtualMFADeviceRequestCalls())
func (mock *IAMAPIMock) CreateVirtualMFADeviceRequestCalls() []struct {
	CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
} {
	var calls []struct {
		CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
	}
	mock.lockCreateVirtualMFADeviceRequest.RLock()
	calls = mock.calls.CreateVirtualMFADeviceRequest
	mock.lockCreateVirtualMFADeviceRequest.RUnlock()
	return calls
}

// CreateVirtualMFADeviceWithContext calls CreateVirtualMFADeviceWithContextFunc.
func (mock *IAMAPIMock) CreateVirtualMFADeviceWithContext(contextMoqParam context.Context, createVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput, options ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
	if mock.CreateVirtualMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.CreateVirtualMFADeviceWithContextFunc: method is nil but IAMAPI.CreateVirtualMFADeviceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		CreateVirtualMFADeviceInput: createVirtualMFADeviceInput,
		Options:                     options,
	}
	mock.lockCreateVirtualMFADeviceWithContext.Lock()
	mock.calls.CreateVirtualMFADeviceWithContext = append(mock.calls.CreateVirtualMFADeviceWithContext, callInfo)
	mock.lockCreateVirtualMFADeviceWithContext.Unlock()
	return mock.CreateVirtualMFADeviceWithContextFunc(contextMoqParam, createVirtualMFADeviceInput, options...)
}

// CreateVirtualMFADeviceWithContextCalls gets all the calls that were made to CreateVirtualMFADeviceWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.CreateVirtualMFADeviceWithContextCalls())
func (mock *IAMAPIMock) CreateVirtualMFADeviceWithContextCalls() []struct {
	ContextMoqParam             context.Context
	CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		CreateVirtualMFADeviceInput *iam.CreateVirtualMFADeviceInput
		Options                     []request.Option
	}
	mock.lockCreateVirtualMFADeviceWithContext.RLock()
	calls = mock.calls.CreateVirtualMFADeviceWithContext
	mock.lockCreateVirtualMFADeviceWithContext.RUnlock()
	return calls
}

// DeactivateMFADevice calls DeactivateMFADeviceFunc.
func (mock *IAMAPIMock) DeactivateMFADevice(deactivateMFADeviceInput *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	if mock.DeactivateMFADeviceFunc == nil {
		panic("IAMAPIMock.DeactivateMFADeviceFunc: method is nil but IAMAPI.DeactivateMFADevice was just called")
	}
	callInfo := struct {
		DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
	}{
		DeactivateMFADeviceInput: deactivateMFADeviceInput,
	}
	mock.lockDeactivateMFADevice.Lock()
	mock.calls.DeactivateMFADevice = append(mock.calls.DeactivateMFADevice, callInfo)
	mock.lockDeactivateMFADevice.Unlock()
	return mock.DeactivateMFADeviceFunc(deactivateMFADeviceInput)
}

// DeactivateMFADeviceCalls gets all the calls that were made to DeactivateMFADevice.
// Check the length with:
//
//	len(mockedIAMAPI.DeactivateMFADeviceCalls())
func (mock *IAMAPIMock) DeactivateMFADeviceCalls() []struct {
	DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
} {
	var calls []struct {
		DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
	}
	mock.lockDeactivateMFADevice.RLock()
	calls = mock.calls.DeactivateMFADevice
	mock.lockDeactivateMFADevice.RUnlock()
	return calls
}

// DeactivateMFADeviceRequest calls DeactivateMFADeviceRequestFunc.
func (mock *IAMAPIMock) DeactivateMFADeviceRequest(deactivateMFADeviceInput *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput) {
	if mock.DeactivateMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.DeactivateMFADeviceRequestFunc: method is nil but IAMAPI.DeactivateMFADeviceRequest was just called")
	}
	callInfo := struct {
		DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
	}{
		DeactivateMFADeviceInput: deactivateMFADeviceInput,
	}
	mock.lockDeactivateMFADeviceRequest.Lock()
	mock.calls.DeactivateMFADeviceRequest = append(mock.calls.DeactivateMFADeviceRequest, callInfo)
	mock.lockDeactivateMFADeviceRequest.Unlock()
	return mock.DeactivateMFADeviceRequestFunc(deactivateMFADeviceInput)
}

// DeactivateMFADeviceRequestCalls gets all the calls that were made to DeactivateMFADeviceRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeactivateMFADeviceRequestCalls())
func (mock *IAMAPIMock) DeactivateMFADeviceRequestCalls() []struct {
	DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
} {
	var calls []struct {
		DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
	}
	mock.lockDeactivateMFADeviceRequest.RLock()
	calls = mock.calls.DeactivateMFADeviceRequest
	mock.lockDeactivateMFADeviceRequest.RUnlock()
	return calls
}

// DeactivateMFADeviceWithContext calls DeactivateMFADeviceWithContextFunc.
func (mock *IAMAPIMock) DeactivateMFADeviceWithContext(contextMoqParam context.Context, deactivateMFADeviceInput *iam.DeactivateMFADeviceInput, options ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
	if mock.DeactivateMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.DeactivateMFADeviceWithContextFunc: method is nil but IAMAPI.DeactivateMFADeviceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DeactivateMFADeviceInput: deactivateMFADeviceInput,
		Options:                  options,
	}
	mock.lockDeactivateMFADeviceWithContext.Lock()
	mock.calls.DeactivateMFADeviceWithContext = append(mock.calls.DeactivateMFADeviceWithContext, callInfo)
	mock.lockDeactivateMFADeviceWithContext.Unlock()
	return mock.DeactivateMFADeviceWithContextFunc(contextMoqParam, deactivateMFADeviceInput, options...)
}

// DeactivateMFADeviceWithContextCalls gets all the calls that were made to DeactivateMFADeviceWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeactivateMFADeviceWithContextCalls())
func (mock *IAMAPIMock) DeactivateMFADeviceWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeactivateMFADeviceInput *iam.DeactivateMFADeviceInput
		Options                  []request.Option
	}
	mock.lockDeactivateMFADeviceWithContext.RLock()
	calls = mock.calls.DeactivateMFADeviceWithContext
	mock.lockDeactivateMFADeviceWithContext.RUnlock()
	return calls
}

// DeleteAccessKey calls DeleteAccessKeyFunc.
func (mock *IAMAPIMock) DeleteAccessKey(deleteAccessKeyInput *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	if mock.DeleteAccessKeyFunc == nil {
		panic("IAMAPIMock.DeleteAccessKeyFunc: method is nil but IAMAPI.DeleteAccessKey was just called")
	}
	callInfo := struct {
		DeleteAccessKeyInput *iam.DeleteAccessKeyInput
	}{
		DeleteAccessKeyInput: deleteAccessKeyInput,
	}
	mock.lockDeleteAccessKey.Lock()
	mock.calls.DeleteAccessKey = append(mock.calls.DeleteAccessKey, callInfo)
	mock.lockDeleteAccessKey.Unlock()
	return mock.DeleteAccessKeyFunc(deleteAccessKeyInput)
}

// DeleteAccessKeyCalls gets all the calls that were made to DeleteAccessKey.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccessKeyCalls())
func (mock *IAMAPIMock) DeleteAccessKeyCalls() []struct {
	DeleteAccessKeyInput *iam.DeleteAccessKeyInput
} {
	var calls []struct {
		DeleteAccessKeyInput *iam.DeleteAccessKeyInput
	}
	mock.lockDeleteAccessKey.RLock()
	calls = mock.calls.DeleteAccessKey
	mock.lockDeleteAccessKey.RUnlock()
	return calls
}

// DeleteAccessKeyRequest calls DeleteAccessKeyRequestFunc.
func (mock *IAMAPIMock) DeleteAccessKeyRequest(deleteAccessKeyInput *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput) {
	if mock.DeleteAccessKeyRequestFunc == nil {
		panic("IAMAPIMock.DeleteAccessKeyRequestFunc: method is nil but IAMAPI.DeleteAccessKeyRequest was just called")
	}
	callInfo := struct {
		DeleteAccessKeyInput *iam.DeleteAccessKeyInput
	}{
		DeleteAccessKeyInput: deleteAccessKeyInput,
	}
	mock.lockDeleteAccessKeyRequest.Lock()
	mock.calls.DeleteAccessKeyRequest = append(mock.calls.DeleteAccessKeyRequest, callInfo)
	mock.lockDeleteAccessKeyRequest.Unlock()
	return mock.DeleteAccessKeyRequestFunc(deleteAccessKeyInput)
}

// DeleteAccessKeyRequestCalls gets all the calls that were made to DeleteAccessKeyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccessKeyRequestCalls())
func (mock *IAMAPIMock) DeleteAccessKeyRequestCalls() []struct {
	DeleteAccessKeyInput *iam.DeleteAccessKeyInput
} {
	var calls []struct {
		DeleteAccessKeyInput *iam.DeleteAccessKeyInput
	}
	mock.lockDeleteAccessKeyRequest.RLock()
	calls = mock.calls.DeleteAccessKeyRequest
	mock.lockDeleteAccessKeyRequest.RUnlock()
	return calls
}

// DeleteAccessKeyWithContext calls DeleteAccessKeyWithContextFunc.
func (mock *IAMAPIMock) DeleteAccessKeyWithContext(contextMoqParam context.Context, deleteAccessKeyInput *iam.DeleteAccessKeyInput, options ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
	if mock.DeleteAccessKeyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteAccessKeyWithContextFunc: method is nil but IAMAPI.DeleteAccessKeyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		DeleteAccessKeyInput *iam.DeleteAccessKeyInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		DeleteAccessKeyInput: deleteAccessKeyInput,
		Options:              options,
	}
	mock.lockDeleteAccessKeyWithContext.Lock()
	mock.calls.DeleteAccessKeyWithContext = append(mock.calls.DeleteAccessKeyWithContext, callInfo)
	mock.lockDeleteAccessKeyWithContext.Unlock()
	return mock.DeleteAccessKeyWithContextFunc(contextMoqParam, deleteAccessKeyInput, options...)
}

// DeleteAccessKeyWithContextCalls gets all the calls that were made to DeleteAccessKeyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccessKeyWithContextCalls())
func (mock *IAMAPIMock) DeleteAccessKeyWithContextCalls() []struct {
	ContextMoqParam      context.Context
	DeleteAccessKeyInput *iam.DeleteAccessKeyInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		DeleteAccessKeyInput *iam.DeleteAccessKeyInput
		Options              []request.Option
	}
	mock.lockDeleteAccessKeyWithContext.RLock()
	calls = mock.calls.DeleteAccessKeyWithContext
	mock.lockDeleteAccessKeyWithContext.RUnlock()
	return calls
}

// DeleteAccountAlias calls DeleteAccountAliasFunc.
func (mock *IAMAPIMock) DeleteAccountAlias(deleteAccountAliasInput *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	if mock.DeleteAccountAliasFunc == nil {
		panic("IAMAPIMock.DeleteAccountAliasFunc: method is nil but IAMAPI.DeleteAccountAlias was just called")
	}
	callInfo := struct {
		DeleteAccountAliasInput *iam.DeleteAccountAliasInput
	}{
		DeleteAccountAliasInput: deleteAccountAliasInput,
	}
	mock.lockDeleteAccountAlias.Lock()
	mock.calls.DeleteAccountAlias = append(mock.calls.DeleteAccountAlias, callInfo)
	mock.lockDeleteAccountAlias.Unlock()
	return mock.DeleteAccountAliasFunc(deleteAccountAliasInput)
}

// DeleteAccountAliasCalls gets all the calls that were made to DeleteAccountAlias.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccountAliasCalls())
func (mock *IAMAPIMock) DeleteAccountAliasCalls() []struct {
	DeleteAccountAliasInput *iam.DeleteAccountAliasInput
} {
	var calls []struct {
		DeleteAccountAliasInput *iam.DeleteAccountAliasInput
	}
	mock.lockDeleteAccountAlias.RLock()
	calls = mock.calls.DeleteAccountAlias
	mock.lockDeleteAccountAlias.RUnlock()
	return calls
}

// DeleteAccountAliasRequest calls DeleteAccountAliasRequestFunc.
func (mock *IAMAPIMock) DeleteAccountAliasRequest(deleteAccountAliasInput *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput) {
	if mock.DeleteAccountAliasRequestFunc == nil {
		panic("IAMAPIMock.DeleteAccountAliasRequestFunc: method is nil but IAMAPI.DeleteAccountAliasRequest was just called")
	}
	callInfo := struct {
		DeleteAccountAliasInput *iam.DeleteAccountAliasInput
	}{
		DeleteAccountAliasInput: deleteAccountAliasInput,
	}
	mock.lockDeleteAccountAliasRequest.Lock()
	mock.calls.DeleteAccountAliasRequest = append(mock.calls.DeleteAccountAliasRequest, callInfo)
	mock.lockDeleteAccountAliasRequest.Unlock()
	return mock.DeleteAccountAliasRequestFunc(deleteAccountAliasInput)
}

// DeleteAccountAliasRequestCalls gets all the calls that were made to DeleteAccountAliasRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccountAliasRequestCalls())
func (mock *IAMAPIMock) DeleteAccountAliasRequestCalls() []struct {
	DeleteAccountAliasInput *iam.DeleteAccountAliasInput
} {
	var calls []struct {
		DeleteAccountAliasInput *iam.DeleteAccountAliasInput
	}
	mock.lockDeleteAccountAliasRequest.RLock()
	calls = mock.calls.DeleteAccountAliasRequest
	mock.lockDeleteAccountAliasRequest.RUnlock()
	return calls
}

// DeleteAccountAliasWithContext calls DeleteAccountAliasWithContextFunc.
func (mock *IAMAPIMock) DeleteAccountAliasWithContext(contextMoqParam context.Context, deleteAccountAliasInput *iam.DeleteAccountAliasInput, options ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
	if mock.DeleteAccountAliasWithContextFunc == nil {
		panic("IAMAPIMock.DeleteAccountAliasWithContextFunc: method is nil but IAMAPI.DeleteAccountAliasWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteAccountAliasInput *iam.DeleteAccountAliasInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteAccountAliasInput: deleteAccountAliasInput,
		Options:                 options,
	}
	mock.lockDeleteAccountAliasWithContext.Lock()
	mock.calls.DeleteAccountAliasWithContext = append(mock.calls.DeleteAccountAliasWithContext, callInfo)
	mock.lockDeleteAccountAliasWithContext.Unlock()
	return mock.DeleteAccountAliasWithContextFunc(contextMoqParam, deleteAccountAliasInput, options...)
}

// DeleteAccountAliasWithContextCalls gets all the calls that were made to DeleteAccountAliasWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccountAliasWithContextCalls())
func (mock *IAMAPIMock) DeleteAccountAliasWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DeleteAccountAliasInput *iam.DeleteAccountAliasInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteAccountAliasInput *iam.DeleteAccountAliasInput
		Options                 []request.Option
	}
	mock.lockDeleteAccountAliasWithContext.RLock()
	calls = mock.calls.DeleteAccountAliasWithContext
	mock.lockDeleteAccountAliasWithContext.RUnlock()
	return calls
}

// DeleteAccountPasswordPolicy calls DeleteAccountPasswordPolicyFunc.
func (mock *IAMAPIMock) DeleteAccountPasswordPolicy(deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	if mock.DeleteAccountPasswordPolicyFunc == nil {
		panic("IAMAPIMock.DeleteAccountPasswordPolicyFunc: method is nil but IAMAPI.DeleteAccountPasswordPolicy was just called")
	}
	callInfo := struct {
		DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
	}{
		DeleteAccountPasswordPolicyInput: deleteAccountPasswordPolicyInput,
	}
	mock.lockDeleteAccountPasswordPolicy.Lock()
	mock.calls.DeleteAccountPasswordPolicy = append(mock.calls.DeleteAccountPasswordPolicy, callInfo)
	mock.lockDeleteAccountPasswordPolicy.Unlock()
	return mock.DeleteAccountPasswordPolicyFunc(deleteAccountPasswordPolicyInput)
}

// DeleteAccountPasswordPolicyCalls gets all the calls that were made to DeleteAccountPasswordPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccountPasswordPolicyCalls())
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyCalls() []struct {
	DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
} {
	var calls []struct {
		DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
	}
	mock.lockDeleteAccountPasswordPolicy.RLock()
	calls = mock.calls.DeleteAccountPasswordPolicy
	mock.lockDeleteAccountPasswordPolicy.RUnlock()
	return calls
}

// DeleteAccountPasswordPolicyRequest calls DeleteAccountPasswordPolicyRequestFunc.
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyRequest(deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput) {
	if mock.DeleteAccountPasswordPolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteAccountPasswordPolicyRequestFunc: method is nil but IAMAPI.DeleteAccountPasswordPolicyRequest was just called")
	}
	callInfo := struct {
		DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
	}{
		DeleteAccountPasswordPolicyInput: deleteAccountPasswordPolicyInput,
	}
	mock.lockDeleteAccountPasswordPolicyRequest.Lock()
	mock.calls.DeleteAccountPasswordPolicyRequest = append(mock.calls.DeleteAccountPasswordPolicyRequest, callInfo)
	mock.lockDeleteAccountPasswordPolicyRequest.Unlock()
	return mock.DeleteAccountPasswordPolicyRequestFunc(deleteAccountPasswordPolicyInput)
}

// DeleteAccountPasswordPolicyRequestCalls gets all the calls that were made to DeleteAccountPasswordPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccountPasswordPolicyRequestCalls())
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyRequestCalls() []struct {
	DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
} {
	var calls []struct {
		DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
	}
	mock.lockDeleteAccountPasswordPolicyRequest.RLock()
	calls = mock.calls.DeleteAccountPasswordPolicyRequest
	mock.lockDeleteAccountPasswordPolicyRequest.RUnlock()
	return calls
}

// DeleteAccountPasswordPolicyWithContext calls DeleteAccountPasswordPolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyWithContext(contextMoqParam context.Context, deleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput, options ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	if mock.DeleteAccountPasswordPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteAccountPasswordPolicyWithContextFunc: method is nil but IAMAPI.DeleteAccountPasswordPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DeleteAccountPasswordPolicyInput: deleteAccountPasswordPolicyInput,
		Options:                          options,
	}
	mock.lockDeleteAccountPasswordPolicyWithContext.Lock()
	mock.calls.DeleteAccountPasswordPolicyWithContext = append(mock.calls.DeleteAccountPasswordPolicyWithContext, callInfo)
	mock.lockDeleteAccountPasswordPolicyWithContext.Unlock()
	return mock.DeleteAccountPasswordPolicyWithContextFunc(contextMoqParam, deleteAccountPasswordPolicyInput, options...)
}

// DeleteAccountPasswordPolicyWithContextCalls gets all the calls that were made to DeleteAccountPasswordPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteAccountPasswordPolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteAccountPasswordPolicyWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DeleteAccountPasswordPolicyInput *iam.DeleteAccountPasswordPolicyInput
		Options                          []request.Option
	}
	mock.lockDeleteAccountPasswordPolicyWithContext.RLock()
	calls = mock.calls.DeleteAccountPasswordPolicyWithContext
	mock.lockDeleteAccountPasswordPolicyWithContext.RUnlock()
	return calls
}

// DeleteGroup calls DeleteGroupFunc.
func (mock *IAMAPIMock) DeleteGroup(deleteGroupInput *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	if mock.DeleteGroupFunc == nil {
		panic("IAMAPIMock.DeleteGroupFunc: method is nil but IAMAPI.DeleteGroup was just called")
	}
	callInfo := struct {
		DeleteGroupInput *iam.DeleteGroupInput
	}{
		DeleteGroupInput: deleteGroupInput,
	}
	mock.lockDeleteGroup.Lock()
	mock.calls.DeleteGroup = append(mock.calls.DeleteGroup, callInfo)
	mock.lockDeleteGroup.Unlock()
	return mock.DeleteGroupFunc(deleteGroupInput)
}

// DeleteGroupCalls gets all the calls that were made to DeleteGroup.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteGroupCalls())
func (mock *IAMAPIMock) DeleteGroupCalls() []struct {
	DeleteGroupInput *iam.DeleteGroupInput
} {
	var calls []struct {
		DeleteGroupInput *iam.DeleteGroupInput
	}
	mock.lockDeleteGroup.RLock()
	calls = mock.calls.DeleteGroup
	mock.lockDeleteGroup.RUnlock()
	return calls
}

// DeleteGroupPolicy calls DeleteGroupPolicyFunc.
func (mock *IAMAPIMock) DeleteGroupPolicy(deleteGroupPolicyInput *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	if mock.DeleteGroupPolicyFunc == nil {
		panic("IAMAPIMock.DeleteGroupPolicyFunc: method is nil but IAMAPI.DeleteGroupPolicy was just called")
	}
	callInfo := struct {
		DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
	}{
		DeleteGroupPolicyInput: deleteGroupPolicyInput,
	}
	mock.lockDeleteGroupPolicy.Lock()
	mock.calls.DeleteGroupPolicy = append(mock.calls.DeleteGroupPolicy, callInfo)
	mock.lockDeleteGroupPolicy.Unlock()
	return mock.DeleteGroupPolicyFunc(deleteGroupPolicyInput)
}

// DeleteGroupPolicyCalls gets all the calls that were made to DeleteGroupPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteGroupPolicyCalls())
func (mock *IAMAPIMock) DeleteGroupPolicyCalls() []struct {
	DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
} {
	var calls []struct {
		DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
	}
	mock.lockDeleteGroupPolicy.RLock()
	calls = mock.calls.DeleteGroupPolicy
	mock.lockDeleteGroupPolicy.RUnlock()
	return calls
}

// DeleteGroupPolicyRequest calls DeleteGroupPolicyRequestFunc.
func (mock *IAMAPIMock) DeleteGroupPolicyRequest(deleteGroupPolicyInput *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput) {
	if mock.DeleteGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteGroupPolicyRequestFunc: method is nil but IAMAPI.DeleteGroupPolicyRequest was just called")
	}
	callInfo := struct {
		DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
	}{
		DeleteGroupPolicyInput: deleteGroupPolicyInput,
	}
	mock.lockDeleteGroupPolicyRequest.Lock()
	mock.calls.DeleteGroupPolicyRequest = append(mock.calls.DeleteGroupPolicyRequest, callInfo)
	mock.lockDeleteGroupPolicyRequest.Unlock()
	return mock.DeleteGroupPolicyRequestFunc(deleteGroupPolicyInput)
}

// DeleteGroupPolicyRequestCalls gets all the calls that were made to DeleteGroupPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteGroupPolicyRequestCalls())
func (mock *IAMAPIMock) DeleteGroupPolicyRequestCalls() []struct {
	DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
} {
	var calls []struct {
		DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
	}
	mock.lockDeleteGroupPolicyRequest.RLock()
	calls = mock.calls.DeleteGroupPolicyRequest
	mock.lockDeleteGroupPolicyRequest.RUnlock()
	return calls
}

// DeleteGroupPolicyWithContext calls DeleteGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteGroupPolicyWithContext(contextMoqParam context.Context, deleteGroupPolicyInput *iam.DeleteGroupPolicyInput, options ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
	if mock.DeleteGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteGroupPolicyWithContextFunc: method is nil but IAMAPI.DeleteGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		DeleteGroupPolicyInput: deleteGroupPolicyInput,
		Options:                options,
	}
	mock.lockDeleteGroupPolicyWithContext.Lock()
	mock.calls.DeleteGroupPolicyWithContext = append(mock.calls.DeleteGroupPolicyWithContext, callInfo)
	mock.lockDeleteGroupPolicyWithContext.Unlock()
	return mock.DeleteGroupPolicyWithContextFunc(contextMoqParam, deleteGroupPolicyInput, options...)
}

// DeleteGroupPolicyWithContextCalls gets all the calls that were made to DeleteGroupPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteGroupPolicyWithContextCalls() []struct {
	ContextMoqParam        context.Context
	DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DeleteGroupPolicyInput *iam.DeleteGroupPolicyInput
		Options                []request.Option
	}
	mock.lockDeleteGroupPolicyWithContext.RLock()
	calls = mock.calls.DeleteGroupPolicyWithContext
	mock.lockDeleteGroupPolicyWithContext.RUnlock()
	return calls
}

// DeleteGroupRequest calls DeleteGroupRequestFunc.
func (mock *IAMAPIMock) DeleteGroupRequest(deleteGroupInput *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput) {
	if mock.DeleteGroupRequestFunc == nil {
		panic("IAMAPIMock.DeleteGroupRequestFunc: method is nil but IAMAPI.DeleteGroupRequest was just called")
	}
	callInfo := struct {
		DeleteGroupInput *iam.DeleteGroupInput
	}{
		DeleteGroupInput: deleteGroupInput,
	}
	mock.lockDeleteGroupRequest.Lock()
	mock.calls.DeleteGroupRequest = append(mock.calls.DeleteGroupRequest, callInfo)
	mock.lockDeleteGroupRequest.Unlock()
	return mock.DeleteGroupRequestFunc(deleteGroupInput)
}

// DeleteGroupRequestCalls gets all the calls that were made to DeleteGroupRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteGroupRequestCalls())
func (mock *IAMAPIMock) DeleteGroupRequestCalls() []struct {
	DeleteGroupInput *iam.DeleteGroupInput
} {
	var calls []struct {
		DeleteGroupInput *iam.DeleteGroupInput
	}
	mock.lockDeleteGroupRequest.RLock()
	calls = mock.calls.DeleteGroupRequest
	mock.lockDeleteGroupRequest.RUnlock()
	return calls
}

// DeleteGroupWithContext calls DeleteGroupWithContextFunc.
func (mock *IAMAPIMock) DeleteGroupWithContext(contextMoqParam context.Context, deleteGroupInput *iam.DeleteGroupInput, options ...request.Option) (*iam.DeleteGroupOutput, error) {
	if mock.DeleteGroupWithContextFunc == nil {
		panic("IAMAPIMock.DeleteGroupWithContextFunc: method is nil but IAMAPI.DeleteGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		DeleteGroupInput *iam.DeleteGroupInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		DeleteGroupInput: deleteGroupInput,
		Options:          options,
	}
	mock.lockDeleteGroupWithContext.Lock()
	mock.calls.DeleteGroupWithContext = append(mock.calls.DeleteGroupWithContext, callInfo)
	mock.lockDeleteGroupWithContext.Unlock()
	return mock.DeleteGroupWithContextFunc(contextMoqParam, deleteGroupInput, options...)
}

// DeleteGroupWithContextCalls gets all the calls that were made to DeleteGroupWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteGroupWithContextCalls())
func (mock *IAMAPIMock) DeleteGroupWithContextCalls() []struct {
	ContextMoqParam  context.Context
	DeleteGroupInput *iam.DeleteGroupInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		DeleteGroupInput *iam.DeleteGroupInput
		Options          []request.Option
	}
	mock.lockDeleteGroupWithContext.RLock()
	calls = mock.calls.DeleteGroupWithContext
	mock.lockDeleteGroupWithContext.RUnlock()
	return calls
}

// DeleteInstanceProfile calls DeleteInstanceProfileFunc.
func (mock *IAMAPIMock) DeleteInstanceProfile(deleteInstanceProfileInput *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	if mock.DeleteInstanceProfileFunc == nil {
		panic("IAMAPIMock.DeleteInstanceProfileFunc: method is nil but IAMAPI.DeleteInstanceProfile was just called")
	}
	callInfo := struct {
		DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
	}{
		DeleteInstanceProfileInput: deleteInstanceProfileInput,
	}
	mock.lockDeleteInstanceProfile.Lock()
	mock.calls.DeleteInstanceProfile = append(mock.calls.DeleteInstanceProfile, callInfo)
	mock.lockDeleteInstanceProfile.Unlock()
	return mock.DeleteInstanceProfileFunc(deleteInstanceProfileInput)
}

// DeleteInstanceProfileCalls gets all the calls that were made to DeleteInstanceProfile.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteInstanceProfileCalls())
func (mock *IAMAPIMock) DeleteInstanceProfileCalls() []struct {
	DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
} {
	var calls []struct {
		DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
	}
	mock.lockDeleteInstanceProfile.RLock()
	calls = mock.calls.DeleteInstanceProfile
	mock.lockDeleteInstanceProfile.RUnlock()
	return calls
}

// DeleteInstanceProfileRequest calls DeleteInstanceProfileRequestFunc.
func (mock *IAMAPIMock) DeleteInstanceProfileRequest(deleteInstanceProfileInput *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput) {
	if mock.DeleteInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.DeleteInstanceProfileRequestFunc: method is nil but IAMAPI.DeleteInstanceProfileRequest was just called")
	}
	callInfo := struct {
		DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
	}{
		DeleteInstanceProfileInput: deleteInstanceProfileInput,
	}
	mock.lockDeleteInstanceProfileRequest.Lock()
	mock.calls.DeleteInstanceProfileRequest = append(mock.calls.DeleteInstanceProfileRequest, callInfo)
	mock.lockDeleteInstanceProfileRequest.Unlock()
	return mock.DeleteInstanceProfileRequestFunc(deleteInstanceProfileInput)
}

// DeleteInstanceProfileRequestCalls gets all the calls that were made to DeleteInstanceProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteInstanceProfileRequestCalls())
func (mock *IAMAPIMock) DeleteInstanceProfileRequestCalls() []struct {
	DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
} {
	var calls []struct {
		DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
	}
	mock.lockDeleteInstanceProfileRequest.RLock()
	calls = mock.calls.DeleteInstanceProfileRequest
	mock.lockDeleteInstanceProfileRequest.RUnlock()
	return calls
}

// DeleteInstanceProfileWithContext calls DeleteInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) DeleteInstanceProfileWithContext(contextMoqParam context.Context, deleteInstanceProfileInput *iam.DeleteInstanceProfileInput, options ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
	if mock.DeleteInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.DeleteInstanceProfileWithContextFunc: method is nil but IAMAPI.DeleteInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DeleteInstanceProfileInput: deleteInstanceProfileInput,
		Options:                    options,
	}
	mock.lockDeleteInstanceProfileWithContext.Lock()
	mock.calls.DeleteInstanceProfileWithContext = append(mock.calls.DeleteInstanceProfileWithContext, callInfo)
	mock.lockDeleteInstanceProfileWithContext.Unlock()
	return mock.DeleteInstanceProfileWithContextFunc(contextMoqParam, deleteInstanceProfileInput, options...)
}

// DeleteInstanceProfileWithContextCalls gets all the calls that were made to DeleteInstanceProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) DeleteInstanceProfileWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DeleteInstanceProfileInput *iam.DeleteInstanceProfileInput
		Options                    []request.Option
	}
	mock.lockDeleteInstanceProfileWithContext.RLock()
	calls = mock.calls.DeleteInstanceProfileWithContext
	mock.lockDeleteInstanceProfileWithContext.RUnlock()
	return calls
}

// DeleteLoginProfile calls DeleteLoginProfileFunc.
func (mock *IAMAPIMock) DeleteLoginProfile(deleteLoginProfileInput *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	if mock.DeleteLoginProfileFunc == nil {
		panic("IAMAPIMock.DeleteLoginProfileFunc: method is nil but IAMAPI.DeleteLoginProfile was just called")
	}
	callInfo := struct {
		DeleteLoginProfileInput *iam.DeleteLoginProfileInput
	}{
		DeleteLoginProfileInput: deleteLoginProfileInput,
	}
	mock.lockDeleteLoginProfile.Lock()
	mock.calls.DeleteLoginProfile = append(mock.calls.DeleteLoginProfile, callInfo)
	mock.lockDeleteLoginProfile.Unlock()
	return mock.DeleteLoginProfileFunc(deleteLoginProfileInput)
}

// DeleteLoginProfileCalls gets all the calls that were made to DeleteLoginProfile.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteLoginProfileCalls())
func (mock *IAMAPIMock) DeleteLoginProfileCalls() []struct {
	DeleteLoginProfileInput *iam.DeleteLoginProfileInput
} {
	var calls []struct {
		DeleteLoginProfileInput *iam.DeleteLoginProfileInput
	}
	mock.lockDeleteLoginProfile.RLock()
	calls = mock.calls.DeleteLoginProfile
	mock.lockDeleteLoginProfile.RUnlock()
	return calls
}

// DeleteLoginProfileRequest calls DeleteLoginProfileRequestFunc.
func (mock *IAMAPIMock) DeleteLoginProfileRequest(deleteLoginProfileInput *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput) {
	if mock.DeleteLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.DeleteLoginProfileRequestFunc: method is nil but IAMAPI.DeleteLoginProfileRequest was just called")
	}
	callInfo := struct {
		DeleteLoginProfileInput *iam.DeleteLoginProfileInput
	}{
		DeleteLoginProfileInput: deleteLoginProfileInput,
	}
	mock.lockDeleteLoginProfileRequest.Lock()
	mock.calls.DeleteLoginProfileRequest = append(mock.calls.DeleteLoginProfileRequest, callInfo)
	mock.lockDeleteLoginProfileRequest.Unlock()
	return mock.DeleteLoginProfileRequestFunc(deleteLoginProfileInput)
}

// DeleteLoginProfileRequestCalls gets all the calls that were made to DeleteLoginProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteLoginProfileRequestCalls())
func (mock *IAMAPIMock) DeleteLoginProfileRequestCalls() []struct {
	DeleteLoginProfileInput *iam.DeleteLoginProfileInput
} {
	var calls []struct {
		DeleteLoginProfileInput *iam.DeleteLoginProfileInput
	}
	mock.lockDeleteLoginProfileRequest.RLock()
	calls = mock.calls.DeleteLoginProfileRequest
	mock.lockDeleteLoginProfileRequest.RUnlock()
	return calls
}

// DeleteLoginProfileWithContext calls DeleteLoginProfileWithContextFunc.
func (mock *IAMAPIMock) DeleteLoginProfileWithContext(contextMoqParam context.Context, deleteLoginProfileInput *iam.DeleteLoginProfileInput, options ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
	if mock.DeleteLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.DeleteLoginProfileWithContextFunc: method is nil but IAMAPI.DeleteLoginProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteLoginProfileInput *iam.DeleteLoginProfileInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteLoginProfileInput: deleteLoginProfileInput,
		Options:                 options,
	}
	mock.lockDeleteLoginProfileWithContext.Lock()
	mock.calls.DeleteLoginProfileWithContext = append(mock.calls.DeleteLoginProfileWithContext, callInfo)
	mock.lockDeleteLoginProfileWithContext.Unlock()
	return mock.DeleteLoginProfileWithContextFunc(contextMoqParam, deleteLoginProfileInput, options...)
}

// DeleteLoginProfileWithContextCalls gets all the calls that were made to DeleteLoginProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteLoginProfileWithContextCalls())
func (mock *IAMAPIMock) DeleteLoginProfileWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DeleteLoginProfileInput *iam.DeleteLoginProfileInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteLoginProfileInput *iam.DeleteLoginProfileInput
		Options                 []request.Option
	}
	mock.lockDeleteLoginProfileWithContext.RLock()
	calls = mock.calls.DeleteLoginProfileWithContext
	mock.lockDeleteLoginProfileWithContext.RUnlock()
	return calls
}

// DeleteOpenIDConnectProvider calls DeleteOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) DeleteOpenIDConnectProvider(deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	if mock.DeleteOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.DeleteOpenIDConnectProviderFunc: method is nil but IAMAPI.DeleteOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
	}{
		DeleteOpenIDConnectProviderInput: deleteOpenIDConnectProviderInput,
	}
	mock.lockDeleteOpenIDConnectProvider.Lock()
	mock.calls.DeleteOpenIDConnectProvider = append(mock.calls.DeleteOpenIDConnectProvider, callInfo)
	mock.lockDeleteOpenIDConnectProvider.Unlock()
	return mock.DeleteOpenIDConnectProviderFunc(deleteOpenIDConnectProviderInput)
}

// DeleteOpenIDConnectProviderCalls gets all the calls that were made to DeleteOpenIDConnectProvider.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderCalls() []struct {
	DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
} {
	var calls []struct {
		DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
	}
	mock.lockDeleteOpenIDConnectProvider.RLock()
	calls = mock.calls.DeleteOpenIDConnectProvider
	mock.lockDeleteOpenIDConnectProvider.RUnlock()
	return calls
}

// DeleteOpenIDConnectProviderRequest calls DeleteOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderRequest(deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput) {
	if mock.DeleteOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.DeleteOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.DeleteOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
	}{
		DeleteOpenIDConnectProviderInput: deleteOpenIDConnectProviderInput,
	}
	mock.lockDeleteOpenIDConnectProviderRequest.Lock()
	mock.calls.DeleteOpenIDConnectProviderRequest = append(mock.calls.DeleteOpenIDConnectProviderRequest, callInfo)
	mock.lockDeleteOpenIDConnectProviderRequest.Unlock()
	return mock.DeleteOpenIDConnectProviderRequestFunc(deleteOpenIDConnectProviderInput)
}

// DeleteOpenIDConnectProviderRequestCalls gets all the calls that were made to DeleteOpenIDConnectProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderRequestCalls() []struct {
	DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
} {
	var calls []struct {
		DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
	}
	mock.lockDeleteOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.DeleteOpenIDConnectProviderRequest
	mock.lockDeleteOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// DeleteOpenIDConnectProviderWithContext calls DeleteOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderWithContext(contextMoqParam context.Context, deleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput, options ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	if mock.DeleteOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.DeleteOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.DeleteOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DeleteOpenIDConnectProviderInput: deleteOpenIDConnectProviderInput,
		Options:                          options,
	}
	mock.lockDeleteOpenIDConnectProviderWithContext.Lock()
	mock.calls.DeleteOpenIDConnectProviderWithContext = append(mock.calls.DeleteOpenIDConnectProviderWithContext, callInfo)
	mock.lockDeleteOpenIDConnectProviderWithContext.Unlock()
	return mock.DeleteOpenIDConnectProviderWithContextFunc(contextMoqParam, deleteOpenIDConnectProviderInput, options...)
}

// DeleteOpenIDConnectProviderWithContextCalls gets all the calls that were made to DeleteOpenIDConnectProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) DeleteOpenIDConnectProviderWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DeleteOpenIDConnectProviderInput *iam.DeleteOpenIDConnectProviderInput
		Options                          []request.Option
	}
	mock.lockDeleteOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.DeleteOpenIDConnectProviderWithContext
	mock.lockDeleteOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// DeletePolicy calls DeletePolicyFunc.
func (mock *IAMAPIMock) DeletePolicy(deletePolicyInput *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	if mock.DeletePolicyFunc == nil {
		panic("IAMAPIMock.DeletePolicyFunc: method is nil but IAMAPI.DeletePolicy was just called")
	}
	callInfo := struct {
		DeletePolicyInput *iam.DeletePolicyInput
	}{
		DeletePolicyInput: deletePolicyInput,
	}
	mock.lockDeletePolicy.Lock()
	mock.calls.DeletePolicy = append(mock.calls.DeletePolicy, callInfo)
	mock.lockDeletePolicy.Unlock()
	return mock.DeletePolicyFunc(deletePolicyInput)
}

// DeletePolicyCalls gets all the calls that were made to DeletePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DeletePolicyCalls())
func (mock *IAMAPIMock) DeletePolicyCalls() []struct {
	DeletePolicyInput *iam.DeletePolicyInput
} {
	var calls []struct {
		DeletePolicyInput *iam.DeletePolicyInput
	}
	mock.lockDeletePolicy.RLock()
	calls = mock.calls.DeletePolicy
	mock.lockDeletePolicy.RUnlock()
	return calls
}

// DeletePolicyRequest calls DeletePolicyRequestFunc.
func (mock *IAMAPIMock) DeletePolicyRequest(deletePolicyInput *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput) {
	if mock.DeletePolicyRequestFunc == nil {
		panic("IAMAPIMock.DeletePolicyRequestFunc: method is nil but IAMAPI.DeletePolicyRequest was just called")
	}
	callInfo := struct {
		DeletePolicyInput *iam.DeletePolicyInput
	}{
		DeletePolicyInput: deletePolicyInput,
	}
	mock.lockDeletePolicyRequest.Lock()
	mock.calls.DeletePolicyRequest = append(mock.calls.DeletePolicyRequest, callInfo)
	mock.lockDeletePolicyRequest.Unlock()
	return mock.DeletePolicyRequestFunc(deletePolicyInput)
}

// DeletePolicyRequestCalls gets all the calls that were made to DeletePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeletePolicyRequestCalls())
func (mock *IAMAPIMock) DeletePolicyRequestCalls() []struct {
	DeletePolicyInput *iam.DeletePolicyInput
} {
	var calls []struct {
		DeletePolicyInput *iam.DeletePolicyInput
	}
	mock.lockDeletePolicyRequest.RLock()
	calls = mock.calls.DeletePolicyRequest
	mock.lockDeletePolicyRequest.RUnlock()
	return calls
}

// DeletePolicyVersion calls DeletePolicyVersionFunc.
func (mock *IAMAPIMock) DeletePolicyVersion(deletePolicyVersionInput *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	if mock.DeletePolicyVersionFunc == nil {
		panic("IAMAPIMock.DeletePolicyVersionFunc: method is nil but IAMAPI.DeletePolicyVersion was just called")
	}
	callInfo := struct {
		DeletePolicyVersionInput *iam.DeletePolicyVersionInput
	}{
		DeletePolicyVersionInput: deletePolicyVersionInput,
	}
	mock.lockDeletePolicyVersion.Lock()
	mock.calls.DeletePolicyVersion = append(mock.calls.DeletePolicyVersion, callInfo)
	mock.lockDeletePolicyVersion.Unlock()
	return mock.DeletePolicyVersionFunc(deletePolicyVersionInput)
}

// DeletePolicyVersionCalls gets all the calls that were made to DeletePolicyVersion.
// Check the length with:
//
//	len(mockedIAMAPI.DeletePolicyVersionCalls())
func (mock *IAMAPIMock) DeletePolicyVersionCalls() []struct {
	DeletePolicyVersionInput *iam.DeletePolicyVersionInput
} {
	var calls []struct {
		DeletePolicyVersionInput *iam.DeletePolicyVersionInput
	}
	mock.lockDeletePolicyVersion.RLock()
	calls = mock.calls.DeletePolicyVersion
	mock.lockDeletePolicyVersion.RUnlock()
	return calls
}

// DeletePolicyVersionRequest calls DeletePolicyVersionRequestFunc.
func (mock *IAMAPIMock) DeletePolicyVersionRequest(deletePolicyVersionInput *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput) {
	if mock.DeletePolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.DeletePolicyVersionRequestFunc: method is nil but IAMAPI.DeletePolicyVersionRequest was just called")
	}
	callInfo := struct {
		DeletePolicyVersionInput *iam.DeletePolicyVersionInput
	}{
		DeletePolicyVersionInput: deletePolicyVersionInput,
	}
	mock.lockDeletePolicyVersionRequest.Lock()
	mock.calls.DeletePolicyVersionRequest = append(mock.calls.DeletePolicyVersionRequest, callInfo)
	mock.lockDeletePolicyVersionRequest.Unlock()
	return mock.DeletePolicyVersionRequestFunc(deletePolicyVersionInput)
}

// DeletePolicyVersionRequestCalls gets all the calls that were made to DeletePolicyVersionRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeletePolicyVersionRequestCalls())
func (mock *IAMAPIMock) DeletePolicyVersionRequestCalls() []struct {
	DeletePolicyVersionInput *iam.DeletePolicyVersionInput
} {
	var calls []struct {
		DeletePolicyVersionInput *iam.DeletePolicyVersionInput
	}
	mock.lockDeletePolicyVersionRequest.RLock()
	calls = mock.calls.DeletePolicyVersionRequest
	mock.lockDeletePolicyVersionRequest.RUnlock()
	return calls
}

// DeletePolicyVersionWithContext calls DeletePolicyVersionWithContextFunc.
func (mock *IAMAPIMock) DeletePolicyVersionWithContext(contextMoqParam context.Context, deletePolicyVersionInput *iam.DeletePolicyVersionInput, options ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
	if mock.DeletePolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.DeletePolicyVersionWithContextFunc: method is nil but IAMAPI.DeletePolicyVersionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeletePolicyVersionInput *iam.DeletePolicyVersionInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DeletePolicyVersionInput: deletePolicyVersionInput,
		Options:                  options,
	}
	mock.lockDeletePolicyVersionWithContext.Lock()
	mock.calls.DeletePolicyVersionWithContext = append(mock.calls.DeletePolicyVersionWithContext, callInfo)
	mock.lockDeletePolicyVersionWithContext.Unlock()
	return mock.DeletePolicyVersionWithContextFunc(contextMoqParam, deletePolicyVersionInput, options...)
}

// DeletePolicyVersionWithContextCalls gets all the calls that were made to DeletePolicyVersionWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeletePolicyVersionWithContextCalls())
func (mock *IAMAPIMock) DeletePolicyVersionWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DeletePolicyVersionInput *iam.DeletePolicyVersionInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeletePolicyVersionInput *iam.DeletePolicyVersionInput
		Options                  []request.Option
	}
	mock.lockDeletePolicyVersionWithContext.RLock()
	calls = mock.calls.DeletePolicyVersionWithContext
	mock.lockDeletePolicyVersionWithContext.RUnlock()
	return calls
}

// DeletePolicyWithContext calls DeletePolicyWithContextFunc.
func (mock *IAMAPIMock) DeletePolicyWithContext(contextMoqParam context.Context, deletePolicyInput *iam.DeletePolicyInput, options ...request.Option) (*iam.DeletePolicyOutput, error) {
	if mock.DeletePolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeletePolicyWithContextFunc: method is nil but IAMAPI.DeletePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		DeletePolicyInput *iam.DeletePolicyInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		DeletePolicyInput: deletePolicyInput,
		Options:           options,
	}
	mock.lockDeletePolicyWithContext.Lock()
	mock.calls.DeletePolicyWithContext = append(mock.calls.DeletePolicyWithContext, callInfo)
	mock.lockDeletePolicyWithContext.Unlock()
	return mock.DeletePolicyWithContextFunc(contextMoqParam, deletePolicyInput, options...)
}

// DeletePolicyWithContextCalls gets all the calls that were made to DeletePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeletePolicyWithContextCalls())
func (mock *IAMAPIMock) DeletePolicyWithContextCalls() []struct {
	ContextMoqParam   context.Context
	DeletePolicyInput *iam.DeletePolicyInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		DeletePolicyInput *iam.DeletePolicyInput
		Options           []request.Option
	}
	mock.lockDeletePolicyWithContext.RLock()
	calls = mock.calls.DeletePolicyWithContext
	mock.lockDeletePolicyWithContext.RUnlock()
	return calls
}

// DeleteRole calls DeleteRoleFunc.
func (mock *IAMAPIMock) DeleteRole(deleteRoleInput *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	if mock.DeleteRoleFunc == nil {
		panic("IAMAPIMock.DeleteRoleFunc: method is nil but IAMAPI.DeleteRole was just called")
	}
	callInfo := struct {
		DeleteRoleInput *iam.DeleteRoleInput
	}{
		DeleteRoleInput: deleteRoleInput,
	}
	mock.lockDeleteRole.Lock()
	mock.calls.DeleteRole = append(mock.calls.DeleteRole, callInfo)
	mock.lockDeleteRole.Unlock()
	return mock.DeleteRoleFunc(deleteRoleInput)
}

// DeleteRoleCalls gets all the calls that were made to DeleteRole.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRoleCalls())
func (mock *IAMAPIMock) DeleteRoleCalls() []struct {
	DeleteRoleInput *iam.DeleteRoleInput
} {
	var calls []struct {
		DeleteRoleInput *iam.DeleteRoleInput
	}
	mock.lockDeleteRole.RLock()
	calls = mock.calls.DeleteRole
	mock.lockDeleteRole.RUnlock()
	return calls
}

// DeleteRolePermissionsBoundary calls DeleteRolePermissionsBoundaryFunc.
func (mock *IAMAPIMock) DeleteRolePermissionsBoundary(deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	if mock.DeleteRolePermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.DeleteRolePermissionsBoundaryFunc: method is nil but IAMAPI.DeleteRolePermissionsBoundary was just called")
	}
	callInfo := struct {
		DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
	}{
		DeleteRolePermissionsBoundaryInput: deleteRolePermissionsBoundaryInput,
	}
	mock.lockDeleteRolePermissionsBoundary.Lock()
	mock.calls.DeleteRolePermissionsBoundary = append(mock.calls.DeleteRolePermissionsBoundary, callInfo)
	mock.lockDeleteRolePermissionsBoundary.Unlock()
	return mock.DeleteRolePermissionsBoundaryFunc(deleteRolePermissionsBoundaryInput)
}

// DeleteRolePermissionsBoundaryCalls gets all the calls that were made to DeleteRolePermissionsBoundary.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRolePermissionsBoundaryCalls())
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryCalls() []struct {
	DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
} {
	var calls []struct {
		DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
	}
	mock.lockDeleteRolePermissionsBoundary.RLock()
	calls = mock.calls.DeleteRolePermissionsBoundary
	mock.lockDeleteRolePermissionsBoundary.RUnlock()
	return calls
}

// DeleteRolePermissionsBoundaryRequest calls DeleteRolePermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryRequest(deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput) {
	if mock.DeleteRolePermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.DeleteRolePermissionsBoundaryRequestFunc: method is nil but IAMAPI.DeleteRolePermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
	}{
		DeleteRolePermissionsBoundaryInput: deleteRolePermissionsBoundaryInput,
	}
	mock.lockDeleteRolePermissionsBoundaryRequest.Lock()
	mock.calls.DeleteRolePermissionsBoundaryRequest = append(mock.calls.DeleteRolePermissionsBoundaryRequest, callInfo)
	mock.lockDeleteRolePermissionsBoundaryRequest.Unlock()
	return mock.DeleteRolePermissionsBoundaryRequestFunc(deleteRolePermissionsBoundaryInput)
}

// DeleteRolePermissionsBoundaryRequestCalls gets all the calls that were made to DeleteRolePermissionsBoundaryRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRolePermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryRequestCalls() []struct {
	DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
} {
	var calls []struct {
		DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
	}
	mock.lockDeleteRolePermissionsBoundaryRequest.RLock()
	calls = mock.calls.DeleteRolePermissionsBoundaryRequest
	mock.lockDeleteRolePermissionsBoundaryRequest.RUnlock()
	return calls
}

// DeleteRolePermissionsBoundaryWithContext calls DeleteRolePermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryWithContext(contextMoqParam context.Context, deleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput, options ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	if mock.DeleteRolePermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.DeleteRolePermissionsBoundaryWithContextFunc: method is nil but IAMAPI.DeleteRolePermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		DeleteRolePermissionsBoundaryInput: deleteRolePermissionsBoundaryInput,
		Options:                            options,
	}
	mock.lockDeleteRolePermissionsBoundaryWithContext.Lock()
	mock.calls.DeleteRolePermissionsBoundaryWithContext = append(mock.calls.DeleteRolePermissionsBoundaryWithContext, callInfo)
	mock.lockDeleteRolePermissionsBoundaryWithContext.Unlock()
	return mock.DeleteRolePermissionsBoundaryWithContextFunc(contextMoqParam, deleteRolePermissionsBoundaryInput, options...)
}

// DeleteRolePermissionsBoundaryWithContextCalls gets all the calls that were made to DeleteRolePermissionsBoundaryWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRolePermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) DeleteRolePermissionsBoundaryWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		DeleteRolePermissionsBoundaryInput *iam.DeleteRolePermissionsBoundaryInput
		Options                            []request.Option
	}
	mock.lockDeleteRolePermissionsBoundaryWithContext.RLock()
	calls = mock.calls.DeleteRolePermissionsBoundaryWithContext
	mock.lockDeleteRolePermissionsBoundaryWithContext.RUnlock()
	return calls
}

// DeleteRolePolicy calls DeleteRolePolicyFunc.
func (mock *IAMAPIMock) DeleteRolePolicy(deleteRolePolicyInput *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	if mock.DeleteRolePolicyFunc == nil {
		panic("IAMAPIMock.DeleteRolePolicyFunc: method is nil but IAMAPI.DeleteRolePolicy was just called")
	}
	callInfo := struct {
		DeleteRolePolicyInput *iam.DeleteRolePolicyInput
	}{
		DeleteRolePolicyInput: deleteRolePolicyInput,
	}
	mock.lockDeleteRolePolicy.Lock()
	mock.calls.DeleteRolePolicy = append(mock.calls.DeleteRolePolicy, callInfo)
	mock.lockDeleteRolePolicy.Unlock()
	return mock.DeleteRolePolicyFunc(deleteRolePolicyInput)
}

// DeleteRolePolicyCalls gets all the calls that were made to DeleteRolePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRolePolicyCalls())
func (mock *IAMAPIMock) DeleteRolePolicyCalls() []struct {
	DeleteRolePolicyInput *iam.DeleteRolePolicyInput
} {
	var calls []struct {
		DeleteRolePolicyInput *iam.DeleteRolePolicyInput
	}
	mock.lockDeleteRolePolicy.RLock()
	calls = mock.calls.DeleteRolePolicy
	mock.lockDeleteRolePolicy.RUnlock()
	return calls
}

// DeleteRolePolicyRequest calls DeleteRolePolicyRequestFunc.
func (mock *IAMAPIMock) DeleteRolePolicyRequest(deleteRolePolicyInput *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput) {
	if mock.DeleteRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteRolePolicyRequestFunc: method is nil but IAMAPI.DeleteRolePolicyRequest was just called")
	}
	callInfo := struct {
		DeleteRolePolicyInput *iam.DeleteRolePolicyInput
	}{
		DeleteRolePolicyInput: deleteRolePolicyInput,
	}
	mock.lockDeleteRolePolicyRequest.Lock()
	mock.calls.DeleteRolePolicyRequest = append(mock.calls.DeleteRolePolicyRequest, callInfo)
	mock.lockDeleteRolePolicyRequest.Unlock()
	return mock.DeleteRolePolicyRequestFunc(deleteRolePolicyInput)
}

// DeleteRolePolicyRequestCalls gets all the calls that were made to DeleteRolePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRolePolicyRequestCalls())
func (mock *IAMAPIMock) DeleteRolePolicyRequestCalls() []struct {
	DeleteRolePolicyInput *iam.DeleteRolePolicyInput
} {
	var calls []struct {
		DeleteRolePolicyInput *iam.DeleteRolePolicyInput
	}
	mock.lockDeleteRolePolicyRequest.RLock()
	calls = mock.calls.DeleteRolePolicyRequest
	mock.lockDeleteRolePolicyRequest.RUnlock()
	return calls
}

// DeleteRolePolicyWithContext calls DeleteRolePolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteRolePolicyWithContext(contextMoqParam context.Context, deleteRolePolicyInput *iam.DeleteRolePolicyInput, options ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
	if mock.DeleteRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteRolePolicyWithContextFunc: method is nil but IAMAPI.DeleteRolePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		DeleteRolePolicyInput *iam.DeleteRolePolicyInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		DeleteRolePolicyInput: deleteRolePolicyInput,
		Options:               options,
	}
	mock.lockDeleteRolePolicyWithContext.Lock()
	mock.calls.DeleteRolePolicyWithContext = append(mock.calls.DeleteRolePolicyWithContext, callInfo)
	mock.lockDeleteRolePolicyWithContext.Unlock()
	return mock.DeleteRolePolicyWithContextFunc(contextMoqParam, deleteRolePolicyInput, options...)
}

// DeleteRolePolicyWithContextCalls gets all the calls that were made to DeleteRolePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRolePolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteRolePolicyWithContextCalls() []struct {
	ContextMoqParam       context.Context
	DeleteRolePolicyInput *iam.DeleteRolePolicyInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		DeleteRolePolicyInput *iam.DeleteRolePolicyInput
		Options               []request.Option
	}
	mock.lockDeleteRolePolicyWithContext.RLock()
	calls = mock.calls.DeleteRolePolicyWithContext
	mock.lockDeleteRolePolicyWithContext.RUnlock()
	return calls
}

// DeleteRoleRequest calls DeleteRoleRequestFunc.
func (mock *IAMAPIMock) DeleteRoleRequest(deleteRoleInput *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput) {
	if mock.DeleteRoleRequestFunc == nil {
		panic("IAMAPIMock.DeleteRoleRequestFunc: method is nil but IAMAPI.DeleteRoleRequest was just called")
	}
	callInfo := struct {
		DeleteRoleInput *iam.DeleteRoleInput
	}{
		DeleteRoleInput: deleteRoleInput,
	}
	mock.lockDeleteRoleRequest.Lock()
	mock.calls.DeleteRoleRequest = append(mock.calls.DeleteRoleRequest, callInfo)
	mock.lockDeleteRoleRequest.Unlock()
	return mock.DeleteRoleRequestFunc(deleteRoleInput)
}

// DeleteRoleRequestCalls gets all the calls that were made to DeleteRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRoleRequestCalls())
func (mock *IAMAPIMock) DeleteRoleRequestCalls() []struct {
	DeleteRoleInput *iam.DeleteRoleInput
} {
	var calls []struct {
		DeleteRoleInput *iam.DeleteRoleInput
	}
	mock.lockDeleteRoleRequest.RLock()
	calls = mock.calls.DeleteRoleRequest
	mock.lockDeleteRoleRequest.RUnlock()
	return calls
}

// DeleteRoleWithContext calls DeleteRoleWithContextFunc.
func (mock *IAMAPIMock) DeleteRoleWithContext(contextMoqParam context.Context, deleteRoleInput *iam.DeleteRoleInput, options ...request.Option) (*iam.DeleteRoleOutput, error) {
	if mock.DeleteRoleWithContextFunc == nil {
		panic("IAMAPIMock.DeleteRoleWithContextFunc: method is nil but IAMAPI.DeleteRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		DeleteRoleInput *iam.DeleteRoleInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DeleteRoleInput: deleteRoleInput,
		Options:         options,
	}
	mock.lockDeleteRoleWithContext.Lock()
	mock.calls.DeleteRoleWithContext = append(mock.calls.DeleteRoleWithContext, callInfo)
	mock.lockDeleteRoleWithContext.Unlock()
	return mock.DeleteRoleWithContextFunc(contextMoqParam, deleteRoleInput, options...)
}

// DeleteRoleWithContextCalls gets all the calls that were made to DeleteRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteRoleWithContextCalls())
func (mock *IAMAPIMock) DeleteRoleWithContextCalls() []struct {
	ContextMoqParam context.Context
	DeleteRoleInput *iam.DeleteRoleInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		DeleteRoleInput *iam.DeleteRoleInput
		Options         []request.Option
	}
	mock.lockDeleteRoleWithContext.RLock()
	calls = mock.calls.DeleteRoleWithContext
	mock.lockDeleteRoleWithContext.RUnlock()
	return calls
}

// DeleteSAMLProvider calls DeleteSAMLProviderFunc.
func (mock *IAMAPIMock) DeleteSAMLProvider(deleteSAMLProviderInput *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	if mock.DeleteSAMLProviderFunc == nil {
		panic("IAMAPIMock.DeleteSAMLProviderFunc: method is nil but IAMAPI.DeleteSAMLProvider was just called")
	}
	callInfo := struct {
		DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
	}{
		DeleteSAMLProviderInput: deleteSAMLProviderInput,
	}
	mock.lockDeleteSAMLProvider.Lock()
	mock.calls.DeleteSAMLProvider = append(mock.calls.DeleteSAMLProvider, callInfo)
	mock.lockDeleteSAMLProvider.Unlock()
	return mock.DeleteSAMLProviderFunc(deleteSAMLProviderInput)
}

// DeleteSAMLProviderCalls gets all the calls that were made to DeleteSAMLProvider.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSAMLProviderCalls())
func (mock *IAMAPIMock) DeleteSAMLProviderCalls() []struct {
	DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
} {
	var calls []struct {
		DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
	}
	mock.lockDeleteSAMLProvider.RLock()
	calls = mock.calls.DeleteSAMLProvider
	mock.lockDeleteSAMLProvider.RUnlock()
	return calls
}

// DeleteSAMLProviderRequest calls DeleteSAMLProviderRequestFunc.
func (mock *IAMAPIMock) DeleteSAMLProviderRequest(deleteSAMLProviderInput *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput) {
	if mock.DeleteSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.DeleteSAMLProviderRequestFunc: method is nil but IAMAPI.DeleteSAMLProviderRequest was just called")
	}
	callInfo := struct {
		DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
	}{
		DeleteSAMLProviderInput: deleteSAMLProviderInput,
	}
	mock.lockDeleteSAMLProviderRequest.Lock()
	mock.calls.DeleteSAMLProviderRequest = append(mock.calls.DeleteSAMLProviderRequest, callInfo)
	mock.lockDeleteSAMLProviderRequest.Unlock()
	return mock.DeleteSAMLProviderRequestFunc(deleteSAMLProviderInput)
}

// DeleteSAMLProviderRequestCalls gets all the calls that were made to DeleteSAMLProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSAMLProviderRequestCalls())
func (mock *IAMAPIMock) DeleteSAMLProviderRequestCalls() []struct {
	DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
} {
	var calls []struct {
		DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
	}
	mock.lockDeleteSAMLProviderRequest.RLock()
	calls = mock.calls.DeleteSAMLProviderRequest
	mock.lockDeleteSAMLProviderRequest.RUnlock()
	return calls
}

// DeleteSAMLProviderWithContext calls DeleteSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) DeleteSAMLProviderWithContext(contextMoqParam context.Context, deleteSAMLProviderInput *iam.DeleteSAMLProviderInput, options ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
	if mock.DeleteSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.DeleteSAMLProviderWithContextFunc: method is nil but IAMAPI.DeleteSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteSAMLProviderInput: deleteSAMLProviderInput,
		Options:                 options,
	}
	mock.lockDeleteSAMLProviderWithContext.Lock()
	mock.calls.DeleteSAMLProviderWithContext = append(mock.calls.DeleteSAMLProviderWithContext, callInfo)
	mock.lockDeleteSAMLProviderWithContext.Unlock()
	return mock.DeleteSAMLProviderWithContextFunc(contextMoqParam, deleteSAMLProviderInput, options...)
}

// DeleteSAMLProviderWithContextCalls gets all the calls that were made to DeleteSAMLProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) DeleteSAMLProviderWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteSAMLProviderInput *iam.DeleteSAMLProviderInput
		Options                 []request.Option
	}
	mock.lockDeleteSAMLProviderWithContext.RLock()
	calls = mock.calls.DeleteSAMLProviderWithContext
	mock.lockDeleteSAMLProviderWithContext.RUnlock()
	return calls
}

// DeleteSSHPublicKey calls DeleteSSHPublicKeyFunc.
func (mock *IAMAPIMock) DeleteSSHPublicKey(deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	if mock.DeleteSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.DeleteSSHPublicKeyFunc: method is nil but IAMAPI.DeleteSSHPublicKey was just called")
	}
	callInfo := struct {
		DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
	}{
		DeleteSSHPublicKeyInput: deleteSSHPublicKeyInput,
	}
	mock.lockDeleteSSHPublicKey.Lock()
	mock.calls.DeleteSSHPublicKey = append(mock.calls.DeleteSSHPublicKey, callInfo)
	mock.lockDeleteSSHPublicKey.Unlock()
	return mock.DeleteSSHPublicKeyFunc(deleteSSHPublicKeyInput)
}

// DeleteSSHPublicKeyCalls gets all the calls that were made to DeleteSSHPublicKey.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSSHPublicKeyCalls())
func (mock *IAMAPIMock) DeleteSSHPublicKeyCalls() []struct {
	DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
} {
	var calls []struct {
		DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
	}
	mock.lockDeleteSSHPublicKey.RLock()
	calls = mock.calls.DeleteSSHPublicKey
	mock.lockDeleteSSHPublicKey.RUnlock()
	return calls
}

// DeleteSSHPublicKeyRequest calls DeleteSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) DeleteSSHPublicKeyRequest(deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput) {
	if mock.DeleteSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.DeleteSSHPublicKeyRequestFunc: method is nil but IAMAPI.DeleteSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
	}{
		DeleteSSHPublicKeyInput: deleteSSHPublicKeyInput,
	}
	mock.lockDeleteSSHPublicKeyRequest.Lock()
	mock.calls.DeleteSSHPublicKeyRequest = append(mock.calls.DeleteSSHPublicKeyRequest, callInfo)
	mock.lockDeleteSSHPublicKeyRequest.Unlock()
	return mock.DeleteSSHPublicKeyRequestFunc(deleteSSHPublicKeyInput)
}

// DeleteSSHPublicKeyRequestCalls gets all the calls that were made to DeleteSSHPublicKeyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) DeleteSSHPublicKeyRequestCalls() []struct {
	DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
} {
	var calls []struct {
		DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
	}
	mock.lockDeleteSSHPublicKeyRequest.RLock()
	calls = mock.calls.DeleteSSHPublicKeyRequest
	mock.lockDeleteSSHPublicKeyRequest.RUnlock()
	return calls
}

// DeleteSSHPublicKeyWithContext calls DeleteSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) DeleteSSHPublicKeyWithContext(contextMoqParam context.Context, deleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput, options ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
	if mock.DeleteSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteSSHPublicKeyWithContextFunc: method is nil but IAMAPI.DeleteSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteSSHPublicKeyInput: deleteSSHPublicKeyInput,
		Options:                 options,
	}
	mock.lockDeleteSSHPublicKeyWithContext.Lock()
	mock.calls.DeleteSSHPublicKeyWithContext = append(mock.calls.DeleteSSHPublicKeyWithContext, callInfo)
	mock.lockDeleteSSHPublicKeyWithContext.Unlock()
	return mock.DeleteSSHPublicKeyWithContextFunc(contextMoqParam, deleteSSHPublicKeyInput, options...)
}

// DeleteSSHPublicKeyWithContextCalls gets all the calls that were made to DeleteSSHPublicKeyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) DeleteSSHPublicKeyWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteSSHPublicKeyInput *iam.DeleteSSHPublicKeyInput
		Options                 []request.Option
	}
	mock.lockDeleteSSHPublicKeyWithContext.RLock()
	calls = mock.calls.DeleteSSHPublicKeyWithContext
	mock.lockDeleteSSHPublicKeyWithContext.RUnlock()
	return calls
}

// DeleteServerCertificate calls DeleteServerCertificateFunc.
func (mock *IAMAPIMock) DeleteServerCertificate(deleteServerCertificateInput *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	if mock.DeleteServerCertificateFunc == nil {
		panic("IAMAPIMock.DeleteServerCertificateFunc: method is nil but IAMAPI.DeleteServerCertificate was just called")
	}
	callInfo := struct {
		DeleteServerCertificateInput *iam.DeleteServerCertificateInput
	}{
		DeleteServerCertificateInput: deleteServerCertificateInput,
	}
	mock.lockDeleteServerCertificate.Lock()
	mock.calls.DeleteServerCertificate = append(mock.calls.DeleteServerCertificate, callInfo)
	mock.lockDeleteServerCertificate.Unlock()
	return mock.DeleteServerCertificateFunc(deleteServerCertificateInput)
}

// DeleteServerCertificateCalls gets all the calls that were made to DeleteServerCertificate.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServerCertificateCalls())
func (mock *IAMAPIMock) DeleteServerCertificateCalls() []struct {
	DeleteServerCertificateInput *iam.DeleteServerCertificateInput
} {
	var calls []struct {
		DeleteServerCertificateInput *iam.DeleteServerCertificateInput
	}
	mock.lockDeleteServerCertificate.RLock()
	calls = mock.calls.DeleteServerCertificate
	mock.lockDeleteServerCertificate.RUnlock()
	return calls
}

// DeleteServerCertificateRequest calls DeleteServerCertificateRequestFunc.
func (mock *IAMAPIMock) DeleteServerCertificateRequest(deleteServerCertificateInput *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput) {
	if mock.DeleteServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.DeleteServerCertificateRequestFunc: method is nil but IAMAPI.DeleteServerCertificateRequest was just called")
	}
	callInfo := struct {
		DeleteServerCertificateInput *iam.DeleteServerCertificateInput
	}{
		DeleteServerCertificateInput: deleteServerCertificateInput,
	}
	mock.lockDeleteServerCertificateRequest.Lock()
	mock.calls.DeleteServerCertificateRequest = append(mock.calls.DeleteServerCertificateRequest, callInfo)
	mock.lockDeleteServerCertificateRequest.Unlock()
	return mock.DeleteServerCertificateRequestFunc(deleteServerCertificateInput)
}

// DeleteServerCertificateRequestCalls gets all the calls that were made to DeleteServerCertificateRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServerCertificateRequestCalls())
func (mock *IAMAPIMock) DeleteServerCertificateRequestCalls() []struct {
	DeleteServerCertificateInput *iam.DeleteServerCertificateInput
} {
	var calls []struct {
		DeleteServerCertificateInput *iam.DeleteServerCertificateInput
	}
	mock.lockDeleteServerCertificateRequest.RLock()
	calls = mock.calls.DeleteServerCertificateRequest
	mock.lockDeleteServerCertificateRequest.RUnlock()
	return calls
}

// DeleteServerCertificateWithContext calls DeleteServerCertificateWithContextFunc.
func (mock *IAMAPIMock) DeleteServerCertificateWithContext(contextMoqParam context.Context, deleteServerCertificateInput *iam.DeleteServerCertificateInput, options ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
	if mock.DeleteServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.DeleteServerCertificateWithContextFunc: method is nil but IAMAPI.DeleteServerCertificateWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DeleteServerCertificateInput *iam.DeleteServerCertificateInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DeleteServerCertificateInput: deleteServerCertificateInput,
		Options:                      options,
	}
	mock.lockDeleteServerCertificateWithContext.Lock()
	mock.calls.DeleteServerCertificateWithContext = append(mock.calls.DeleteServerCertificateWithContext, callInfo)
	mock.lockDeleteServerCertificateWithContext.Unlock()
	return mock.DeleteServerCertificateWithContextFunc(contextMoqParam, deleteServerCertificateInput, options...)
}

// DeleteServerCertificateWithContextCalls gets all the calls that were made to DeleteServerCertificateWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServerCertificateWithContextCalls())
func (mock *IAMAPIMock) DeleteServerCertificateWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DeleteServerCertificateInput *iam.DeleteServerCertificateInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DeleteServerCertificateInput *iam.DeleteServerCertificateInput
		Options                      []request.Option
	}
	mock.lockDeleteServerCertificateWithContext.RLock()
	calls = mock.calls.DeleteServerCertificateWithContext
	mock.lockDeleteServerCertificateWithContext.RUnlock()
	return calls
}

// DeleteServiceLinkedRole calls DeleteServiceLinkedRoleFunc.
func (mock *IAMAPIMock) DeleteServiceLinkedRole(deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	if mock.DeleteServiceLinkedRoleFunc == nil {
		panic("IAMAPIMock.DeleteServiceLinkedRoleFunc: method is nil but IAMAPI.DeleteServiceLinkedRole was just called")
	}
	callInfo := struct {
		DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
	}{
		DeleteServiceLinkedRoleInput: deleteServiceLinkedRoleInput,
	}
	mock.lockDeleteServiceLinkedRole.Lock()
	mock.calls.DeleteServiceLinkedRole = append(mock.calls.DeleteServiceLinkedRole, callInfo)
	mock.lockDeleteServiceLinkedRole.Unlock()
	return mock.DeleteServiceLinkedRoleFunc(deleteServiceLinkedRoleInput)
}

// DeleteServiceLinkedRoleCalls gets all the calls that were made to DeleteServiceLinkedRole.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServiceLinkedRoleCalls())
func (mock *IAMAPIMock) DeleteServiceLinkedRoleCalls() []struct {
	DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
} {
	var calls []struct {
		DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
	}
	mock.lockDeleteServiceLinkedRole.RLock()
	calls = mock.calls.DeleteServiceLinkedRole
	mock.lockDeleteServiceLinkedRole.RUnlock()
	return calls
}

// DeleteServiceLinkedRoleRequest calls DeleteServiceLinkedRoleRequestFunc.
func (mock *IAMAPIMock) DeleteServiceLinkedRoleRequest(deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput) {
	if mock.DeleteServiceLinkedRoleRequestFunc == nil {
		panic("IAMAPIMock.DeleteServiceLinkedRoleRequestFunc: method is nil but IAMAPI.DeleteServiceLinkedRoleRequest was just called")
	}
	callInfo := struct {
		DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
	}{
		DeleteServiceLinkedRoleInput: deleteServiceLinkedRoleInput,
	}
	mock.lockDeleteServiceLinkedRoleRequest.Lock()
	mock.calls.DeleteServiceLinkedRoleRequest = append(mock.calls.DeleteServiceLinkedRoleRequest, callInfo)
	mock.lockDeleteServiceLinkedRoleRequest.Unlock()
	return mock.DeleteServiceLinkedRoleRequestFunc(deleteServiceLinkedRoleInput)
}

// DeleteServiceLinkedRoleRequestCalls gets all the calls that were made to DeleteServiceLinkedRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServiceLinkedRoleRequestCalls())
func (mock *IAMAPIMock) DeleteServiceLinkedRoleRequestCalls() []struct {
	DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
} {
	var calls []struct {
		DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
	}
	mock.lockDeleteServiceLinkedRoleRequest.RLock()
	calls = mock.calls.DeleteServiceLinkedRoleRequest
	mock.lockDeleteServiceLinkedRoleRequest.RUnlock()
	return calls
}

// DeleteServiceLinkedRoleWithContext calls DeleteServiceLinkedRoleWithContextFunc.
func (mock *IAMAPIMock) DeleteServiceLinkedRoleWithContext(contextMoqParam context.Context, deleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput, options ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
	if mock.DeleteServiceLinkedRoleWithContextFunc == nil {
		panic("IAMAPIMock.DeleteServiceLinkedRoleWithContextFunc: method is nil but IAMAPI.DeleteServiceLinkedRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DeleteServiceLinkedRoleInput: deleteServiceLinkedRoleInput,
		Options:                      options,
	}
	mock.lockDeleteServiceLinkedRoleWithContext.Lock()
	mock.calls.DeleteServiceLinkedRoleWithContext = append(mock.calls.DeleteServiceLinkedRoleWithContext, callInfo)
	mock.lockDeleteServiceLinkedRoleWithContext.Unlock()
	return mock.DeleteServiceLinkedRoleWithContextFunc(contextMoqParam, deleteServiceLinkedRoleInput, options...)
}

// DeleteServiceLinkedRoleWithContextCalls gets all the calls that were made to DeleteServiceLinkedRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServiceLinkedRoleWithContextCalls())
func (mock *IAMAPIMock) DeleteServiceLinkedRoleWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DeleteServiceLinkedRoleInput *iam.DeleteServiceLinkedRoleInput
		Options                      []request.Option
	}
	mock.lockDeleteServiceLinkedRoleWithContext.RLock()
	calls = mock.calls.DeleteServiceLinkedRoleWithContext
	mock.lockDeleteServiceLinkedRoleWithContext.RUnlock()
	return calls
}

// DeleteServiceSpecificCredential calls DeleteServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) DeleteServiceSpecificCredential(deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	if mock.DeleteServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.DeleteServiceSpecificCredentialFunc: method is nil but IAMAPI.DeleteServiceSpecificCredential was just called")
	}
	callInfo := struct {
		DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
	}{
		DeleteServiceSpecificCredentialInput: deleteServiceSpecificCredentialInput,
	}
	mock.lockDeleteServiceSpecificCredential.Lock()
	mock.calls.DeleteServiceSpecificCredential = append(mock.calls.DeleteServiceSpecificCredential, callInfo)
	mock.lockDeleteServiceSpecificCredential.Unlock()
	return mock.DeleteServiceSpecificCredentialFunc(deleteServiceSpecificCredentialInput)
}

// DeleteServiceSpecificCredentialCalls gets all the calls that were made to DeleteServiceSpecificCredential.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialCalls() []struct {
	DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
} {
	var calls []struct {
		DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
	}
	mock.lockDeleteServiceSpecificCredential.RLock()
	calls = mock.calls.DeleteServiceSpecificCredential
	mock.lockDeleteServiceSpecificCredential.RUnlock()
	return calls
}

// DeleteServiceSpecificCredentialRequest calls DeleteServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialRequest(deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput) {
	if mock.DeleteServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.DeleteServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.DeleteServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
	}{
		DeleteServiceSpecificCredentialInput: deleteServiceSpecificCredentialInput,
	}
	mock.lockDeleteServiceSpecificCredentialRequest.Lock()
	mock.calls.DeleteServiceSpecificCredentialRequest = append(mock.calls.DeleteServiceSpecificCredentialRequest, callInfo)
	mock.lockDeleteServiceSpecificCredentialRequest.Unlock()
	return mock.DeleteServiceSpecificCredentialRequestFunc(deleteServiceSpecificCredentialInput)
}

// DeleteServiceSpecificCredentialRequestCalls gets all the calls that were made to DeleteServiceSpecificCredentialRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialRequestCalls() []struct {
	DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
} {
	var calls []struct {
		DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
	}
	mock.lockDeleteServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.DeleteServiceSpecificCredentialRequest
	mock.lockDeleteServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// DeleteServiceSpecificCredentialWithContext calls DeleteServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialWithContext(contextMoqParam context.Context, deleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput, options ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	if mock.DeleteServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.DeleteServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.DeleteServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DeleteServiceSpecificCredentialInput: deleteServiceSpecificCredentialInput,
		Options:                              options,
	}
	mock.lockDeleteServiceSpecificCredentialWithContext.Lock()
	mock.calls.DeleteServiceSpecificCredentialWithContext = append(mock.calls.DeleteServiceSpecificCredentialWithContext, callInfo)
	mock.lockDeleteServiceSpecificCredentialWithContext.Unlock()
	return mock.DeleteServiceSpecificCredentialWithContextFunc(contextMoqParam, deleteServiceSpecificCredentialInput, options...)
}

// DeleteServiceSpecificCredentialWithContextCalls gets all the calls that were made to DeleteServiceSpecificCredentialWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) DeleteServiceSpecificCredentialWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DeleteServiceSpecificCredentialInput *iam.DeleteServiceSpecificCredentialInput
		Options                              []request.Option
	}
	mock.lockDeleteServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.DeleteServiceSpecificCredentialWithContext
	mock.lockDeleteServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// DeleteSigningCertificate calls DeleteSigningCertificateFunc.
func (mock *IAMAPIMock) DeleteSigningCertificate(deleteSigningCertificateInput *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	if mock.DeleteSigningCertificateFunc == nil {
		panic("IAMAPIMock.DeleteSigningCertificateFunc: method is nil but IAMAPI.DeleteSigningCertificate was just called")
	}
	callInfo := struct {
		DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
	}{
		DeleteSigningCertificateInput: deleteSigningCertificateInput,
	}
	mock.lockDeleteSigningCertificate.Lock()
	mock.calls.DeleteSigningCertificate = append(mock.calls.DeleteSigningCertificate, callInfo)
	mock.lockDeleteSigningCertificate.Unlock()
	return mock.DeleteSigningCertificateFunc(deleteSigningCertificateInput)
}

// DeleteSigningCertificateCalls gets all the calls that were made to DeleteSigningCertificate.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSigningCertificateCalls())
func (mock *IAMAPIMock) DeleteSigningCertificateCalls() []struct {
	DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
} {
	var calls []struct {
		DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
	}
	mock.lockDeleteSigningCertificate.RLock()
	calls = mock.calls.DeleteSigningCertificate
	mock.lockDeleteSigningCertificate.RUnlock()
	return calls
}

// DeleteSigningCertificateRequest calls DeleteSigningCertificateRequestFunc.
func (mock *IAMAPIMock) DeleteSigningCertificateRequest(deleteSigningCertificateInput *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput) {
	if mock.DeleteSigningCertificateRequestFunc == nil {
		panic("IAMAPIMock.DeleteSigningCertificateRequestFunc: method is nil but IAMAPI.DeleteSigningCertificateRequest was just called")
	}
	callInfo := struct {
		DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
	}{
		DeleteSigningCertificateInput: deleteSigningCertificateInput,
	}
	mock.lockDeleteSigningCertificateRequest.Lock()
	mock.calls.DeleteSigningCertificateRequest = append(mock.calls.DeleteSigningCertificateRequest, callInfo)
	mock.lockDeleteSigningCertificateRequest.Unlock()
	return mock.DeleteSigningCertificateRequestFunc(deleteSigningCertificateInput)
}

// DeleteSigningCertificateRequestCalls gets all the calls that were made to DeleteSigningCertificateRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSigningCertificateRequestCalls())
func (mock *IAMAPIMock) DeleteSigningCertificateRequestCalls() []struct {
	DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
} {
	var calls []struct {
		DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
	}
	mock.lockDeleteSigningCertificateRequest.RLock()
	calls = mock.calls.DeleteSigningCertificateRequest
	mock.lockDeleteSigningCertificateRequest.RUnlock()
	return calls
}

// DeleteSigningCertificateWithContext calls DeleteSigningCertificateWithContextFunc.
func (mock *IAMAPIMock) DeleteSigningCertificateWithContext(contextMoqParam context.Context, deleteSigningCertificateInput *iam.DeleteSigningCertificateInput, options ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
	if mock.DeleteSigningCertificateWithContextFunc == nil {
		panic("IAMAPIMock.DeleteSigningCertificateWithContextFunc: method is nil but IAMAPI.DeleteSigningCertificateWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DeleteSigningCertificateInput: deleteSigningCertificateInput,
		Options:                       options,
	}
	mock.lockDeleteSigningCertificateWithContext.Lock()
	mock.calls.DeleteSigningCertificateWithContext = append(mock.calls.DeleteSigningCertificateWithContext, callInfo)
	mock.lockDeleteSigningCertificateWithContext.Unlock()
	return mock.DeleteSigningCertificateWithContextFunc(contextMoqParam, deleteSigningCertificateInput, options...)
}

// DeleteSigningCertificateWithContextCalls gets all the calls that were made to DeleteSigningCertificateWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteSigningCertificateWithContextCalls())
func (mock *IAMAPIMock) DeleteSigningCertificateWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DeleteSigningCertificateInput *iam.DeleteSigningCertificateInput
		Options                       []request.Option
	}
	mock.lockDeleteSigningCertificateWithContext.RLock()
	calls = mock.calls.DeleteSigningCertificateWithContext
	mock.lockDeleteSigningCertificateWithContext.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *IAMAPIMock) DeleteUser(deleteUserInput *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	if mock.DeleteUserFunc == nil {
		panic("IAMAPIMock.DeleteUserFunc: method is nil but IAMAPI.DeleteUser was just called")
	}
	callInfo := struct {
		DeleteUserInput *iam.DeleteUserInput
	}{
		DeleteUserInput: deleteUserInput,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(deleteUserInput)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserCalls())
func (mock *IAMAPIMock) DeleteUserCalls() []struct {
	DeleteUserInput *iam.DeleteUserInput
} {
	var calls []struct {
		DeleteUserInput *iam.DeleteUserInput
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// DeleteUserPermissionsBoundary calls DeleteUserPermissionsBoundaryFunc.
func (mock *IAMAPIMock) DeleteUserPermissionsBoundary(deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	if mock.DeleteUserPermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.DeleteUserPermissionsBoundaryFunc: method is nil but IAMAPI.DeleteUserPermissionsBoundary was just called")
	}
	callInfo := struct {
		DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
	}{
		DeleteUserPermissionsBoundaryInput: deleteUserPermissionsBoundaryInput,
	}
	mock.lockDeleteUserPermissionsBoundary.Lock()
	mock.calls.DeleteUserPermissionsBoundary = append(mock.calls.DeleteUserPermissionsBoundary, callInfo)
	mock.lockDeleteUserPermissionsBoundary.Unlock()
	return mock.DeleteUserPermissionsBoundaryFunc(deleteUserPermissionsBoundaryInput)
}

// DeleteUserPermissionsBoundaryCalls gets all the calls that were made to DeleteUserPermissionsBoundary.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserPermissionsBoundaryCalls())
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryCalls() []struct {
	DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
} {
	var calls []struct {
		DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
	}
	mock.lockDeleteUserPermissionsBoundary.RLock()
	calls = mock.calls.DeleteUserPermissionsBoundary
	mock.lockDeleteUserPermissionsBoundary.RUnlock()
	return calls
}

// DeleteUserPermissionsBoundaryRequest calls DeleteUserPermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryRequest(deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput) {
	if mock.DeleteUserPermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.DeleteUserPermissionsBoundaryRequestFunc: method is nil but IAMAPI.DeleteUserPermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
	}{
		DeleteUserPermissionsBoundaryInput: deleteUserPermissionsBoundaryInput,
	}
	mock.lockDeleteUserPermissionsBoundaryRequest.Lock()
	mock.calls.DeleteUserPermissionsBoundaryRequest = append(mock.calls.DeleteUserPermissionsBoundaryRequest, callInfo)
	mock.lockDeleteUserPermissionsBoundaryRequest.Unlock()
	return mock.DeleteUserPermissionsBoundaryRequestFunc(deleteUserPermissionsBoundaryInput)
}

// DeleteUserPermissionsBoundaryRequestCalls gets all the calls that were made to DeleteUserPermissionsBoundaryRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserPermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryRequestCalls() []struct {
	DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
} {
	var calls []struct {
		DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
	}
	mock.lockDeleteUserPermissionsBoundaryRequest.RLock()
	calls = mock.calls.DeleteUserPermissionsBoundaryRequest
	mock.lockDeleteUserPermissionsBoundaryRequest.RUnlock()
	return calls
}

// DeleteUserPermissionsBoundaryWithContext calls DeleteUserPermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryWithContext(contextMoqParam context.Context, deleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput, options ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	if mock.DeleteUserPermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.DeleteUserPermissionsBoundaryWithContextFunc: method is nil but IAMAPI.DeleteUserPermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		DeleteUserPermissionsBoundaryInput: deleteUserPermissionsBoundaryInput,
		Options:                            options,
	}
	mock.lockDeleteUserPermissionsBoundaryWithContext.Lock()
	mock.calls.DeleteUserPermissionsBoundaryWithContext = append(mock.calls.DeleteUserPermissionsBoundaryWithContext, callInfo)
	mock.lockDeleteUserPermissionsBoundaryWithContext.Unlock()
	return mock.DeleteUserPermissionsBoundaryWithContextFunc(contextMoqParam, deleteUserPermissionsBoundaryInput, options...)
}

// DeleteUserPermissionsBoundaryWithContextCalls gets all the calls that were made to DeleteUserPermissionsBoundaryWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserPermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) DeleteUserPermissionsBoundaryWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		DeleteUserPermissionsBoundaryInput *iam.DeleteUserPermissionsBoundaryInput
		Options                            []request.Option
	}
	mock.lockDeleteUserPermissionsBoundaryWithContext.RLock()
	calls = mock.calls.DeleteUserPermissionsBoundaryWithContext
	mock.lockDeleteUserPermissionsBoundaryWithContext.RUnlock()
	return calls
}

// DeleteUserPolicy calls DeleteUserPolicyFunc.
func (mock *IAMAPIMock) DeleteUserPolicy(deleteUserPolicyInput *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	if mock.DeleteUserPolicyFunc == nil {
		panic("IAMAPIMock.DeleteUserPolicyFunc: method is nil but IAMAPI.DeleteUserPolicy was just called")
	}
	callInfo := struct {
		DeleteUserPolicyInput *iam.DeleteUserPolicyInput
	}{
		DeleteUserPolicyInput: deleteUserPolicyInput,
	}
	mock.lockDeleteUserPolicy.Lock()
	mock.calls.DeleteUserPolicy = append(mock.calls.DeleteUserPolicy, callInfo)
	mock.lockDeleteUserPolicy.Unlock()
	return mock.DeleteUserPolicyFunc(deleteUserPolicyInput)
}

// DeleteUserPolicyCalls gets all the calls that were made to DeleteUserPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserPolicyCalls())
func (mock *IAMAPIMock) DeleteUserPolicyCalls() []struct {
	DeleteUserPolicyInput *iam.DeleteUserPolicyInput
} {
	var calls []struct {
		DeleteUserPolicyInput *iam.DeleteUserPolicyInput
	}
	mock.lockDeleteUserPolicy.RLock()
	calls = mock.calls.DeleteUserPolicy
	mock.lockDeleteUserPolicy.RUnlock()
	return calls
}

// DeleteUserPolicyRequest calls DeleteUserPolicyRequestFunc.
func (mock *IAMAPIMock) DeleteUserPolicyRequest(deleteUserPolicyInput *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput) {
	if mock.DeleteUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.DeleteUserPolicyRequestFunc: method is nil but IAMAPI.DeleteUserPolicyRequest was just called")
	}
	callInfo := struct {
		DeleteUserPolicyInput *iam.DeleteUserPolicyInput
	}{
		DeleteUserPolicyInput: deleteUserPolicyInput,
	}
	mock.lockDeleteUserPolicyRequest.Lock()
	mock.calls.DeleteUserPolicyRequest = append(mock.calls.DeleteUserPolicyRequest, callInfo)
	mock.lockDeleteUserPolicyRequest.Unlock()
	return mock.DeleteUserPolicyRequestFunc(deleteUserPolicyInput)
}

// DeleteUserPolicyRequestCalls gets all the calls that were made to DeleteUserPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserPolicyRequestCalls())
func (mock *IAMAPIMock) DeleteUserPolicyRequestCalls() []struct {
	DeleteUserPolicyInput *iam.DeleteUserPolicyInput
} {
	var calls []struct {
		DeleteUserPolicyInput *iam.DeleteUserPolicyInput
	}
	mock.lockDeleteUserPolicyRequest.RLock()
	calls = mock.calls.DeleteUserPolicyRequest
	mock.lockDeleteUserPolicyRequest.RUnlock()
	return calls
}

// DeleteUserPolicyWithContext calls DeleteUserPolicyWithContextFunc.
func (mock *IAMAPIMock) DeleteUserPolicyWithContext(contextMoqParam context.Context, deleteUserPolicyInput *iam.DeleteUserPolicyInput, options ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
	if mock.DeleteUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DeleteUserPolicyWithContextFunc: method is nil but IAMAPI.DeleteUserPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		DeleteUserPolicyInput *iam.DeleteUserPolicyInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		DeleteUserPolicyInput: deleteUserPolicyInput,
		Options:               options,
	}
	mock.lockDeleteUserPolicyWithContext.Lock()
	mock.calls.DeleteUserPolicyWithContext = append(mock.calls.DeleteUserPolicyWithContext, callInfo)
	mock.lockDeleteUserPolicyWithContext.Unlock()
	return mock.DeleteUserPolicyWithContextFunc(contextMoqParam, deleteUserPolicyInput, options...)
}

// DeleteUserPolicyWithContextCalls gets all the calls that were made to DeleteUserPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserPolicyWithContextCalls())
func (mock *IAMAPIMock) DeleteUserPolicyWithContextCalls() []struct {
	ContextMoqParam       context.Context
	DeleteUserPolicyInput *iam.DeleteUserPolicyInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		DeleteUserPolicyInput *iam.DeleteUserPolicyInput
		Options               []request.Option
	}
	mock.lockDeleteUserPolicyWithContext.RLock()
	calls = mock.calls.DeleteUserPolicyWithContext
	mock.lockDeleteUserPolicyWithContext.RUnlock()
	return calls
}

// DeleteUserRequest calls DeleteUserRequestFunc.
func (mock *IAMAPIMock) DeleteUserRequest(deleteUserInput *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput) {
	if mock.DeleteUserRequestFunc == nil {
		panic("IAMAPIMock.DeleteUserRequestFunc: method is nil but IAMAPI.DeleteUserRequest was just called")
	}
	callInfo := struct {
		DeleteUserInput *iam.DeleteUserInput
	}{
		DeleteUserInput: deleteUserInput,
	}
	mock.lockDeleteUserRequest.Lock()
	mock.calls.DeleteUserRequest = append(mock.calls.DeleteUserRequest, callInfo)
	mock.lockDeleteUserRequest.Unlock()
	return mock.DeleteUserRequestFunc(deleteUserInput)
}

// DeleteUserRequestCalls gets all the calls that were made to DeleteUserRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserRequestCalls())
func (mock *IAMAPIMock) DeleteUserRequestCalls() []struct {
	DeleteUserInput *iam.DeleteUserInput
} {
	var calls []struct {
		DeleteUserInput *iam.DeleteUserInput
	}
	mock.lockDeleteUserRequest.RLock()
	calls = mock.calls.DeleteUserRequest
	mock.lockDeleteUserRequest.RUnlock()
	return calls
}

// DeleteUserWithContext calls DeleteUserWithContextFunc.
func (mock *IAMAPIMock) DeleteUserWithContext(contextMoqParam context.Context, deleteUserInput *iam.DeleteUserInput, options ...request.Option) (*iam.DeleteUserOutput, error) {
	if mock.DeleteUserWithContextFunc == nil {
		panic("IAMAPIMock.DeleteUserWithContextFunc: method is nil but IAMAPI.DeleteUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		DeleteUserInput *iam.DeleteUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DeleteUserInput: deleteUserInput,
		Options:         options,
	}
	mock.lockDeleteUserWithContext.Lock()
	mock.calls.DeleteUserWithContext = append(mock.calls.DeleteUserWithContext, callInfo)
	mock.lockDeleteUserWithContext.Unlock()
	return mock.DeleteUserWithContextFunc(contextMoqParam, deleteUserInput, options...)
}

// DeleteUserWithContextCalls gets all the calls that were made to DeleteUserWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteUserWithContextCalls())
func (mock *IAMAPIMock) DeleteUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	DeleteUserInput *iam.DeleteUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		DeleteUserInput *iam.DeleteUserInput
		Options         []request.Option
	}
	mock.lockDeleteUserWithContext.RLock()
	calls = mock.calls.DeleteUserWithContext
	mock.lockDeleteUserWithContext.RUnlock()
	return calls
}

// DeleteVirtualMFADevice calls DeleteVirtualMFADeviceFunc.
func (mock *IAMAPIMock) DeleteVirtualMFADevice(deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	if mock.DeleteVirtualMFADeviceFunc == nil {
		panic("IAMAPIMock.DeleteVirtualMFADeviceFunc: method is nil but IAMAPI.DeleteVirtualMFADevice was just called")
	}
	callInfo := struct {
		DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
	}{
		DeleteVirtualMFADeviceInput: deleteVirtualMFADeviceInput,
	}
	mock.lockDeleteVirtualMFADevice.Lock()
	mock.calls.DeleteVirtualMFADevice = append(mock.calls.DeleteVirtualMFADevice, callInfo)
	mock.lockDeleteVirtualMFADevice.Unlock()
	return mock.DeleteVirtualMFADeviceFunc(deleteVirtualMFADeviceInput)
}

// DeleteVirtualMFADeviceCalls gets all the calls that were made to DeleteVirtualMFADevice.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteVirtualMFADeviceCalls())
func (mock *IAMAPIMock) DeleteVirtualMFADeviceCalls() []struct {
	DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
} {
	var calls []struct {
		DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
	}
	mock.lockDeleteVirtualMFADevice.RLock()
	calls = mock.calls.DeleteVirtualMFADevice
	mock.lockDeleteVirtualMFADevice.RUnlock()
	return calls
}

// DeleteVirtualMFADeviceRequest calls DeleteVirtualMFADeviceRequestFunc.
func (mock *IAMAPIMock) DeleteVirtualMFADeviceRequest(deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput) {
	if mock.DeleteVirtualMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.DeleteVirtualMFADeviceRequestFunc: method is nil but IAMAPI.DeleteVirtualMFADeviceRequest was just called")
	}
	callInfo := struct {
		DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
	}{
		DeleteVirtualMFADeviceInput: deleteVirtualMFADeviceInput,
	}
	mock.lockDeleteVirtualMFADeviceRequest.Lock()
	mock.calls.DeleteVirtualMFADeviceRequest = append(mock.calls.DeleteVirtualMFADeviceRequest, callInfo)
	mock.lockDeleteVirtualMFADeviceRequest.Unlock()
	return mock.DeleteVirtualMFADeviceRequestFunc(deleteVirtualMFADeviceInput)
}

// DeleteVirtualMFADeviceRequestCalls gets all the calls that were made to DeleteVirtualMFADeviceRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteVirtualMFADeviceRequestCalls())
func (mock *IAMAPIMock) DeleteVirtualMFADeviceRequestCalls() []struct {
	DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
} {
	var calls []struct {
		DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
	}
	mock.lockDeleteVirtualMFADeviceRequest.RLock()
	calls = mock.calls.DeleteVirtualMFADeviceRequest
	mock.lockDeleteVirtualMFADeviceRequest.RUnlock()
	return calls
}

// DeleteVirtualMFADeviceWithContext calls DeleteVirtualMFADeviceWithContextFunc.
func (mock *IAMAPIMock) DeleteVirtualMFADeviceWithContext(contextMoqParam context.Context, deleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput, options ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
	if mock.DeleteVirtualMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.DeleteVirtualMFADeviceWithContextFunc: method is nil but IAMAPI.DeleteVirtualMFADeviceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DeleteVirtualMFADeviceInput: deleteVirtualMFADeviceInput,
		Options:                     options,
	}
	mock.lockDeleteVirtualMFADeviceWithContext.Lock()
	mock.calls.DeleteVirtualMFADeviceWithContext = append(mock.calls.DeleteVirtualMFADeviceWithContext, callInfo)
	mock.lockDeleteVirtualMFADeviceWithContext.Unlock()
	return mock.DeleteVirtualMFADeviceWithContextFunc(contextMoqParam, deleteVirtualMFADeviceInput, options...)
}

// DeleteVirtualMFADeviceWithContextCalls gets all the calls that were made to DeleteVirtualMFADeviceWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DeleteVirtualMFADeviceWithContextCalls())
func (mock *IAMAPIMock) DeleteVirtualMFADeviceWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DeleteVirtualMFADeviceInput *iam.DeleteVirtualMFADeviceInput
		Options                     []request.Option
	}
	mock.lockDeleteVirtualMFADeviceWithContext.RLock()
	calls = mock.calls.DeleteVirtualMFADeviceWithContext
	mock.lockDeleteVirtualMFADeviceWithContext.RUnlock()
	return calls
}

// DetachGroupPolicy calls DetachGroupPolicyFunc.
func (mock *IAMAPIMock) DetachGroupPolicy(detachGroupPolicyInput *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	if mock.DetachGroupPolicyFunc == nil {
		panic("IAMAPIMock.DetachGroupPolicyFunc: method is nil but IAMAPI.DetachGroupPolicy was just called")
	}
	callInfo := struct {
		DetachGroupPolicyInput *iam.DetachGroupPolicyInput
	}{
		DetachGroupPolicyInput: detachGroupPolicyInput,
	}
	mock.lockDetachGroupPolicy.Lock()
	mock.calls.DetachGroupPolicy = append(mock.calls.DetachGroupPolicy, callInfo)
	mock.lockDetachGroupPolicy.Unlock()
	return mock.DetachGroupPolicyFunc(detachGroupPolicyInput)
}

// DetachGroupPolicyCalls gets all the calls that were made to DetachGroupPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DetachGroupPolicyCalls())
func (mock *IAMAPIMock) DetachGroupPolicyCalls() []struct {
	DetachGroupPolicyInput *iam.DetachGroupPolicyInput
} {
	var calls []struct {
		DetachGroupPolicyInput *iam.DetachGroupPolicyInput
	}
	mock.lockDetachGroupPolicy.RLock()
	calls = mock.calls.DetachGroupPolicy
	mock.lockDetachGroupPolicy.RUnlock()
	return calls
}

// DetachGroupPolicyRequest calls DetachGroupPolicyRequestFunc.
func (mock *IAMAPIMock) DetachGroupPolicyRequest(detachGroupPolicyInput *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput) {
	if mock.DetachGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.DetachGroupPolicyRequestFunc: method is nil but IAMAPI.DetachGroupPolicyRequest was just called")
	}
	callInfo := struct {
		DetachGroupPolicyInput *iam.DetachGroupPolicyInput
	}{
		DetachGroupPolicyInput: detachGroupPolicyInput,
	}
	mock.lockDetachGroupPolicyRequest.Lock()
	mock.calls.DetachGroupPolicyRequest = append(mock.calls.DetachGroupPolicyRequest, callInfo)
	mock.lockDetachGroupPolicyRequest.Unlock()
	return mock.DetachGroupPolicyRequestFunc(detachGroupPolicyInput)
}

// DetachGroupPolicyRequestCalls gets all the calls that were made to DetachGroupPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DetachGroupPolicyRequestCalls())
func (mock *IAMAPIMock) DetachGroupPolicyRequestCalls() []struct {
	DetachGroupPolicyInput *iam.DetachGroupPolicyInput
} {
	var calls []struct {
		DetachGroupPolicyInput *iam.DetachGroupPolicyInput
	}
	mock.lockDetachGroupPolicyRequest.RLock()
	calls = mock.calls.DetachGroupPolicyRequest
	mock.lockDetachGroupPolicyRequest.RUnlock()
	return calls
}

// DetachGroupPolicyWithContext calls DetachGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) DetachGroupPolicyWithContext(contextMoqParam context.Context, detachGroupPolicyInput *iam.DetachGroupPolicyInput, options ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
	if mock.DetachGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DetachGroupPolicyWithContextFunc: method is nil but IAMAPI.DetachGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DetachGroupPolicyInput *iam.DetachGroupPolicyInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		DetachGroupPolicyInput: detachGroupPolicyInput,
		Options:                options,
	}
	mock.lockDetachGroupPolicyWithContext.Lock()
	mock.calls.DetachGroupPolicyWithContext = append(mock.calls.DetachGroupPolicyWithContext, callInfo)
	mock.lockDetachGroupPolicyWithContext.Unlock()
	return mock.DetachGroupPolicyWithContextFunc(contextMoqParam, detachGroupPolicyInput, options...)
}

// DetachGroupPolicyWithContextCalls gets all the calls that were made to DetachGroupPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DetachGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) DetachGroupPolicyWithContextCalls() []struct {
	ContextMoqParam        context.Context
	DetachGroupPolicyInput *iam.DetachGroupPolicyInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DetachGroupPolicyInput *iam.DetachGroupPolicyInput
		Options                []request.Option
	}
	mock.lockDetachGroupPolicyWithContext.RLock()
	calls = mock.calls.DetachGroupPolicyWithContext
	mock.lockDetachGroupPolicyWithContext.RUnlock()
	return calls
}

// DetachRolePolicy calls DetachRolePolicyFunc.
func (mock *IAMAPIMock) DetachRolePolicy(detachRolePolicyInput *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	if mock.DetachRolePolicyFunc == nil {
		panic("IAMAPIMock.DetachRolePolicyFunc: method is nil but IAMAPI.DetachRolePolicy was just called")
	}
	callInfo := struct {
		DetachRolePolicyInput *iam.DetachRolePolicyInput
	}{
		DetachRolePolicyInput: detachRolePolicyInput,
	}
	mock.lockDetachRolePolicy.Lock()
	mock.calls.DetachRolePolicy = append(mock.calls.DetachRolePolicy, callInfo)
	mock.lockDetachRolePolicy.Unlock()
	return mock.DetachRolePolicyFunc(detachRolePolicyInput)
}

// DetachRolePolicyCalls gets all the calls that were made to DetachRolePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DetachRolePolicyCalls())
func (mock *IAMAPIMock) DetachRolePolicyCalls() []struct {
	DetachRolePolicyInput *iam.DetachRolePolicyInput
} {
	var calls []struct {
		DetachRolePolicyInput *iam.DetachRolePolicyInput
	}
	mock.lockDetachRolePolicy.RLock()
	calls = mock.calls.DetachRolePolicy
	mock.lockDetachRolePolicy.RUnlock()
	return calls
}

// DetachRolePolicyRequest calls DetachRolePolicyRequestFunc.
func (mock *IAMAPIMock) DetachRolePolicyRequest(detachRolePolicyInput *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput) {
	if mock.DetachRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.DetachRolePolicyRequestFunc: method is nil but IAMAPI.DetachRolePolicyRequest was just called")
	}
	callInfo := struct {
		DetachRolePolicyInput *iam.DetachRolePolicyInput
	}{
		DetachRolePolicyInput: detachRolePolicyInput,
	}
	mock.lockDetachRolePolicyRequest.Lock()
	mock.calls.DetachRolePolicyRequest = append(mock.calls.DetachRolePolicyRequest, callInfo)
	mock.lockDetachRolePolicyRequest.Unlock()
	return mock.DetachRolePolicyRequestFunc(detachRolePolicyInput)
}

// DetachRolePolicyRequestCalls gets all the calls that were made to DetachRolePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DetachRolePolicyRequestCalls())
func (mock *IAMAPIMock) DetachRolePolicyRequestCalls() []struct {
	DetachRolePolicyInput *iam.DetachRolePolicyInput
} {
	var calls []struct {
		DetachRolePolicyInput *iam.DetachRolePolicyInput
	}
	mock.lockDetachRolePolicyRequest.RLock()
	calls = mock.calls.DetachRolePolicyRequest
	mock.lockDetachRolePolicyRequest.RUnlock()
	return calls
}

// DetachRolePolicyWithContext calls DetachRolePolicyWithContextFunc.
func (mock *IAMAPIMock) DetachRolePolicyWithContext(contextMoqParam context.Context, detachRolePolicyInput *iam.DetachRolePolicyInput, options ...request.Option) (*iam.DetachRolePolicyOutput, error) {
	if mock.DetachRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.DetachRolePolicyWithContextFunc: method is nil but IAMAPI.DetachRolePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		DetachRolePolicyInput *iam.DetachRolePolicyInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		DetachRolePolicyInput: detachRolePolicyInput,
		Options:               options,
	}
	mock.lockDetachRolePolicyWithContext.Lock()
	mock.calls.DetachRolePolicyWithContext = append(mock.calls.DetachRolePolicyWithContext, callInfo)
	mock.lockDetachRolePolicyWithContext.Unlock()
	return mock.DetachRolePolicyWithContextFunc(contextMoqParam, detachRolePolicyInput, options...)
}

// DetachRolePolicyWithContextCalls gets all the calls that were made to DetachRolePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DetachRolePolicyWithContextCalls())
func (mock *IAMAPIMock) DetachRolePolicyWithContextCalls() []struct {
	ContextMoqParam       context.Context
	DetachRolePolicyInput *iam.DetachRolePolicyInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		DetachRolePolicyInput *iam.DetachRolePolicyInput
		Options               []request.Option
	}
	mock.lockDetachRolePolicyWithContext.RLock()
	calls = mock.calls.DetachRolePolicyWithContext
	mock.lockDetachRolePolicyWithContext.RUnlock()
	return calls
}

// DetachUserPolicy calls DetachUserPolicyFunc.
func (mock *IAMAPIMock) DetachUserPolicy(detachUserPolicyInput *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	if mock.DetachUserPolicyFunc == nil {
		panic("IAMAPIMock.DetachUserPolicyFunc: method is nil but IAMAPI.DetachUserPolicy was just called")
	}
	callInfo := struct {
		DetachUserPolicyInput *iam.DetachUserPolicyInput
	}{
		DetachUserPolicyInput: detachUserPolicyInput,
	}
	mock.lockDetachUserPolicy.Lock()
	mock.calls.DetachUserPolicy = append(mock.calls.DetachUserPolicy, callInfo)
	mock.lockDetachUserPolicy.Unlock()
	return mock.DetachUserPolicyFunc(detachUserPolicyInput)
}

// DetachUserPolicyCalls gets all the calls that were made to DetachUserPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.DetachUserPolicyCalls())
func (mock *IAMAPIMock) DetachUserPolicyCalls() []struct {
	DetachUserPolicyInput *iam.DetachUserPolicyInput
} {
	var calls []struct {
		DetachUserPolicyInput *iam.DetachUserPolicyInput
	}
	mock.lockDetachUserPolicy.RLock()
	calls = mock.calls.DetachUserPolicy
	mock.lockDetachUserPolicy.RUnlock()
	return calls
}

// DetachUserPolicyRequest calls DetachUserPolicyRequestFunc.
func (mock *IAMAPIMock) DetachUserPolicyRequest(detachUserPolicyInput *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput) {
	if mock.DetachUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.DetachUserPolicyRequestFunc: method is nil but IAMAPI.DetachUserPolicyRequest was just called")
	}
	callInfo := struct {
		DetachUserPolicyInput *iam.DetachUserPolicyInput
	}{
		DetachUserPolicyInput: detachUserPolicyInput,
	}
	mock.lockDetachUserPolicyRequest.Lock()
	mock.calls.DetachUserPolicyRequest = append(mock.calls.DetachUserPolicyRequest, callInfo)
	mock.lockDetachUserPolicyRequest.Unlock()
	return mock.DetachUserPolicyRequestFunc(detachUserPolicyInput)
}

// DetachUserPolicyRequestCalls gets all the calls that were made to DetachUserPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.DetachUserPolicyRequestCalls())
func (mock *IAMAPIMock) DetachUserPolicyRequestCalls() []struct {
	DetachUserPolicyInput *iam.DetachUserPolicyInput
} {
	var calls []struct {
		DetachUserPolicyInput *iam.DetachUserPolicyInput
	}
	mock.lockDetachUserPolicyRequest.RLock()
	calls = mock.calls.DetachUserPolicyRequest
	mock.lockDetachUserPolicyRequest.RUnlock()
	return calls
}

// DetachUserPolicyWithContext calls DetachUserPolicyWithContextFunc.
func (mock *IAMAPIMock) DetachUserPolicyWithContext(contextMoqParam context.Context, detachUserPolicyInput *iam.DetachUserPolicyInput, options ...request.Option) (*iam.DetachUserPolicyOutput, error) {
	if mock.DetachUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.DetachUserPolicyWithContextFunc: method is nil but IAMAPI.DetachUserPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		DetachUserPolicyInput *iam.DetachUserPolicyInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		DetachUserPolicyInput: detachUserPolicyInput,
		Options:               options,
	}
	mock.lockDetachUserPolicyWithContext.Lock()
	mock.calls.DetachUserPolicyWithContext = append(mock.calls.DetachUserPolicyWithContext, callInfo)
	mock.lockDetachUserPolicyWithContext.Unlock()
	return mock.DetachUserPolicyWithContextFunc(contextMoqParam, detachUserPolicyInput, options...)
}

// DetachUserPolicyWithContextCalls gets all the calls that were made to DetachUserPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.DetachUserPolicyWithContextCalls())
func (mock *IAMAPIMock) DetachUserPolicyWithContextCalls() []struct {
	ContextMoqParam       context.Context
	DetachUserPolicyInput *iam.DetachUserPolicyInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		DetachUserPolicyInput *iam.DetachUserPolicyInput
		Options               []request.Option
	}
	mock.lockDetachUserPolicyWithContext.RLock()
	calls = mock.calls.DetachUserPolicyWithContext
	mock.lockDetachUserPolicyWithContext.RUnlock()
	return calls
}

// EnableMFADevice calls EnableMFADeviceFunc.
func (mock *IAMAPIMock) EnableMFADevice(enableMFADeviceInput *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	if mock.EnableMFADeviceFunc == nil {
		panic("IAMAPIMock.EnableMFADeviceFunc: method is nil but IAMAPI.EnableMFADevice was just called")
	}
	callInfo := struct {
		EnableMFADeviceInput *iam.EnableMFADeviceInput
	}{
		EnableMFADeviceInput: enableMFADeviceInput,
	}
	mock.lockEnableMFADevice.Lock()
	mock.calls.EnableMFADevice = append(mock.calls.EnableMFADevice, callInfo)
	mock.lockEnableMFADevice.Unlock()
	return mock.EnableMFADeviceFunc(enableMFADeviceInput)
}

// EnableMFADeviceCalls gets all the calls that were made to EnableMFADevice.
// Check the length with:
//
//	len(mockedIAMAPI.EnableMFADeviceCalls())
func (mock *IAMAPIMock) EnableMFADeviceCalls() []struct {
	EnableMFADeviceInput *iam.EnableMFADeviceInput
} {
	var calls []struct {
		EnableMFADeviceInput *iam.EnableMFADeviceInput
	}
	mock.lockEnableMFADevice.RLock()
	calls = mock.calls.EnableMFADevice
	mock.lockEnableMFADevice.RUnlock()
	return calls
}

// EnableMFADeviceRequest calls EnableMFADeviceRequestFunc.
func (mock *IAMAPIMock) EnableMFADeviceRequest(enableMFADeviceInput *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput) {
	if mock.EnableMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.EnableMFADeviceRequestFunc: method is nil but IAMAPI.EnableMFADeviceRequest was just called")
	}
	callInfo := struct {
		EnableMFADeviceInput *iam.EnableMFADeviceInput
	}{
		EnableMFADeviceInput: enableMFADeviceInput,
	}
	mock.lockEnableMFADeviceRequest.Lock()
	mock.calls.EnableMFADeviceRequest = append(mock.calls.EnableMFADeviceRequest, callInfo)
	mock.lockEnableMFADeviceRequest.Unlock()
	return mock.EnableMFADeviceRequestFunc(enableMFADeviceInput)
}

// EnableMFADeviceRequestCalls gets all the calls that were made to EnableMFADeviceRequest.
// Check the length with:
//
//	len(mockedIAMAPI.EnableMFADeviceRequestCalls())
func (mock *IAMAPIMock) EnableMFADeviceRequestCalls() []struct {
	EnableMFADeviceInput *iam.EnableMFADeviceInput
} {
	var calls []struct {
		EnableMFADeviceInput *iam.EnableMFADeviceInput
	}
	mock.lockEnableMFADeviceRequest.RLock()
	calls = mock.calls.EnableMFADeviceRequest
	mock.lockEnableMFADeviceRequest.RUnlock()
	return calls
}

// EnableMFADeviceWithContext calls EnableMFADeviceWithContextFunc.
func (mock *IAMAPIMock) EnableMFADeviceWithContext(contextMoqParam context.Context, enableMFADeviceInput *iam.EnableMFADeviceInput, options ...request.Option) (*iam.EnableMFADeviceOutput, error) {
	if mock.EnableMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.EnableMFADeviceWithContextFunc: method is nil but IAMAPI.EnableMFADeviceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		EnableMFADeviceInput *iam.EnableMFADeviceInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		EnableMFADeviceInput: enableMFADeviceInput,
		Options:              options,
	}
	mock.lockEnableMFADeviceWithContext.Lock()
	mock.calls.EnableMFADeviceWithContext = append(mock.calls.EnableMFADeviceWithContext, callInfo)
	mock.lockEnableMFADeviceWithContext.Unlock()
	return mock.EnableMFADeviceWithContextFunc(contextMoqParam, enableMFADeviceInput, options...)
}

// EnableMFADeviceWithContextCalls gets all the calls that were made to EnableMFADeviceWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.EnableMFADeviceWithContextCalls())
func (mock *IAMAPIMock) EnableMFADeviceWithContextCalls() []struct {
	ContextMoqParam      context.Context
	EnableMFADeviceInput *iam.EnableMFADeviceInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		EnableMFADeviceInput *iam.EnableMFADeviceInput
		Options              []request.Option
	}
	mock.lockEnableMFADeviceWithContext.RLock()
	calls = mock.calls.EnableMFADeviceWithContext
	mock.lockEnableMFADeviceWithContext.RUnlock()
	return calls
}

// GenerateCredentialReport calls GenerateCredentialReportFunc.
func (mock *IAMAPIMock) GenerateCredentialReport(generateCredentialReportInput *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	if mock.GenerateCredentialReportFunc == nil {
		panic("IAMAPIMock.GenerateCredentialReportFunc: method is nil but IAMAPI.GenerateCredentialReport was just called")
	}
	callInfo := struct {
		GenerateCredentialReportInput *iam.GenerateCredentialReportInput
	}{
		GenerateCredentialReportInput: generateCredentialReportInput,
	}
	mock.lockGenerateCredentialReport.Lock()
	mock.calls.GenerateCredentialReport = append(mock.calls.GenerateCredentialReport, callInfo)
	mock.lockGenerateCredentialReport.Unlock()
	return mock.GenerateCredentialReportFunc(generateCredentialReportInput)
}

// GenerateCredentialReportCalls gets all the calls that were made to GenerateCredentialReport.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateCredentialReportCalls())
func (mock *IAMAPIMock) GenerateCredentialReportCalls() []struct {
	GenerateCredentialReportInput *iam.GenerateCredentialReportInput
} {
	var calls []struct {
		GenerateCredentialReportInput *iam.GenerateCredentialReportInput
	}
	mock.lockGenerateCredentialReport.RLock()
	calls = mock.calls.GenerateCredentialReport
	mock.lockGenerateCredentialReport.RUnlock()
	return calls
}

// GenerateCredentialReportRequest calls GenerateCredentialReportRequestFunc.
func (mock *IAMAPIMock) GenerateCredentialReportRequest(generateCredentialReportInput *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput) {
	if mock.GenerateCredentialReportRequestFunc == nil {
		panic("IAMAPIMock.GenerateCredentialReportRequestFunc: method is nil but IAMAPI.GenerateCredentialReportRequest was just called")
	}
	callInfo := struct {
		GenerateCredentialReportInput *iam.GenerateCredentialReportInput
	}{
		GenerateCredentialReportInput: generateCredentialReportInput,
	}
	mock.lockGenerateCredentialReportRequest.Lock()
	mock.calls.GenerateCredentialReportRequest = append(mock.calls.GenerateCredentialReportRequest, callInfo)
	mock.lockGenerateCredentialReportRequest.Unlock()
	return mock.GenerateCredentialReportRequestFunc(generateCredentialReportInput)
}

// GenerateCredentialReportRequestCalls gets all the calls that were made to GenerateCredentialReportRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateCredentialReportRequestCalls())
func (mock *IAMAPIMock) GenerateCredentialReportRequestCalls() []struct {
	GenerateCredentialReportInput *iam.GenerateCredentialReportInput
} {
	var calls []struct {
		GenerateCredentialReportInput *iam.GenerateCredentialReportInput
	}
	mock.lockGenerateCredentialReportRequest.RLock()
	calls = mock.calls.GenerateCredentialReportRequest
	mock.lockGenerateCredentialReportRequest.RUnlock()
	return calls
}

// GenerateCredentialReportWithContext calls GenerateCredentialReportWithContextFunc.
func (mock *IAMAPIMock) GenerateCredentialReportWithContext(contextMoqParam context.Context, generateCredentialReportInput *iam.GenerateCredentialReportInput, options ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
	if mock.GenerateCredentialReportWithContextFunc == nil {
		panic("IAMAPIMock.GenerateCredentialReportWithContextFunc: method is nil but IAMAPI.GenerateCredentialReportWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		GenerateCredentialReportInput *iam.GenerateCredentialReportInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		GenerateCredentialReportInput: generateCredentialReportInput,
		Options:                       options,
	}
	mock.lockGenerateCredentialReportWithContext.Lock()
	mock.calls.GenerateCredentialReportWithContext = append(mock.calls.GenerateCredentialReportWithContext, callInfo)
	mock.lockGenerateCredentialReportWithContext.Unlock()
	return mock.GenerateCredentialReportWithContextFunc(contextMoqParam, generateCredentialReportInput, options...)
}

// GenerateCredentialReportWithContextCalls gets all the calls that were made to GenerateCredentialReportWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateCredentialReportWithContextCalls())
func (mock *IAMAPIMock) GenerateCredentialReportWithContextCalls() []struct {
	ContextMoqParam               context.Context
	GenerateCredentialReportInput *iam.GenerateCredentialReportInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		GenerateCredentialReportInput *iam.GenerateCredentialReportInput
		Options                       []request.Option
	}
	mock.lockGenerateCredentialReportWithContext.RLock()
	calls = mock.calls.GenerateCredentialReportWithContext
	mock.lockGenerateCredentialReportWithContext.RUnlock()
	return calls
}

// GenerateOrganizationsAccessReport calls GenerateOrganizationsAccessReportFunc.
func (mock *IAMAPIMock) GenerateOrganizationsAccessReport(generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	if mock.GenerateOrganizationsAccessReportFunc == nil {
		panic("IAMAPIMock.GenerateOrganizationsAccessReportFunc: method is nil but IAMAPI.GenerateOrganizationsAccessReport was just called")
	}
	callInfo := struct {
		GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
	}{
		GenerateOrganizationsAccessReportInput: generateOrganizationsAccessReportInput,
	}
	mock.lockGenerateOrganizationsAccessReport.Lock()
	mock.calls.GenerateOrganizationsAccessReport = append(mock.calls.GenerateOrganizationsAccessReport, callInfo)
	mock.lockGenerateOrganizationsAccessReport.Unlock()
	return mock.GenerateOrganizationsAccessReportFunc(generateOrganizationsAccessReportInput)
}

// GenerateOrganizationsAccessReportCalls gets all the calls that were made to GenerateOrganizationsAccessReport.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateOrganizationsAccessReportCalls())
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportCalls() []struct {
	GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
} {
	var calls []struct {
		GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
	}
	mock.lockGenerateOrganizationsAccessReport.RLock()
	calls = mock.calls.GenerateOrganizationsAccessReport
	mock.lockGenerateOrganizationsAccessReport.RUnlock()
	return calls
}

// GenerateOrganizationsAccessReportRequest calls GenerateOrganizationsAccessReportRequestFunc.
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportRequest(generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput) {
	if mock.GenerateOrganizationsAccessReportRequestFunc == nil {
		panic("IAMAPIMock.GenerateOrganizationsAccessReportRequestFunc: method is nil but IAMAPI.GenerateOrganizationsAccessReportRequest was just called")
	}
	callInfo := struct {
		GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
	}{
		GenerateOrganizationsAccessReportInput: generateOrganizationsAccessReportInput,
	}
	mock.lockGenerateOrganizationsAccessReportRequest.Lock()
	mock.calls.GenerateOrganizationsAccessReportRequest = append(mock.calls.GenerateOrganizationsAccessReportRequest, callInfo)
	mock.lockGenerateOrganizationsAccessReportRequest.Unlock()
	return mock.GenerateOrganizationsAccessReportRequestFunc(generateOrganizationsAccessReportInput)
}

// GenerateOrganizationsAccessReportRequestCalls gets all the calls that were made to GenerateOrganizationsAccessReportRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateOrganizationsAccessReportRequestCalls())
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportRequestCalls() []struct {
	GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
} {
	var calls []struct {
		GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
	}
	mock.lockGenerateOrganizationsAccessReportRequest.RLock()
	calls = mock.calls.GenerateOrganizationsAccessReportRequest
	mock.lockGenerateOrganizationsAccessReportRequest.RUnlock()
	return calls
}

// GenerateOrganizationsAccessReportWithContext calls GenerateOrganizationsAccessReportWithContextFunc.
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportWithContext(contextMoqParam context.Context, generateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput, options ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	if mock.GenerateOrganizationsAccessReportWithContextFunc == nil {
		panic("IAMAPIMock.GenerateOrganizationsAccessReportWithContextFunc: method is nil but IAMAPI.GenerateOrganizationsAccessReportWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                        context.Context
		GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
		Options                                []request.Option
	}{
		ContextMoqParam:                        contextMoqParam,
		GenerateOrganizationsAccessReportInput: generateOrganizationsAccessReportInput,
		Options:                                options,
	}
	mock.lockGenerateOrganizationsAccessReportWithContext.Lock()
	mock.calls.GenerateOrganizationsAccessReportWithContext = append(mock.calls.GenerateOrganizationsAccessReportWithContext, callInfo)
	mock.lockGenerateOrganizationsAccessReportWithContext.Unlock()
	return mock.GenerateOrganizationsAccessReportWithContextFunc(contextMoqParam, generateOrganizationsAccessReportInput, options...)
}

// GenerateOrganizationsAccessReportWithContextCalls gets all the calls that were made to GenerateOrganizationsAccessReportWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateOrganizationsAccessReportWithContextCalls())
func (mock *IAMAPIMock) GenerateOrganizationsAccessReportWithContextCalls() []struct {
	ContextMoqParam                        context.Context
	GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
	Options                                []request.Option
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		GenerateOrganizationsAccessReportInput *iam.GenerateOrganizationsAccessReportInput
		Options                                []request.Option
	}
	mock.lockGenerateOrganizationsAccessReportWithContext.RLock()
	calls = mock.calls.GenerateOrganizationsAccessReportWithContext
	mock.lockGenerateOrganizationsAccessReportWithContext.RUnlock()
	return calls
}

// GenerateServiceLastAccessedDetails calls GenerateServiceLastAccessedDetailsFunc.
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetails(generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	if mock.GenerateServiceLastAccessedDetailsFunc == nil {
		panic("IAMAPIMock.GenerateServiceLastAccessedDetailsFunc: method is nil but IAMAPI.GenerateServiceLastAccessedDetails was just called")
	}
	callInfo := struct {
		GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
	}{
		GenerateServiceLastAccessedDetailsInput: generateServiceLastAccessedDetailsInput,
	}
	mock.lockGenerateServiceLastAccessedDetails.Lock()
	mock.calls.GenerateServiceLastAccessedDetails = append(mock.calls.GenerateServiceLastAccessedDetails, callInfo)
	mock.lockGenerateServiceLastAccessedDetails.Unlock()
	return mock.GenerateServiceLastAccessedDetailsFunc(generateServiceLastAccessedDetailsInput)
}

// GenerateServiceLastAccessedDetailsCalls gets all the calls that were made to GenerateServiceLastAccessedDetails.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateServiceLastAccessedDetailsCalls())
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsCalls() []struct {
	GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
} {
	var calls []struct {
		GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
	}
	mock.lockGenerateServiceLastAccessedDetails.RLock()
	calls = mock.calls.GenerateServiceLastAccessedDetails
	mock.lockGenerateServiceLastAccessedDetails.RUnlock()
	return calls
}

// GenerateServiceLastAccessedDetailsRequest calls GenerateServiceLastAccessedDetailsRequestFunc.
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsRequest(generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput) {
	if mock.GenerateServiceLastAccessedDetailsRequestFunc == nil {
		panic("IAMAPIMock.GenerateServiceLastAccessedDetailsRequestFunc: method is nil but IAMAPI.GenerateServiceLastAccessedDetailsRequest was just called")
	}
	callInfo := struct {
		GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
	}{
		GenerateServiceLastAccessedDetailsInput: generateServiceLastAccessedDetailsInput,
	}
	mock.lockGenerateServiceLastAccessedDetailsRequest.Lock()
	mock.calls.GenerateServiceLastAccessedDetailsRequest = append(mock.calls.GenerateServiceLastAccessedDetailsRequest, callInfo)
	mock.lockGenerateServiceLastAccessedDetailsRequest.Unlock()
	return mock.GenerateServiceLastAccessedDetailsRequestFunc(generateServiceLastAccessedDetailsInput)
}

// GenerateServiceLastAccessedDetailsRequestCalls gets all the calls that were made to GenerateServiceLastAccessedDetailsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateServiceLastAccessedDetailsRequestCalls())
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsRequestCalls() []struct {
	GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
} {
	var calls []struct {
		GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
	}
	mock.lockGenerateServiceLastAccessedDetailsRequest.RLock()
	calls = mock.calls.GenerateServiceLastAccessedDetailsRequest
	mock.lockGenerateServiceLastAccessedDetailsRequest.RUnlock()
	return calls
}

// GenerateServiceLastAccessedDetailsWithContext calls GenerateServiceLastAccessedDetailsWithContextFunc.
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsWithContext(contextMoqParam context.Context, generateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput, options ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	if mock.GenerateServiceLastAccessedDetailsWithContextFunc == nil {
		panic("IAMAPIMock.GenerateServiceLastAccessedDetailsWithContextFunc: method is nil but IAMAPI.GenerateServiceLastAccessedDetailsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		GenerateServiceLastAccessedDetailsInput: generateServiceLastAccessedDetailsInput,
		Options:                                 options,
	}
	mock.lockGenerateServiceLastAccessedDetailsWithContext.Lock()
	mock.calls.GenerateServiceLastAccessedDetailsWithContext = append(mock.calls.GenerateServiceLastAccessedDetailsWithContext, callInfo)
	mock.lockGenerateServiceLastAccessedDetailsWithContext.Unlock()
	return mock.GenerateServiceLastAccessedDetailsWithContextFunc(contextMoqParam, generateServiceLastAccessedDetailsInput, options...)
}

// GenerateServiceLastAccessedDetailsWithContextCalls gets all the calls that were made to GenerateServiceLastAccessedDetailsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GenerateServiceLastAccessedDetailsWithContextCalls())
func (mock *IAMAPIMock) GenerateServiceLastAccessedDetailsWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		GenerateServiceLastAccessedDetailsInput *iam.GenerateServiceLastAccessedDetailsInput
		Options                                 []request.Option
	}
	mock.lockGenerateServiceLastAccessedDetailsWithContext.RLock()
	calls = mock.calls.GenerateServiceLastAccessedDetailsWithContext
	mock.lockGenerateServiceLastAccessedDetailsWithContext.RUnlock()
	return calls
}

// GetAccessKeyLastUsed calls GetAccessKeyLastUsedFunc.
func (mock *IAMAPIMock) GetAccessKeyLastUsed(getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	if mock.GetAccessKeyLastUsedFunc == nil {
		panic("IAMAPIMock.GetAccessKeyLastUsedFunc: method is nil but IAMAPI.GetAccessKeyLastUsed was just called")
	}
	callInfo := struct {
		GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
	}{
		GetAccessKeyLastUsedInput: getAccessKeyLastUsedInput,
	}
	mock.lockGetAccessKeyLastUsed.Lock()
	mock.calls.GetAccessKeyLastUsed = append(mock.calls.GetAccessKeyLastUsed, callInfo)
	mock.lockGetAccessKeyLastUsed.Unlock()
	return mock.GetAccessKeyLastUsedFunc(getAccessKeyLastUsedInput)
}

// GetAccessKeyLastUsedCalls gets all the calls that were made to GetAccessKeyLastUsed.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccessKeyLastUsedCalls())
func (mock *IAMAPIMock) GetAccessKeyLastUsedCalls() []struct {
	GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
} {
	var calls []struct {
		GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
	}
	mock.lockGetAccessKeyLastUsed.RLock()
	calls = mock.calls.GetAccessKeyLastUsed
	mock.lockGetAccessKeyLastUsed.RUnlock()
	return calls
}

// GetAccessKeyLastUsedRequest calls GetAccessKeyLastUsedRequestFunc.
func (mock *IAMAPIMock) GetAccessKeyLastUsedRequest(getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput) {
	if mock.GetAccessKeyLastUsedRequestFunc == nil {
		panic("IAMAPIMock.GetAccessKeyLastUsedRequestFunc: method is nil but IAMAPI.GetAccessKeyLastUsedRequest was just called")
	}
	callInfo := struct {
		GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
	}{
		GetAccessKeyLastUsedInput: getAccessKeyLastUsedInput,
	}
	mock.lockGetAccessKeyLastUsedRequest.Lock()
	mock.calls.GetAccessKeyLastUsedRequest = append(mock.calls.GetAccessKeyLastUsedRequest, callInfo)
	mock.lockGetAccessKeyLastUsedRequest.Unlock()
	return mock.GetAccessKeyLastUsedRequestFunc(getAccessKeyLastUsedInput)
}

// GetAccessKeyLastUsedRequestCalls gets all the calls that were made to GetAccessKeyLastUsedRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccessKeyLastUsedRequestCalls())
func (mock *IAMAPIMock) GetAccessKeyLastUsedRequestCalls() []struct {
	GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
} {
	var calls []struct {
		GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
	}
	mock.lockGetAccessKeyLastUsedRequest.RLock()
	calls = mock.calls.GetAccessKeyLastUsedRequest
	mock.lockGetAccessKeyLastUsedRequest.RUnlock()
	return calls
}

// GetAccessKeyLastUsedWithContext calls GetAccessKeyLastUsedWithContextFunc.
func (mock *IAMAPIMock) GetAccessKeyLastUsedWithContext(contextMoqParam context.Context, getAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput, options ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
	if mock.GetAccessKeyLastUsedWithContextFunc == nil {
		panic("IAMAPIMock.GetAccessKeyLastUsedWithContextFunc: method is nil but IAMAPI.GetAccessKeyLastUsedWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		GetAccessKeyLastUsedInput: getAccessKeyLastUsedInput,
		Options:                   options,
	}
	mock.lockGetAccessKeyLastUsedWithContext.Lock()
	mock.calls.GetAccessKeyLastUsedWithContext = append(mock.calls.GetAccessKeyLastUsedWithContext, callInfo)
	mock.lockGetAccessKeyLastUsedWithContext.Unlock()
	return mock.GetAccessKeyLastUsedWithContextFunc(contextMoqParam, getAccessKeyLastUsedInput, options...)
}

// GetAccessKeyLastUsedWithContextCalls gets all the calls that were made to GetAccessKeyLastUsedWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccessKeyLastUsedWithContextCalls())
func (mock *IAMAPIMock) GetAccessKeyLastUsedWithContextCalls() []struct {
	ContextMoqParam           context.Context
	GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		GetAccessKeyLastUsedInput *iam.GetAccessKeyLastUsedInput
		Options                   []request.Option
	}
	mock.lockGetAccessKeyLastUsedWithContext.RLock()
	calls = mock.calls.GetAccessKeyLastUsedWithContext
	mock.lockGetAccessKeyLastUsedWithContext.RUnlock()
	return calls
}

// GetAccountAuthorizationDetails calls GetAccountAuthorizationDetailsFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetails(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	if mock.GetAccountAuthorizationDetailsFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsFunc: method is nil but IAMAPI.GetAccountAuthorizationDetails was just called")
	}
	callInfo := struct {
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
	}{
		GetAccountAuthorizationDetailsInput: getAccountAuthorizationDetailsInput,
	}
	mock.lockGetAccountAuthorizationDetails.Lock()
	mock.calls.GetAccountAuthorizationDetails = append(mock.calls.GetAccountAuthorizationDetails, callInfo)
	mock.lockGetAccountAuthorizationDetails.Unlock()
	return mock.GetAccountAuthorizationDetailsFunc(getAccountAuthorizationDetailsInput)
}

// GetAccountAuthorizationDetailsCalls gets all the calls that were made to GetAccountAuthorizationDetails.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountAuthorizationDetailsCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsCalls() []struct {
	GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
} {
	var calls []struct {
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
	}
	mock.lockGetAccountAuthorizationDetails.RLock()
	calls = mock.calls.GetAccountAuthorizationDetails
	mock.lockGetAccountAuthorizationDetails.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsPages calls GetAccountAuthorizationDetailsPagesFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPages(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
	if mock.GetAccountAuthorizationDetailsPagesFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsPagesFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsPages was just called")
	}
	callInfo := struct {
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		Fn                                  func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	}{
		GetAccountAuthorizationDetailsInput: getAccountAuthorizationDetailsInput,
		Fn:                                  fn,
	}
	mock.lockGetAccountAuthorizationDetailsPages.Lock()
	mock.calls.GetAccountAuthorizationDetailsPages = append(mock.calls.GetAccountAuthorizationDetailsPages, callInfo)
	mock.lockGetAccountAuthorizationDetailsPages.Unlock()
	return mock.GetAccountAuthorizationDetailsPagesFunc(getAccountAuthorizationDetailsInput, fn)
}

// GetAccountAuthorizationDetailsPagesCalls gets all the calls that were made to GetAccountAuthorizationDetailsPages.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountAuthorizationDetailsPagesCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPagesCalls() []struct {
	GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
	Fn                                  func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
} {
	var calls []struct {
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		Fn                                  func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	}
	mock.lockGetAccountAuthorizationDetailsPages.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsPages
	mock.lockGetAccountAuthorizationDetailsPages.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsPagesWithContext calls GetAccountAuthorizationDetailsPagesWithContextFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPagesWithContext(contextMoqParam context.Context, getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, options ...request.Option) error {
	if mock.GetAccountAuthorizationDetailsPagesWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsPagesWithContextFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                     context.Context
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		Fn                                  func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		Options                             []request.Option
	}{
		ContextMoqParam:                     contextMoqParam,
		GetAccountAuthorizationDetailsInput: getAccountAuthorizationDetailsInput,
		Fn:                                  fn,
		Options:                             options,
	}
	mock.lockGetAccountAuthorizationDetailsPagesWithContext.Lock()
	mock.calls.GetAccountAuthorizationDetailsPagesWithContext = append(mock.calls.GetAccountAuthorizationDetailsPagesWithContext, callInfo)
	mock.lockGetAccountAuthorizationDetailsPagesWithContext.Unlock()
	return mock.GetAccountAuthorizationDetailsPagesWithContextFunc(contextMoqParam, getAccountAuthorizationDetailsInput, fn, options...)
}

// GetAccountAuthorizationDetailsPagesWithContextCalls gets all the calls that were made to GetAccountAuthorizationDetailsPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountAuthorizationDetailsPagesWithContextCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsPagesWithContextCalls() []struct {
	ContextMoqParam                     context.Context
	GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
	Fn                                  func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
	Options                             []request.Option
} {
	var calls []struct {
		ContextMoqParam                     context.Context
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		Fn                                  func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool
		Options                             []request.Option
	}
	mock.lockGetAccountAuthorizationDetailsPagesWithContext.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsPagesWithContext
	mock.lockGetAccountAuthorizationDetailsPagesWithContext.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsRequest calls GetAccountAuthorizationDetailsRequestFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsRequest(getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput) {
	if mock.GetAccountAuthorizationDetailsRequestFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsRequestFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsRequest was just called")
	}
	callInfo := struct {
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
	}{
		GetAccountAuthorizationDetailsInput: getAccountAuthorizationDetailsInput,
	}
	mock.lockGetAccountAuthorizationDetailsRequest.Lock()
	mock.calls.GetAccountAuthorizationDetailsRequest = append(mock.calls.GetAccountAuthorizationDetailsRequest, callInfo)
	mock.lockGetAccountAuthorizationDetailsRequest.Unlock()
	return mock.GetAccountAuthorizationDetailsRequestFunc(getAccountAuthorizationDetailsInput)
}

// GetAccountAuthorizationDetailsRequestCalls gets all the calls that were made to GetAccountAuthorizationDetailsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountAuthorizationDetailsRequestCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsRequestCalls() []struct {
	GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
} {
	var calls []struct {
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
	}
	mock.lockGetAccountAuthorizationDetailsRequest.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsRequest
	mock.lockGetAccountAuthorizationDetailsRequest.RUnlock()
	return calls
}

// GetAccountAuthorizationDetailsWithContext calls GetAccountAuthorizationDetailsWithContextFunc.
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsWithContext(contextMoqParam context.Context, getAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput, options ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	if mock.GetAccountAuthorizationDetailsWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountAuthorizationDetailsWithContextFunc: method is nil but IAMAPI.GetAccountAuthorizationDetailsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                     context.Context
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		Options                             []request.Option
	}{
		ContextMoqParam:                     contextMoqParam,
		GetAccountAuthorizationDetailsInput: getAccountAuthorizationDetailsInput,
		Options:                             options,
	}
	mock.lockGetAccountAuthorizationDetailsWithContext.Lock()
	mock.calls.GetAccountAuthorizationDetailsWithContext = append(mock.calls.GetAccountAuthorizationDetailsWithContext, callInfo)
	mock.lockGetAccountAuthorizationDetailsWithContext.Unlock()
	return mock.GetAccountAuthorizationDetailsWithContextFunc(contextMoqParam, getAccountAuthorizationDetailsInput, options...)
}

// GetAccountAuthorizationDetailsWithContextCalls gets all the calls that were made to GetAccountAuthorizationDetailsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountAuthorizationDetailsWithContextCalls())
func (mock *IAMAPIMock) GetAccountAuthorizationDetailsWithContextCalls() []struct {
	ContextMoqParam                     context.Context
	GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
	Options                             []request.Option
} {
	var calls []struct {
		ContextMoqParam                     context.Context
		GetAccountAuthorizationDetailsInput *iam.GetAccountAuthorizationDetailsInput
		Options                             []request.Option
	}
	mock.lockGetAccountAuthorizationDetailsWithContext.RLock()
	calls = mock.calls.GetAccountAuthorizationDetailsWithContext
	mock.lockGetAccountAuthorizationDetailsWithContext.RUnlock()
	return calls
}

// GetAccountPasswordPolicy calls GetAccountPasswordPolicyFunc.
func (mock *IAMAPIMock) GetAccountPasswordPolicy(getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	if mock.GetAccountPasswordPolicyFunc == nil {
		panic("IAMAPIMock.GetAccountPasswordPolicyFunc: method is nil but IAMAPI.GetAccountPasswordPolicy was just called")
	}
	callInfo := struct {
		GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
	}{
		GetAccountPasswordPolicyInput: getAccountPasswordPolicyInput,
	}
	mock.lockGetAccountPasswordPolicy.Lock()
	mock.calls.GetAccountPasswordPolicy = append(mock.calls.GetAccountPasswordPolicy, callInfo)
	mock.lockGetAccountPasswordPolicy.Unlock()
	return mock.GetAccountPasswordPolicyFunc(getAccountPasswordPolicyInput)
}

// GetAccountPasswordPolicyCalls gets all the calls that were made to GetAccountPasswordPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountPasswordPolicyCalls())
func (mock *IAMAPIMock) GetAccountPasswordPolicyCalls() []struct {
	GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
} {
	var calls []struct {
		GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
	}
	mock.lockGetAccountPasswordPolicy.RLock()
	calls = mock.calls.GetAccountPasswordPolicy
	mock.lockGetAccountPasswordPolicy.RUnlock()
	return calls
}

// GetAccountPasswordPolicyRequest calls GetAccountPasswordPolicyRequestFunc.
func (mock *IAMAPIMock) GetAccountPasswordPolicyRequest(getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput) {
	if mock.GetAccountPasswordPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetAccountPasswordPolicyRequestFunc: method is nil but IAMAPI.GetAccountPasswordPolicyRequest was just called")
	}
	callInfo := struct {
		GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
	}{
		GetAccountPasswordPolicyInput: getAccountPasswordPolicyInput,
	}
	mock.lockGetAccountPasswordPolicyRequest.Lock()
	mock.calls.GetAccountPasswordPolicyRequest = append(mock.calls.GetAccountPasswordPolicyRequest, callInfo)
	mock.lockGetAccountPasswordPolicyRequest.Unlock()
	return mock.GetAccountPasswordPolicyRequestFunc(getAccountPasswordPolicyInput)
}

// GetAccountPasswordPolicyRequestCalls gets all the calls that were made to GetAccountPasswordPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountPasswordPolicyRequestCalls())
func (mock *IAMAPIMock) GetAccountPasswordPolicyRequestCalls() []struct {
	GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
} {
	var calls []struct {
		GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
	}
	mock.lockGetAccountPasswordPolicyRequest.RLock()
	calls = mock.calls.GetAccountPasswordPolicyRequest
	mock.lockGetAccountPasswordPolicyRequest.RUnlock()
	return calls
}

// GetAccountPasswordPolicyWithContext calls GetAccountPasswordPolicyWithContextFunc.
func (mock *IAMAPIMock) GetAccountPasswordPolicyWithContext(contextMoqParam context.Context, getAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput, options ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
	if mock.GetAccountPasswordPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountPasswordPolicyWithContextFunc: method is nil but IAMAPI.GetAccountPasswordPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		GetAccountPasswordPolicyInput: getAccountPasswordPolicyInput,
		Options:                       options,
	}
	mock.lockGetAccountPasswordPolicyWithContext.Lock()
	mock.calls.GetAccountPasswordPolicyWithContext = append(mock.calls.GetAccountPasswordPolicyWithContext, callInfo)
	mock.lockGetAccountPasswordPolicyWithContext.Unlock()
	return mock.GetAccountPasswordPolicyWithContextFunc(contextMoqParam, getAccountPasswordPolicyInput, options...)
}

// GetAccountPasswordPolicyWithContextCalls gets all the calls that were made to GetAccountPasswordPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountPasswordPolicyWithContextCalls())
func (mock *IAMAPIMock) GetAccountPasswordPolicyWithContextCalls() []struct {
	ContextMoqParam               context.Context
	GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		GetAccountPasswordPolicyInput *iam.GetAccountPasswordPolicyInput
		Options                       []request.Option
	}
	mock.lockGetAccountPasswordPolicyWithContext.RLock()
	calls = mock.calls.GetAccountPasswordPolicyWithContext
	mock.lockGetAccountPasswordPolicyWithContext.RUnlock()
	return calls
}

// GetAccountSummary calls GetAccountSummaryFunc.
func (mock *IAMAPIMock) GetAccountSummary(getAccountSummaryInput *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	if mock.GetAccountSummaryFunc == nil {
		panic("IAMAPIMock.GetAccountSummaryFunc: method is nil but IAMAPI.GetAccountSummary was just called")
	}
	callInfo := struct {
		GetAccountSummaryInput *iam.GetAccountSummaryInput
	}{
		GetAccountSummaryInput: getAccountSummaryInput,
	}
	mock.lockGetAccountSummary.Lock()
	mock.calls.GetAccountSummary = append(mock.calls.GetAccountSummary, callInfo)
	mock.lockGetAccountSummary.Unlock()
	return mock.GetAccountSummaryFunc(getAccountSummaryInput)
}

// GetAccountSummaryCalls gets all the calls that were made to GetAccountSummary.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountSummaryCalls())
func (mock *IAMAPIMock) GetAccountSummaryCalls() []struct {
	GetAccountSummaryInput *iam.GetAccountSummaryInput
} {
	var calls []struct {
		GetAccountSummaryInput *iam.GetAccountSummaryInput
	}
	mock.lockGetAccountSummary.RLock()
	calls = mock.calls.GetAccountSummary
	mock.lockGetAccountSummary.RUnlock()
	return calls
}

// GetAccountSummaryRequest calls GetAccountSummaryRequestFunc.
func (mock *IAMAPIMock) GetAccountSummaryRequest(getAccountSummaryInput *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput) {
	if mock.GetAccountSummaryRequestFunc == nil {
		panic("IAMAPIMock.GetAccountSummaryRequestFunc: method is nil but IAMAPI.GetAccountSummaryRequest was just called")
	}
	callInfo := struct {
		GetAccountSummaryInput *iam.GetAccountSummaryInput
	}{
		GetAccountSummaryInput: getAccountSummaryInput,
	}
	mock.lockGetAccountSummaryRequest.Lock()
	mock.calls.GetAccountSummaryRequest = append(mock.calls.GetAccountSummaryRequest, callInfo)
	mock.lockGetAccountSummaryRequest.Unlock()
	return mock.GetAccountSummaryRequestFunc(getAccountSummaryInput)
}

// GetAccountSummaryRequestCalls gets all the calls that were made to GetAccountSummaryRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountSummaryRequestCalls())
func (mock *IAMAPIMock) GetAccountSummaryRequestCalls() []struct {
	GetAccountSummaryInput *iam.GetAccountSummaryInput
} {
	var calls []struct {
		GetAccountSummaryInput *iam.GetAccountSummaryInput
	}
	mock.lockGetAccountSummaryRequest.RLock()
	calls = mock.calls.GetAccountSummaryRequest
	mock.lockGetAccountSummaryRequest.RUnlock()
	return calls
}

// GetAccountSummaryWithContext calls GetAccountSummaryWithContextFunc.
func (mock *IAMAPIMock) GetAccountSummaryWithContext(contextMoqParam context.Context, getAccountSummaryInput *iam.GetAccountSummaryInput, options ...request.Option) (*iam.GetAccountSummaryOutput, error) {
	if mock.GetAccountSummaryWithContextFunc == nil {
		panic("IAMAPIMock.GetAccountSummaryWithContextFunc: method is nil but IAMAPI.GetAccountSummaryWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		GetAccountSummaryInput *iam.GetAccountSummaryInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		GetAccountSummaryInput: getAccountSummaryInput,
		Options:                options,
	}
	mock.lockGetAccountSummaryWithContext.Lock()
	mock.calls.GetAccountSummaryWithContext = append(mock.calls.GetAccountSummaryWithContext, callInfo)
	mock.lockGetAccountSummaryWithContext.Unlock()
	return mock.GetAccountSummaryWithContextFunc(contextMoqParam, getAccountSummaryInput, options...)
}

// GetAccountSummaryWithContextCalls gets all the calls that were made to GetAccountSummaryWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetAccountSummaryWithContextCalls())
func (mock *IAMAPIMock) GetAccountSummaryWithContextCalls() []struct {
	ContextMoqParam        context.Context
	GetAccountSummaryInput *iam.GetAccountSummaryInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		GetAccountSummaryInput *iam.GetAccountSummaryInput
		Options                []request.Option
	}
	mock.lockGetAccountSummaryWithContext.RLock()
	calls = mock.calls.GetAccountSummaryWithContext
	mock.lockGetAccountSummaryWithContext.RUnlock()
	return calls
}

// GetContextKeysForCustomPolicy calls GetContextKeysForCustomPolicyFunc.
func (mock *IAMAPIMock) GetContextKeysForCustomPolicy(getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForCustomPolicyFunc == nil {
		panic("IAMAPIMock.GetContextKeysForCustomPolicyFunc: method is nil but IAMAPI.GetContextKeysForCustomPolicy was just called")
	}
	callInfo := struct {
		GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
	}{
		GetContextKeysForCustomPolicyInput: getContextKeysForCustomPolicyInput,
	}
	mock.lockGetContextKeysForCustomPolicy.Lock()
	mock.calls.GetContextKeysForCustomPolicy = append(mock.calls.GetContextKeysForCustomPolicy, callInfo)
	mock.lockGetContextKeysForCustomPolicy.Unlock()
	return mock.GetContextKeysForCustomPolicyFunc(getContextKeysForCustomPolicyInput)
}

// GetContextKeysForCustomPolicyCalls gets all the calls that were made to GetContextKeysForCustomPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.GetContextKeysForCustomPolicyCalls())
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyCalls() []struct {
	GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
} {
	var calls []struct {
		GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
	}
	mock.lockGetContextKeysForCustomPolicy.RLock()
	calls = mock.calls.GetContextKeysForCustomPolicy
	mock.lockGetContextKeysForCustomPolicy.RUnlock()
	return calls
}

// GetContextKeysForCustomPolicyRequest calls GetContextKeysForCustomPolicyRequestFunc.
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyRequest(getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	if mock.GetContextKeysForCustomPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetContextKeysForCustomPolicyRequestFunc: method is nil but IAMAPI.GetContextKeysForCustomPolicyRequest was just called")
	}
	callInfo := struct {
		GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
	}{
		GetContextKeysForCustomPolicyInput: getContextKeysForCustomPolicyInput,
	}
	mock.lockGetContextKeysForCustomPolicyRequest.Lock()
	mock.calls.GetContextKeysForCustomPolicyRequest = append(mock.calls.GetContextKeysForCustomPolicyRequest, callInfo)
	mock.lockGetContextKeysForCustomPolicyRequest.Unlock()
	return mock.GetContextKeysForCustomPolicyRequestFunc(getContextKeysForCustomPolicyInput)
}

// GetContextKeysForCustomPolicyRequestCalls gets all the calls that were made to GetContextKeysForCustomPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetContextKeysForCustomPolicyRequestCalls())
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyRequestCalls() []struct {
	GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
} {
	var calls []struct {
		GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
	}
	mock.lockGetContextKeysForCustomPolicyRequest.RLock()
	calls = mock.calls.GetContextKeysForCustomPolicyRequest
	mock.lockGetContextKeysForCustomPolicyRequest.RUnlock()
	return calls
}

// GetContextKeysForCustomPolicyWithContext calls GetContextKeysForCustomPolicyWithContextFunc.
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyWithContext(contextMoqParam context.Context, getContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput, options ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForCustomPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetContextKeysForCustomPolicyWithContextFunc: method is nil but IAMAPI.GetContextKeysForCustomPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		GetContextKeysForCustomPolicyInput: getContextKeysForCustomPolicyInput,
		Options:                            options,
	}
	mock.lockGetContextKeysForCustomPolicyWithContext.Lock()
	mock.calls.GetContextKeysForCustomPolicyWithContext = append(mock.calls.GetContextKeysForCustomPolicyWithContext, callInfo)
	mock.lockGetContextKeysForCustomPolicyWithContext.Unlock()
	return mock.GetContextKeysForCustomPolicyWithContextFunc(contextMoqParam, getContextKeysForCustomPolicyInput, options...)
}

// GetContextKeysForCustomPolicyWithContextCalls gets all the calls that were made to GetContextKeysForCustomPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetContextKeysForCustomPolicyWithContextCalls())
func (mock *IAMAPIMock) GetContextKeysForCustomPolicyWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		GetContextKeysForCustomPolicyInput *iam.GetContextKeysForCustomPolicyInput
		Options                            []request.Option
	}
	mock.lockGetContextKeysForCustomPolicyWithContext.RLock()
	calls = mock.calls.GetContextKeysForCustomPolicyWithContext
	mock.lockGetContextKeysForCustomPolicyWithContext.RUnlock()
	return calls
}

// GetContextKeysForPrincipalPolicy calls GetContextKeysForPrincipalPolicyFunc.
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicy(getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForPrincipalPolicyFunc == nil {
		panic("IAMAPIMock.GetContextKeysForPrincipalPolicyFunc: method is nil but IAMAPI.GetContextKeysForPrincipalPolicy was just called")
	}
	callInfo := struct {
		GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
	}{
		GetContextKeysForPrincipalPolicyInput: getContextKeysForPrincipalPolicyInput,
	}
	mock.lockGetContextKeysForPrincipalPolicy.Lock()
	mock.calls.GetContextKeysForPrincipalPolicy = append(mock.calls.GetContextKeysForPrincipalPolicy, callInfo)
	mock.lockGetContextKeysForPrincipalPolicy.Unlock()
	return mock.GetContextKeysForPrincipalPolicyFunc(getContextKeysForPrincipalPolicyInput)
}

// GetContextKeysForPrincipalPolicyCalls gets all the calls that were made to GetContextKeysForPrincipalPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.GetContextKeysForPrincipalPolicyCalls())
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyCalls() []struct {
	GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
} {
	var calls []struct {
		GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
	}
	mock.lockGetContextKeysForPrincipalPolicy.RLock()
	calls = mock.calls.GetContextKeysForPrincipalPolicy
	mock.lockGetContextKeysForPrincipalPolicy.RUnlock()
	return calls
}

// GetContextKeysForPrincipalPolicyRequest calls GetContextKeysForPrincipalPolicyRequestFunc.
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyRequest(getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	if mock.GetContextKeysForPrincipalPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetContextKeysForPrincipalPolicyRequestFunc: method is nil but IAMAPI.GetContextKeysForPrincipalPolicyRequest was just called")
	}
	callInfo := struct {
		GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
	}{
		GetContextKeysForPrincipalPolicyInput: getContextKeysForPrincipalPolicyInput,
	}
	mock.lockGetContextKeysForPrincipalPolicyRequest.Lock()
	mock.calls.GetContextKeysForPrincipalPolicyRequest = append(mock.calls.GetContextKeysForPrincipalPolicyRequest, callInfo)
	mock.lockGetContextKeysForPrincipalPolicyRequest.Unlock()
	return mock.GetContextKeysForPrincipalPolicyRequestFunc(getContextKeysForPrincipalPolicyInput)
}

// GetContextKeysForPrincipalPolicyRequestCalls gets all the calls that were made to GetContextKeysForPrincipalPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetContextKeysForPrincipalPolicyRequestCalls())
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyRequestCalls() []struct {
	GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
} {
	var calls []struct {
		GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
	}
	mock.lockGetContextKeysForPrincipalPolicyRequest.RLock()
	calls = mock.calls.GetContextKeysForPrincipalPolicyRequest
	mock.lockGetContextKeysForPrincipalPolicyRequest.RUnlock()
	return calls
}

// GetContextKeysForPrincipalPolicyWithContext calls GetContextKeysForPrincipalPolicyWithContextFunc.
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyWithContext(contextMoqParam context.Context, getContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput, options ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	if mock.GetContextKeysForPrincipalPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetContextKeysForPrincipalPolicyWithContextFunc: method is nil but IAMAPI.GetContextKeysForPrincipalPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		GetContextKeysForPrincipalPolicyInput: getContextKeysForPrincipalPolicyInput,
		Options:                               options,
	}
	mock.lockGetContextKeysForPrincipalPolicyWithContext.Lock()
	mock.calls.GetContextKeysForPrincipalPolicyWithContext = append(mock.calls.GetContextKeysForPrincipalPolicyWithContext, callInfo)
	mock.lockGetContextKeysForPrincipalPolicyWithContext.Unlock()
	return mock.GetContextKeysForPrincipalPolicyWithContextFunc(contextMoqParam, getContextKeysForPrincipalPolicyInput, options...)
}

// GetContextKeysForPrincipalPolicyWithContextCalls gets all the calls that were made to GetContextKeysForPrincipalPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetContextKeysForPrincipalPolicyWithContextCalls())
func (mock *IAMAPIMock) GetContextKeysForPrincipalPolicyWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		GetContextKeysForPrincipalPolicyInput *iam.GetContextKeysForPrincipalPolicyInput
		Options                               []request.Option
	}
	mock.lockGetContextKeysForPrincipalPolicyWithContext.RLock()
	calls = mock.calls.GetContextKeysForPrincipalPolicyWithContext
	mock.lockGetContextKeysForPrincipalPolicyWithContext.RUnlock()
	return calls
}

// GetCredentialReport calls GetCredentialReportFunc.
func (mock *IAMAPIMock) GetCredentialReport(getCredentialReportInput *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	if mock.GetCredentialReportFunc == nil {
		panic("IAMAPIMock.GetCredentialReportFunc: method is nil but IAMAPI.GetCredentialReport was just called")
	}
	callInfo := struct {
		GetCredentialReportInput *iam.GetCredentialReportInput
	}{
		GetCredentialReportInput: getCredentialReportInput,
	}
	mock.lockGetCredentialReport.Lock()
	mock.calls.GetCredentialReport = append(mock.calls.GetCredentialReport, callInfo)
	mock.lockGetCredentialReport.Unlock()
	return mock.GetCredentialReportFunc(getCredentialReportInput)
}

// GetCredentialReportCalls gets all the calls that were made to GetCredentialReport.
// Check the length with:
//
//	len(mockedIAMAPI.GetCredentialReportCalls())
func (mock *IAMAPIMock) GetCredentialReportCalls() []struct {
	GetCredentialReportInput *iam.GetCredentialReportInput
} {
	var calls []struct {
		GetCredentialReportInput *iam.GetCredentialReportInput
	}
	mock.lockGetCredentialReport.RLock()
	calls = mock.calls.GetCredentialReport
	mock.lockGetCredentialReport.RUnlock()
	return calls
}

// GetCredentialReportRequest calls GetCredentialReportRequestFunc.
func (mock *IAMAPIMock) GetCredentialReportRequest(getCredentialReportInput *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput) {
	if mock.GetCredentialReportRequestFunc == nil {
		panic("IAMAPIMock.GetCredentialReportRequestFunc: method is nil but IAMAPI.GetCredentialReportRequest was just called")
	}
	callInfo := struct {
		GetCredentialReportInput *iam.GetCredentialReportInput
	}{
		GetCredentialReportInput: getCredentialReportInput,
	}
	mock.lockGetCredentialReportRequest.Lock()
	mock.calls.GetCredentialReportRequest = append(mock.calls.GetCredentialReportRequest, callInfo)
	mock.lockGetCredentialReportRequest.Unlock()
	return mock.GetCredentialReportRequestFunc(getCredentialReportInput)
}

// GetCredentialReportRequestCalls gets all the calls that were made to GetCredentialReportRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetCredentialReportRequestCalls())
func (mock *IAMAPIMock) GetCredentialReportRequestCalls() []struct {
	GetCredentialReportInput *iam.GetCredentialReportInput
} {
	var calls []struct {
		GetCredentialReportInput *iam.GetCredentialReportInput
	}
	mock.lockGetCredentialReportRequest.RLock()
	calls = mock.calls.GetCredentialReportRequest
	mock.lockGetCredentialReportRequest.RUnlock()
	return calls
}

// GetCredentialReportWithContext calls GetCredentialReportWithContextFunc.
func (mock *IAMAPIMock) GetCredentialReportWithContext(contextMoqParam context.Context, getCredentialReportInput *iam.GetCredentialReportInput, options ...request.Option) (*iam.GetCredentialReportOutput, error) {
	if mock.GetCredentialReportWithContextFunc == nil {
		panic("IAMAPIMock.GetCredentialReportWithContextFunc: method is nil but IAMAPI.GetCredentialReportWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		GetCredentialReportInput *iam.GetCredentialReportInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		GetCredentialReportInput: getCredentialReportInput,
		Options:                  options,
	}
	mock.lockGetCredentialReportWithContext.Lock()
	mock.calls.GetCredentialReportWithContext = append(mock.calls.GetCredentialReportWithContext, callInfo)
	mock.lockGetCredentialReportWithContext.Unlock()
	return mock.GetCredentialReportWithContextFunc(contextMoqParam, getCredentialReportInput, options...)
}

// GetCredentialReportWithContextCalls gets all the calls that were made to GetCredentialReportWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetCredentialReportWithContextCalls())
func (mock *IAMAPIMock) GetCredentialReportWithContextCalls() []struct {
	ContextMoqParam          context.Context
	GetCredentialReportInput *iam.GetCredentialReportInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		GetCredentialReportInput *iam.GetCredentialReportInput
		Options                  []request.Option
	}
	mock.lockGetCredentialReportWithContext.RLock()
	calls = mock.calls.GetCredentialReportWithContext
	mock.lockGetCredentialReportWithContext.RUnlock()
	return calls
}

// GetGroup calls GetGroupFunc.
func (mock *IAMAPIMock) GetGroup(getGroupInput *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	if mock.GetGroupFunc == nil {
		panic("IAMAPIMock.GetGroupFunc: method is nil but IAMAPI.GetGroup was just called")
	}
	callInfo := struct {
		GetGroupInput *iam.GetGroupInput
	}{
		GetGroupInput: getGroupInput,
	}
	mock.lockGetGroup.Lock()
	mock.calls.GetGroup = append(mock.calls.GetGroup, callInfo)
	mock.lockGetGroup.Unlock()
	return mock.GetGroupFunc(getGroupInput)
}

// GetGroupCalls gets all the calls that were made to GetGroup.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupCalls())
func (mock *IAMAPIMock) GetGroupCalls() []struct {
	GetGroupInput *iam.GetGroupInput
} {
	var calls []struct {
		GetGroupInput *iam.GetGroupInput
	}
	mock.lockGetGroup.RLock()
	calls = mock.calls.GetGroup
	mock.lockGetGroup.RUnlock()
	return calls
}

// GetGroupPages calls GetGroupPagesFunc.
func (mock *IAMAPIMock) GetGroupPages(getGroupInput *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool) error {
	if mock.GetGroupPagesFunc == nil {
		panic("IAMAPIMock.GetGroupPagesFunc: method is nil but IAMAPI.GetGroupPages was just called")
	}
	callInfo := struct {
		GetGroupInput *iam.GetGroupInput
		Fn            func(*iam.GetGroupOutput, bool) bool
	}{
		GetGroupInput: getGroupInput,
		Fn:            fn,
	}
	mock.lockGetGroupPages.Lock()
	mock.calls.GetGroupPages = append(mock.calls.GetGroupPages, callInfo)
	mock.lockGetGroupPages.Unlock()
	return mock.GetGroupPagesFunc(getGroupInput, fn)
}

// GetGroupPagesCalls gets all the calls that were made to GetGroupPages.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupPagesCalls())
func (mock *IAMAPIMock) GetGroupPagesCalls() []struct {
	GetGroupInput *iam.GetGroupInput
	Fn            func(*iam.GetGroupOutput, bool) bool
} {
	var calls []struct {
		GetGroupInput *iam.GetGroupInput
		Fn            func(*iam.GetGroupOutput, bool) bool
	}
	mock.lockGetGroupPages.RLock()
	calls = mock.calls.GetGroupPages
	mock.lockGetGroupPages.RUnlock()
	return calls
}

// GetGroupPagesWithContext calls GetGroupPagesWithContextFunc.
func (mock *IAMAPIMock) GetGroupPagesWithContext(contextMoqParam context.Context, getGroupInput *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool, options ...request.Option) error {
	if mock.GetGroupPagesWithContextFunc == nil {
		panic("IAMAPIMock.GetGroupPagesWithContextFunc: method is nil but IAMAPI.GetGroupPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetGroupInput   *iam.GetGroupInput
		Fn              func(*iam.GetGroupOutput, bool) bool
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetGroupInput:   getGroupInput,
		Fn:              fn,
		Options:         options,
	}
	mock.lockGetGroupPagesWithContext.Lock()
	mock.calls.GetGroupPagesWithContext = append(mock.calls.GetGroupPagesWithContext, callInfo)
	mock.lockGetGroupPagesWithContext.Unlock()
	return mock.GetGroupPagesWithContextFunc(contextMoqParam, getGroupInput, fn, options...)
}

// GetGroupPagesWithContextCalls gets all the calls that were made to GetGroupPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupPagesWithContextCalls())
func (mock *IAMAPIMock) GetGroupPagesWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetGroupInput   *iam.GetGroupInput
	Fn              func(*iam.GetGroupOutput, bool) bool
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetGroupInput   *iam.GetGroupInput
		Fn              func(*iam.GetGroupOutput, bool) bool
		Options         []request.Option
	}
	mock.lockGetGroupPagesWithContext.RLock()
	calls = mock.calls.GetGroupPagesWithContext
	mock.lockGetGroupPagesWithContext.RUnlock()
	return calls
}

// GetGroupPolicy calls GetGroupPolicyFunc.
func (mock *IAMAPIMock) GetGroupPolicy(getGroupPolicyInput *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	if mock.GetGroupPolicyFunc == nil {
		panic("IAMAPIMock.GetGroupPolicyFunc: method is nil but IAMAPI.GetGroupPolicy was just called")
	}
	callInfo := struct {
		GetGroupPolicyInput *iam.GetGroupPolicyInput
	}{
		GetGroupPolicyInput: getGroupPolicyInput,
	}
	mock.lockGetGroupPolicy.Lock()
	mock.calls.GetGroupPolicy = append(mock.calls.GetGroupPolicy, callInfo)
	mock.lockGetGroupPolicy.Unlock()
	return mock.GetGroupPolicyFunc(getGroupPolicyInput)
}

// GetGroupPolicyCalls gets all the calls that were made to GetGroupPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupPolicyCalls())
func (mock *IAMAPIMock) GetGroupPolicyCalls() []struct {
	GetGroupPolicyInput *iam.GetGroupPolicyInput
} {
	var calls []struct {
		GetGroupPolicyInput *iam.GetGroupPolicyInput
	}
	mock.lockGetGroupPolicy.RLock()
	calls = mock.calls.GetGroupPolicy
	mock.lockGetGroupPolicy.RUnlock()
	return calls
}

// GetGroupPolicyRequest calls GetGroupPolicyRequestFunc.
func (mock *IAMAPIMock) GetGroupPolicyRequest(getGroupPolicyInput *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput) {
	if mock.GetGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetGroupPolicyRequestFunc: method is nil but IAMAPI.GetGroupPolicyRequest was just called")
	}
	callInfo := struct {
		GetGroupPolicyInput *iam.GetGroupPolicyInput
	}{
		GetGroupPolicyInput: getGroupPolicyInput,
	}
	mock.lockGetGroupPolicyRequest.Lock()
	mock.calls.GetGroupPolicyRequest = append(mock.calls.GetGroupPolicyRequest, callInfo)
	mock.lockGetGroupPolicyRequest.Unlock()
	return mock.GetGroupPolicyRequestFunc(getGroupPolicyInput)
}

// GetGroupPolicyRequestCalls gets all the calls that were made to GetGroupPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupPolicyRequestCalls())
func (mock *IAMAPIMock) GetGroupPolicyRequestCalls() []struct {
	GetGroupPolicyInput *iam.GetGroupPolicyInput
} {
	var calls []struct {
		GetGroupPolicyInput *iam.GetGroupPolicyInput
	}
	mock.lockGetGroupPolicyRequest.RLock()
	calls = mock.calls.GetGroupPolicyRequest
	mock.lockGetGroupPolicyRequest.RUnlock()
	return calls
}

// GetGroupPolicyWithContext calls GetGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) GetGroupPolicyWithContext(contextMoqParam context.Context, getGroupPolicyInput *iam.GetGroupPolicyInput, options ...request.Option) (*iam.GetGroupPolicyOutput, error) {
	if mock.GetGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetGroupPolicyWithContextFunc: method is nil but IAMAPI.GetGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		GetGroupPolicyInput *iam.GetGroupPolicyInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		GetGroupPolicyInput: getGroupPolicyInput,
		Options:             options,
	}
	mock.lockGetGroupPolicyWithContext.Lock()
	mock.calls.GetGroupPolicyWithContext = append(mock.calls.GetGroupPolicyWithContext, callInfo)
	mock.lockGetGroupPolicyWithContext.Unlock()
	return mock.GetGroupPolicyWithContextFunc(contextMoqParam, getGroupPolicyInput, options...)
}

// GetGroupPolicyWithContextCalls gets all the calls that were made to GetGroupPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) GetGroupPolicyWithContextCalls() []struct {
	ContextMoqParam     context.Context
	GetGroupPolicyInput *iam.GetGroupPolicyInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		GetGroupPolicyInput *iam.GetGroupPolicyInput
		Options             []request.Option
	}
	mock.lockGetGroupPolicyWithContext.RLock()
	calls = mock.calls.GetGroupPolicyWithContext
	mock.lockGetGroupPolicyWithContext.RUnlock()
	return calls
}

// GetGroupRequest calls GetGroupRequestFunc.
func (mock *IAMAPIMock) GetGroupRequest(getGroupInput *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput) {
	if mock.GetGroupRequestFunc == nil {
		panic("IAMAPIMock.GetGroupRequestFunc: method is nil but IAMAPI.GetGroupRequest was just called")
	}
	callInfo := struct {
		GetGroupInput *iam.GetGroupInput
	}{
		GetGroupInput: getGroupInput,
	}
	mock.lockGetGroupRequest.Lock()
	mock.calls.GetGroupRequest = append(mock.calls.GetGroupRequest, callInfo)
	mock.lockGetGroupRequest.Unlock()
	return mock.GetGroupRequestFunc(getGroupInput)
}

// GetGroupRequestCalls gets all the calls that were made to GetGroupRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupRequestCalls())
func (mock *IAMAPIMock) GetGroupRequestCalls() []struct {
	GetGroupInput *iam.GetGroupInput
} {
	var calls []struct {
		GetGroupInput *iam.GetGroupInput
	}
	mock.lockGetGroupRequest.RLock()
	calls = mock.calls.GetGroupRequest
	mock.lockGetGroupRequest.RUnlock()
	return calls
}

// GetGroupWithContext calls GetGroupWithContextFunc.
func (mock *IAMAPIMock) GetGroupWithContext(contextMoqParam context.Context, getGroupInput *iam.GetGroupInput, options ...request.Option) (*iam.GetGroupOutput, error) {
	if mock.GetGroupWithContextFunc == nil {
		panic("IAMAPIMock.GetGroupWithContextFunc: method is nil but IAMAPI.GetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetGroupInput   *iam.GetGroupInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetGroupInput:   getGroupInput,
		Options:         options,
	}
	mock.lockGetGroupWithContext.Lock()
	mock.calls.GetGroupWithContext = append(mock.calls.GetGroupWithContext, callInfo)
	mock.lockGetGroupWithContext.Unlock()
	return mock.GetGroupWithContextFunc(contextMoqParam, getGroupInput, options...)
}

// GetGroupWithContextCalls gets all the calls that were made to GetGroupWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetGroupWithContextCalls())
func (mock *IAMAPIMock) GetGroupWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetGroupInput   *iam.GetGroupInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetGroupInput   *iam.GetGroupInput
		Options         []request.Option
	}
	mock.lockGetGroupWithContext.RLock()
	calls = mock.calls.GetGroupWithContext
	mock.lockGetGroupWithContext.RUnlock()
	return calls
}

// GetInstanceProfile calls GetInstanceProfileFunc.
func (mock *IAMAPIMock) GetInstanceProfile(getInstanceProfileInput *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	if mock.GetInstanceProfileFunc == nil {
		panic("IAMAPIMock.GetInstanceProfileFunc: method is nil but IAMAPI.GetInstanceProfile was just called")
	}
	callInfo := struct {
		GetInstanceProfileInput *iam.GetInstanceProfileInput
	}{
		GetInstanceProfileInput: getInstanceProfileInput,
	}
	mock.lockGetInstanceProfile.Lock()
	mock.calls.GetInstanceProfile = append(mock.calls.GetInstanceProfile, callInfo)
	mock.lockGetInstanceProfile.Unlock()
	return mock.GetInstanceProfileFunc(getInstanceProfileInput)
}

// GetInstanceProfileCalls gets all the calls that were made to GetInstanceProfile.
// Check the length with:
//
//	len(mockedIAMAPI.GetInstanceProfileCalls())
func (mock *IAMAPIMock) GetInstanceProfileCalls() []struct {
	GetInstanceProfileInput *iam.GetInstanceProfileInput
} {
	var calls []struct {
		GetInstanceProfileInput *iam.GetInstanceProfileInput
	}
	mock.lockGetInstanceProfile.RLock()
	calls = mock.calls.GetInstanceProfile
	mock.lockGetInstanceProfile.RUnlock()
	return calls
}

// GetInstanceProfileRequest calls GetInstanceProfileRequestFunc.
func (mock *IAMAPIMock) GetInstanceProfileRequest(getInstanceProfileInput *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput) {
	if mock.GetInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.GetInstanceProfileRequestFunc: method is nil but IAMAPI.GetInstanceProfileRequest was just called")
	}
	callInfo := struct {
		GetInstanceProfileInput *iam.GetInstanceProfileInput
	}{
		GetInstanceProfileInput: getInstanceProfileInput,
	}
	mock.lockGetInstanceProfileRequest.Lock()
	mock.calls.GetInstanceProfileRequest = append(mock.calls.GetInstanceProfileRequest, callInfo)
	mock.lockGetInstanceProfileRequest.Unlock()
	return mock.GetInstanceProfileRequestFunc(getInstanceProfileInput)
}

// GetInstanceProfileRequestCalls gets all the calls that were made to GetInstanceProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetInstanceProfileRequestCalls())
func (mock *IAMAPIMock) GetInstanceProfileRequestCalls() []struct {
	GetInstanceProfileInput *iam.GetInstanceProfileInput
} {
	var calls []struct {
		GetInstanceProfileInput *iam.GetInstanceProfileInput
	}
	mock.lockGetInstanceProfileRequest.RLock()
	calls = mock.calls.GetInstanceProfileRequest
	mock.lockGetInstanceProfileRequest.RUnlock()
	return calls
}

// GetInstanceProfileWithContext calls GetInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) GetInstanceProfileWithContext(contextMoqParam context.Context, getInstanceProfileInput *iam.GetInstanceProfileInput, options ...request.Option) (*iam.GetInstanceProfileOutput, error) {
	if mock.GetInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.GetInstanceProfileWithContextFunc: method is nil but IAMAPI.GetInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		GetInstanceProfileInput *iam.GetInstanceProfileInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		GetInstanceProfileInput: getInstanceProfileInput,
		Options:                 options,
	}
	mock.lockGetInstanceProfileWithContext.Lock()
	mock.calls.GetInstanceProfileWithContext = append(mock.calls.GetInstanceProfileWithContext, callInfo)
	mock.lockGetInstanceProfileWithContext.Unlock()
	return mock.GetInstanceProfileWithContextFunc(contextMoqParam, getInstanceProfileInput, options...)
}

// GetInstanceProfileWithContextCalls gets all the calls that were made to GetInstanceProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) GetInstanceProfileWithContextCalls() []struct {
	ContextMoqParam         context.Context
	GetInstanceProfileInput *iam.GetInstanceProfileInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		GetInstanceProfileInput *iam.GetInstanceProfileInput
		Options                 []request.Option
	}
	mock.lockGetInstanceProfileWithContext.RLock()
	calls = mock.calls.GetInstanceProfileWithContext
	mock.lockGetInstanceProfileWithContext.RUnlock()
	return calls
}

// GetLoginProfile calls GetLoginProfileFunc.
func (mock *IAMAPIMock) GetLoginProfile(getLoginProfileInput *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	if mock.GetLoginProfileFunc == nil {
		panic("IAMAPIMock.GetLoginProfileFunc: method is nil but IAMAPI.GetLoginProfile was just called")
	}
	callInfo := struct {
		GetLoginProfileInput *iam.GetLoginProfileInput
	}{
		GetLoginProfileInput: getLoginProfileInput,
	}
	mock.lockGetLoginProfile.Lock()
	mock.calls.GetLoginProfile = append(mock.calls.GetLoginProfile, callInfo)
	mock.lockGetLoginProfile.Unlock()
	return mock.GetLoginProfileFunc(getLoginProfileInput)
}

// GetLoginProfileCalls gets all the calls that were made to GetLoginProfile.
// Check the length with:
//
//	len(mockedIAMAPI.GetLoginProfileCalls())
func (mock *IAMAPIMock) GetLoginProfileCalls() []struct {
	GetLoginProfileInput *iam.GetLoginProfileInput
} {
	var calls []struct {
		GetLoginProfileInput *iam.GetLoginProfileInput
	}
	mock.lockGetLoginProfile.RLock()
	calls = mock.calls.GetLoginProfile
	mock.lockGetLoginProfile.RUnlock()
	return calls
}

// GetLoginProfileRequest calls GetLoginProfileRequestFunc.
func (mock *IAMAPIMock) GetLoginProfileRequest(getLoginProfileInput *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput) {
	if mock.GetLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.GetLoginProfileRequestFunc: method is nil but IAMAPI.GetLoginProfileRequest was just called")
	}
	callInfo := struct {
		GetLoginProfileInput *iam.GetLoginProfileInput
	}{
		GetLoginProfileInput: getLoginProfileInput,
	}
	mock.lockGetLoginProfileRequest.Lock()
	mock.calls.GetLoginProfileRequest = append(mock.calls.GetLoginProfileRequest, callInfo)
	mock.lockGetLoginProfileRequest.Unlock()
	return mock.GetLoginProfileRequestFunc(getLoginProfileInput)
}

// GetLoginProfileRequestCalls gets all the calls that were made to GetLoginProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetLoginProfileRequestCalls())
func (mock *IAMAPIMock) GetLoginProfileRequestCalls() []struct {
	GetLoginProfileInput *iam.GetLoginProfileInput
} {
	var calls []struct {
		GetLoginProfileInput *iam.GetLoginProfileInput
	}
	mock.lockGetLoginProfileRequest.RLock()
	calls = mock.calls.GetLoginProfileRequest
	mock.lockGetLoginProfileRequest.RUnlock()
	return calls
}

// GetLoginProfileWithContext calls GetLoginProfileWithContextFunc.
func (mock *IAMAPIMock) GetLoginProfileWithContext(contextMoqParam context.Context, getLoginProfileInput *iam.GetLoginProfileInput, options ...request.Option) (*iam.GetLoginProfileOutput, error) {
	if mock.GetLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.GetLoginProfileWithContextFunc: method is nil but IAMAPI.GetLoginProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetLoginProfileInput *iam.GetLoginProfileInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		GetLoginProfileInput: getLoginProfileInput,
		Options:              options,
	}
	mock.lockGetLoginProfileWithContext.Lock()
	mock.calls.GetLoginProfileWithContext = append(mock.calls.GetLoginProfileWithContext, callInfo)
	mock.lockGetLoginProfileWithContext.Unlock()
	return mock.GetLoginProfileWithContextFunc(contextMoqParam, getLoginProfileInput, options...)
}

// GetLoginProfileWithContextCalls gets all the calls that were made to GetLoginProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetLoginProfileWithContextCalls())
func (mock *IAMAPIMock) GetLoginProfileWithContextCalls() []struct {
	ContextMoqParam      context.Context
	GetLoginProfileInput *iam.GetLoginProfileInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetLoginProfileInput *iam.GetLoginProfileInput
		Options              []request.Option
	}
	mock.lockGetLoginProfileWithContext.RLock()
	calls = mock.calls.GetLoginProfileWithContext
	mock.lockGetLoginProfileWithContext.RUnlock()
	return calls
}

// GetOpenIDConnectProvider calls GetOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) GetOpenIDConnectProvider(getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	if mock.GetOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.GetOpenIDConnectProviderFunc: method is nil but IAMAPI.GetOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
	}{
		GetOpenIDConnectProviderInput: getOpenIDConnectProviderInput,
	}
	mock.lockGetOpenIDConnectProvider.Lock()
	mock.calls.GetOpenIDConnectProvider = append(mock.calls.GetOpenIDConnectProvider, callInfo)
	mock.lockGetOpenIDConnectProvider.Unlock()
	return mock.GetOpenIDConnectProviderFunc(getOpenIDConnectProviderInput)
}

// GetOpenIDConnectProviderCalls gets all the calls that were made to GetOpenIDConnectProvider.
// Check the length with:
//
//	len(mockedIAMAPI.GetOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) GetOpenIDConnectProviderCalls() []struct {
	GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
} {
	var calls []struct {
		GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
	}
	mock.lockGetOpenIDConnectProvider.RLock()
	calls = mock.calls.GetOpenIDConnectProvider
	mock.lockGetOpenIDConnectProvider.RUnlock()
	return calls
}

// GetOpenIDConnectProviderRequest calls GetOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) GetOpenIDConnectProviderRequest(getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput) {
	if mock.GetOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.GetOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.GetOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
	}{
		GetOpenIDConnectProviderInput: getOpenIDConnectProviderInput,
	}
	mock.lockGetOpenIDConnectProviderRequest.Lock()
	mock.calls.GetOpenIDConnectProviderRequest = append(mock.calls.GetOpenIDConnectProviderRequest, callInfo)
	mock.lockGetOpenIDConnectProviderRequest.Unlock()
	return mock.GetOpenIDConnectProviderRequestFunc(getOpenIDConnectProviderInput)
}

// GetOpenIDConnectProviderRequestCalls gets all the calls that were made to GetOpenIDConnectProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) GetOpenIDConnectProviderRequestCalls() []struct {
	GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
} {
	var calls []struct {
		GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
	}
	mock.lockGetOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.GetOpenIDConnectProviderRequest
	mock.lockGetOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// GetOpenIDConnectProviderWithContext calls GetOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) GetOpenIDConnectProviderWithContext(contextMoqParam context.Context, getOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput, options ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
	if mock.GetOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.GetOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.GetOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		GetOpenIDConnectProviderInput: getOpenIDConnectProviderInput,
		Options:                       options,
	}
	mock.lockGetOpenIDConnectProviderWithContext.Lock()
	mock.calls.GetOpenIDConnectProviderWithContext = append(mock.calls.GetOpenIDConnectProviderWithContext, callInfo)
	mock.lockGetOpenIDConnectProviderWithContext.Unlock()
	return mock.GetOpenIDConnectProviderWithContextFunc(contextMoqParam, getOpenIDConnectProviderInput, options...)
}

// GetOpenIDConnectProviderWithContextCalls gets all the calls that were made to GetOpenIDConnectProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) GetOpenIDConnectProviderWithContextCalls() []struct {
	ContextMoqParam               context.Context
	GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		GetOpenIDConnectProviderInput *iam.GetOpenIDConnectProviderInput
		Options                       []request.Option
	}
	mock.lockGetOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.GetOpenIDConnectProviderWithContext
	mock.lockGetOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// GetOrganizationsAccessReport calls GetOrganizationsAccessReportFunc.
func (mock *IAMAPIMock) GetOrganizationsAccessReport(getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
	if mock.GetOrganizationsAccessReportFunc == nil {
		panic("IAMAPIMock.GetOrganizationsAccessReportFunc: method is nil but IAMAPI.GetOrganizationsAccessReport was just called")
	}
	callInfo := struct {
		GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
	}{
		GetOrganizationsAccessReportInput: getOrganizationsAccessReportInput,
	}
	mock.lockGetOrganizationsAccessReport.Lock()
	mock.calls.GetOrganizationsAccessReport = append(mock.calls.GetOrganizationsAccessReport, callInfo)
	mock.lockGetOrganizationsAccessReport.Unlock()
	return mock.GetOrganizationsAccessReportFunc(getOrganizationsAccessReportInput)
}

// GetOrganizationsAccessReportCalls gets all the calls that were made to GetOrganizationsAccessReport.
// Check the length with:
//
//	len(mockedIAMAPI.GetOrganizationsAccessReportCalls())
func (mock *IAMAPIMock) GetOrganizationsAccessReportCalls() []struct {
	GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
} {
	var calls []struct {
		GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
	}
	mock.lockGetOrganizationsAccessReport.RLock()
	calls = mock.calls.GetOrganizationsAccessReport
	mock.lockGetOrganizationsAccessReport.RUnlock()
	return calls
}

// GetOrganizationsAccessReportRequest calls GetOrganizationsAccessReportRequestFunc.
func (mock *IAMAPIMock) GetOrganizationsAccessReportRequest(getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput) {
	if mock.GetOrganizationsAccessReportRequestFunc == nil {
		panic("IAMAPIMock.GetOrganizationsAccessReportRequestFunc: method is nil but IAMAPI.GetOrganizationsAccessReportRequest was just called")
	}
	callInfo := struct {
		GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
	}{
		GetOrganizationsAccessReportInput: getOrganizationsAccessReportInput,
	}
	mock.lockGetOrganizationsAccessReportRequest.Lock()
	mock.calls.GetOrganizationsAccessReportRequest = append(mock.calls.GetOrganizationsAccessReportRequest, callInfo)
	mock.lockGetOrganizationsAccessReportRequest.Unlock()
	return mock.GetOrganizationsAccessReportRequestFunc(getOrganizationsAccessReportInput)
}

// GetOrganizationsAccessReportRequestCalls gets all the calls that were made to GetOrganizationsAccessReportRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetOrganizationsAccessReportRequestCalls())
func (mock *IAMAPIMock) GetOrganizationsAccessReportRequestCalls() []struct {
	GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
} {
	var calls []struct {
		GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
	}
	mock.lockGetOrganizationsAccessReportRequest.RLock()
	calls = mock.calls.GetOrganizationsAccessReportRequest
	mock.lockGetOrganizationsAccessReportRequest.RUnlock()
	return calls
}

// GetOrganizationsAccessReportWithContext calls GetOrganizationsAccessReportWithContextFunc.
func (mock *IAMAPIMock) GetOrganizationsAccessReportWithContext(contextMoqParam context.Context, getOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput, options ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {
	if mock.GetOrganizationsAccessReportWithContextFunc == nil {
		panic("IAMAPIMock.GetOrganizationsAccessReportWithContextFunc: method is nil but IAMAPI.GetOrganizationsAccessReportWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		GetOrganizationsAccessReportInput: getOrganizationsAccessReportInput,
		Options:                           options,
	}
	mock.lockGetOrganizationsAccessReportWithContext.Lock()
	mock.calls.GetOrganizationsAccessReportWithContext = append(mock.calls.GetOrganizationsAccessReportWithContext, callInfo)
	mock.lockGetOrganizationsAccessReportWithContext.Unlock()
	return mock.GetOrganizationsAccessReportWithContextFunc(contextMoqParam, getOrganizationsAccessReportInput, options...)
}

// GetOrganizationsAccessReportWithContextCalls gets all the calls that were made to GetOrganizationsAccessReportWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetOrganizationsAccessReportWithContextCalls())
func (mock *IAMAPIMock) GetOrganizationsAccessReportWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		GetOrganizationsAccessReportInput *iam.GetOrganizationsAccessReportInput
		Options                           []request.Option
	}
	mock.lockGetOrganizationsAccessReportWithContext.RLock()
	calls = mock.calls.GetOrganizationsAccessReportWithContext
	mock.lockGetOrganizationsAccessReportWithContext.RUnlock()
	return calls
}

// GetPolicy calls GetPolicyFunc.
func (mock *IAMAPIMock) GetPolicy(getPolicyInput *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	if mock.GetPolicyFunc == nil {
		panic("IAMAPIMock.GetPolicyFunc: method is nil but IAMAPI.GetPolicy was just called")
	}
	callInfo := struct {
		GetPolicyInput *iam.GetPolicyInput
	}{
		GetPolicyInput: getPolicyInput,
	}
	mock.lockGetPolicy.Lock()
	mock.calls.GetPolicy = append(mock.calls.GetPolicy, callInfo)
	mock.lockGetPolicy.Unlock()
	return mock.GetPolicyFunc(getPolicyInput)
}

// GetPolicyCalls gets all the calls that were made to GetPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.GetPolicyCalls())
func (mock *IAMAPIMock) GetPolicyCalls() []struct {
	GetPolicyInput *iam.GetPolicyInput
} {
	var calls []struct {
		GetPolicyInput *iam.GetPolicyInput
	}
	mock.lockGetPolicy.RLock()
	calls = mock.calls.GetPolicy
	mock.lockGetPolicy.RUnlock()
	return calls
}

// GetPolicyRequest calls GetPolicyRequestFunc.
func (mock *IAMAPIMock) GetPolicyRequest(getPolicyInput *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput) {
	if mock.GetPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetPolicyRequestFunc: method is nil but IAMAPI.GetPolicyRequest was just called")
	}
	callInfo := struct {
		GetPolicyInput *iam.GetPolicyInput
	}{
		GetPolicyInput: getPolicyInput,
	}
	mock.lockGetPolicyRequest.Lock()
	mock.calls.GetPolicyRequest = append(mock.calls.GetPolicyRequest, callInfo)
	mock.lockGetPolicyRequest.Unlock()
	return mock.GetPolicyRequestFunc(getPolicyInput)
}

// GetPolicyRequestCalls gets all the calls that were made to GetPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetPolicyRequestCalls())
func (mock *IAMAPIMock) GetPolicyRequestCalls() []struct {
	GetPolicyInput *iam.GetPolicyInput
} {
	var calls []struct {
		GetPolicyInput *iam.GetPolicyInput
	}
	mock.lockGetPolicyRequest.RLock()
	calls = mock.calls.GetPolicyRequest
	mock.lockGetPolicyRequest.RUnlock()
	return calls
}

// GetPolicyVersion calls GetPolicyVersionFunc.
func (mock *IAMAPIMock) GetPolicyVersion(getPolicyVersionInput *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	if mock.GetPolicyVersionFunc == nil {
		panic("IAMAPIMock.GetPolicyVersionFunc: method is nil but IAMAPI.GetPolicyVersion was just called")
	}
	callInfo := struct {
		GetPolicyVersionInput *iam.GetPolicyVersionInput
	}{
		GetPolicyVersionInput: getPolicyVersionInput,
	}
	mock.lockGetPolicyVersion.Lock()
	mock.calls.GetPolicyVersion = append(mock.calls.GetPolicyVersion, callInfo)
	mock.lockGetPolicyVersion.Unlock()
	return mock.GetPolicyVersionFunc(getPolicyVersionInput)
}

// GetPolicyVersionCalls gets all the calls that were made to GetPolicyVersion.
// Check the length with:
//
//	len(mockedIAMAPI.GetPolicyVersionCalls())
func (mock *IAMAPIMock) GetPolicyVersionCalls() []struct {
	GetPolicyVersionInput *iam.GetPolicyVersionInput
} {
	var calls []struct {
		GetPolicyVersionInput *iam.GetPolicyVersionInput
	}
	mock.lockGetPolicyVersion.RLock()
	calls = mock.calls.GetPolicyVersion
	mock.lockGetPolicyVersion.RUnlock()
	return calls
}

// GetPolicyVersionRequest calls GetPolicyVersionRequestFunc.
func (mock *IAMAPIMock) GetPolicyVersionRequest(getPolicyVersionInput *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput) {
	if mock.GetPolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.GetPolicyVersionRequestFunc: method is nil but IAMAPI.GetPolicyVersionRequest was just called")
	}
	callInfo := struct {
		GetPolicyVersionInput *iam.GetPolicyVersionInput
	}{
		GetPolicyVersionInput: getPolicyVersionInput,
	}
	mock.lockGetPolicyVersionRequest.Lock()
	mock.calls.GetPolicyVersionRequest = append(mock.calls.GetPolicyVersionRequest, callInfo)
	mock.lockGetPolicyVersionRequest.Unlock()
	return mock.GetPolicyVersionRequestFunc(getPolicyVersionInput)
}

// GetPolicyVersionRequestCalls gets all the calls that were made to GetPolicyVersionRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetPolicyVersionRequestCalls())
func (mock *IAMAPIMock) GetPolicyVersionRequestCalls() []struct {
	GetPolicyVersionInput *iam.GetPolicyVersionInput
} {
	var calls []struct {
		GetPolicyVersionInput *iam.GetPolicyVersionInput
	}
	mock.lockGetPolicyVersionRequest.RLock()
	calls = mock.calls.GetPolicyVersionRequest
	mock.lockGetPolicyVersionRequest.RUnlock()
	return calls
}

// GetPolicyVersionWithContext calls GetPolicyVersionWithContextFunc.
func (mock *IAMAPIMock) GetPolicyVersionWithContext(contextMoqParam context.Context, getPolicyVersionInput *iam.GetPolicyVersionInput, options ...request.Option) (*iam.GetPolicyVersionOutput, error) {
	if mock.GetPolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.GetPolicyVersionWithContextFunc: method is nil but IAMAPI.GetPolicyVersionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetPolicyVersionInput *iam.GetPolicyVersionInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		GetPolicyVersionInput: getPolicyVersionInput,
		Options:               options,
	}
	mock.lockGetPolicyVersionWithContext.Lock()
	mock.calls.GetPolicyVersionWithContext = append(mock.calls.GetPolicyVersionWithContext, callInfo)
	mock.lockGetPolicyVersionWithContext.Unlock()
	return mock.GetPolicyVersionWithContextFunc(contextMoqParam, getPolicyVersionInput, options...)
}

// GetPolicyVersionWithContextCalls gets all the calls that were made to GetPolicyVersionWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetPolicyVersionWithContextCalls())
func (mock *IAMAPIMock) GetPolicyVersionWithContextCalls() []struct {
	ContextMoqParam       context.Context
	GetPolicyVersionInput *iam.GetPolicyVersionInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetPolicyVersionInput *iam.GetPolicyVersionInput
		Options               []request.Option
	}
	mock.lockGetPolicyVersionWithContext.RLock()
	calls = mock.calls.GetPolicyVersionWithContext
	mock.lockGetPolicyVersionWithContext.RUnlock()
	return calls
}

// GetPolicyWithContext calls GetPolicyWithContextFunc.
func (mock *IAMAPIMock) GetPolicyWithContext(contextMoqParam context.Context, getPolicyInput *iam.GetPolicyInput, options ...request.Option) (*iam.GetPolicyOutput, error) {
	if mock.GetPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetPolicyWithContextFunc: method is nil but IAMAPI.GetPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetPolicyInput  *iam.GetPolicyInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetPolicyInput:  getPolicyInput,
		Options:         options,
	}
	mock.lockGetPolicyWithContext.Lock()
	mock.calls.GetPolicyWithContext = append(mock.calls.GetPolicyWithContext, callInfo)
	mock.lockGetPolicyWithContext.Unlock()
	return mock.GetPolicyWithContextFunc(contextMoqParam, getPolicyInput, options...)
}

// GetPolicyWithContextCalls gets all the calls that were made to GetPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetPolicyWithContextCalls())
func (mock *IAMAPIMock) GetPolicyWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetPolicyInput  *iam.GetPolicyInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetPolicyInput  *iam.GetPolicyInput
		Options         []request.Option
	}
	mock.lockGetPolicyWithContext.RLock()
	calls = mock.calls.GetPolicyWithContext
	mock.lockGetPolicyWithContext.RUnlock()
	return calls
}

// GetRole calls GetRoleFunc.
func (mock *IAMAPIMock) GetRole(getRoleInput *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	if mock.GetRoleFunc == nil {
		panic("IAMAPIMock.GetRoleFunc: method is nil but IAMAPI.GetRole was just called")
	}
	callInfo := struct {
		GetRoleInput *iam.GetRoleInput
	}{
		GetRoleInput: getRoleInput,
	}
	mock.lockGetRole.Lock()
	mock.calls.GetRole = append(mock.calls.GetRole, callInfo)
	mock.lockGetRole.Unlock()
	return mock.GetRoleFunc(getRoleInput)
}

// GetRoleCalls gets all the calls that were made to GetRole.
// Check the length with:
//
//	len(mockedIAMAPI.GetRoleCalls())
func (mock *IAMAPIMock) GetRoleCalls() []struct {
	GetRoleInput *iam.GetRoleInput
} {
	var calls []struct {
		GetRoleInput *iam.GetRoleInput
	}
	mock.lockGetRole.RLock()
	calls = mock.calls.GetRole
	mock.lockGetRole.RUnlock()
	return calls
}

// GetRolePolicy calls GetRolePolicyFunc.
func (mock *IAMAPIMock) GetRolePolicy(getRolePolicyInput *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	if mock.GetRolePolicyFunc == nil {
		panic("IAMAPIMock.GetRolePolicyFunc: method is nil but IAMAPI.GetRolePolicy was just called")
	}
	callInfo := struct {
		GetRolePolicyInput *iam.GetRolePolicyInput
	}{
		GetRolePolicyInput: getRolePolicyInput,
	}
	mock.lockGetRolePolicy.Lock()
	mock.calls.GetRolePolicy = append(mock.calls.GetRolePolicy, callInfo)
	mock.lockGetRolePolicy.Unlock()
	return mock.GetRolePolicyFunc(getRolePolicyInput)
}

// GetRolePolicyCalls gets all the calls that were made to GetRolePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.GetRolePolicyCalls())
func (mock *IAMAPIMock) GetRolePolicyCalls() []struct {
	GetRolePolicyInput *iam.GetRolePolicyInput
} {
	var calls []struct {
		GetRolePolicyInput *iam.GetRolePolicyInput
	}
	mock.lockGetRolePolicy.RLock()
	calls = mock.calls.GetRolePolicy
	mock.lockGetRolePolicy.RUnlock()
	return calls
}

// GetRolePolicyRequest calls GetRolePolicyRequestFunc.
func (mock *IAMAPIMock) GetRolePolicyRequest(getRolePolicyInput *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput) {
	if mock.GetRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.GetRolePolicyRequestFunc: method is nil but IAMAPI.GetRolePolicyRequest was just called")
	}
	callInfo := struct {
		GetRolePolicyInput *iam.GetRolePolicyInput
	}{
		GetRolePolicyInput: getRolePolicyInput,
	}
	mock.lockGetRolePolicyRequest.Lock()
	mock.calls.GetRolePolicyRequest = append(mock.calls.GetRolePolicyRequest, callInfo)
	mock.lockGetRolePolicyRequest.Unlock()
	return mock.GetRolePolicyRequestFunc(getRolePolicyInput)
}

// GetRolePolicyRequestCalls gets all the calls that were made to GetRolePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetRolePolicyRequestCalls())
func (mock *IAMAPIMock) GetRolePolicyRequestCalls() []struct {
	GetRolePolicyInput *iam.GetRolePolicyInput
} {
	var calls []struct {
		GetRolePolicyInput *iam.GetRolePolicyInput
	}
	mock.lockGetRolePolicyRequest.RLock()
	calls = mock.calls.GetRolePolicyRequest
	mock.lockGetRolePolicyRequest.RUnlock()
	return calls
}

// GetRolePolicyWithContext calls GetRolePolicyWithContextFunc.
func (mock *IAMAPIMock) GetRolePolicyWithContext(contextMoqParam context.Context, getRolePolicyInput *iam.GetRolePolicyInput, options ...request.Option) (*iam.GetRolePolicyOutput, error) {
	if mock.GetRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetRolePolicyWithContextFunc: method is nil but IAMAPI.GetRolePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		GetRolePolicyInput *iam.GetRolePolicyInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		GetRolePolicyInput: getRolePolicyInput,
		Options:            options,
	}
	mock.lockGetRolePolicyWithContext.Lock()
	mock.calls.GetRolePolicyWithContext = append(mock.calls.GetRolePolicyWithContext, callInfo)
	mock.lockGetRolePolicyWithContext.Unlock()
	return mock.GetRolePolicyWithContextFunc(contextMoqParam, getRolePolicyInput, options...)
}

// GetRolePolicyWithContextCalls gets all the calls that were made to GetRolePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetRolePolicyWithContextCalls())
func (mock *IAMAPIMock) GetRolePolicyWithContextCalls() []struct {
	ContextMoqParam    context.Context
	GetRolePolicyInput *iam.GetRolePolicyInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		GetRolePolicyInput *iam.GetRolePolicyInput
		Options            []request.Option
	}
	mock.lockGetRolePolicyWithContext.RLock()
	calls = mock.calls.GetRolePolicyWithContext
	mock.lockGetRolePolicyWithContext.RUnlock()
	return calls
}

// GetRoleRequest calls GetRoleRequestFunc.
func (mock *IAMAPIMock) GetRoleRequest(getRoleInput *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput) {
	if mock.GetRoleRequestFunc == nil {
		panic("IAMAPIMock.GetRoleRequestFunc: method is nil but IAMAPI.GetRoleRequest was just called")
	}
	callInfo := struct {
		GetRoleInput *iam.GetRoleInput
	}{
		GetRoleInput: getRoleInput,
	}
	mock.lockGetRoleRequest.Lock()
	mock.calls.GetRoleRequest = append(mock.calls.GetRoleRequest, callInfo)
	mock.lockGetRoleRequest.Unlock()
	return mock.GetRoleRequestFunc(getRoleInput)
}

// GetRoleRequestCalls gets all the calls that were made to GetRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetRoleRequestCalls())
func (mock *IAMAPIMock) GetRoleRequestCalls() []struct {
	GetRoleInput *iam.GetRoleInput
} {
	var calls []struct {
		GetRoleInput *iam.GetRoleInput
	}
	mock.lockGetRoleRequest.RLock()
	calls = mock.calls.GetRoleRequest
	mock.lockGetRoleRequest.RUnlock()
	return calls
}

// GetRoleWithContext calls GetRoleWithContextFunc.
func (mock *IAMAPIMock) GetRoleWithContext(contextMoqParam context.Context, getRoleInput *iam.GetRoleInput, options ...request.Option) (*iam.GetRoleOutput, error) {
	if mock.GetRoleWithContextFunc == nil {
		panic("IAMAPIMock.GetRoleWithContextFunc: method is nil but IAMAPI.GetRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetRoleInput    *iam.GetRoleInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetRoleInput:    getRoleInput,
		Options:         options,
	}
	mock.lockGetRoleWithContext.Lock()
	mock.calls.GetRoleWithContext = append(mock.calls.GetRoleWithContext, callInfo)
	mock.lockGetRoleWithContext.Unlock()
	return mock.GetRoleWithContextFunc(contextMoqParam, getRoleInput, options...)
}

// GetRoleWithContextCalls gets all the calls that were made to GetRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetRoleWithContextCalls())
func (mock *IAMAPIMock) GetRoleWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetRoleInput    *iam.GetRoleInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetRoleInput    *iam.GetRoleInput
		Options         []request.Option
	}
	mock.lockGetRoleWithContext.RLock()
	calls = mock.calls.GetRoleWithContext
	mock.lockGetRoleWithContext.RUnlock()
	return calls
}

// GetSAMLProvider calls GetSAMLProviderFunc.
func (mock *IAMAPIMock) GetSAMLProvider(getSAMLProviderInput *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	if mock.GetSAMLProviderFunc == nil {
		panic("IAMAPIMock.GetSAMLProviderFunc: method is nil but IAMAPI.GetSAMLProvider was just called")
	}
	callInfo := struct {
		GetSAMLProviderInput *iam.GetSAMLProviderInput
	}{
		GetSAMLProviderInput: getSAMLProviderInput,
	}
	mock.lockGetSAMLProvider.Lock()
	mock.calls.GetSAMLProvider = append(mock.calls.GetSAMLProvider, callInfo)
	mock.lockGetSAMLProvider.Unlock()
	return mock.GetSAMLProviderFunc(getSAMLProviderInput)
}

// GetSAMLProviderCalls gets all the calls that were made to GetSAMLProvider.
// Check the length with:
//
//	len(mockedIAMAPI.GetSAMLProviderCalls())
func (mock *IAMAPIMock) GetSAMLProviderCalls() []struct {
	GetSAMLProviderInput *iam.GetSAMLProviderInput
} {
	var calls []struct {
		GetSAMLProviderInput *iam.GetSAMLProviderInput
	}
	mock.lockGetSAMLProvider.RLock()
	calls = mock.calls.GetSAMLProvider
	mock.lockGetSAMLProvider.RUnlock()
	return calls
}

// GetSAMLProviderRequest calls GetSAMLProviderRequestFunc.
func (mock *IAMAPIMock) GetSAMLProviderRequest(getSAMLProviderInput *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput) {
	if mock.GetSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.GetSAMLProviderRequestFunc: method is nil but IAMAPI.GetSAMLProviderRequest was just called")
	}
	callInfo := struct {
		GetSAMLProviderInput *iam.GetSAMLProviderInput
	}{
		GetSAMLProviderInput: getSAMLProviderInput,
	}
	mock.lockGetSAMLProviderRequest.Lock()
	mock.calls.GetSAMLProviderRequest = append(mock.calls.GetSAMLProviderRequest, callInfo)
	mock.lockGetSAMLProviderRequest.Unlock()
	return mock.GetSAMLProviderRequestFunc(getSAMLProviderInput)
}

// GetSAMLProviderRequestCalls gets all the calls that were made to GetSAMLProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetSAMLProviderRequestCalls())
func (mock *IAMAPIMock) GetSAMLProviderRequestCalls() []struct {
	GetSAMLProviderInput *iam.GetSAMLProviderInput
} {
	var calls []struct {
		GetSAMLProviderInput *iam.GetSAMLProviderInput
	}
	mock.lockGetSAMLProviderRequest.RLock()
	calls = mock.calls.GetSAMLProviderRequest
	mock.lockGetSAMLProviderRequest.RUnlock()
	return calls
}

// GetSAMLProviderWithContext calls GetSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) GetSAMLProviderWithContext(contextMoqParam context.Context, getSAMLProviderInput *iam.GetSAMLProviderInput, options ...request.Option) (*iam.GetSAMLProviderOutput, error) {
	if mock.GetSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.GetSAMLProviderWithContextFunc: method is nil but IAMAPI.GetSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetSAMLProviderInput *iam.GetSAMLProviderInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		GetSAMLProviderInput: getSAMLProviderInput,
		Options:              options,
	}
	mock.lockGetSAMLProviderWithContext.Lock()
	mock.calls.GetSAMLProviderWithContext = append(mock.calls.GetSAMLProviderWithContext, callInfo)
	mock.lockGetSAMLProviderWithContext.Unlock()
	return mock.GetSAMLProviderWithContextFunc(contextMoqParam, getSAMLProviderInput, options...)
}

// GetSAMLProviderWithContextCalls gets all the calls that were made to GetSAMLProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) GetSAMLProviderWithContextCalls() []struct {
	ContextMoqParam      context.Context
	GetSAMLProviderInput *iam.GetSAMLProviderInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetSAMLProviderInput *iam.GetSAMLProviderInput
		Options              []request.Option
	}
	mock.lockGetSAMLProviderWithContext.RLock()
	calls = mock.calls.GetSAMLProviderWithContext
	mock.lockGetSAMLProviderWithContext.RUnlock()
	return calls
}

// GetSSHPublicKey calls GetSSHPublicKeyFunc.
func (mock *IAMAPIMock) GetSSHPublicKey(getSSHPublicKeyInput *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	if mock.GetSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.GetSSHPublicKeyFunc: method is nil but IAMAPI.GetSSHPublicKey was just called")
	}
	callInfo := struct {
		GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
	}{
		GetSSHPublicKeyInput: getSSHPublicKeyInput,
	}
	mock.lockGetSSHPublicKey.Lock()
	mock.calls.GetSSHPublicKey = append(mock.calls.GetSSHPublicKey, callInfo)
	mock.lockGetSSHPublicKey.Unlock()
	return mock.GetSSHPublicKeyFunc(getSSHPublicKeyInput)
}

// GetSSHPublicKeyCalls gets all the calls that were made to GetSSHPublicKey.
// Check the length with:
//
//	len(mockedIAMAPI.GetSSHPublicKeyCalls())
func (mock *IAMAPIMock) GetSSHPublicKeyCalls() []struct {
	GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
} {
	var calls []struct {
		GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
	}
	mock.lockGetSSHPublicKey.RLock()
	calls = mock.calls.GetSSHPublicKey
	mock.lockGetSSHPublicKey.RUnlock()
	return calls
}

// GetSSHPublicKeyRequest calls GetSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) GetSSHPublicKeyRequest(getSSHPublicKeyInput *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput) {
	if mock.GetSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.GetSSHPublicKeyRequestFunc: method is nil but IAMAPI.GetSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
	}{
		GetSSHPublicKeyInput: getSSHPublicKeyInput,
	}
	mock.lockGetSSHPublicKeyRequest.Lock()
	mock.calls.GetSSHPublicKeyRequest = append(mock.calls.GetSSHPublicKeyRequest, callInfo)
	mock.lockGetSSHPublicKeyRequest.Unlock()
	return mock.GetSSHPublicKeyRequestFunc(getSSHPublicKeyInput)
}

// GetSSHPublicKeyRequestCalls gets all the calls that were made to GetSSHPublicKeyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) GetSSHPublicKeyRequestCalls() []struct {
	GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
} {
	var calls []struct {
		GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
	}
	mock.lockGetSSHPublicKeyRequest.RLock()
	calls = mock.calls.GetSSHPublicKeyRequest
	mock.lockGetSSHPublicKeyRequest.RUnlock()
	return calls
}

// GetSSHPublicKeyWithContext calls GetSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) GetSSHPublicKeyWithContext(contextMoqParam context.Context, getSSHPublicKeyInput *iam.GetSSHPublicKeyInput, options ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
	if mock.GetSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.GetSSHPublicKeyWithContextFunc: method is nil but IAMAPI.GetSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		GetSSHPublicKeyInput: getSSHPublicKeyInput,
		Options:              options,
	}
	mock.lockGetSSHPublicKeyWithContext.Lock()
	mock.calls.GetSSHPublicKeyWithContext = append(mock.calls.GetSSHPublicKeyWithContext, callInfo)
	mock.lockGetSSHPublicKeyWithContext.Unlock()
	return mock.GetSSHPublicKeyWithContextFunc(contextMoqParam, getSSHPublicKeyInput, options...)
}

// GetSSHPublicKeyWithContextCalls gets all the calls that were made to GetSSHPublicKeyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) GetSSHPublicKeyWithContextCalls() []struct {
	ContextMoqParam      context.Context
	GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetSSHPublicKeyInput *iam.GetSSHPublicKeyInput
		Options              []request.Option
	}
	mock.lockGetSSHPublicKeyWithContext.RLock()
	calls = mock.calls.GetSSHPublicKeyWithContext
	mock.lockGetSSHPublicKeyWithContext.RUnlock()
	return calls
}

// GetServerCertificate calls GetServerCertificateFunc.
func (mock *IAMAPIMock) GetServerCertificate(getServerCertificateInput *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	if mock.GetServerCertificateFunc == nil {
		panic("IAMAPIMock.GetServerCertificateFunc: method is nil but IAMAPI.GetServerCertificate was just called")
	}
	callInfo := struct {
		GetServerCertificateInput *iam.GetServerCertificateInput
	}{
		GetServerCertificateInput: getServerCertificateInput,
	}
	mock.lockGetServerCertificate.Lock()
	mock.calls.GetServerCertificate = append(mock.calls.GetServerCertificate, callInfo)
	mock.lockGetServerCertificate.Unlock()
	return mock.GetServerCertificateFunc(getServerCertificateInput)
}

// GetServerCertificateCalls gets all the calls that were made to GetServerCertificate.
// Check the length with:
//
//	len(mockedIAMAPI.GetServerCertificateCalls())
func (mock *IAMAPIMock) GetServerCertificateCalls() []struct {
	GetServerCertificateInput *iam.GetServerCertificateInput
} {
	var calls []struct {
		GetServerCertificateInput *iam.GetServerCertificateInput
	}
	mock.lockGetServerCertificate.RLock()
	calls = mock.calls.GetServerCertificate
	mock.lockGetServerCertificate.RUnlock()
	return calls
}

// GetServerCertificateRequest calls GetServerCertificateRequestFunc.
func (mock *IAMAPIMock) GetServerCertificateRequest(getServerCertificateInput *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput) {
	if mock.GetServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.GetServerCertificateRequestFunc: method is nil but IAMAPI.GetServerCertificateRequest was just called")
	}
	callInfo := struct {
		GetServerCertificateInput *iam.GetServerCertificateInput
	}{
		GetServerCertificateInput: getServerCertificateInput,
	}
	mock.lockGetServerCertificateRequest.Lock()
	mock.calls.GetServerCertificateRequest = append(mock.calls.GetServerCertificateRequest, callInfo)
	mock.lockGetServerCertificateRequest.Unlock()
	return mock.GetServerCertificateRequestFunc(getServerCertificateInput)
}

// GetServerCertificateRequestCalls gets all the calls that were made to GetServerCertificateRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetServerCertificateRequestCalls())
func (mock *IAMAPIMock) GetServerCertificateRequestCalls() []struct {
	GetServerCertificateInput *iam.GetServerCertificateInput
} {
	var calls []struct {
		GetServerCertificateInput *iam.GetServerCertificateInput
	}
	mock.lockGetServerCertificateRequest.RLock()
	calls = mock.calls.GetServerCertificateRequest
	mock.lockGetServerCertificateRequest.RUnlock()
	return calls
}

// GetServerCertificateWithContext calls GetServerCertificateWithContextFunc.
func (mock *IAMAPIMock) GetServerCertificateWithContext(contextMoqParam context.Context, getServerCertificateInput *iam.GetServerCertificateInput, options ...request.Option) (*iam.GetServerCertificateOutput, error) {
	if mock.GetServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.GetServerCertificateWithContextFunc: method is nil but IAMAPI.GetServerCertificateWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		GetServerCertificateInput *iam.GetServerCertificateInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		GetServerCertificateInput: getServerCertificateInput,
		Options:                   options,
	}
	mock.lockGetServerCertificateWithContext.Lock()
	mock.calls.GetServerCertificateWithContext = append(mock.calls.GetServerCertificateWithContext, callInfo)
	mock.lockGetServerCertificateWithContext.Unlock()
	return mock.GetServerCertificateWithContextFunc(contextMoqParam, getServerCertificateInput, options...)
}

// GetServerCertificateWithContextCalls gets all the calls that were made to GetServerCertificateWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetServerCertificateWithContextCalls())
func (mock *IAMAPIMock) GetServerCertificateWithContextCalls() []struct {
	ContextMoqParam           context.Context
	GetServerCertificateInput *iam.GetServerCertificateInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		GetServerCertificateInput *iam.GetServerCertificateInput
		Options                   []request.Option
	}
	mock.lockGetServerCertificateWithContext.RLock()
	calls = mock.calls.GetServerCertificateWithContext
	mock.lockGetServerCertificateWithContext.RUnlock()
	return calls
}

// GetServiceLastAccessedDetails calls GetServiceLastAccessedDetailsFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetails(getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	if mock.GetServiceLastAccessedDetailsFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsFunc: method is nil but IAMAPI.GetServiceLastAccessedDetails was just called")
	}
	callInfo := struct {
		GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
	}{
		GetServiceLastAccessedDetailsInput: getServiceLastAccessedDetailsInput,
	}
	mock.lockGetServiceLastAccessedDetails.Lock()
	mock.calls.GetServiceLastAccessedDetails = append(mock.calls.GetServiceLastAccessedDetails, callInfo)
	mock.lockGetServiceLastAccessedDetails.Unlock()
	return mock.GetServiceLastAccessedDetailsFunc(getServiceLastAccessedDetailsInput)
}

// GetServiceLastAccessedDetailsCalls gets all the calls that were made to GetServiceLastAccessedDetails.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLastAccessedDetailsCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsCalls() []struct {
	GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
} {
	var calls []struct {
		GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
	}
	mock.lockGetServiceLastAccessedDetails.RLock()
	calls = mock.calls.GetServiceLastAccessedDetails
	mock.lockGetServiceLastAccessedDetails.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsRequest calls GetServiceLastAccessedDetailsRequestFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsRequest(getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput) {
	if mock.GetServiceLastAccessedDetailsRequestFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsRequestFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsRequest was just called")
	}
	callInfo := struct {
		GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
	}{
		GetServiceLastAccessedDetailsInput: getServiceLastAccessedDetailsInput,
	}
	mock.lockGetServiceLastAccessedDetailsRequest.Lock()
	mock.calls.GetServiceLastAccessedDetailsRequest = append(mock.calls.GetServiceLastAccessedDetailsRequest, callInfo)
	mock.lockGetServiceLastAccessedDetailsRequest.Unlock()
	return mock.GetServiceLastAccessedDetailsRequestFunc(getServiceLastAccessedDetailsInput)
}

// GetServiceLastAccessedDetailsRequestCalls gets all the calls that were made to GetServiceLastAccessedDetailsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLastAccessedDetailsRequestCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsRequestCalls() []struct {
	GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
} {
	var calls []struct {
		GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
	}
	mock.lockGetServiceLastAccessedDetailsRequest.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsRequest
	mock.lockGetServiceLastAccessedDetailsRequest.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithContext calls GetServiceLastAccessedDetailsWithContextFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithContext(contextMoqParam context.Context, getServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput, options ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	if mock.GetServiceLastAccessedDetailsWithContextFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithContextFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		GetServiceLastAccessedDetailsInput: getServiceLastAccessedDetailsInput,
		Options:                            options,
	}
	mock.lockGetServiceLastAccessedDetailsWithContext.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithContext = append(mock.calls.GetServiceLastAccessedDetailsWithContext, callInfo)
	mock.lockGetServiceLastAccessedDetailsWithContext.Unlock()
	return mock.GetServiceLastAccessedDetailsWithContextFunc(contextMoqParam, getServiceLastAccessedDetailsInput, options...)
}

// GetServiceLastAccessedDetailsWithContextCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLastAccessedDetailsWithContextCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		GetServiceLastAccessedDetailsInput *iam.GetServiceLastAccessedDetailsInput
		Options                            []request.Option
	}
	mock.lockGetServiceLastAccessedDetailsWithContext.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithContext
	mock.lockGetServiceLastAccessedDetailsWithContext.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithEntities calls GetServiceLastAccessedDetailsWithEntitiesFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntities(getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	if mock.GetServiceLastAccessedDetailsWithEntitiesFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithEntitiesFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithEntities was just called")
	}
	callInfo := struct {
		GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}{
		GetServiceLastAccessedDetailsWithEntitiesInput: getServiceLastAccessedDetailsWithEntitiesInput,
	}
	mock.lockGetServiceLastAccessedDetailsWithEntities.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithEntities = append(mock.calls.GetServiceLastAccessedDetailsWithEntities, callInfo)
	mock.lockGetServiceLastAccessedDetailsWithEntities.Unlock()
	return mock.GetServiceLastAccessedDetailsWithEntitiesFunc(getServiceLastAccessedDetailsWithEntitiesInput)
}

// GetServiceLastAccessedDetailsWithEntitiesCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithEntities.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLastAccessedDetailsWithEntitiesCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesCalls() []struct {
	GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
} {
	var calls []struct {
		GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}
	mock.lockGetServiceLastAccessedDetailsWithEntities.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithEntities
	mock.lockGetServiceLastAccessedDetailsWithEntities.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithEntitiesRequest calls GetServiceLastAccessedDetailsWithEntitiesRequestFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesRequest(getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
	if mock.GetServiceLastAccessedDetailsWithEntitiesRequestFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithEntitiesRequestFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithEntitiesRequest was just called")
	}
	callInfo := struct {
		GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}{
		GetServiceLastAccessedDetailsWithEntitiesInput: getServiceLastAccessedDetailsWithEntitiesInput,
	}
	mock.lockGetServiceLastAccessedDetailsWithEntitiesRequest.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithEntitiesRequest = append(mock.calls.GetServiceLastAccessedDetailsWithEntitiesRequest, callInfo)
	mock.lockGetServiceLastAccessedDetailsWithEntitiesRequest.Unlock()
	return mock.GetServiceLastAccessedDetailsWithEntitiesRequestFunc(getServiceLastAccessedDetailsWithEntitiesInput)
}

// GetServiceLastAccessedDetailsWithEntitiesRequestCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithEntitiesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLastAccessedDetailsWithEntitiesRequestCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesRequestCalls() []struct {
	GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
} {
	var calls []struct {
		GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	}
	mock.lockGetServiceLastAccessedDetailsWithEntitiesRequest.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithEntitiesRequest
	mock.lockGetServiceLastAccessedDetailsWithEntitiesRequest.RUnlock()
	return calls
}

// GetServiceLastAccessedDetailsWithEntitiesWithContext calls GetServiceLastAccessedDetailsWithEntitiesWithContextFunc.
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesWithContext(contextMoqParam context.Context, getServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput, options ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	if mock.GetServiceLastAccessedDetailsWithEntitiesWithContextFunc == nil {
		panic("IAMAPIMock.GetServiceLastAccessedDetailsWithEntitiesWithContextFunc: method is nil but IAMAPI.GetServiceLastAccessedDetailsWithEntitiesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                                context.Context
		GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		Options                                        []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetServiceLastAccessedDetailsWithEntitiesInput: getServiceLastAccessedDetailsWithEntitiesInput,
		Options: options,
	}
	mock.lockGetServiceLastAccessedDetailsWithEntitiesWithContext.Lock()
	mock.calls.GetServiceLastAccessedDetailsWithEntitiesWithContext = append(mock.calls.GetServiceLastAccessedDetailsWithEntitiesWithContext, callInfo)
	mock.lockGetServiceLastAccessedDetailsWithEntitiesWithContext.Unlock()
	return mock.GetServiceLastAccessedDetailsWithEntitiesWithContextFunc(contextMoqParam, getServiceLastAccessedDetailsWithEntitiesInput, options...)
}

// GetServiceLastAccessedDetailsWithEntitiesWithContextCalls gets all the calls that were made to GetServiceLastAccessedDetailsWithEntitiesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLastAccessedDetailsWithEntitiesWithContextCalls())
func (mock *IAMAPIMock) GetServiceLastAccessedDetailsWithEntitiesWithContextCalls() []struct {
	ContextMoqParam                                context.Context
	GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
	Options                                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                                context.Context
		GetServiceLastAccessedDetailsWithEntitiesInput *iam.GetServiceLastAccessedDetailsWithEntitiesInput
		Options                                        []request.Option
	}
	mock.lockGetServiceLastAccessedDetailsWithEntitiesWithContext.RLock()
	calls = mock.calls.GetServiceLastAccessedDetailsWithEntitiesWithContext
	mock.lockGetServiceLastAccessedDetailsWithEntitiesWithContext.RUnlock()
	return calls
}

// GetServiceLinkedRoleDeletionStatus calls GetServiceLinkedRoleDeletionStatusFunc.
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatus(getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	if mock.GetServiceLinkedRoleDeletionStatusFunc == nil {
		panic("IAMAPIMock.GetServiceLinkedRoleDeletionStatusFunc: method is nil but IAMAPI.GetServiceLinkedRoleDeletionStatus was just called")
	}
	callInfo := struct {
		GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
	}{
		GetServiceLinkedRoleDeletionStatusInput: getServiceLinkedRoleDeletionStatusInput,
	}
	mock.lockGetServiceLinkedRoleDeletionStatus.Lock()
	mock.calls.GetServiceLinkedRoleDeletionStatus = append(mock.calls.GetServiceLinkedRoleDeletionStatus, callInfo)
	mock.lockGetServiceLinkedRoleDeletionStatus.Unlock()
	return mock.GetServiceLinkedRoleDeletionStatusFunc(getServiceLinkedRoleDeletionStatusInput)
}

// GetServiceLinkedRoleDeletionStatusCalls gets all the calls that were made to GetServiceLinkedRoleDeletionStatus.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLinkedRoleDeletionStatusCalls())
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusCalls() []struct {
	GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
} {
	var calls []struct {
		GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
	}
	mock.lockGetServiceLinkedRoleDeletionStatus.RLock()
	calls = mock.calls.GetServiceLinkedRoleDeletionStatus
	mock.lockGetServiceLinkedRoleDeletionStatus.RUnlock()
	return calls
}

// GetServiceLinkedRoleDeletionStatusRequest calls GetServiceLinkedRoleDeletionStatusRequestFunc.
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusRequest(getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	if mock.GetServiceLinkedRoleDeletionStatusRequestFunc == nil {
		panic("IAMAPIMock.GetServiceLinkedRoleDeletionStatusRequestFunc: method is nil but IAMAPI.GetServiceLinkedRoleDeletionStatusRequest was just called")
	}
	callInfo := struct {
		GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
	}{
		GetServiceLinkedRoleDeletionStatusInput: getServiceLinkedRoleDeletionStatusInput,
	}
	mock.lockGetServiceLinkedRoleDeletionStatusRequest.Lock()
	mock.calls.GetServiceLinkedRoleDeletionStatusRequest = append(mock.calls.GetServiceLinkedRoleDeletionStatusRequest, callInfo)
	mock.lockGetServiceLinkedRoleDeletionStatusRequest.Unlock()
	return mock.GetServiceLinkedRoleDeletionStatusRequestFunc(getServiceLinkedRoleDeletionStatusInput)
}

// GetServiceLinkedRoleDeletionStatusRequestCalls gets all the calls that were made to GetServiceLinkedRoleDeletionStatusRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLinkedRoleDeletionStatusRequestCalls())
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusRequestCalls() []struct {
	GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
} {
	var calls []struct {
		GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
	}
	mock.lockGetServiceLinkedRoleDeletionStatusRequest.RLock()
	calls = mock.calls.GetServiceLinkedRoleDeletionStatusRequest
	mock.lockGetServiceLinkedRoleDeletionStatusRequest.RUnlock()
	return calls
}

// GetServiceLinkedRoleDeletionStatusWithContext calls GetServiceLinkedRoleDeletionStatusWithContextFunc.
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusWithContext(contextMoqParam context.Context, getServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput, options ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	if mock.GetServiceLinkedRoleDeletionStatusWithContextFunc == nil {
		panic("IAMAPIMock.GetServiceLinkedRoleDeletionStatusWithContextFunc: method is nil but IAMAPI.GetServiceLinkedRoleDeletionStatusWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		GetServiceLinkedRoleDeletionStatusInput: getServiceLinkedRoleDeletionStatusInput,
		Options:                                 options,
	}
	mock.lockGetServiceLinkedRoleDeletionStatusWithContext.Lock()
	mock.calls.GetServiceLinkedRoleDeletionStatusWithContext = append(mock.calls.GetServiceLinkedRoleDeletionStatusWithContext, callInfo)
	mock.lockGetServiceLinkedRoleDeletionStatusWithContext.Unlock()
	return mock.GetServiceLinkedRoleDeletionStatusWithContextFunc(contextMoqParam, getServiceLinkedRoleDeletionStatusInput, options...)
}

// GetServiceLinkedRoleDeletionStatusWithContextCalls gets all the calls that were made to GetServiceLinkedRoleDeletionStatusWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetServiceLinkedRoleDeletionStatusWithContextCalls())
func (mock *IAMAPIMock) GetServiceLinkedRoleDeletionStatusWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		GetServiceLinkedRoleDeletionStatusInput *iam.GetServiceLinkedRoleDeletionStatusInput
		Options                                 []request.Option
	}
	mock.lockGetServiceLinkedRoleDeletionStatusWithContext.RLock()
	calls = mock.calls.GetServiceLinkedRoleDeletionStatusWithContext
	mock.lockGetServiceLinkedRoleDeletionStatusWithContext.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *IAMAPIMock) GetUser(getUserInput *iam.GetUserInput) (*iam.GetUserOutput, error) {
	if mock.GetUserFunc == nil {
		panic("IAMAPIMock.GetUserFunc: method is nil but IAMAPI.GetUser was just called")
	}
	callInfo := struct {
		GetUserInput *iam.GetUserInput
	}{
		GetUserInput: getUserInput,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(getUserInput)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedIAMAPI.GetUserCalls())
func (mock *IAMAPIMock) GetUserCalls() []struct {
	GetUserInput *iam.GetUserInput
} {
	var calls []struct {
		GetUserInput *iam.GetUserInput
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUserPolicy calls GetUserPolicyFunc.
func (mock *IAMAPIMock) GetUserPolicy(getUserPolicyInput *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	if mock.GetUserPolicyFunc == nil {
		panic("IAMAPIMock.GetUserPolicyFunc: method is nil but IAMAPI.GetUserPolicy was just called")
	}
	callInfo := struct {
		GetUserPolicyInput *iam.GetUserPolicyInput
	}{
		GetUserPolicyInput: getUserPolicyInput,
	}
	mock.lockGetUserPolicy.Lock()
	mock.calls.GetUserPolicy = append(mock.calls.GetUserPolicy, callInfo)
	mock.lockGetUserPolicy.Unlock()
	return mock.GetUserPolicyFunc(getUserPolicyInput)
}

// GetUserPolicyCalls gets all the calls that were made to GetUserPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.GetUserPolicyCalls())
func (mock *IAMAPIMock) GetUserPolicyCalls() []struct {
	GetUserPolicyInput *iam.GetUserPolicyInput
} {
	var calls []struct {
		GetUserPolicyInput *iam.GetUserPolicyInput
	}
	mock.lockGetUserPolicy.RLock()
	calls = mock.calls.GetUserPolicy
	mock.lockGetUserPolicy.RUnlock()
	return calls
}

// GetUserPolicyRequest calls GetUserPolicyRequestFunc.
func (mock *IAMAPIMock) GetUserPolicyRequest(getUserPolicyInput *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput) {
	if mock.GetUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.GetUserPolicyRequestFunc: method is nil but IAMAPI.GetUserPolicyRequest was just called")
	}
	callInfo := struct {
		GetUserPolicyInput *iam.GetUserPolicyInput
	}{
		GetUserPolicyInput: getUserPolicyInput,
	}
	mock.lockGetUserPolicyRequest.Lock()
	mock.calls.GetUserPolicyRequest = append(mock.calls.GetUserPolicyRequest, callInfo)
	mock.lockGetUserPolicyRequest.Unlock()
	return mock.GetUserPolicyRequestFunc(getUserPolicyInput)
}

// GetUserPolicyRequestCalls gets all the calls that were made to GetUserPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetUserPolicyRequestCalls())
func (mock *IAMAPIMock) GetUserPolicyRequestCalls() []struct {
	GetUserPolicyInput *iam.GetUserPolicyInput
} {
	var calls []struct {
		GetUserPolicyInput *iam.GetUserPolicyInput
	}
	mock.lockGetUserPolicyRequest.RLock()
	calls = mock.calls.GetUserPolicyRequest
	mock.lockGetUserPolicyRequest.RUnlock()
	return calls
}

// GetUserPolicyWithContext calls GetUserPolicyWithContextFunc.
func (mock *IAMAPIMock) GetUserPolicyWithContext(contextMoqParam context.Context, getUserPolicyInput *iam.GetUserPolicyInput, options ...request.Option) (*iam.GetUserPolicyOutput, error) {
	if mock.GetUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.GetUserPolicyWithContextFunc: method is nil but IAMAPI.GetUserPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		GetUserPolicyInput *iam.GetUserPolicyInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		GetUserPolicyInput: getUserPolicyInput,
		Options:            options,
	}
	mock.lockGetUserPolicyWithContext.Lock()
	mock.calls.GetUserPolicyWithContext = append(mock.calls.GetUserPolicyWithContext, callInfo)
	mock.lockGetUserPolicyWithContext.Unlock()
	return mock.GetUserPolicyWithContextFunc(contextMoqParam, getUserPolicyInput, options...)
}

// GetUserPolicyWithContextCalls gets all the calls that were made to GetUserPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetUserPolicyWithContextCalls())
func (mock *IAMAPIMock) GetUserPolicyWithContextCalls() []struct {
	ContextMoqParam    context.Context
	GetUserPolicyInput *iam.GetUserPolicyInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		GetUserPolicyInput *iam.GetUserPolicyInput
		Options            []request.Option
	}
	mock.lockGetUserPolicyWithContext.RLock()
	calls = mock.calls.GetUserPolicyWithContext
	mock.lockGetUserPolicyWithContext.RUnlock()
	return calls
}

// GetUserRequest calls GetUserRequestFunc.
func (mock *IAMAPIMock) GetUserRequest(getUserInput *iam.GetUserInput) (*request.Request, *iam.GetUserOutput) {
	if mock.GetUserRequestFunc == nil {
		panic("IAMAPIMock.GetUserRequestFunc: method is nil but IAMAPI.GetUserRequest was just called")
	}
	callInfo := struct {
		GetUserInput *iam.GetUserInput
	}{
		GetUserInput: getUserInput,
	}
	mock.lockGetUserRequest.Lock()
	mock.calls.GetUserRequest = append(mock.calls.GetUserRequest, callInfo)
	mock.lockGetUserRequest.Unlock()
	return mock.GetUserRequestFunc(getUserInput)
}

// GetUserRequestCalls gets all the calls that were made to GetUserRequest.
// Check the length with:
//
//	len(mockedIAMAPI.GetUserRequestCalls())
func (mock *IAMAPIMock) GetUserRequestCalls() []struct {
	GetUserInput *iam.GetUserInput
} {
	var calls []struct {
		GetUserInput *iam.GetUserInput
	}
	mock.lockGetUserRequest.RLock()
	calls = mock.calls.GetUserRequest
	mock.lockGetUserRequest.RUnlock()
	return calls
}

// GetUserWithContext calls GetUserWithContextFunc.
func (mock *IAMAPIMock) GetUserWithContext(contextMoqParam context.Context, getUserInput *iam.GetUserInput, options ...request.Option) (*iam.GetUserOutput, error) {
	if mock.GetUserWithContextFunc == nil {
		panic("IAMAPIMock.GetUserWithContextFunc: method is nil but IAMAPI.GetUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetUserInput    *iam.GetUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetUserInput:    getUserInput,
		Options:         options,
	}
	mock.lockGetUserWithContext.Lock()
	mock.calls.GetUserWithContext = append(mock.calls.GetUserWithContext, callInfo)
	mock.lockGetUserWithContext.Unlock()
	return mock.GetUserWithContextFunc(contextMoqParam, getUserInput, options...)
}

// GetUserWithContextCalls gets all the calls that were made to GetUserWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.GetUserWithContextCalls())
func (mock *IAMAPIMock) GetUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetUserInput    *iam.GetUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetUserInput    *iam.GetUserInput
		Options         []request.Option
	}
	mock.lockGetUserWithContext.RLock()
	calls = mock.calls.GetUserWithContext
	mock.lockGetUserWithContext.RUnlock()
	return calls
}

// ListAccessKeys calls ListAccessKeysFunc.
func (mock *IAMAPIMock) ListAccessKeys(listAccessKeysInput *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	if mock.ListAccessKeysFunc == nil {
		panic("IAMAPIMock.ListAccessKeysFunc: method is nil but IAMAPI.ListAccessKeys was just called")
	}
	callInfo := struct {
		ListAccessKeysInput *iam.ListAccessKeysInput
	}{
		ListAccessKeysInput: listAccessKeysInput,
	}
	mock.lockListAccessKeys.Lock()
	mock.calls.ListAccessKeys = append(mock.calls.ListAccessKeys, callInfo)
	mock.lockListAccessKeys.Unlock()
	return mock.ListAccessKeysFunc(listAccessKeysInput)
}

// ListAccessKeysCalls gets all the calls that were made to ListAccessKeys.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccessKeysCalls())
func (mock *IAMAPIMock) ListAccessKeysCalls() []struct {
	ListAccessKeysInput *iam.ListAccessKeysInput
} {
	var calls []struct {
		ListAccessKeysInput *iam.ListAccessKeysInput
	}
	mock.lockListAccessKeys.RLock()
	calls = mock.calls.ListAccessKeys
	mock.lockListAccessKeys.RUnlock()
	return calls
}

// ListAccessKeysPages calls ListAccessKeysPagesFunc.
func (mock *IAMAPIMock) ListAccessKeysPages(listAccessKeysInput *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool) error {
	if mock.ListAccessKeysPagesFunc == nil {
		panic("IAMAPIMock.ListAccessKeysPagesFunc: method is nil but IAMAPI.ListAccessKeysPages was just called")
	}
	callInfo := struct {
		ListAccessKeysInput *iam.ListAccessKeysInput
		Fn                  func(*iam.ListAccessKeysOutput, bool) bool
	}{
		ListAccessKeysInput: listAccessKeysInput,
		Fn:                  fn,
	}
	mock.lockListAccessKeysPages.Lock()
	mock.calls.ListAccessKeysPages = append(mock.calls.ListAccessKeysPages, callInfo)
	mock.lockListAccessKeysPages.Unlock()
	return mock.ListAccessKeysPagesFunc(listAccessKeysInput, fn)
}

// ListAccessKeysPagesCalls gets all the calls that were made to ListAccessKeysPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccessKeysPagesCalls())
func (mock *IAMAPIMock) ListAccessKeysPagesCalls() []struct {
	ListAccessKeysInput *iam.ListAccessKeysInput
	Fn                  func(*iam.ListAccessKeysOutput, bool) bool
} {
	var calls []struct {
		ListAccessKeysInput *iam.ListAccessKeysInput
		Fn                  func(*iam.ListAccessKeysOutput, bool) bool
	}
	mock.lockListAccessKeysPages.RLock()
	calls = mock.calls.ListAccessKeysPages
	mock.lockListAccessKeysPages.RUnlock()
	return calls
}

// ListAccessKeysPagesWithContext calls ListAccessKeysPagesWithContextFunc.
func (mock *IAMAPIMock) ListAccessKeysPagesWithContext(contextMoqParam context.Context, listAccessKeysInput *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool, options ...request.Option) error {
	if mock.ListAccessKeysPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAccessKeysPagesWithContextFunc: method is nil but IAMAPI.ListAccessKeysPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		ListAccessKeysInput *iam.ListAccessKeysInput
		Fn                  func(*iam.ListAccessKeysOutput, bool) bool
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		ListAccessKeysInput: listAccessKeysInput,
		Fn:                  fn,
		Options:             options,
	}
	mock.lockListAccessKeysPagesWithContext.Lock()
	mock.calls.ListAccessKeysPagesWithContext = append(mock.calls.ListAccessKeysPagesWithContext, callInfo)
	mock.lockListAccessKeysPagesWithContext.Unlock()
	return mock.ListAccessKeysPagesWithContextFunc(contextMoqParam, listAccessKeysInput, fn, options...)
}

// ListAccessKeysPagesWithContextCalls gets all the calls that were made to ListAccessKeysPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccessKeysPagesWithContextCalls())
func (mock *IAMAPIMock) ListAccessKeysPagesWithContextCalls() []struct {
	ContextMoqParam     context.Context
	ListAccessKeysInput *iam.ListAccessKeysInput
	Fn                  func(*iam.ListAccessKeysOutput, bool) bool
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		ListAccessKeysInput *iam.ListAccessKeysInput
		Fn                  func(*iam.ListAccessKeysOutput, bool) bool
		Options             []request.Option
	}
	mock.lockListAccessKeysPagesWithContext.RLock()
	calls = mock.calls.ListAccessKeysPagesWithContext
	mock.lockListAccessKeysPagesWithContext.RUnlock()
	return calls
}

// ListAccessKeysRequest calls ListAccessKeysRequestFunc.
func (mock *IAMAPIMock) ListAccessKeysRequest(listAccessKeysInput *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput) {
	if mock.ListAccessKeysRequestFunc == nil {
		panic("IAMAPIMock.ListAccessKeysRequestFunc: method is nil but IAMAPI.ListAccessKeysRequest was just called")
	}
	callInfo := struct {
		ListAccessKeysInput *iam.ListAccessKeysInput
	}{
		ListAccessKeysInput: listAccessKeysInput,
	}
	mock.lockListAccessKeysRequest.Lock()
	mock.calls.ListAccessKeysRequest = append(mock.calls.ListAccessKeysRequest, callInfo)
	mock.lockListAccessKeysRequest.Unlock()
	return mock.ListAccessKeysRequestFunc(listAccessKeysInput)
}

// ListAccessKeysRequestCalls gets all the calls that were made to ListAccessKeysRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccessKeysRequestCalls())
func (mock *IAMAPIMock) ListAccessKeysRequestCalls() []struct {
	ListAccessKeysInput *iam.ListAccessKeysInput
} {
	var calls []struct {
		ListAccessKeysInput *iam.ListAccessKeysInput
	}
	mock.lockListAccessKeysRequest.RLock()
	calls = mock.calls.ListAccessKeysRequest
	mock.lockListAccessKeysRequest.RUnlock()
	return calls
}

// ListAccessKeysWithContext calls ListAccessKeysWithContextFunc.
func (mock *IAMAPIMock) ListAccessKeysWithContext(contextMoqParam context.Context, listAccessKeysInput *iam.ListAccessKeysInput, options ...request.Option) (*iam.ListAccessKeysOutput, error) {
	if mock.ListAccessKeysWithContextFunc == nil {
		panic("IAMAPIMock.ListAccessKeysWithContextFunc: method is nil but IAMAPI.ListAccessKeysWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		ListAccessKeysInput *iam.ListAccessKeysInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		ListAccessKeysInput: listAccessKeysInput,
		Options:             options,
	}
	mock.lockListAccessKeysWithContext.Lock()
	mock.calls.ListAccessKeysWithContext = append(mock.calls.ListAccessKeysWithContext, callInfo)
	mock.lockListAccessKeysWithContext.Unlock()
	return mock.ListAccessKeysWithContextFunc(contextMoqParam, listAccessKeysInput, options...)
}

// ListAccessKeysWithContextCalls gets all the calls that were made to ListAccessKeysWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccessKeysWithContextCalls())
func (mock *IAMAPIMock) ListAccessKeysWithContextCalls() []struct {
	ContextMoqParam     context.Context
	ListAccessKeysInput *iam.ListAccessKeysInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		ListAccessKeysInput *iam.ListAccessKeysInput
		Options             []request.Option
	}
	mock.lockListAccessKeysWithContext.RLock()
	calls = mock.calls.ListAccessKeysWithContext
	mock.lockListAccessKeysWithContext.RUnlock()
	return calls
}

// ListAccountAliases calls ListAccountAliasesFunc.
func (mock *IAMAPIMock) ListAccountAliases(listAccountAliasesInput *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	if mock.ListAccountAliasesFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesFunc: method is nil but IAMAPI.ListAccountAliases was just called")
	}
	callInfo := struct {
		ListAccountAliasesInput *iam.ListAccountAliasesInput
	}{
		ListAccountAliasesInput: listAccountAliasesInput,
	}
	mock.lockListAccountAliases.Lock()
	mock.calls.ListAccountAliases = append(mock.calls.ListAccountAliases, callInfo)
	mock.lockListAccountAliases.Unlock()
	return mock.ListAccountAliasesFunc(listAccountAliasesInput)
}

// ListAccountAliasesCalls gets all the calls that were made to ListAccountAliases.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccountAliasesCalls())
func (mock *IAMAPIMock) ListAccountAliasesCalls() []struct {
	ListAccountAliasesInput *iam.ListAccountAliasesInput
} {
	var calls []struct {
		ListAccountAliasesInput *iam.ListAccountAliasesInput
	}
	mock.lockListAccountAliases.RLock()
	calls = mock.calls.ListAccountAliases
	mock.lockListAccountAliases.RUnlock()
	return calls
}

// ListAccountAliasesPages calls ListAccountAliasesPagesFunc.
func (mock *IAMAPIMock) ListAccountAliasesPages(listAccountAliasesInput *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool) error {
	if mock.ListAccountAliasesPagesFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesPagesFunc: method is nil but IAMAPI.ListAccountAliasesPages was just called")
	}
	callInfo := struct {
		ListAccountAliasesInput *iam.ListAccountAliasesInput
		Fn                      func(*iam.ListAccountAliasesOutput, bool) bool
	}{
		ListAccountAliasesInput: listAccountAliasesInput,
		Fn:                      fn,
	}
	mock.lockListAccountAliasesPages.Lock()
	mock.calls.ListAccountAliasesPages = append(mock.calls.ListAccountAliasesPages, callInfo)
	mock.lockListAccountAliasesPages.Unlock()
	return mock.ListAccountAliasesPagesFunc(listAccountAliasesInput, fn)
}

// ListAccountAliasesPagesCalls gets all the calls that were made to ListAccountAliasesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccountAliasesPagesCalls())
func (mock *IAMAPIMock) ListAccountAliasesPagesCalls() []struct {
	ListAccountAliasesInput *iam.ListAccountAliasesInput
	Fn                      func(*iam.ListAccountAliasesOutput, bool) bool
} {
	var calls []struct {
		ListAccountAliasesInput *iam.ListAccountAliasesInput
		Fn                      func(*iam.ListAccountAliasesOutput, bool) bool
	}
	mock.lockListAccountAliasesPages.RLock()
	calls = mock.calls.ListAccountAliasesPages
	mock.lockListAccountAliasesPages.RUnlock()
	return calls
}

// ListAccountAliasesPagesWithContext calls ListAccountAliasesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAccountAliasesPagesWithContext(contextMoqParam context.Context, listAccountAliasesInput *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool, options ...request.Option) error {
	if mock.ListAccountAliasesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesPagesWithContextFunc: method is nil but IAMAPI.ListAccountAliasesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ListAccountAliasesInput *iam.ListAccountAliasesInput
		Fn                      func(*iam.ListAccountAliasesOutput, bool) bool
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ListAccountAliasesInput: listAccountAliasesInput,
		Fn:                      fn,
		Options:                 options,
	}
	mock.lockListAccountAliasesPagesWithContext.Lock()
	mock.calls.ListAccountAliasesPagesWithContext = append(mock.calls.ListAccountAliasesPagesWithContext, callInfo)
	mock.lockListAccountAliasesPagesWithContext.Unlock()
	return mock.ListAccountAliasesPagesWithContextFunc(contextMoqParam, listAccountAliasesInput, fn, options...)
}

// ListAccountAliasesPagesWithContextCalls gets all the calls that were made to ListAccountAliasesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccountAliasesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAccountAliasesPagesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ListAccountAliasesInput *iam.ListAccountAliasesInput
	Fn                      func(*iam.ListAccountAliasesOutput, bool) bool
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ListAccountAliasesInput *iam.ListAccountAliasesInput
		Fn                      func(*iam.ListAccountAliasesOutput, bool) bool
		Options                 []request.Option
	}
	mock.lockListAccountAliasesPagesWithContext.RLock()
	calls = mock.calls.ListAccountAliasesPagesWithContext
	mock.lockListAccountAliasesPagesWithContext.RUnlock()
	return calls
}

// ListAccountAliasesRequest calls ListAccountAliasesRequestFunc.
func (mock *IAMAPIMock) ListAccountAliasesRequest(listAccountAliasesInput *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput) {
	if mock.ListAccountAliasesRequestFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesRequestFunc: method is nil but IAMAPI.ListAccountAliasesRequest was just called")
	}
	callInfo := struct {
		ListAccountAliasesInput *iam.ListAccountAliasesInput
	}{
		ListAccountAliasesInput: listAccountAliasesInput,
	}
	mock.lockListAccountAliasesRequest.Lock()
	mock.calls.ListAccountAliasesRequest = append(mock.calls.ListAccountAliasesRequest, callInfo)
	mock.lockListAccountAliasesRequest.Unlock()
	return mock.ListAccountAliasesRequestFunc(listAccountAliasesInput)
}

// ListAccountAliasesRequestCalls gets all the calls that were made to ListAccountAliasesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccountAliasesRequestCalls())
func (mock *IAMAPIMock) ListAccountAliasesRequestCalls() []struct {
	ListAccountAliasesInput *iam.ListAccountAliasesInput
} {
	var calls []struct {
		ListAccountAliasesInput *iam.ListAccountAliasesInput
	}
	mock.lockListAccountAliasesRequest.RLock()
	calls = mock.calls.ListAccountAliasesRequest
	mock.lockListAccountAliasesRequest.RUnlock()
	return calls
}

// ListAccountAliasesWithContext calls ListAccountAliasesWithContextFunc.
func (mock *IAMAPIMock) ListAccountAliasesWithContext(contextMoqParam context.Context, listAccountAliasesInput *iam.ListAccountAliasesInput, options ...request.Option) (*iam.ListAccountAliasesOutput, error) {
	if mock.ListAccountAliasesWithContextFunc == nil {
		panic("IAMAPIMock.ListAccountAliasesWithContextFunc: method is nil but IAMAPI.ListAccountAliasesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ListAccountAliasesInput *iam.ListAccountAliasesInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ListAccountAliasesInput: listAccountAliasesInput,
		Options:                 options,
	}
	mock.lockListAccountAliasesWithContext.Lock()
	mock.calls.ListAccountAliasesWithContext = append(mock.calls.ListAccountAliasesWithContext, callInfo)
	mock.lockListAccountAliasesWithContext.Unlock()
	return mock.ListAccountAliasesWithContextFunc(contextMoqParam, listAccountAliasesInput, options...)
}

// ListAccountAliasesWithContextCalls gets all the calls that were made to ListAccountAliasesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAccountAliasesWithContextCalls())
func (mock *IAMAPIMock) ListAccountAliasesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ListAccountAliasesInput *iam.ListAccountAliasesInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ListAccountAliasesInput *iam.ListAccountAliasesInput
		Options                 []request.Option
	}
	mock.lockListAccountAliasesWithContext.RLock()
	calls = mock.calls.ListAccountAliasesWithContext
	mock.lockListAccountAliasesWithContext.RUnlock()
	return calls
}

// ListAttachedGroupPolicies calls ListAttachedGroupPoliciesFunc.
func (mock *IAMAPIMock) ListAttachedGroupPolicies(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	if mock.ListAttachedGroupPoliciesFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesFunc: method is nil but IAMAPI.ListAttachedGroupPolicies was just called")
	}
	callInfo := struct {
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
	}{
		ListAttachedGroupPoliciesInput: listAttachedGroupPoliciesInput,
	}
	mock.lockListAttachedGroupPolicies.Lock()
	mock.calls.ListAttachedGroupPolicies = append(mock.calls.ListAttachedGroupPolicies, callInfo)
	mock.lockListAttachedGroupPolicies.Unlock()
	return mock.ListAttachedGroupPoliciesFunc(listAttachedGroupPoliciesInput)
}

// ListAttachedGroupPoliciesCalls gets all the calls that were made to ListAttachedGroupPolicies.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedGroupPoliciesCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesCalls() []struct {
	ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
} {
	var calls []struct {
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
	}
	mock.lockListAttachedGroupPolicies.RLock()
	calls = mock.calls.ListAttachedGroupPolicies
	mock.lockListAttachedGroupPolicies.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesPages calls ListAttachedGroupPoliciesPagesFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPages(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
	if mock.ListAttachedGroupPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesPagesFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesPages was just called")
	}
	callInfo := struct {
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		Fn                             func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	}{
		ListAttachedGroupPoliciesInput: listAttachedGroupPoliciesInput,
		Fn:                             fn,
	}
	mock.lockListAttachedGroupPoliciesPages.Lock()
	mock.calls.ListAttachedGroupPoliciesPages = append(mock.calls.ListAttachedGroupPoliciesPages, callInfo)
	mock.lockListAttachedGroupPoliciesPages.Unlock()
	return mock.ListAttachedGroupPoliciesPagesFunc(listAttachedGroupPoliciesInput, fn)
}

// ListAttachedGroupPoliciesPagesCalls gets all the calls that were made to ListAttachedGroupPoliciesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedGroupPoliciesPagesCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPagesCalls() []struct {
	ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
	Fn                             func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
} {
	var calls []struct {
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		Fn                             func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	}
	mock.lockListAttachedGroupPoliciesPages.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesPages
	mock.lockListAttachedGroupPoliciesPages.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesPagesWithContext calls ListAttachedGroupPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPagesWithContext(contextMoqParam context.Context, listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, options ...request.Option) error {
	if mock.ListAttachedGroupPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		Fn                             func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		ListAttachedGroupPoliciesInput: listAttachedGroupPoliciesInput,
		Fn:                             fn,
		Options:                        options,
	}
	mock.lockListAttachedGroupPoliciesPagesWithContext.Lock()
	mock.calls.ListAttachedGroupPoliciesPagesWithContext = append(mock.calls.ListAttachedGroupPoliciesPagesWithContext, callInfo)
	mock.lockListAttachedGroupPoliciesPagesWithContext.Unlock()
	return mock.ListAttachedGroupPoliciesPagesWithContextFunc(contextMoqParam, listAttachedGroupPoliciesInput, fn, options...)
}

// ListAttachedGroupPoliciesPagesWithContextCalls gets all the calls that were made to ListAttachedGroupPoliciesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedGroupPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesPagesWithContextCalls() []struct {
	ContextMoqParam                context.Context
	ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
	Fn                             func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		Fn                             func(*iam.ListAttachedGroupPoliciesOutput, bool) bool
		Options                        []request.Option
	}
	mock.lockListAttachedGroupPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesPagesWithContext
	mock.lockListAttachedGroupPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesRequest calls ListAttachedGroupPoliciesRequestFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesRequest(listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput) {
	if mock.ListAttachedGroupPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesRequestFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesRequest was just called")
	}
	callInfo := struct {
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
	}{
		ListAttachedGroupPoliciesInput: listAttachedGroupPoliciesInput,
	}
	mock.lockListAttachedGroupPoliciesRequest.Lock()
	mock.calls.ListAttachedGroupPoliciesRequest = append(mock.calls.ListAttachedGroupPoliciesRequest, callInfo)
	mock.lockListAttachedGroupPoliciesRequest.Unlock()
	return mock.ListAttachedGroupPoliciesRequestFunc(listAttachedGroupPoliciesInput)
}

// ListAttachedGroupPoliciesRequestCalls gets all the calls that were made to ListAttachedGroupPoliciesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedGroupPoliciesRequestCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesRequestCalls() []struct {
	ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
} {
	var calls []struct {
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
	}
	mock.lockListAttachedGroupPoliciesRequest.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesRequest
	mock.lockListAttachedGroupPoliciesRequest.RUnlock()
	return calls
}

// ListAttachedGroupPoliciesWithContext calls ListAttachedGroupPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedGroupPoliciesWithContext(contextMoqParam context.Context, listAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput, options ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
	if mock.ListAttachedGroupPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedGroupPoliciesWithContextFunc: method is nil but IAMAPI.ListAttachedGroupPoliciesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		ListAttachedGroupPoliciesInput: listAttachedGroupPoliciesInput,
		Options:                        options,
	}
	mock.lockListAttachedGroupPoliciesWithContext.Lock()
	mock.calls.ListAttachedGroupPoliciesWithContext = append(mock.calls.ListAttachedGroupPoliciesWithContext, callInfo)
	mock.lockListAttachedGroupPoliciesWithContext.Unlock()
	return mock.ListAttachedGroupPoliciesWithContextFunc(contextMoqParam, listAttachedGroupPoliciesInput, options...)
}

// ListAttachedGroupPoliciesWithContextCalls gets all the calls that were made to ListAttachedGroupPoliciesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedGroupPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedGroupPoliciesWithContextCalls() []struct {
	ContextMoqParam                context.Context
	ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		ListAttachedGroupPoliciesInput *iam.ListAttachedGroupPoliciesInput
		Options                        []request.Option
	}
	mock.lockListAttachedGroupPoliciesWithContext.RLock()
	calls = mock.calls.ListAttachedGroupPoliciesWithContext
	mock.lockListAttachedGroupPoliciesWithContext.RUnlock()
	return calls
}

// ListAttachedRolePolicies calls ListAttachedRolePoliciesFunc.
func (mock *IAMAPIMock) ListAttachedRolePolicies(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	if mock.ListAttachedRolePoliciesFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesFunc: method is nil but IAMAPI.ListAttachedRolePolicies was just called")
	}
	callInfo := struct {
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
	}{
		ListAttachedRolePoliciesInput: listAttachedRolePoliciesInput,
	}
	mock.lockListAttachedRolePolicies.Lock()
	mock.calls.ListAttachedRolePolicies = append(mock.calls.ListAttachedRolePolicies, callInfo)
	mock.lockListAttachedRolePolicies.Unlock()
	return mock.ListAttachedRolePoliciesFunc(listAttachedRolePoliciesInput)
}

// ListAttachedRolePoliciesCalls gets all the calls that were made to ListAttachedRolePolicies.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedRolePoliciesCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesCalls() []struct {
	ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
} {
	var calls []struct {
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
	}
	mock.lockListAttachedRolePolicies.RLock()
	calls = mock.calls.ListAttachedRolePolicies
	mock.lockListAttachedRolePolicies.RUnlock()
	return calls
}

// ListAttachedRolePoliciesPages calls ListAttachedRolePoliciesPagesFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesPages(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	if mock.ListAttachedRolePoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesPagesFunc: method is nil but IAMAPI.ListAttachedRolePoliciesPages was just called")
	}
	callInfo := struct {
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		Fn                            func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	}{
		ListAttachedRolePoliciesInput: listAttachedRolePoliciesInput,
		Fn:                            fn,
	}
	mock.lockListAttachedRolePoliciesPages.Lock()
	mock.calls.ListAttachedRolePoliciesPages = append(mock.calls.ListAttachedRolePoliciesPages, callInfo)
	mock.lockListAttachedRolePoliciesPages.Unlock()
	return mock.ListAttachedRolePoliciesPagesFunc(listAttachedRolePoliciesInput, fn)
}

// ListAttachedRolePoliciesPagesCalls gets all the calls that were made to ListAttachedRolePoliciesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedRolePoliciesPagesCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesPagesCalls() []struct {
	ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
	Fn                            func(*iam.ListAttachedRolePoliciesOutput, bool) bool
} {
	var calls []struct {
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		Fn                            func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	}
	mock.lockListAttachedRolePoliciesPages.RLock()
	calls = mock.calls.ListAttachedRolePoliciesPages
	mock.lockListAttachedRolePoliciesPages.RUnlock()
	return calls
}

// ListAttachedRolePoliciesPagesWithContext calls ListAttachedRolePoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesPagesWithContext(contextMoqParam context.Context, listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool, options ...request.Option) error {
	if mock.ListAttachedRolePoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesPagesWithContextFunc: method is nil but IAMAPI.ListAttachedRolePoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		Fn                            func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		ListAttachedRolePoliciesInput: listAttachedRolePoliciesInput,
		Fn:                            fn,
		Options:                       options,
	}
	mock.lockListAttachedRolePoliciesPagesWithContext.Lock()
	mock.calls.ListAttachedRolePoliciesPagesWithContext = append(mock.calls.ListAttachedRolePoliciesPagesWithContext, callInfo)
	mock.lockListAttachedRolePoliciesPagesWithContext.Unlock()
	return mock.ListAttachedRolePoliciesPagesWithContextFunc(contextMoqParam, listAttachedRolePoliciesInput, fn, options...)
}

// ListAttachedRolePoliciesPagesWithContextCalls gets all the calls that were made to ListAttachedRolePoliciesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedRolePoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesPagesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
	Fn                            func(*iam.ListAttachedRolePoliciesOutput, bool) bool
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		Fn                            func(*iam.ListAttachedRolePoliciesOutput, bool) bool
		Options                       []request.Option
	}
	mock.lockListAttachedRolePoliciesPagesWithContext.RLock()
	calls = mock.calls.ListAttachedRolePoliciesPagesWithContext
	mock.lockListAttachedRolePoliciesPagesWithContext.RUnlock()
	return calls
}

// ListAttachedRolePoliciesRequest calls ListAttachedRolePoliciesRequestFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesRequest(listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput) {
	if mock.ListAttachedRolePoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesRequestFunc: method is nil but IAMAPI.ListAttachedRolePoliciesRequest was just called")
	}
	callInfo := struct {
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
	}{
		ListAttachedRolePoliciesInput: listAttachedRolePoliciesInput,
	}
	mock.lockListAttachedRolePoliciesRequest.Lock()
	mock.calls.ListAttachedRolePoliciesRequest = append(mock.calls.ListAttachedRolePoliciesRequest, callInfo)
	mock.lockListAttachedRolePoliciesRequest.Unlock()
	return mock.ListAttachedRolePoliciesRequestFunc(listAttachedRolePoliciesInput)
}

// ListAttachedRolePoliciesRequestCalls gets all the calls that were made to ListAttachedRolePoliciesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedRolePoliciesRequestCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesRequestCalls() []struct {
	ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
} {
	var calls []struct {
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
	}
	mock.lockListAttachedRolePoliciesRequest.RLock()
	calls = mock.calls.ListAttachedRolePoliciesRequest
	mock.lockListAttachedRolePoliciesRequest.RUnlock()
	return calls
}

// ListAttachedRolePoliciesWithContext calls ListAttachedRolePoliciesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedRolePoliciesWithContext(contextMoqParam context.Context, listAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput, options ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
	if mock.ListAttachedRolePoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedRolePoliciesWithContextFunc: method is nil but IAMAPI.ListAttachedRolePoliciesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		ListAttachedRolePoliciesInput: listAttachedRolePoliciesInput,
		Options:                       options,
	}
	mock.lockListAttachedRolePoliciesWithContext.Lock()
	mock.calls.ListAttachedRolePoliciesWithContext = append(mock.calls.ListAttachedRolePoliciesWithContext, callInfo)
	mock.lockListAttachedRolePoliciesWithContext.Unlock()
	return mock.ListAttachedRolePoliciesWithContextFunc(contextMoqParam, listAttachedRolePoliciesInput, options...)
}

// ListAttachedRolePoliciesWithContextCalls gets all the calls that were made to ListAttachedRolePoliciesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedRolePoliciesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedRolePoliciesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		ListAttachedRolePoliciesInput *iam.ListAttachedRolePoliciesInput
		Options                       []request.Option
	}
	mock.lockListAttachedRolePoliciesWithContext.RLock()
	calls = mock.calls.ListAttachedRolePoliciesWithContext
	mock.lockListAttachedRolePoliciesWithContext.RUnlock()
	return calls
}

// ListAttachedUserPolicies calls ListAttachedUserPoliciesFunc.
func (mock *IAMAPIMock) ListAttachedUserPolicies(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	if mock.ListAttachedUserPoliciesFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesFunc: method is nil but IAMAPI.ListAttachedUserPolicies was just called")
	}
	callInfo := struct {
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
	}{
		ListAttachedUserPoliciesInput: listAttachedUserPoliciesInput,
	}
	mock.lockListAttachedUserPolicies.Lock()
	mock.calls.ListAttachedUserPolicies = append(mock.calls.ListAttachedUserPolicies, callInfo)
	mock.lockListAttachedUserPolicies.Unlock()
	return mock.ListAttachedUserPoliciesFunc(listAttachedUserPoliciesInput)
}

// ListAttachedUserPoliciesCalls gets all the calls that were made to ListAttachedUserPolicies.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedUserPoliciesCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesCalls() []struct {
	ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
} {
	var calls []struct {
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
	}
	mock.lockListAttachedUserPolicies.RLock()
	calls = mock.calls.ListAttachedUserPolicies
	mock.lockListAttachedUserPolicies.RUnlock()
	return calls
}

// ListAttachedUserPoliciesPages calls ListAttachedUserPoliciesPagesFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesPages(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
	if mock.ListAttachedUserPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesPagesFunc: method is nil but IAMAPI.ListAttachedUserPoliciesPages was just called")
	}
	callInfo := struct {
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		Fn                            func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	}{
		ListAttachedUserPoliciesInput: listAttachedUserPoliciesInput,
		Fn:                            fn,
	}
	mock.lockListAttachedUserPoliciesPages.Lock()
	mock.calls.ListAttachedUserPoliciesPages = append(mock.calls.ListAttachedUserPoliciesPages, callInfo)
	mock.lockListAttachedUserPoliciesPages.Unlock()
	return mock.ListAttachedUserPoliciesPagesFunc(listAttachedUserPoliciesInput, fn)
}

// ListAttachedUserPoliciesPagesCalls gets all the calls that were made to ListAttachedUserPoliciesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedUserPoliciesPagesCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesPagesCalls() []struct {
	ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
	Fn                            func(*iam.ListAttachedUserPoliciesOutput, bool) bool
} {
	var calls []struct {
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		Fn                            func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	}
	mock.lockListAttachedUserPoliciesPages.RLock()
	calls = mock.calls.ListAttachedUserPoliciesPages
	mock.lockListAttachedUserPoliciesPages.RUnlock()
	return calls
}

// ListAttachedUserPoliciesPagesWithContext calls ListAttachedUserPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesPagesWithContext(contextMoqParam context.Context, listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool, options ...request.Option) error {
	if mock.ListAttachedUserPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListAttachedUserPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		Fn                            func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		ListAttachedUserPoliciesInput: listAttachedUserPoliciesInput,
		Fn:                            fn,
		Options:                       options,
	}
	mock.lockListAttachedUserPoliciesPagesWithContext.Lock()
	mock.calls.ListAttachedUserPoliciesPagesWithContext = append(mock.calls.ListAttachedUserPoliciesPagesWithContext, callInfo)
	mock.lockListAttachedUserPoliciesPagesWithContext.Unlock()
	return mock.ListAttachedUserPoliciesPagesWithContextFunc(contextMoqParam, listAttachedUserPoliciesInput, fn, options...)
}

// ListAttachedUserPoliciesPagesWithContextCalls gets all the calls that were made to ListAttachedUserPoliciesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedUserPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesPagesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
	Fn                            func(*iam.ListAttachedUserPoliciesOutput, bool) bool
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		Fn                            func(*iam.ListAttachedUserPoliciesOutput, bool) bool
		Options                       []request.Option
	}
	mock.lockListAttachedUserPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListAttachedUserPoliciesPagesWithContext
	mock.lockListAttachedUserPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListAttachedUserPoliciesRequest calls ListAttachedUserPoliciesRequestFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesRequest(listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput) {
	if mock.ListAttachedUserPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesRequestFunc: method is nil but IAMAPI.ListAttachedUserPoliciesRequest was just called")
	}
	callInfo := struct {
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
	}{
		ListAttachedUserPoliciesInput: listAttachedUserPoliciesInput,
	}
	mock.lockListAttachedUserPoliciesRequest.Lock()
	mock.calls.ListAttachedUserPoliciesRequest = append(mock.calls.ListAttachedUserPoliciesRequest, callInfo)
	mock.lockListAttachedUserPoliciesRequest.Unlock()
	return mock.ListAttachedUserPoliciesRequestFunc(listAttachedUserPoliciesInput)
}

// ListAttachedUserPoliciesRequestCalls gets all the calls that were made to ListAttachedUserPoliciesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedUserPoliciesRequestCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesRequestCalls() []struct {
	ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
} {
	var calls []struct {
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
	}
	mock.lockListAttachedUserPoliciesRequest.RLock()
	calls = mock.calls.ListAttachedUserPoliciesRequest
	mock.lockListAttachedUserPoliciesRequest.RUnlock()
	return calls
}

// ListAttachedUserPoliciesWithContext calls ListAttachedUserPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListAttachedUserPoliciesWithContext(contextMoqParam context.Context, listAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput, options ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
	if mock.ListAttachedUserPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListAttachedUserPoliciesWithContextFunc: method is nil but IAMAPI.ListAttachedUserPoliciesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		ListAttachedUserPoliciesInput: listAttachedUserPoliciesInput,
		Options:                       options,
	}
	mock.lockListAttachedUserPoliciesWithContext.Lock()
	mock.calls.ListAttachedUserPoliciesWithContext = append(mock.calls.ListAttachedUserPoliciesWithContext, callInfo)
	mock.lockListAttachedUserPoliciesWithContext.Unlock()
	return mock.ListAttachedUserPoliciesWithContextFunc(contextMoqParam, listAttachedUserPoliciesInput, options...)
}

// ListAttachedUserPoliciesWithContextCalls gets all the calls that were made to ListAttachedUserPoliciesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListAttachedUserPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListAttachedUserPoliciesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		ListAttachedUserPoliciesInput *iam.ListAttachedUserPoliciesInput
		Options                       []request.Option
	}
	mock.lockListAttachedUserPoliciesWithContext.RLock()
	calls = mock.calls.ListAttachedUserPoliciesWithContext
	mock.lockListAttachedUserPoliciesWithContext.RUnlock()
	return calls
}

// ListEntitiesForPolicy calls ListEntitiesForPolicyFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicy(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	if mock.ListEntitiesForPolicyFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyFunc: method is nil but IAMAPI.ListEntitiesForPolicy was just called")
	}
	callInfo := struct {
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
	}{
		ListEntitiesForPolicyInput: listEntitiesForPolicyInput,
	}
	mock.lockListEntitiesForPolicy.Lock()
	mock.calls.ListEntitiesForPolicy = append(mock.calls.ListEntitiesForPolicy, callInfo)
	mock.lockListEntitiesForPolicy.Unlock()
	return mock.ListEntitiesForPolicyFunc(listEntitiesForPolicyInput)
}

// ListEntitiesForPolicyCalls gets all the calls that were made to ListEntitiesForPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.ListEntitiesForPolicyCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyCalls() []struct {
	ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
} {
	var calls []struct {
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
	}
	mock.lockListEntitiesForPolicy.RLock()
	calls = mock.calls.ListEntitiesForPolicy
	mock.lockListEntitiesForPolicy.RUnlock()
	return calls
}

// ListEntitiesForPolicyPages calls ListEntitiesForPolicyPagesFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyPages(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
	if mock.ListEntitiesForPolicyPagesFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyPagesFunc: method is nil but IAMAPI.ListEntitiesForPolicyPages was just called")
	}
	callInfo := struct {
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		Fn                         func(*iam.ListEntitiesForPolicyOutput, bool) bool
	}{
		ListEntitiesForPolicyInput: listEntitiesForPolicyInput,
		Fn:                         fn,
	}
	mock.lockListEntitiesForPolicyPages.Lock()
	mock.calls.ListEntitiesForPolicyPages = append(mock.calls.ListEntitiesForPolicyPages, callInfo)
	mock.lockListEntitiesForPolicyPages.Unlock()
	return mock.ListEntitiesForPolicyPagesFunc(listEntitiesForPolicyInput, fn)
}

// ListEntitiesForPolicyPagesCalls gets all the calls that were made to ListEntitiesForPolicyPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListEntitiesForPolicyPagesCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyPagesCalls() []struct {
	ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
	Fn                         func(*iam.ListEntitiesForPolicyOutput, bool) bool
} {
	var calls []struct {
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		Fn                         func(*iam.ListEntitiesForPolicyOutput, bool) bool
	}
	mock.lockListEntitiesForPolicyPages.RLock()
	calls = mock.calls.ListEntitiesForPolicyPages
	mock.lockListEntitiesForPolicyPages.RUnlock()
	return calls
}

// ListEntitiesForPolicyPagesWithContext calls ListEntitiesForPolicyPagesWithContextFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyPagesWithContext(contextMoqParam context.Context, listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool, options ...request.Option) error {
	if mock.ListEntitiesForPolicyPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyPagesWithContextFunc: method is nil but IAMAPI.ListEntitiesForPolicyPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		Fn                         func(*iam.ListEntitiesForPolicyOutput, bool) bool
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		ListEntitiesForPolicyInput: listEntitiesForPolicyInput,
		Fn:                         fn,
		Options:                    options,
	}
	mock.lockListEntitiesForPolicyPagesWithContext.Lock()
	mock.calls.ListEntitiesForPolicyPagesWithContext = append(mock.calls.ListEntitiesForPolicyPagesWithContext, callInfo)
	mock.lockListEntitiesForPolicyPagesWithContext.Unlock()
	return mock.ListEntitiesForPolicyPagesWithContextFunc(contextMoqParam, listEntitiesForPolicyInput, fn, options...)
}

// ListEntitiesForPolicyPagesWithContextCalls gets all the calls that were made to ListEntitiesForPolicyPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListEntitiesForPolicyPagesWithContextCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyPagesWithContextCalls() []struct {
	ContextMoqParam            context.Context
	ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
	Fn                         func(*iam.ListEntitiesForPolicyOutput, bool) bool
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		Fn                         func(*iam.ListEntitiesForPolicyOutput, bool) bool
		Options                    []request.Option
	}
	mock.lockListEntitiesForPolicyPagesWithContext.RLock()
	calls = mock.calls.ListEntitiesForPolicyPagesWithContext
	mock.lockListEntitiesForPolicyPagesWithContext.RUnlock()
	return calls
}

// ListEntitiesForPolicyRequest calls ListEntitiesForPolicyRequestFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyRequest(listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput) {
	if mock.ListEntitiesForPolicyRequestFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyRequestFunc: method is nil but IAMAPI.ListEntitiesForPolicyRequest was just called")
	}
	callInfo := struct {
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
	}{
		ListEntitiesForPolicyInput: listEntitiesForPolicyInput,
	}
	mock.lockListEntitiesForPolicyRequest.Lock()
	mock.calls.ListEntitiesForPolicyRequest = append(mock.calls.ListEntitiesForPolicyRequest, callInfo)
	mock.lockListEntitiesForPolicyRequest.Unlock()
	return mock.ListEntitiesForPolicyRequestFunc(listEntitiesForPolicyInput)
}

// ListEntitiesForPolicyRequestCalls gets all the calls that were made to ListEntitiesForPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListEntitiesForPolicyRequestCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyRequestCalls() []struct {
	ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
} {
	var calls []struct {
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
	}
	mock.lockListEntitiesForPolicyRequest.RLock()
	calls = mock.calls.ListEntitiesForPolicyRequest
	mock.lockListEntitiesForPolicyRequest.RUnlock()
	return calls
}

// ListEntitiesForPolicyWithContext calls ListEntitiesForPolicyWithContextFunc.
func (mock *IAMAPIMock) ListEntitiesForPolicyWithContext(contextMoqParam context.Context, listEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput, options ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
	if mock.ListEntitiesForPolicyWithContextFunc == nil {
		panic("IAMAPIMock.ListEntitiesForPolicyWithContextFunc: method is nil but IAMAPI.ListEntitiesForPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		ListEntitiesForPolicyInput: listEntitiesForPolicyInput,
		Options:                    options,
	}
	mock.lockListEntitiesForPolicyWithContext.Lock()
	mock.calls.ListEntitiesForPolicyWithContext = append(mock.calls.ListEntitiesForPolicyWithContext, callInfo)
	mock.lockListEntitiesForPolicyWithContext.Unlock()
	return mock.ListEntitiesForPolicyWithContextFunc(contextMoqParam, listEntitiesForPolicyInput, options...)
}

// ListEntitiesForPolicyWithContextCalls gets all the calls that were made to ListEntitiesForPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListEntitiesForPolicyWithContextCalls())
func (mock *IAMAPIMock) ListEntitiesForPolicyWithContextCalls() []struct {
	ContextMoqParam            context.Context
	ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		ListEntitiesForPolicyInput *iam.ListEntitiesForPolicyInput
		Options                    []request.Option
	}
	mock.lockListEntitiesForPolicyWithContext.RLock()
	calls = mock.calls.ListEntitiesForPolicyWithContext
	mock.lockListEntitiesForPolicyWithContext.RUnlock()
	return calls
}

// ListGroupPolicies calls ListGroupPoliciesFunc.
func (mock *IAMAPIMock) ListGroupPolicies(listGroupPoliciesInput *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	if mock.ListGroupPoliciesFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesFunc: method is nil but IAMAPI.ListGroupPolicies was just called")
	}
	callInfo := struct {
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
	}{
		ListGroupPoliciesInput: listGroupPoliciesInput,
	}
	mock.lockListGroupPolicies.Lock()
	mock.calls.ListGroupPolicies = append(mock.calls.ListGroupPolicies, callInfo)
	mock.lockListGroupPolicies.Unlock()
	return mock.ListGroupPoliciesFunc(listGroupPoliciesInput)
}

// ListGroupPoliciesCalls gets all the calls that were made to ListGroupPolicies.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupPoliciesCalls())
func (mock *IAMAPIMock) ListGroupPoliciesCalls() []struct {
	ListGroupPoliciesInput *iam.ListGroupPoliciesInput
} {
	var calls []struct {
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
	}
	mock.lockListGroupPolicies.RLock()
	calls = mock.calls.ListGroupPolicies
	mock.lockListGroupPolicies.RUnlock()
	return calls
}

// ListGroupPoliciesPages calls ListGroupPoliciesPagesFunc.
func (mock *IAMAPIMock) ListGroupPoliciesPages(listGroupPoliciesInput *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool) error {
	if mock.ListGroupPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesPagesFunc: method is nil but IAMAPI.ListGroupPoliciesPages was just called")
	}
	callInfo := struct {
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		Fn                     func(*iam.ListGroupPoliciesOutput, bool) bool
	}{
		ListGroupPoliciesInput: listGroupPoliciesInput,
		Fn:                     fn,
	}
	mock.lockListGroupPoliciesPages.Lock()
	mock.calls.ListGroupPoliciesPages = append(mock.calls.ListGroupPoliciesPages, callInfo)
	mock.lockListGroupPoliciesPages.Unlock()
	return mock.ListGroupPoliciesPagesFunc(listGroupPoliciesInput, fn)
}

// ListGroupPoliciesPagesCalls gets all the calls that were made to ListGroupPoliciesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupPoliciesPagesCalls())
func (mock *IAMAPIMock) ListGroupPoliciesPagesCalls() []struct {
	ListGroupPoliciesInput *iam.ListGroupPoliciesInput
	Fn                     func(*iam.ListGroupPoliciesOutput, bool) bool
} {
	var calls []struct {
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		Fn                     func(*iam.ListGroupPoliciesOutput, bool) bool
	}
	mock.lockListGroupPoliciesPages.RLock()
	calls = mock.calls.ListGroupPoliciesPages
	mock.lockListGroupPoliciesPages.RUnlock()
	return calls
}

// ListGroupPoliciesPagesWithContext calls ListGroupPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListGroupPoliciesPagesWithContext(contextMoqParam context.Context, listGroupPoliciesInput *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool, options ...request.Option) error {
	if mock.ListGroupPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListGroupPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		Fn                     func(*iam.ListGroupPoliciesOutput, bool) bool
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ListGroupPoliciesInput: listGroupPoliciesInput,
		Fn:                     fn,
		Options:                options,
	}
	mock.lockListGroupPoliciesPagesWithContext.Lock()
	mock.calls.ListGroupPoliciesPagesWithContext = append(mock.calls.ListGroupPoliciesPagesWithContext, callInfo)
	mock.lockListGroupPoliciesPagesWithContext.Unlock()
	return mock.ListGroupPoliciesPagesWithContextFunc(contextMoqParam, listGroupPoliciesInput, fn, options...)
}

// ListGroupPoliciesPagesWithContextCalls gets all the calls that were made to ListGroupPoliciesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListGroupPoliciesPagesWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ListGroupPoliciesInput *iam.ListGroupPoliciesInput
	Fn                     func(*iam.ListGroupPoliciesOutput, bool) bool
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		Fn                     func(*iam.ListGroupPoliciesOutput, bool) bool
		Options                []request.Option
	}
	mock.lockListGroupPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListGroupPoliciesPagesWithContext
	mock.lockListGroupPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListGroupPoliciesRequest calls ListGroupPoliciesRequestFunc.
func (mock *IAMAPIMock) ListGroupPoliciesRequest(listGroupPoliciesInput *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput) {
	if mock.ListGroupPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesRequestFunc: method is nil but IAMAPI.ListGroupPoliciesRequest was just called")
	}
	callInfo := struct {
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
	}{
		ListGroupPoliciesInput: listGroupPoliciesInput,
	}
	mock.lockListGroupPoliciesRequest.Lock()
	mock.calls.ListGroupPoliciesRequest = append(mock.calls.ListGroupPoliciesRequest, callInfo)
	mock.lockListGroupPoliciesRequest.Unlock()
	return mock.ListGroupPoliciesRequestFunc(listGroupPoliciesInput)
}

// ListGroupPoliciesRequestCalls gets all the calls that were made to ListGroupPoliciesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupPoliciesRequestCalls())
func (mock *IAMAPIMock) ListGroupPoliciesRequestCalls() []struct {
	ListGroupPoliciesInput *iam.ListGroupPoliciesInput
} {
	var calls []struct {
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
	}
	mock.lockListGroupPoliciesRequest.RLock()
	calls = mock.calls.ListGroupPoliciesRequest
	mock.lockListGroupPoliciesRequest.RUnlock()
	return calls
}

// ListGroupPoliciesWithContext calls ListGroupPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListGroupPoliciesWithContext(contextMoqParam context.Context, listGroupPoliciesInput *iam.ListGroupPoliciesInput, options ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
	if mock.ListGroupPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupPoliciesWithContextFunc: method is nil but IAMAPI.ListGroupPoliciesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ListGroupPoliciesInput: listGroupPoliciesInput,
		Options:                options,
	}
	mock.lockListGroupPoliciesWithContext.Lock()
	mock.calls.ListGroupPoliciesWithContext = append(mock.calls.ListGroupPoliciesWithContext, callInfo)
	mock.lockListGroupPoliciesWithContext.Unlock()
	return mock.ListGroupPoliciesWithContextFunc(contextMoqParam, listGroupPoliciesInput, options...)
}

// ListGroupPoliciesWithContextCalls gets all the calls that were made to ListGroupPoliciesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListGroupPoliciesWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ListGroupPoliciesInput *iam.ListGroupPoliciesInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListGroupPoliciesInput *iam.ListGroupPoliciesInput
		Options                []request.Option
	}
	mock.lockListGroupPoliciesWithContext.RLock()
	calls = mock.calls.ListGroupPoliciesWithContext
	mock.lockListGroupPoliciesWithContext.RUnlock()
	return calls
}

// ListGroups calls ListGroupsFunc.
func (mock *IAMAPIMock) ListGroups(listGroupsInput *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	if mock.ListGroupsFunc == nil {
		panic("IAMAPIMock.ListGroupsFunc: method is nil but IAMAPI.ListGroups was just called")
	}
	callInfo := struct {
		ListGroupsInput *iam.ListGroupsInput
	}{
		ListGroupsInput: listGroupsInput,
	}
	mock.lockListGroups.Lock()
	mock.calls.ListGroups = append(mock.calls.ListGroups, callInfo)
	mock.lockListGroups.Unlock()
	return mock.ListGroupsFunc(listGroupsInput)
}

// ListGroupsCalls gets all the calls that were made to ListGroups.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsCalls())
func (mock *IAMAPIMock) ListGroupsCalls() []struct {
	ListGroupsInput *iam.ListGroupsInput
} {
	var calls []struct {
		ListGroupsInput *iam.ListGroupsInput
	}
	mock.lockListGroups.RLock()
	calls = mock.calls.ListGroups
	mock.lockListGroups.RUnlock()
	return calls
}

// ListGroupsForUser calls ListGroupsForUserFunc.
func (mock *IAMAPIMock) ListGroupsForUser(listGroupsForUserInput *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	if mock.ListGroupsForUserFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserFunc: method is nil but IAMAPI.ListGroupsForUser was just called")
	}
	callInfo := struct {
		ListGroupsForUserInput *iam.ListGroupsForUserInput
	}{
		ListGroupsForUserInput: listGroupsForUserInput,
	}
	mock.lockListGroupsForUser.Lock()
	mock.calls.ListGroupsForUser = append(mock.calls.ListGroupsForUser, callInfo)
	mock.lockListGroupsForUser.Unlock()
	return mock.ListGroupsForUserFunc(listGroupsForUserInput)
}

// ListGroupsForUserCalls gets all the calls that were made to ListGroupsForUser.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsForUserCalls())
func (mock *IAMAPIMock) ListGroupsForUserCalls() []struct {
	ListGroupsForUserInput *iam.ListGroupsForUserInput
} {
	var calls []struct {
		ListGroupsForUserInput *iam.ListGroupsForUserInput
	}
	mock.lockListGroupsForUser.RLock()
	calls = mock.calls.ListGroupsForUser
	mock.lockListGroupsForUser.RUnlock()
	return calls
}

// ListGroupsForUserPages calls ListGroupsForUserPagesFunc.
func (mock *IAMAPIMock) ListGroupsForUserPages(listGroupsForUserInput *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool) error {
	if mock.ListGroupsForUserPagesFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserPagesFunc: method is nil but IAMAPI.ListGroupsForUserPages was just called")
	}
	callInfo := struct {
		ListGroupsForUserInput *iam.ListGroupsForUserInput
		Fn                     func(*iam.ListGroupsForUserOutput, bool) bool
	}{
		ListGroupsForUserInput: listGroupsForUserInput,
		Fn:                     fn,
	}
	mock.lockListGroupsForUserPages.Lock()
	mock.calls.ListGroupsForUserPages = append(mock.calls.ListGroupsForUserPages, callInfo)
	mock.lockListGroupsForUserPages.Unlock()
	return mock.ListGroupsForUserPagesFunc(listGroupsForUserInput, fn)
}

// ListGroupsForUserPagesCalls gets all the calls that were made to ListGroupsForUserPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsForUserPagesCalls())
func (mock *IAMAPIMock) ListGroupsForUserPagesCalls() []struct {
	ListGroupsForUserInput *iam.ListGroupsForUserInput
	Fn                     func(*iam.ListGroupsForUserOutput, bool) bool
} {
	var calls []struct {
		ListGroupsForUserInput *iam.ListGroupsForUserInput
		Fn                     func(*iam.ListGroupsForUserOutput, bool) bool
	}
	mock.lockListGroupsForUserPages.RLock()
	calls = mock.calls.ListGroupsForUserPages
	mock.lockListGroupsForUserPages.RUnlock()
	return calls
}

// ListGroupsForUserPagesWithContext calls ListGroupsForUserPagesWithContextFunc.
func (mock *IAMAPIMock) ListGroupsForUserPagesWithContext(contextMoqParam context.Context, listGroupsForUserInput *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool, options ...request.Option) error {
	if mock.ListGroupsForUserPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserPagesWithContextFunc: method is nil but IAMAPI.ListGroupsForUserPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListGroupsForUserInput *iam.ListGroupsForUserInput
		Fn                     func(*iam.ListGroupsForUserOutput, bool) bool
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ListGroupsForUserInput: listGroupsForUserInput,
		Fn:                     fn,
		Options:                options,
	}
	mock.lockListGroupsForUserPagesWithContext.Lock()
	mock.calls.ListGroupsForUserPagesWithContext = append(mock.calls.ListGroupsForUserPagesWithContext, callInfo)
	mock.lockListGroupsForUserPagesWithContext.Unlock()
	return mock.ListGroupsForUserPagesWithContextFunc(contextMoqParam, listGroupsForUserInput, fn, options...)
}

// ListGroupsForUserPagesWithContextCalls gets all the calls that were made to ListGroupsForUserPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsForUserPagesWithContextCalls())
func (mock *IAMAPIMock) ListGroupsForUserPagesWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ListGroupsForUserInput *iam.ListGroupsForUserInput
	Fn                     func(*iam.ListGroupsForUserOutput, bool) bool
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListGroupsForUserInput *iam.ListGroupsForUserInput
		Fn                     func(*iam.ListGroupsForUserOutput, bool) bool
		Options                []request.Option
	}
	mock.lockListGroupsForUserPagesWithContext.RLock()
	calls = mock.calls.ListGroupsForUserPagesWithContext
	mock.lockListGroupsForUserPagesWithContext.RUnlock()
	return calls
}

// ListGroupsForUserRequest calls ListGroupsForUserRequestFunc.
func (mock *IAMAPIMock) ListGroupsForUserRequest(listGroupsForUserInput *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput) {
	if mock.ListGroupsForUserRequestFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserRequestFunc: method is nil but IAMAPI.ListGroupsForUserRequest was just called")
	}
	callInfo := struct {
		ListGroupsForUserInput *iam.ListGroupsForUserInput
	}{
		ListGroupsForUserInput: listGroupsForUserInput,
	}
	mock.lockListGroupsForUserRequest.Lock()
	mock.calls.ListGroupsForUserRequest = append(mock.calls.ListGroupsForUserRequest, callInfo)
	mock.lockListGroupsForUserRequest.Unlock()
	return mock.ListGroupsForUserRequestFunc(listGroupsForUserInput)
}

// ListGroupsForUserRequestCalls gets all the calls that were made to ListGroupsForUserRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsForUserRequestCalls())
func (mock *IAMAPIMock) ListGroupsForUserRequestCalls() []struct {
	ListGroupsForUserInput *iam.ListGroupsForUserInput
} {
	var calls []struct {
		ListGroupsForUserInput *iam.ListGroupsForUserInput
	}
	mock.lockListGroupsForUserRequest.RLock()
	calls = mock.calls.ListGroupsForUserRequest
	mock.lockListGroupsForUserRequest.RUnlock()
	return calls
}

// ListGroupsForUserWithContext calls ListGroupsForUserWithContextFunc.
func (mock *IAMAPIMock) ListGroupsForUserWithContext(contextMoqParam context.Context, listGroupsForUserInput *iam.ListGroupsForUserInput, options ...request.Option) (*iam.ListGroupsForUserOutput, error) {
	if mock.ListGroupsForUserWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsForUserWithContextFunc: method is nil but IAMAPI.ListGroupsForUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListGroupsForUserInput *iam.ListGroupsForUserInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ListGroupsForUserInput: listGroupsForUserInput,
		Options:                options,
	}
	mock.lockListGroupsForUserWithContext.Lock()
	mock.calls.ListGroupsForUserWithContext = append(mock.calls.ListGroupsForUserWithContext, callInfo)
	mock.lockListGroupsForUserWithContext.Unlock()
	return mock.ListGroupsForUserWithContextFunc(contextMoqParam, listGroupsForUserInput, options...)
}

// ListGroupsForUserWithContextCalls gets all the calls that were made to ListGroupsForUserWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsForUserWithContextCalls())
func (mock *IAMAPIMock) ListGroupsForUserWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ListGroupsForUserInput *iam.ListGroupsForUserInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListGroupsForUserInput *iam.ListGroupsForUserInput
		Options                []request.Option
	}
	mock.lockListGroupsForUserWithContext.RLock()
	calls = mock.calls.ListGroupsForUserWithContext
	mock.lockListGroupsForUserWithContext.RUnlock()
	return calls
}

// ListGroupsPages calls ListGroupsPagesFunc.
func (mock *IAMAPIMock) ListGroupsPages(listGroupsInput *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool) error {
	if mock.ListGroupsPagesFunc == nil {
		panic("IAMAPIMock.ListGroupsPagesFunc: method is nil but IAMAPI.ListGroupsPages was just called")
	}
	callInfo := struct {
		ListGroupsInput *iam.ListGroupsInput
		Fn              func(*iam.ListGroupsOutput, bool) bool
	}{
		ListGroupsInput: listGroupsInput,
		Fn:              fn,
	}
	mock.lockListGroupsPages.Lock()
	mock.calls.ListGroupsPages = append(mock.calls.ListGroupsPages, callInfo)
	mock.lockListGroupsPages.Unlock()
	return mock.ListGroupsPagesFunc(listGroupsInput, fn)
}

// ListGroupsPagesCalls gets all the calls that were made to ListGroupsPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsPagesCalls())
func (mock *IAMAPIMock) ListGroupsPagesCalls() []struct {
	ListGroupsInput *iam.ListGroupsInput
	Fn              func(*iam.ListGroupsOutput, bool) bool
} {
	var calls []struct {
		ListGroupsInput *iam.ListGroupsInput
		Fn              func(*iam.ListGroupsOutput, bool) bool
	}
	mock.lockListGroupsPages.RLock()
	calls = mock.calls.ListGroupsPages
	mock.lockListGroupsPages.RUnlock()
	return calls
}

// ListGroupsPagesWithContext calls ListGroupsPagesWithContextFunc.
func (mock *IAMAPIMock) ListGroupsPagesWithContext(contextMoqParam context.Context, listGroupsInput *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.ListGroupsPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsPagesWithContextFunc: method is nil but IAMAPI.ListGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListGroupsInput *iam.ListGroupsInput
		Fn              func(*iam.ListGroupsOutput, bool) bool
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListGroupsInput: listGroupsInput,
		Fn:              fn,
		Options:         options,
	}
	mock.lockListGroupsPagesWithContext.Lock()
	mock.calls.ListGroupsPagesWithContext = append(mock.calls.ListGroupsPagesWithContext, callInfo)
	mock.lockListGroupsPagesWithContext.Unlock()
	return mock.ListGroupsPagesWithContextFunc(contextMoqParam, listGroupsInput, fn, options...)
}

// ListGroupsPagesWithContextCalls gets all the calls that were made to ListGroupsPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsPagesWithContextCalls())
func (mock *IAMAPIMock) ListGroupsPagesWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListGroupsInput *iam.ListGroupsInput
	Fn              func(*iam.ListGroupsOutput, bool) bool
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListGroupsInput *iam.ListGroupsInput
		Fn              func(*iam.ListGroupsOutput, bool) bool
		Options         []request.Option
	}
	mock.lockListGroupsPagesWithContext.RLock()
	calls = mock.calls.ListGroupsPagesWithContext
	mock.lockListGroupsPagesWithContext.RUnlock()
	return calls
}

// ListGroupsRequest calls ListGroupsRequestFunc.
func (mock *IAMAPIMock) ListGroupsRequest(listGroupsInput *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput) {
	if mock.ListGroupsRequestFunc == nil {
		panic("IAMAPIMock.ListGroupsRequestFunc: method is nil but IAMAPI.ListGroupsRequest was just called")
	}
	callInfo := struct {
		ListGroupsInput *iam.ListGroupsInput
	}{
		ListGroupsInput: listGroupsInput,
	}
	mock.lockListGroupsRequest.Lock()
	mock.calls.ListGroupsRequest = append(mock.calls.ListGroupsRequest, callInfo)
	mock.lockListGroupsRequest.Unlock()
	return mock.ListGroupsRequestFunc(listGroupsInput)
}

// ListGroupsRequestCalls gets all the calls that were made to ListGroupsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsRequestCalls())
func (mock *IAMAPIMock) ListGroupsRequestCalls() []struct {
	ListGroupsInput *iam.ListGroupsInput
} {
	var calls []struct {
		ListGroupsInput *iam.ListGroupsInput
	}
	mock.lockListGroupsRequest.RLock()
	calls = mock.calls.ListGroupsRequest
	mock.lockListGroupsRequest.RUnlock()
	return calls
}

// ListGroupsWithContext calls ListGroupsWithContextFunc.
func (mock *IAMAPIMock) ListGroupsWithContext(contextMoqParam context.Context, listGroupsInput *iam.ListGroupsInput, options ...request.Option) (*iam.ListGroupsOutput, error) {
	if mock.ListGroupsWithContextFunc == nil {
		panic("IAMAPIMock.ListGroupsWithContextFunc: method is nil but IAMAPI.ListGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListGroupsInput *iam.ListGroupsInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListGroupsInput: listGroupsInput,
		Options:         options,
	}
	mock.lockListGroupsWithContext.Lock()
	mock.calls.ListGroupsWithContext = append(mock.calls.ListGroupsWithContext, callInfo)
	mock.lockListGroupsWithContext.Unlock()
	return mock.ListGroupsWithContextFunc(contextMoqParam, listGroupsInput, options...)
}

// ListGroupsWithContextCalls gets all the calls that were made to ListGroupsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListGroupsWithContextCalls())
func (mock *IAMAPIMock) ListGroupsWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListGroupsInput *iam.ListGroupsInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListGroupsInput *iam.ListGroupsInput
		Options         []request.Option
	}
	mock.lockListGroupsWithContext.RLock()
	calls = mock.calls.ListGroupsWithContext
	mock.lockListGroupsWithContext.RUnlock()
	return calls
}

// ListInstanceProfiles calls ListInstanceProfilesFunc.
func (mock *IAMAPIMock) ListInstanceProfiles(listInstanceProfilesInput *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	if mock.ListInstanceProfilesFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesFunc: method is nil but IAMAPI.ListInstanceProfiles was just called")
	}
	callInfo := struct {
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
	}{
		ListInstanceProfilesInput: listInstanceProfilesInput,
	}
	mock.lockListInstanceProfiles.Lock()
	mock.calls.ListInstanceProfiles = append(mock.calls.ListInstanceProfiles, callInfo)
	mock.lockListInstanceProfiles.Unlock()
	return mock.ListInstanceProfilesFunc(listInstanceProfilesInput)
}

// ListInstanceProfilesCalls gets all the calls that were made to ListInstanceProfiles.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesCalls())
func (mock *IAMAPIMock) ListInstanceProfilesCalls() []struct {
	ListInstanceProfilesInput *iam.ListInstanceProfilesInput
} {
	var calls []struct {
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
	}
	mock.lockListInstanceProfiles.RLock()
	calls = mock.calls.ListInstanceProfiles
	mock.lockListInstanceProfiles.RUnlock()
	return calls
}

// ListInstanceProfilesForRole calls ListInstanceProfilesForRoleFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRole(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	if mock.ListInstanceProfilesForRoleFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRoleFunc: method is nil but IAMAPI.ListInstanceProfilesForRole was just called")
	}
	callInfo := struct {
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
	}{
		ListInstanceProfilesForRoleInput: listInstanceProfilesForRoleInput,
	}
	mock.lockListInstanceProfilesForRole.Lock()
	mock.calls.ListInstanceProfilesForRole = append(mock.calls.ListInstanceProfilesForRole, callInfo)
	mock.lockListInstanceProfilesForRole.Unlock()
	return mock.ListInstanceProfilesForRoleFunc(listInstanceProfilesForRoleInput)
}

// ListInstanceProfilesForRoleCalls gets all the calls that were made to ListInstanceProfilesForRole.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesForRoleCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRoleCalls() []struct {
	ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
} {
	var calls []struct {
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
	}
	mock.lockListInstanceProfilesForRole.RLock()
	calls = mock.calls.ListInstanceProfilesForRole
	mock.lockListInstanceProfilesForRole.RUnlock()
	return calls
}

// ListInstanceProfilesForRolePages calls ListInstanceProfilesForRolePagesFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRolePages(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
	if mock.ListInstanceProfilesForRolePagesFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRolePagesFunc: method is nil but IAMAPI.ListInstanceProfilesForRolePages was just called")
	}
	callInfo := struct {
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		Fn                               func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	}{
		ListInstanceProfilesForRoleInput: listInstanceProfilesForRoleInput,
		Fn:                               fn,
	}
	mock.lockListInstanceProfilesForRolePages.Lock()
	mock.calls.ListInstanceProfilesForRolePages = append(mock.calls.ListInstanceProfilesForRolePages, callInfo)
	mock.lockListInstanceProfilesForRolePages.Unlock()
	return mock.ListInstanceProfilesForRolePagesFunc(listInstanceProfilesForRoleInput, fn)
}

// ListInstanceProfilesForRolePagesCalls gets all the calls that were made to ListInstanceProfilesForRolePages.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesForRolePagesCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRolePagesCalls() []struct {
	ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
	Fn                               func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
} {
	var calls []struct {
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		Fn                               func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	}
	mock.lockListInstanceProfilesForRolePages.RLock()
	calls = mock.calls.ListInstanceProfilesForRolePages
	mock.lockListInstanceProfilesForRolePages.RUnlock()
	return calls
}

// ListInstanceProfilesForRolePagesWithContext calls ListInstanceProfilesForRolePagesWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRolePagesWithContext(contextMoqParam context.Context, listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, options ...request.Option) error {
	if mock.ListInstanceProfilesForRolePagesWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRolePagesWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesForRolePagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		Fn                               func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		ListInstanceProfilesForRoleInput: listInstanceProfilesForRoleInput,
		Fn:                               fn,
		Options:                          options,
	}
	mock.lockListInstanceProfilesForRolePagesWithContext.Lock()
	mock.calls.ListInstanceProfilesForRolePagesWithContext = append(mock.calls.ListInstanceProfilesForRolePagesWithContext, callInfo)
	mock.lockListInstanceProfilesForRolePagesWithContext.Unlock()
	return mock.ListInstanceProfilesForRolePagesWithContextFunc(contextMoqParam, listInstanceProfilesForRoleInput, fn, options...)
}

// ListInstanceProfilesForRolePagesWithContextCalls gets all the calls that were made to ListInstanceProfilesForRolePagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesForRolePagesWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRolePagesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
	Fn                               func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		Fn                               func(*iam.ListInstanceProfilesForRoleOutput, bool) bool
		Options                          []request.Option
	}
	mock.lockListInstanceProfilesForRolePagesWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesForRolePagesWithContext
	mock.lockListInstanceProfilesForRolePagesWithContext.RUnlock()
	return calls
}

// ListInstanceProfilesForRoleRequest calls ListInstanceProfilesForRoleRequestFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRoleRequest(listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput) {
	if mock.ListInstanceProfilesForRoleRequestFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRoleRequestFunc: method is nil but IAMAPI.ListInstanceProfilesForRoleRequest was just called")
	}
	callInfo := struct {
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
	}{
		ListInstanceProfilesForRoleInput: listInstanceProfilesForRoleInput,
	}
	mock.lockListInstanceProfilesForRoleRequest.Lock()
	mock.calls.ListInstanceProfilesForRoleRequest = append(mock.calls.ListInstanceProfilesForRoleRequest, callInfo)
	mock.lockListInstanceProfilesForRoleRequest.Unlock()
	return mock.ListInstanceProfilesForRoleRequestFunc(listInstanceProfilesForRoleInput)
}

// ListInstanceProfilesForRoleRequestCalls gets all the calls that were made to ListInstanceProfilesForRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesForRoleRequestCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRoleRequestCalls() []struct {
	ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
} {
	var calls []struct {
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
	}
	mock.lockListInstanceProfilesForRoleRequest.RLock()
	calls = mock.calls.ListInstanceProfilesForRoleRequest
	mock.lockListInstanceProfilesForRoleRequest.RUnlock()
	return calls
}

// ListInstanceProfilesForRoleWithContext calls ListInstanceProfilesForRoleWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesForRoleWithContext(contextMoqParam context.Context, listInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput, options ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
	if mock.ListInstanceProfilesForRoleWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesForRoleWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesForRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		ListInstanceProfilesForRoleInput: listInstanceProfilesForRoleInput,
		Options:                          options,
	}
	mock.lockListInstanceProfilesForRoleWithContext.Lock()
	mock.calls.ListInstanceProfilesForRoleWithContext = append(mock.calls.ListInstanceProfilesForRoleWithContext, callInfo)
	mock.lockListInstanceProfilesForRoleWithContext.Unlock()
	return mock.ListInstanceProfilesForRoleWithContextFunc(contextMoqParam, listInstanceProfilesForRoleInput, options...)
}

// ListInstanceProfilesForRoleWithContextCalls gets all the calls that were made to ListInstanceProfilesForRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesForRoleWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesForRoleWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		ListInstanceProfilesForRoleInput *iam.ListInstanceProfilesForRoleInput
		Options                          []request.Option
	}
	mock.lockListInstanceProfilesForRoleWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesForRoleWithContext
	mock.lockListInstanceProfilesForRoleWithContext.RUnlock()
	return calls
}

// ListInstanceProfilesPages calls ListInstanceProfilesPagesFunc.
func (mock *IAMAPIMock) ListInstanceProfilesPages(listInstanceProfilesInput *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool) error {
	if mock.ListInstanceProfilesPagesFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesPagesFunc: method is nil but IAMAPI.ListInstanceProfilesPages was just called")
	}
	callInfo := struct {
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		Fn                        func(*iam.ListInstanceProfilesOutput, bool) bool
	}{
		ListInstanceProfilesInput: listInstanceProfilesInput,
		Fn:                        fn,
	}
	mock.lockListInstanceProfilesPages.Lock()
	mock.calls.ListInstanceProfilesPages = append(mock.calls.ListInstanceProfilesPages, callInfo)
	mock.lockListInstanceProfilesPages.Unlock()
	return mock.ListInstanceProfilesPagesFunc(listInstanceProfilesInput, fn)
}

// ListInstanceProfilesPagesCalls gets all the calls that were made to ListInstanceProfilesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesPagesCalls())
func (mock *IAMAPIMock) ListInstanceProfilesPagesCalls() []struct {
	ListInstanceProfilesInput *iam.ListInstanceProfilesInput
	Fn                        func(*iam.ListInstanceProfilesOutput, bool) bool
} {
	var calls []struct {
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		Fn                        func(*iam.ListInstanceProfilesOutput, bool) bool
	}
	mock.lockListInstanceProfilesPages.RLock()
	calls = mock.calls.ListInstanceProfilesPages
	mock.lockListInstanceProfilesPages.RUnlock()
	return calls
}

// ListInstanceProfilesPagesWithContext calls ListInstanceProfilesPagesWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesPagesWithContext(contextMoqParam context.Context, listInstanceProfilesInput *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool, options ...request.Option) error {
	if mock.ListInstanceProfilesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesPagesWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		Fn                        func(*iam.ListInstanceProfilesOutput, bool) bool
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		ListInstanceProfilesInput: listInstanceProfilesInput,
		Fn:                        fn,
		Options:                   options,
	}
	mock.lockListInstanceProfilesPagesWithContext.Lock()
	mock.calls.ListInstanceProfilesPagesWithContext = append(mock.calls.ListInstanceProfilesPagesWithContext, callInfo)
	mock.lockListInstanceProfilesPagesWithContext.Unlock()
	return mock.ListInstanceProfilesPagesWithContextFunc(contextMoqParam, listInstanceProfilesInput, fn, options...)
}

// ListInstanceProfilesPagesWithContextCalls gets all the calls that were made to ListInstanceProfilesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesPagesWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesPagesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	ListInstanceProfilesInput *iam.ListInstanceProfilesInput
	Fn                        func(*iam.ListInstanceProfilesOutput, bool) bool
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		Fn                        func(*iam.ListInstanceProfilesOutput, bool) bool
		Options                   []request.Option
	}
	mock.lockListInstanceProfilesPagesWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesPagesWithContext
	mock.lockListInstanceProfilesPagesWithContext.RUnlock()
	return calls
}

// ListInstanceProfilesRequest calls ListInstanceProfilesRequestFunc.
func (mock *IAMAPIMock) ListInstanceProfilesRequest(listInstanceProfilesInput *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput) {
	if mock.ListInstanceProfilesRequestFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesRequestFunc: method is nil but IAMAPI.ListInstanceProfilesRequest was just called")
	}
	callInfo := struct {
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
	}{
		ListInstanceProfilesInput: listInstanceProfilesInput,
	}
	mock.lockListInstanceProfilesRequest.Lock()
	mock.calls.ListInstanceProfilesRequest = append(mock.calls.ListInstanceProfilesRequest, callInfo)
	mock.lockListInstanceProfilesRequest.Unlock()
	return mock.ListInstanceProfilesRequestFunc(listInstanceProfilesInput)
}

// ListInstanceProfilesRequestCalls gets all the calls that were made to ListInstanceProfilesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesRequestCalls())
func (mock *IAMAPIMock) ListInstanceProfilesRequestCalls() []struct {
	ListInstanceProfilesInput *iam.ListInstanceProfilesInput
} {
	var calls []struct {
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
	}
	mock.lockListInstanceProfilesRequest.RLock()
	calls = mock.calls.ListInstanceProfilesRequest
	mock.lockListInstanceProfilesRequest.RUnlock()
	return calls
}

// ListInstanceProfilesWithContext calls ListInstanceProfilesWithContextFunc.
func (mock *IAMAPIMock) ListInstanceProfilesWithContext(contextMoqParam context.Context, listInstanceProfilesInput *iam.ListInstanceProfilesInput, options ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
	if mock.ListInstanceProfilesWithContextFunc == nil {
		panic("IAMAPIMock.ListInstanceProfilesWithContextFunc: method is nil but IAMAPI.ListInstanceProfilesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		ListInstanceProfilesInput: listInstanceProfilesInput,
		Options:                   options,
	}
	mock.lockListInstanceProfilesWithContext.Lock()
	mock.calls.ListInstanceProfilesWithContext = append(mock.calls.ListInstanceProfilesWithContext, callInfo)
	mock.lockListInstanceProfilesWithContext.Unlock()
	return mock.ListInstanceProfilesWithContextFunc(contextMoqParam, listInstanceProfilesInput, options...)
}

// ListInstanceProfilesWithContextCalls gets all the calls that were made to ListInstanceProfilesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListInstanceProfilesWithContextCalls())
func (mock *IAMAPIMock) ListInstanceProfilesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	ListInstanceProfilesInput *iam.ListInstanceProfilesInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		ListInstanceProfilesInput *iam.ListInstanceProfilesInput
		Options                   []request.Option
	}
	mock.lockListInstanceProfilesWithContext.RLock()
	calls = mock.calls.ListInstanceProfilesWithContext
	mock.lockListInstanceProfilesWithContext.RUnlock()
	return calls
}

// ListMFADevices calls ListMFADevicesFunc.
func (mock *IAMAPIMock) ListMFADevices(listMFADevicesInput *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	if mock.ListMFADevicesFunc == nil {
		panic("IAMAPIMock.ListMFADevicesFunc: method is nil but IAMAPI.ListMFADevices was just called")
	}
	callInfo := struct {
		ListMFADevicesInput *iam.ListMFADevicesInput
	}{
		ListMFADevicesInput: listMFADevicesInput,
	}
	mock.lockListMFADevices.Lock()
	mock.calls.ListMFADevices = append(mock.calls.ListMFADevices, callInfo)
	mock.lockListMFADevices.Unlock()
	return mock.ListMFADevicesFunc(listMFADevicesInput)
}

// ListMFADevicesCalls gets all the calls that were made to ListMFADevices.
// Check the length with:
//
//	len(mockedIAMAPI.ListMFADevicesCalls())
func (mock *IAMAPIMock) ListMFADevicesCalls() []struct {
	ListMFADevicesInput *iam.ListMFADevicesInput
} {
	var calls []struct {
		ListMFADevicesInput *iam.ListMFADevicesInput
	}
	mock.lockListMFADevices.RLock()
	calls = mock.calls.ListMFADevices
	mock.lockListMFADevices.RUnlock()
	return calls
}

// ListMFADevicesPages calls ListMFADevicesPagesFunc.
func (mock *IAMAPIMock) ListMFADevicesPages(listMFADevicesInput *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool) error {
	if mock.ListMFADevicesPagesFunc == nil {
		panic("IAMAPIMock.ListMFADevicesPagesFunc: method is nil but IAMAPI.ListMFADevicesPages was just called")
	}
	callInfo := struct {
		ListMFADevicesInput *iam.ListMFADevicesInput
		Fn                  func(*iam.ListMFADevicesOutput, bool) bool
	}{
		ListMFADevicesInput: listMFADevicesInput,
		Fn:                  fn,
	}
	mock.lockListMFADevicesPages.Lock()
	mock.calls.ListMFADevicesPages = append(mock.calls.ListMFADevicesPages, callInfo)
	mock.lockListMFADevicesPages.Unlock()
	return mock.ListMFADevicesPagesFunc(listMFADevicesInput, fn)
}

// ListMFADevicesPagesCalls gets all the calls that were made to ListMFADevicesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListMFADevicesPagesCalls())
func (mock *IAMAPIMock) ListMFADevicesPagesCalls() []struct {
	ListMFADevicesInput *iam.ListMFADevicesInput
	Fn                  func(*iam.ListMFADevicesOutput, bool) bool
} {
	var calls []struct {
		ListMFADevicesInput *iam.ListMFADevicesInput
		Fn                  func(*iam.ListMFADevicesOutput, bool) bool
	}
	mock.lockListMFADevicesPages.RLock()
	calls = mock.calls.ListMFADevicesPages
	mock.lockListMFADevicesPages.RUnlock()
	return calls
}

// ListMFADevicesPagesWithContext calls ListMFADevicesPagesWithContextFunc.
func (mock *IAMAPIMock) ListMFADevicesPagesWithContext(contextMoqParam context.Context, listMFADevicesInput *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool, options ...request.Option) error {
	if mock.ListMFADevicesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListMFADevicesPagesWithContextFunc: method is nil but IAMAPI.ListMFADevicesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		ListMFADevicesInput *iam.ListMFADevicesInput
		Fn                  func(*iam.ListMFADevicesOutput, bool) bool
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		ListMFADevicesInput: listMFADevicesInput,
		Fn:                  fn,
		Options:             options,
	}
	mock.lockListMFADevicesPagesWithContext.Lock()
	mock.calls.ListMFADevicesPagesWithContext = append(mock.calls.ListMFADevicesPagesWithContext, callInfo)
	mock.lockListMFADevicesPagesWithContext.Unlock()
	return mock.ListMFADevicesPagesWithContextFunc(contextMoqParam, listMFADevicesInput, fn, options...)
}

// ListMFADevicesPagesWithContextCalls gets all the calls that were made to ListMFADevicesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListMFADevicesPagesWithContextCalls())
func (mock *IAMAPIMock) ListMFADevicesPagesWithContextCalls() []struct {
	ContextMoqParam     context.Context
	ListMFADevicesInput *iam.ListMFADevicesInput
	Fn                  func(*iam.ListMFADevicesOutput, bool) bool
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		ListMFADevicesInput *iam.ListMFADevicesInput
		Fn                  func(*iam.ListMFADevicesOutput, bool) bool
		Options             []request.Option
	}
	mock.lockListMFADevicesPagesWithContext.RLock()
	calls = mock.calls.ListMFADevicesPagesWithContext
	mock.lockListMFADevicesPagesWithContext.RUnlock()
	return calls
}

// ListMFADevicesRequest calls ListMFADevicesRequestFunc.
func (mock *IAMAPIMock) ListMFADevicesRequest(listMFADevicesInput *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput) {
	if mock.ListMFADevicesRequestFunc == nil {
		panic("IAMAPIMock.ListMFADevicesRequestFunc: method is nil but IAMAPI.ListMFADevicesRequest was just called")
	}
	callInfo := struct {
		ListMFADevicesInput *iam.ListMFADevicesInput
	}{
		ListMFADevicesInput: listMFADevicesInput,
	}
	mock.lockListMFADevicesRequest.Lock()
	mock.calls.ListMFADevicesRequest = append(mock.calls.ListMFADevicesRequest, callInfo)
	mock.lockListMFADevicesRequest.Unlock()
	return mock.ListMFADevicesRequestFunc(listMFADevicesInput)
}

// ListMFADevicesRequestCalls gets all the calls that were made to ListMFADevicesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListMFADevicesRequestCalls())
func (mock *IAMAPIMock) ListMFADevicesRequestCalls() []struct {
	ListMFADevicesInput *iam.ListMFADevicesInput
} {
	var calls []struct {
		ListMFADevicesInput *iam.ListMFADevicesInput
	}
	mock.lockListMFADevicesRequest.RLock()
	calls = mock.calls.ListMFADevicesRequest
	mock.lockListMFADevicesRequest.RUnlock()
	return calls
}

// ListMFADevicesWithContext calls ListMFADevicesWithContextFunc.
func (mock *IAMAPIMock) ListMFADevicesWithContext(contextMoqParam context.Context, listMFADevicesInput *iam.ListMFADevicesInput, options ...request.Option) (*iam.ListMFADevicesOutput, error) {
	if mock.ListMFADevicesWithContextFunc == nil {
		panic("IAMAPIMock.ListMFADevicesWithContextFunc: method is nil but IAMAPI.ListMFADevicesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		ListMFADevicesInput *iam.ListMFADevicesInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		ListMFADevicesInput: listMFADevicesInput,
		Options:             options,
	}
	mock.lockListMFADevicesWithContext.Lock()
	mock.calls.ListMFADevicesWithContext = append(mock.calls.ListMFADevicesWithContext, callInfo)
	mock.lockListMFADevicesWithContext.Unlock()
	return mock.ListMFADevicesWithContextFunc(contextMoqParam, listMFADevicesInput, options...)
}

// ListMFADevicesWithContextCalls gets all the calls that were made to ListMFADevicesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListMFADevicesWithContextCalls())
func (mock *IAMAPIMock) ListMFADevicesWithContextCalls() []struct {
	ContextMoqParam     context.Context
	ListMFADevicesInput *iam.ListMFADevicesInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		ListMFADevicesInput *iam.ListMFADevicesInput
		Options             []request.Option
	}
	mock.lockListMFADevicesWithContext.RLock()
	calls = mock.calls.ListMFADevicesWithContext
	mock.lockListMFADevicesWithContext.RUnlock()
	return calls
}

// ListOpenIDConnectProviders calls ListOpenIDConnectProvidersFunc.
func (mock *IAMAPIMock) ListOpenIDConnectProviders(listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	if mock.ListOpenIDConnectProvidersFunc == nil {
		panic("IAMAPIMock.ListOpenIDConnectProvidersFunc: method is nil but IAMAPI.ListOpenIDConnectProviders was just called")
	}
	callInfo := struct {
		ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
	}{
		ListOpenIDConnectProvidersInput: listOpenIDConnectProvidersInput,
	}
	mock.lockListOpenIDConnectProviders.Lock()
	mock.calls.ListOpenIDConnectProviders = append(mock.calls.ListOpenIDConnectProviders, callInfo)
	mock.lockListOpenIDConnectProviders.Unlock()
	return mock.ListOpenIDConnectProvidersFunc(listOpenIDConnectProvidersInput)
}

// ListOpenIDConnectProvidersCalls gets all the calls that were made to ListOpenIDConnectProviders.
// Check the length with:
//
//	len(mockedIAMAPI.ListOpenIDConnectProvidersCalls())
func (mock *IAMAPIMock) ListOpenIDConnectProvidersCalls() []struct {
	ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
} {
	var calls []struct {
		ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
	}
	mock.lockListOpenIDConnectProviders.RLock()
	calls = mock.calls.ListOpenIDConnectProviders
	mock.lockListOpenIDConnectProviders.RUnlock()
	return calls
}

// ListOpenIDConnectProvidersRequest calls ListOpenIDConnectProvidersRequestFunc.
func (mock *IAMAPIMock) ListOpenIDConnectProvidersRequest(listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput) {
	if mock.ListOpenIDConnectProvidersRequestFunc == nil {
		panic("IAMAPIMock.ListOpenIDConnectProvidersRequestFunc: method is nil but IAMAPI.ListOpenIDConnectProvidersRequest was just called")
	}
	callInfo := struct {
		ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
	}{
		ListOpenIDConnectProvidersInput: listOpenIDConnectProvidersInput,
	}
	mock.lockListOpenIDConnectProvidersRequest.Lock()
	mock.calls.ListOpenIDConnectProvidersRequest = append(mock.calls.ListOpenIDConnectProvidersRequest, callInfo)
	mock.lockListOpenIDConnectProvidersRequest.Unlock()
	return mock.ListOpenIDConnectProvidersRequestFunc(listOpenIDConnectProvidersInput)
}

// ListOpenIDConnectProvidersRequestCalls gets all the calls that were made to ListOpenIDConnectProvidersRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListOpenIDConnectProvidersRequestCalls())
func (mock *IAMAPIMock) ListOpenIDConnectProvidersRequestCalls() []struct {
	ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
} {
	var calls []struct {
		ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
	}
	mock.lockListOpenIDConnectProvidersRequest.RLock()
	calls = mock.calls.ListOpenIDConnectProvidersRequest
	mock.lockListOpenIDConnectProvidersRequest.RUnlock()
	return calls
}

// ListOpenIDConnectProvidersWithContext calls ListOpenIDConnectProvidersWithContextFunc.
func (mock *IAMAPIMock) ListOpenIDConnectProvidersWithContext(contextMoqParam context.Context, listOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput, options ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
	if mock.ListOpenIDConnectProvidersWithContextFunc == nil {
		panic("IAMAPIMock.ListOpenIDConnectProvidersWithContextFunc: method is nil but IAMAPI.ListOpenIDConnectProvidersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		ListOpenIDConnectProvidersInput: listOpenIDConnectProvidersInput,
		Options:                         options,
	}
	mock.lockListOpenIDConnectProvidersWithContext.Lock()
	mock.calls.ListOpenIDConnectProvidersWithContext = append(mock.calls.ListOpenIDConnectProvidersWithContext, callInfo)
	mock.lockListOpenIDConnectProvidersWithContext.Unlock()
	return mock.ListOpenIDConnectProvidersWithContextFunc(contextMoqParam, listOpenIDConnectProvidersInput, options...)
}

// ListOpenIDConnectProvidersWithContextCalls gets all the calls that were made to ListOpenIDConnectProvidersWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListOpenIDConnectProvidersWithContextCalls())
func (mock *IAMAPIMock) ListOpenIDConnectProvidersWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		ListOpenIDConnectProvidersInput *iam.ListOpenIDConnectProvidersInput
		Options                         []request.Option
	}
	mock.lockListOpenIDConnectProvidersWithContext.RLock()
	calls = mock.calls.ListOpenIDConnectProvidersWithContext
	mock.lockListOpenIDConnectProvidersWithContext.RUnlock()
	return calls
}

// ListPolicies calls ListPoliciesFunc.
func (mock *IAMAPIMock) ListPolicies(listPoliciesInput *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	if mock.ListPoliciesFunc == nil {
		panic("IAMAPIMock.ListPoliciesFunc: method is nil but IAMAPI.ListPolicies was just called")
	}
	callInfo := struct {
		ListPoliciesInput *iam.ListPoliciesInput
	}{
		ListPoliciesInput: listPoliciesInput,
	}
	mock.lockListPolicies.Lock()
	mock.calls.ListPolicies = append(mock.calls.ListPolicies, callInfo)
	mock.lockListPolicies.Unlock()
	return mock.ListPoliciesFunc(listPoliciesInput)
}

// ListPoliciesCalls gets all the calls that were made to ListPolicies.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesCalls())
func (mock *IAMAPIMock) ListPoliciesCalls() []struct {
	ListPoliciesInput *iam.ListPoliciesInput
} {
	var calls []struct {
		ListPoliciesInput *iam.ListPoliciesInput
	}
	mock.lockListPolicies.RLock()
	calls = mock.calls.ListPolicies
	mock.lockListPolicies.RUnlock()
	return calls
}

// ListPoliciesGrantingServiceAccess calls ListPoliciesGrantingServiceAccessFunc.
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccess(listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	if mock.ListPoliciesGrantingServiceAccessFunc == nil {
		panic("IAMAPIMock.ListPoliciesGrantingServiceAccessFunc: method is nil but IAMAPI.ListPoliciesGrantingServiceAccess was just called")
	}
	callInfo := struct {
		ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
	}{
		ListPoliciesGrantingServiceAccessInput: listPoliciesGrantingServiceAccessInput,
	}
	mock.lockListPoliciesGrantingServiceAccess.Lock()
	mock.calls.ListPoliciesGrantingServiceAccess = append(mock.calls.ListPoliciesGrantingServiceAccess, callInfo)
	mock.lockListPoliciesGrantingServiceAccess.Unlock()
	return mock.ListPoliciesGrantingServiceAccessFunc(listPoliciesGrantingServiceAccessInput)
}

// ListPoliciesGrantingServiceAccessCalls gets all the calls that were made to ListPoliciesGrantingServiceAccess.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesGrantingServiceAccessCalls())
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessCalls() []struct {
	ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
} {
	var calls []struct {
		ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
	}
	mock.lockListPoliciesGrantingServiceAccess.RLock()
	calls = mock.calls.ListPoliciesGrantingServiceAccess
	mock.lockListPoliciesGrantingServiceAccess.RUnlock()
	return calls
}

// ListPoliciesGrantingServiceAccessRequest calls ListPoliciesGrantingServiceAccessRequestFunc.
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessRequest(listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput) {
	if mock.ListPoliciesGrantingServiceAccessRequestFunc == nil {
		panic("IAMAPIMock.ListPoliciesGrantingServiceAccessRequestFunc: method is nil but IAMAPI.ListPoliciesGrantingServiceAccessRequest was just called")
	}
	callInfo := struct {
		ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
	}{
		ListPoliciesGrantingServiceAccessInput: listPoliciesGrantingServiceAccessInput,
	}
	mock.lockListPoliciesGrantingServiceAccessRequest.Lock()
	mock.calls.ListPoliciesGrantingServiceAccessRequest = append(mock.calls.ListPoliciesGrantingServiceAccessRequest, callInfo)
	mock.lockListPoliciesGrantingServiceAccessRequest.Unlock()
	return mock.ListPoliciesGrantingServiceAccessRequestFunc(listPoliciesGrantingServiceAccessInput)
}

// ListPoliciesGrantingServiceAccessRequestCalls gets all the calls that were made to ListPoliciesGrantingServiceAccessRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesGrantingServiceAccessRequestCalls())
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessRequestCalls() []struct {
	ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
} {
	var calls []struct {
		ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
	}
	mock.lockListPoliciesGrantingServiceAccessRequest.RLock()
	calls = mock.calls.ListPoliciesGrantingServiceAccessRequest
	mock.lockListPoliciesGrantingServiceAccessRequest.RUnlock()
	return calls
}

// ListPoliciesGrantingServiceAccessWithContext calls ListPoliciesGrantingServiceAccessWithContextFunc.
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessWithContext(contextMoqParam context.Context, listPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput, options ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	if mock.ListPoliciesGrantingServiceAccessWithContextFunc == nil {
		panic("IAMAPIMock.ListPoliciesGrantingServiceAccessWithContextFunc: method is nil but IAMAPI.ListPoliciesGrantingServiceAccessWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                        context.Context
		ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
		Options                                []request.Option
	}{
		ContextMoqParam:                        contextMoqParam,
		ListPoliciesGrantingServiceAccessInput: listPoliciesGrantingServiceAccessInput,
		Options:                                options,
	}
	mock.lockListPoliciesGrantingServiceAccessWithContext.Lock()
	mock.calls.ListPoliciesGrantingServiceAccessWithContext = append(mock.calls.ListPoliciesGrantingServiceAccessWithContext, callInfo)
	mock.lockListPoliciesGrantingServiceAccessWithContext.Unlock()
	return mock.ListPoliciesGrantingServiceAccessWithContextFunc(contextMoqParam, listPoliciesGrantingServiceAccessInput, options...)
}

// ListPoliciesGrantingServiceAccessWithContextCalls gets all the calls that were made to ListPoliciesGrantingServiceAccessWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesGrantingServiceAccessWithContextCalls())
func (mock *IAMAPIMock) ListPoliciesGrantingServiceAccessWithContextCalls() []struct {
	ContextMoqParam                        context.Context
	ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
	Options                                []request.Option
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		ListPoliciesGrantingServiceAccessInput *iam.ListPoliciesGrantingServiceAccessInput
		Options                                []request.Option
	}
	mock.lockListPoliciesGrantingServiceAccessWithContext.RLock()
	calls = mock.calls.ListPoliciesGrantingServiceAccessWithContext
	mock.lockListPoliciesGrantingServiceAccessWithContext.RUnlock()
	return calls
}

// ListPoliciesPages calls ListPoliciesPagesFunc.
func (mock *IAMAPIMock) ListPoliciesPages(listPoliciesInput *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool) error {
	if mock.ListPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListPoliciesPagesFunc: method is nil but IAMAPI.ListPoliciesPages was just called")
	}
	callInfo := struct {
		ListPoliciesInput *iam.ListPoliciesInput
		Fn                func(*iam.ListPoliciesOutput, bool) bool
	}{
		ListPoliciesInput: listPoliciesInput,
		Fn:                fn,
	}
	mock.lockListPoliciesPages.Lock()
	mock.calls.ListPoliciesPages = append(mock.calls.ListPoliciesPages, callInfo)
	mock.lockListPoliciesPages.Unlock()
	return mock.ListPoliciesPagesFunc(listPoliciesInput, fn)
}

// ListPoliciesPagesCalls gets all the calls that were made to ListPoliciesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesPagesCalls())
func (mock *IAMAPIMock) ListPoliciesPagesCalls() []struct {
	ListPoliciesInput *iam.ListPoliciesInput
	Fn                func(*iam.ListPoliciesOutput, bool) bool
} {
	var calls []struct {
		ListPoliciesInput *iam.ListPoliciesInput
		Fn                func(*iam.ListPoliciesOutput, bool) bool
	}
	mock.lockListPoliciesPages.RLock()
	calls = mock.calls.ListPoliciesPages
	mock.lockListPoliciesPages.RUnlock()
	return calls
}

// ListPoliciesPagesWithContext calls ListPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListPoliciesPagesWithContext(contextMoqParam context.Context, listPoliciesInput *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool, options ...request.Option) error {
	if mock.ListPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		ListPoliciesInput *iam.ListPoliciesInput
		Fn                func(*iam.ListPoliciesOutput, bool) bool
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		ListPoliciesInput: listPoliciesInput,
		Fn:                fn,
		Options:           options,
	}
	mock.lockListPoliciesPagesWithContext.Lock()
	mock.calls.ListPoliciesPagesWithContext = append(mock.calls.ListPoliciesPagesWithContext, callInfo)
	mock.lockListPoliciesPagesWithContext.Unlock()
	return mock.ListPoliciesPagesWithContextFunc(contextMoqParam, listPoliciesInput, fn, options...)
}

// ListPoliciesPagesWithContextCalls gets all the calls that were made to ListPoliciesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListPoliciesPagesWithContextCalls() []struct {
	ContextMoqParam   context.Context
	ListPoliciesInput *iam.ListPoliciesInput
	Fn                func(*iam.ListPoliciesOutput, bool) bool
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		ListPoliciesInput *iam.ListPoliciesInput
		Fn                func(*iam.ListPoliciesOutput, bool) bool
		Options           []request.Option
	}
	mock.lockListPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListPoliciesPagesWithContext
	mock.lockListPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListPoliciesRequest calls ListPoliciesRequestFunc.
func (mock *IAMAPIMock) ListPoliciesRequest(listPoliciesInput *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput) {
	if mock.ListPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListPoliciesRequestFunc: method is nil but IAMAPI.ListPoliciesRequest was just called")
	}
	callInfo := struct {
		ListPoliciesInput *iam.ListPoliciesInput
	}{
		ListPoliciesInput: listPoliciesInput,
	}
	mock.lockListPoliciesRequest.Lock()
	mock.calls.ListPoliciesRequest = append(mock.calls.ListPoliciesRequest, callInfo)
	mock.lockListPoliciesRequest.Unlock()
	return mock.ListPoliciesRequestFunc(listPoliciesInput)
}

// ListPoliciesRequestCalls gets all the calls that were made to ListPoliciesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesRequestCalls())
func (mock *IAMAPIMock) ListPoliciesRequestCalls() []struct {
	ListPoliciesInput *iam.ListPoliciesInput
} {
	var calls []struct {
		ListPoliciesInput *iam.ListPoliciesInput
	}
	mock.lockListPoliciesRequest.RLock()
	calls = mock.calls.ListPoliciesRequest
	mock.lockListPoliciesRequest.RUnlock()
	return calls
}

// ListPoliciesWithContext calls ListPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListPoliciesWithContext(contextMoqParam context.Context, listPoliciesInput *iam.ListPoliciesInput, options ...request.Option) (*iam.ListPoliciesOutput, error) {
	if mock.ListPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListPoliciesWithContextFunc: method is nil but IAMAPI.ListPoliciesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		ListPoliciesInput *iam.ListPoliciesInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		ListPoliciesInput: listPoliciesInput,
		Options:           options,
	}
	mock.lockListPoliciesWithContext.Lock()
	mock.calls.ListPoliciesWithContext = append(mock.calls.ListPoliciesWithContext, callInfo)
	mock.lockListPoliciesWithContext.Unlock()
	return mock.ListPoliciesWithContextFunc(contextMoqParam, listPoliciesInput, options...)
}

// ListPoliciesWithContextCalls gets all the calls that were made to ListPoliciesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListPoliciesWithContextCalls() []struct {
	ContextMoqParam   context.Context
	ListPoliciesInput *iam.ListPoliciesInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		ListPoliciesInput *iam.ListPoliciesInput
		Options           []request.Option
	}
	mock.lockListPoliciesWithContext.RLock()
	calls = mock.calls.ListPoliciesWithContext
	mock.lockListPoliciesWithContext.RUnlock()
	return calls
}

// ListPolicyVersions calls ListPolicyVersionsFunc.
func (mock *IAMAPIMock) ListPolicyVersions(listPolicyVersionsInput *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	if mock.ListPolicyVersionsFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsFunc: method is nil but IAMAPI.ListPolicyVersions was just called")
	}
	callInfo := struct {
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
	}{
		ListPolicyVersionsInput: listPolicyVersionsInput,
	}
	mock.lockListPolicyVersions.Lock()
	mock.calls.ListPolicyVersions = append(mock.calls.ListPolicyVersions, callInfo)
	mock.lockListPolicyVersions.Unlock()
	return mock.ListPolicyVersionsFunc(listPolicyVersionsInput)
}

// ListPolicyVersionsCalls gets all the calls that were made to ListPolicyVersions.
// Check the length with:
//
//	len(mockedIAMAPI.ListPolicyVersionsCalls())
func (mock *IAMAPIMock) ListPolicyVersionsCalls() []struct {
	ListPolicyVersionsInput *iam.ListPolicyVersionsInput
} {
	var calls []struct {
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
	}
	mock.lockListPolicyVersions.RLock()
	calls = mock.calls.ListPolicyVersions
	mock.lockListPolicyVersions.RUnlock()
	return calls
}

// ListPolicyVersionsPages calls ListPolicyVersionsPagesFunc.
func (mock *IAMAPIMock) ListPolicyVersionsPages(listPolicyVersionsInput *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool) error {
	if mock.ListPolicyVersionsPagesFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsPagesFunc: method is nil but IAMAPI.ListPolicyVersionsPages was just called")
	}
	callInfo := struct {
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		Fn                      func(*iam.ListPolicyVersionsOutput, bool) bool
	}{
		ListPolicyVersionsInput: listPolicyVersionsInput,
		Fn:                      fn,
	}
	mock.lockListPolicyVersionsPages.Lock()
	mock.calls.ListPolicyVersionsPages = append(mock.calls.ListPolicyVersionsPages, callInfo)
	mock.lockListPolicyVersionsPages.Unlock()
	return mock.ListPolicyVersionsPagesFunc(listPolicyVersionsInput, fn)
}

// ListPolicyVersionsPagesCalls gets all the calls that were made to ListPolicyVersionsPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListPolicyVersionsPagesCalls())
func (mock *IAMAPIMock) ListPolicyVersionsPagesCalls() []struct {
	ListPolicyVersionsInput *iam.ListPolicyVersionsInput
	Fn                      func(*iam.ListPolicyVersionsOutput, bool) bool
} {
	var calls []struct {
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		Fn                      func(*iam.ListPolicyVersionsOutput, bool) bool
	}
	mock.lockListPolicyVersionsPages.RLock()
	calls = mock.calls.ListPolicyVersionsPages
	mock.lockListPolicyVersionsPages.RUnlock()
	return calls
}

// ListPolicyVersionsPagesWithContext calls ListPolicyVersionsPagesWithContextFunc.
func (mock *IAMAPIMock) ListPolicyVersionsPagesWithContext(contextMoqParam context.Context, listPolicyVersionsInput *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool, options ...request.Option) error {
	if mock.ListPolicyVersionsPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsPagesWithContextFunc: method is nil but IAMAPI.ListPolicyVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		Fn                      func(*iam.ListPolicyVersionsOutput, bool) bool
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ListPolicyVersionsInput: listPolicyVersionsInput,
		Fn:                      fn,
		Options:                 options,
	}
	mock.lockListPolicyVersionsPagesWithContext.Lock()
	mock.calls.ListPolicyVersionsPagesWithContext = append(mock.calls.ListPolicyVersionsPagesWithContext, callInfo)
	mock.lockListPolicyVersionsPagesWithContext.Unlock()
	return mock.ListPolicyVersionsPagesWithContextFunc(contextMoqParam, listPolicyVersionsInput, fn, options...)
}

// ListPolicyVersionsPagesWithContextCalls gets all the calls that were made to ListPolicyVersionsPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListPolicyVersionsPagesWithContextCalls())
func (mock *IAMAPIMock) ListPolicyVersionsPagesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ListPolicyVersionsInput *iam.ListPolicyVersionsInput
	Fn                      func(*iam.ListPolicyVersionsOutput, bool) bool
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		Fn                      func(*iam.ListPolicyVersionsOutput, bool) bool
		Options                 []request.Option
	}
	mock.lockListPolicyVersionsPagesWithContext.RLock()
	calls = mock.calls.ListPolicyVersionsPagesWithContext
	mock.lockListPolicyVersionsPagesWithContext.RUnlock()
	return calls
}

// ListPolicyVersionsRequest calls ListPolicyVersionsRequestFunc.
func (mock *IAMAPIMock) ListPolicyVersionsRequest(listPolicyVersionsInput *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput) {
	if mock.ListPolicyVersionsRequestFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsRequestFunc: method is nil but IAMAPI.ListPolicyVersionsRequest was just called")
	}
	callInfo := struct {
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
	}{
		ListPolicyVersionsInput: listPolicyVersionsInput,
	}
	mock.lockListPolicyVersionsRequest.Lock()
	mock.calls.ListPolicyVersionsRequest = append(mock.calls.ListPolicyVersionsRequest, callInfo)
	mock.lockListPolicyVersionsRequest.Unlock()
	return mock.ListPolicyVersionsRequestFunc(listPolicyVersionsInput)
}

// ListPolicyVersionsRequestCalls gets all the calls that were made to ListPolicyVersionsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListPolicyVersionsRequestCalls())
func (mock *IAMAPIMock) ListPolicyVersionsRequestCalls() []struct {
	ListPolicyVersionsInput *iam.ListPolicyVersionsInput
} {
	var calls []struct {
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
	}
	mock.lockListPolicyVersionsRequest.RLock()
	calls = mock.calls.ListPolicyVersionsRequest
	mock.lockListPolicyVersionsRequest.RUnlock()
	return calls
}

// ListPolicyVersionsWithContext calls ListPolicyVersionsWithContextFunc.
func (mock *IAMAPIMock) ListPolicyVersionsWithContext(contextMoqParam context.Context, listPolicyVersionsInput *iam.ListPolicyVersionsInput, options ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
	if mock.ListPolicyVersionsWithContextFunc == nil {
		panic("IAMAPIMock.ListPolicyVersionsWithContextFunc: method is nil but IAMAPI.ListPolicyVersionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ListPolicyVersionsInput: listPolicyVersionsInput,
		Options:                 options,
	}
	mock.lockListPolicyVersionsWithContext.Lock()
	mock.calls.ListPolicyVersionsWithContext = append(mock.calls.ListPolicyVersionsWithContext, callInfo)
	mock.lockListPolicyVersionsWithContext.Unlock()
	return mock.ListPolicyVersionsWithContextFunc(contextMoqParam, listPolicyVersionsInput, options...)
}

// ListPolicyVersionsWithContextCalls gets all the calls that were made to ListPolicyVersionsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListPolicyVersionsWithContextCalls())
func (mock *IAMAPIMock) ListPolicyVersionsWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ListPolicyVersionsInput *iam.ListPolicyVersionsInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ListPolicyVersionsInput *iam.ListPolicyVersionsInput
		Options                 []request.Option
	}
	mock.lockListPolicyVersionsWithContext.RLock()
	calls = mock.calls.ListPolicyVersionsWithContext
	mock.lockListPolicyVersionsWithContext.RUnlock()
	return calls
}

// ListRolePolicies calls ListRolePoliciesFunc.
func (mock *IAMAPIMock) ListRolePolicies(listRolePoliciesInput *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	if mock.ListRolePoliciesFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesFunc: method is nil but IAMAPI.ListRolePolicies was just called")
	}
	callInfo := struct {
		ListRolePoliciesInput *iam.ListRolePoliciesInput
	}{
		ListRolePoliciesInput: listRolePoliciesInput,
	}
	mock.lockListRolePolicies.Lock()
	mock.calls.ListRolePolicies = append(mock.calls.ListRolePolicies, callInfo)
	mock.lockListRolePolicies.Unlock()
	return mock.ListRolePoliciesFunc(listRolePoliciesInput)
}

// ListRolePoliciesCalls gets all the calls that were made to ListRolePolicies.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolePoliciesCalls())
func (mock *IAMAPIMock) ListRolePoliciesCalls() []struct {
	ListRolePoliciesInput *iam.ListRolePoliciesInput
} {
	var calls []struct {
		ListRolePoliciesInput *iam.ListRolePoliciesInput
	}
	mock.lockListRolePolicies.RLock()
	calls = mock.calls.ListRolePolicies
	mock.lockListRolePolicies.RUnlock()
	return calls
}

// ListRolePoliciesPages calls ListRolePoliciesPagesFunc.
func (mock *IAMAPIMock) ListRolePoliciesPages(listRolePoliciesInput *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool) error {
	if mock.ListRolePoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesPagesFunc: method is nil but IAMAPI.ListRolePoliciesPages was just called")
	}
	callInfo := struct {
		ListRolePoliciesInput *iam.ListRolePoliciesInput
		Fn                    func(*iam.ListRolePoliciesOutput, bool) bool
	}{
		ListRolePoliciesInput: listRolePoliciesInput,
		Fn:                    fn,
	}
	mock.lockListRolePoliciesPages.Lock()
	mock.calls.ListRolePoliciesPages = append(mock.calls.ListRolePoliciesPages, callInfo)
	mock.lockListRolePoliciesPages.Unlock()
	return mock.ListRolePoliciesPagesFunc(listRolePoliciesInput, fn)
}

// ListRolePoliciesPagesCalls gets all the calls that were made to ListRolePoliciesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolePoliciesPagesCalls())
func (mock *IAMAPIMock) ListRolePoliciesPagesCalls() []struct {
	ListRolePoliciesInput *iam.ListRolePoliciesInput
	Fn                    func(*iam.ListRolePoliciesOutput, bool) bool
} {
	var calls []struct {
		ListRolePoliciesInput *iam.ListRolePoliciesInput
		Fn                    func(*iam.ListRolePoliciesOutput, bool) bool
	}
	mock.lockListRolePoliciesPages.RLock()
	calls = mock.calls.ListRolePoliciesPages
	mock.lockListRolePoliciesPages.RUnlock()
	return calls
}

// ListRolePoliciesPagesWithContext calls ListRolePoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListRolePoliciesPagesWithContext(contextMoqParam context.Context, listRolePoliciesInput *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool, options ...request.Option) error {
	if mock.ListRolePoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesPagesWithContextFunc: method is nil but IAMAPI.ListRolePoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		ListRolePoliciesInput *iam.ListRolePoliciesInput
		Fn                    func(*iam.ListRolePoliciesOutput, bool) bool
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		ListRolePoliciesInput: listRolePoliciesInput,
		Fn:                    fn,
		Options:               options,
	}
	mock.lockListRolePoliciesPagesWithContext.Lock()
	mock.calls.ListRolePoliciesPagesWithContext = append(mock.calls.ListRolePoliciesPagesWithContext, callInfo)
	mock.lockListRolePoliciesPagesWithContext.Unlock()
	return mock.ListRolePoliciesPagesWithContextFunc(contextMoqParam, listRolePoliciesInput, fn, options...)
}

// ListRolePoliciesPagesWithContextCalls gets all the calls that were made to ListRolePoliciesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolePoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListRolePoliciesPagesWithContextCalls() []struct {
	ContextMoqParam       context.Context
	ListRolePoliciesInput *iam.ListRolePoliciesInput
	Fn                    func(*iam.ListRolePoliciesOutput, bool) bool
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ListRolePoliciesInput *iam.ListRolePoliciesInput
		Fn                    func(*iam.ListRolePoliciesOutput, bool) bool
		Options               []request.Option
	}
	mock.lockListRolePoliciesPagesWithContext.RLock()
	calls = mock.calls.ListRolePoliciesPagesWithContext
	mock.lockListRolePoliciesPagesWithContext.RUnlock()
	return calls
}

// ListRolePoliciesRequest calls ListRolePoliciesRequestFunc.
func (mock *IAMAPIMock) ListRolePoliciesRequest(listRolePoliciesInput *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput) {
	if mock.ListRolePoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesRequestFunc: method is nil but IAMAPI.ListRolePoliciesRequest was just called")
	}
	callInfo := struct {
		ListRolePoliciesInput *iam.ListRolePoliciesInput
	}{
		ListRolePoliciesInput: listRolePoliciesInput,
	}
	mock.lockListRolePoliciesRequest.Lock()
	mock.calls.ListRolePoliciesRequest = append(mock.calls.ListRolePoliciesRequest, callInfo)
	mock.lockListRolePoliciesRequest.Unlock()
	return mock.ListRolePoliciesRequestFunc(listRolePoliciesInput)
}

// ListRolePoliciesRequestCalls gets all the calls that were made to ListRolePoliciesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolePoliciesRequestCalls())
func (mock *IAMAPIMock) ListRolePoliciesRequestCalls() []struct {
	ListRolePoliciesInput *iam.ListRolePoliciesInput
} {
	var calls []struct {
		ListRolePoliciesInput *iam.ListRolePoliciesInput
	}
	mock.lockListRolePoliciesRequest.RLock()
	calls = mock.calls.ListRolePoliciesRequest
	mock.lockListRolePoliciesRequest.RUnlock()
	return calls
}

// ListRolePoliciesWithContext calls ListRolePoliciesWithContextFunc.
func (mock *IAMAPIMock) ListRolePoliciesWithContext(contextMoqParam context.Context, listRolePoliciesInput *iam.ListRolePoliciesInput, options ...request.Option) (*iam.ListRolePoliciesOutput, error) {
	if mock.ListRolePoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolePoliciesWithContextFunc: method is nil but IAMAPI.ListRolePoliciesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		ListRolePoliciesInput *iam.ListRolePoliciesInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		ListRolePoliciesInput: listRolePoliciesInput,
		Options:               options,
	}
	mock.lockListRolePoliciesWithContext.Lock()
	mock.calls.ListRolePoliciesWithContext = append(mock.calls.ListRolePoliciesWithContext, callInfo)
	mock.lockListRolePoliciesWithContext.Unlock()
	return mock.ListRolePoliciesWithContextFunc(contextMoqParam, listRolePoliciesInput, options...)
}

// ListRolePoliciesWithContextCalls gets all the calls that were made to ListRolePoliciesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolePoliciesWithContextCalls())
func (mock *IAMAPIMock) ListRolePoliciesWithContextCalls() []struct {
	ContextMoqParam       context.Context
	ListRolePoliciesInput *iam.ListRolePoliciesInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ListRolePoliciesInput *iam.ListRolePoliciesInput
		Options               []request.Option
	}
	mock.lockListRolePoliciesWithContext.RLock()
	calls = mock.calls.ListRolePoliciesWithContext
	mock.lockListRolePoliciesWithContext.RUnlock()
	return calls
}

// ListRoleTags calls ListRoleTagsFunc.
func (mock *IAMAPIMock) ListRoleTags(listRoleTagsInput *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
	if mock.ListRoleTagsFunc == nil {
		panic("IAMAPIMock.ListRoleTagsFunc: method is nil but IAMAPI.ListRoleTags was just called")
	}
	callInfo := struct {
		ListRoleTagsInput *iam.ListRoleTagsInput
	}{
		ListRoleTagsInput: listRoleTagsInput,
	}
	mock.lockListRoleTags.Lock()
	mock.calls.ListRoleTags = append(mock.calls.ListRoleTags, callInfo)
	mock.lockListRoleTags.Unlock()
	return mock.ListRoleTagsFunc(listRoleTagsInput)
}

// ListRoleTagsCalls gets all the calls that were made to ListRoleTags.
// Check the length with:
//
//	len(mockedIAMAPI.ListRoleTagsCalls())
func (mock *IAMAPIMock) ListRoleTagsCalls() []struct {
	ListRoleTagsInput *iam.ListRoleTagsInput
} {
	var calls []struct {
		ListRoleTagsInput *iam.ListRoleTagsInput
	}
	mock.lockListRoleTags.RLock()
	calls = mock.calls.ListRoleTags
	mock.lockListRoleTags.RUnlock()
	return calls
}

// ListRoleTagsRequest calls ListRoleTagsRequestFunc.
func (mock *IAMAPIMock) ListRoleTagsRequest(listRoleTagsInput *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput) {
	if mock.ListRoleTagsRequestFunc == nil {
		panic("IAMAPIMock.ListRoleTagsRequestFunc: method is nil but IAMAPI.ListRoleTagsRequest was just called")
	}
	callInfo := struct {
		ListRoleTagsInput *iam.ListRoleTagsInput
	}{
		ListRoleTagsInput: listRoleTagsInput,
	}
	mock.lockListRoleTagsRequest.Lock()
	mock.calls.ListRoleTagsRequest = append(mock.calls.ListRoleTagsRequest, callInfo)
	mock.lockListRoleTagsRequest.Unlock()
	return mock.ListRoleTagsRequestFunc(listRoleTagsInput)
}

// ListRoleTagsRequestCalls gets all the calls that were made to ListRoleTagsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListRoleTagsRequestCalls())
func (mock *IAMAPIMock) ListRoleTagsRequestCalls() []struct {
	ListRoleTagsInput *iam.ListRoleTagsInput
} {
	var calls []struct {
		ListRoleTagsInput *iam.ListRoleTagsInput
	}
	mock.lockListRoleTagsRequest.RLock()
	calls = mock.calls.ListRoleTagsRequest
	mock.lockListRoleTagsRequest.RUnlock()
	return calls
}

// ListRoleTagsWithContext calls ListRoleTagsWithContextFunc.
func (mock *IAMAPIMock) ListRoleTagsWithContext(contextMoqParam context.Context, listRoleTagsInput *iam.ListRoleTagsInput, options ...request.Option) (*iam.ListRoleTagsOutput, error) {
	if mock.ListRoleTagsWithContextFunc == nil {
		panic("IAMAPIMock.ListRoleTagsWithContextFunc: method is nil but IAMAPI.ListRoleTagsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		ListRoleTagsInput *iam.ListRoleTagsInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		ListRoleTagsInput: listRoleTagsInput,
		Options:           options,
	}
	mock.lockListRoleTagsWithContext.Lock()
	mock.calls.ListRoleTagsWithContext = append(mock.calls.ListRoleTagsWithContext, callInfo)
	mock.lockListRoleTagsWithContext.Unlock()
	return mock.ListRoleTagsWithContextFunc(contextMoqParam, listRoleTagsInput, options...)
}

// ListRoleTagsWithContextCalls gets all the calls that were made to ListRoleTagsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListRoleTagsWithContextCalls())
func (mock *IAMAPIMock) ListRoleTagsWithContextCalls() []struct {
	ContextMoqParam   context.Context
	ListRoleTagsInput *iam.ListRoleTagsInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		ListRoleTagsInput *iam.ListRoleTagsInput
		Options           []request.Option
	}
	mock.lockListRoleTagsWithContext.RLock()
	calls = mock.calls.ListRoleTagsWithContext
	mock.lockListRoleTagsWithContext.RUnlock()
	return calls
}

// ListRoles calls ListRolesFunc.
func (mock *IAMAPIMock) ListRoles(listRolesInput *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	if mock.ListRolesFunc == nil {
		panic("IAMAPIMock.ListRolesFunc: method is nil but IAMAPI.ListRoles was just called")
	}
	callInfo := struct {
		ListRolesInput *iam.ListRolesInput
	}{
		ListRolesInput: listRolesInput,
	}
	mock.lockListRoles.Lock()
	mock.calls.ListRoles = append(mock.calls.ListRoles, callInfo)
	mock.lockListRoles.Unlock()
	return mock.ListRolesFunc(listRolesInput)
}

// ListRolesCalls gets all the calls that were made to ListRoles.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolesCalls())
func (mock *IAMAPIMock) ListRolesCalls() []struct {
	ListRolesInput *iam.ListRolesInput
} {
	var calls []struct {
		ListRolesInput *iam.ListRolesInput
	}
	mock.lockListRoles.RLock()
	calls = mock.calls.ListRoles
	mock.lockListRoles.RUnlock()
	return calls
}

// ListRolesPages calls ListRolesPagesFunc.
func (mock *IAMAPIMock) ListRolesPages(listRolesInput *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool) error {
	if mock.ListRolesPagesFunc == nil {
		panic("IAMAPIMock.ListRolesPagesFunc: method is nil but IAMAPI.ListRolesPages was just called")
	}
	callInfo := struct {
		ListRolesInput *iam.ListRolesInput
		Fn             func(*iam.ListRolesOutput, bool) bool
	}{
		ListRolesInput: listRolesInput,
		Fn:             fn,
	}
	mock.lockListRolesPages.Lock()
	mock.calls.ListRolesPages = append(mock.calls.ListRolesPages, callInfo)
	mock.lockListRolesPages.Unlock()
	return mock.ListRolesPagesFunc(listRolesInput, fn)
}

// ListRolesPagesCalls gets all the calls that were made to ListRolesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolesPagesCalls())
func (mock *IAMAPIMock) ListRolesPagesCalls() []struct {
	ListRolesInput *iam.ListRolesInput
	Fn             func(*iam.ListRolesOutput, bool) bool
} {
	var calls []struct {
		ListRolesInput *iam.ListRolesInput
		Fn             func(*iam.ListRolesOutput, bool) bool
	}
	mock.lockListRolesPages.RLock()
	calls = mock.calls.ListRolesPages
	mock.lockListRolesPages.RUnlock()
	return calls
}

// ListRolesPagesWithContext calls ListRolesPagesWithContextFunc.
func (mock *IAMAPIMock) ListRolesPagesWithContext(contextMoqParam context.Context, listRolesInput *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool, options ...request.Option) error {
	if mock.ListRolesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolesPagesWithContextFunc: method is nil but IAMAPI.ListRolesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListRolesInput  *iam.ListRolesInput
		Fn              func(*iam.ListRolesOutput, bool) bool
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListRolesInput:  listRolesInput,
		Fn:              fn,
		Options:         options,
	}
	mock.lockListRolesPagesWithContext.Lock()
	mock.calls.ListRolesPagesWithContext = append(mock.calls.ListRolesPagesWithContext, callInfo)
	mock.lockListRolesPagesWithContext.Unlock()
	return mock.ListRolesPagesWithContextFunc(contextMoqParam, listRolesInput, fn, options...)
}

// ListRolesPagesWithContextCalls gets all the calls that were made to ListRolesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolesPagesWithContextCalls())
func (mock *IAMAPIMock) ListRolesPagesWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListRolesInput  *iam.ListRolesInput
	Fn              func(*iam.ListRolesOutput, bool) bool
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListRolesInput  *iam.ListRolesInput
		Fn              func(*iam.ListRolesOutput, bool) bool
		Options         []request.Option
	}
	mock.lockListRolesPagesWithContext.RLock()
	calls = mock.calls.ListRolesPagesWithContext
	mock.lockListRolesPagesWithContext.RUnlock()
	return calls
}

// ListRolesRequest calls ListRolesRequestFunc.
func (mock *IAMAPIMock) ListRolesRequest(listRolesInput *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput) {
	if mock.ListRolesRequestFunc == nil {
		panic("IAMAPIMock.ListRolesRequestFunc: method is nil but IAMAPI.ListRolesRequest was just called")
	}
	callInfo := struct {
		ListRolesInput *iam.ListRolesInput
	}{
		ListRolesInput: listRolesInput,
	}
	mock.lockListRolesRequest.Lock()
	mock.calls.ListRolesRequest = append(mock.calls.ListRolesRequest, callInfo)
	mock.lockListRolesRequest.Unlock()
	return mock.ListRolesRequestFunc(listRolesInput)
}

// ListRolesRequestCalls gets all the calls that were made to ListRolesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolesRequestCalls())
func (mock *IAMAPIMock) ListRolesRequestCalls() []struct {
	ListRolesInput *iam.ListRolesInput
} {
	var calls []struct {
		ListRolesInput *iam.ListRolesInput
	}
	mock.lockListRolesRequest.RLock()
	calls = mock.calls.ListRolesRequest
	mock.lockListRolesRequest.RUnlock()
	return calls
}

// ListRolesWithContext calls ListRolesWithContextFunc.
func (mock *IAMAPIMock) ListRolesWithContext(contextMoqParam context.Context, listRolesInput *iam.ListRolesInput, options ...request.Option) (*iam.ListRolesOutput, error) {
	if mock.ListRolesWithContextFunc == nil {
		panic("IAMAPIMock.ListRolesWithContextFunc: method is nil but IAMAPI.ListRolesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListRolesInput  *iam.ListRolesInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListRolesInput:  listRolesInput,
		Options:         options,
	}
	mock.lockListRolesWithContext.Lock()
	mock.calls.ListRolesWithContext = append(mock.calls.ListRolesWithContext, callInfo)
	mock.lockListRolesWithContext.Unlock()
	return mock.ListRolesWithContextFunc(contextMoqParam, listRolesInput, options...)
}

// ListRolesWithContextCalls gets all the calls that were made to ListRolesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListRolesWithContextCalls())
func (mock *IAMAPIMock) ListRolesWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListRolesInput  *iam.ListRolesInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListRolesInput  *iam.ListRolesInput
		Options         []request.Option
	}
	mock.lockListRolesWithContext.RLock()
	calls = mock.calls.ListRolesWithContext
	mock.lockListRolesWithContext.RUnlock()
	return calls
}

// ListSAMLProviders calls ListSAMLProvidersFunc.
func (mock *IAMAPIMock) ListSAMLProviders(listSAMLProvidersInput *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	if mock.ListSAMLProvidersFunc == nil {
		panic("IAMAPIMock.ListSAMLProvidersFunc: method is nil but IAMAPI.ListSAMLProviders was just called")
	}
	callInfo := struct {
		ListSAMLProvidersInput *iam.ListSAMLProvidersInput
	}{
		ListSAMLProvidersInput: listSAMLProvidersInput,
	}
	mock.lockListSAMLProviders.Lock()
	mock.calls.ListSAMLProviders = append(mock.calls.ListSAMLProviders, callInfo)
	mock.lockListSAMLProviders.Unlock()
	return mock.ListSAMLProvidersFunc(listSAMLProvidersInput)
}

// ListSAMLProvidersCalls gets all the calls that were made to ListSAMLProviders.
// Check the length with:
//
//	len(mockedIAMAPI.ListSAMLProvidersCalls())
func (mock *IAMAPIMock) ListSAMLProvidersCalls() []struct {
	ListSAMLProvidersInput *iam.ListSAMLProvidersInput
} {
	var calls []struct {
		ListSAMLProvidersInput *iam.ListSAMLProvidersInput
	}
	mock.lockListSAMLProviders.RLock()
	calls = mock.calls.ListSAMLProviders
	mock.lockListSAMLProviders.RUnlock()
	return calls
}

// ListSAMLProvidersRequest calls ListSAMLProvidersRequestFunc.
func (mock *IAMAPIMock) ListSAMLProvidersRequest(listSAMLProvidersInput *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput) {
	if mock.ListSAMLProvidersRequestFunc == nil {
		panic("IAMAPIMock.ListSAMLProvidersRequestFunc: method is nil but IAMAPI.ListSAMLProvidersRequest was just called")
	}
	callInfo := struct {
		ListSAMLProvidersInput *iam.ListSAMLProvidersInput
	}{
		ListSAMLProvidersInput: listSAMLProvidersInput,
	}
	mock.lockListSAMLProvidersRequest.Lock()
	mock.calls.ListSAMLProvidersRequest = append(mock.calls.ListSAMLProvidersRequest, callInfo)
	mock.lockListSAMLProvidersRequest.Unlock()
	return mock.ListSAMLProvidersRequestFunc(listSAMLProvidersInput)
}

// ListSAMLProvidersRequestCalls gets all the calls that were made to ListSAMLProvidersRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListSAMLProvidersRequestCalls())
func (mock *IAMAPIMock) ListSAMLProvidersRequestCalls() []struct {
	ListSAMLProvidersInput *iam.ListSAMLProvidersInput
} {
	var calls []struct {
		ListSAMLProvidersInput *iam.ListSAMLProvidersInput
	}
	mock.lockListSAMLProvidersRequest.RLock()
	calls = mock.calls.ListSAMLProvidersRequest
	mock.lockListSAMLProvidersRequest.RUnlock()
	return calls
}

// ListSAMLProvidersWithContext calls ListSAMLProvidersWithContextFunc.
func (mock *IAMAPIMock) ListSAMLProvidersWithContext(contextMoqParam context.Context, listSAMLProvidersInput *iam.ListSAMLProvidersInput, options ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
	if mock.ListSAMLProvidersWithContextFunc == nil {
		panic("IAMAPIMock.ListSAMLProvidersWithContextFunc: method is nil but IAMAPI.ListSAMLProvidersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListSAMLProvidersInput *iam.ListSAMLProvidersInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ListSAMLProvidersInput: listSAMLProvidersInput,
		Options:                options,
	}
	mock.lockListSAMLProvidersWithContext.Lock()
	mock.calls.ListSAMLProvidersWithContext = append(mock.calls.ListSAMLProvidersWithContext, callInfo)
	mock.lockListSAMLProvidersWithContext.Unlock()
	return mock.ListSAMLProvidersWithContextFunc(contextMoqParam, listSAMLProvidersInput, options...)
}

// ListSAMLProvidersWithContextCalls gets all the calls that were made to ListSAMLProvidersWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListSAMLProvidersWithContextCalls())
func (mock *IAMAPIMock) ListSAMLProvidersWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ListSAMLProvidersInput *iam.ListSAMLProvidersInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListSAMLProvidersInput *iam.ListSAMLProvidersInput
		Options                []request.Option
	}
	mock.lockListSAMLProvidersWithContext.RLock()
	calls = mock.calls.ListSAMLProvidersWithContext
	mock.lockListSAMLProvidersWithContext.RUnlock()
	return calls
}

// ListSSHPublicKeys calls ListSSHPublicKeysFunc.
func (mock *IAMAPIMock) ListSSHPublicKeys(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	if mock.ListSSHPublicKeysFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysFunc: method is nil but IAMAPI.ListSSHPublicKeys was just called")
	}
	callInfo := struct {
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
	}{
		ListSSHPublicKeysInput: listSSHPublicKeysInput,
	}
	mock.lockListSSHPublicKeys.Lock()
	mock.calls.ListSSHPublicKeys = append(mock.calls.ListSSHPublicKeys, callInfo)
	mock.lockListSSHPublicKeys.Unlock()
	return mock.ListSSHPublicKeysFunc(listSSHPublicKeysInput)
}

// ListSSHPublicKeysCalls gets all the calls that were made to ListSSHPublicKeys.
// Check the length with:
//
//	len(mockedIAMAPI.ListSSHPublicKeysCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysCalls() []struct {
	ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
} {
	var calls []struct {
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
	}
	mock.lockListSSHPublicKeys.RLock()
	calls = mock.calls.ListSSHPublicKeys
	mock.lockListSSHPublicKeys.RUnlock()
	return calls
}

// ListSSHPublicKeysPages calls ListSSHPublicKeysPagesFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysPages(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool) error {
	if mock.ListSSHPublicKeysPagesFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysPagesFunc: method is nil but IAMAPI.ListSSHPublicKeysPages was just called")
	}
	callInfo := struct {
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		Fn                     func(*iam.ListSSHPublicKeysOutput, bool) bool
	}{
		ListSSHPublicKeysInput: listSSHPublicKeysInput,
		Fn:                     fn,
	}
	mock.lockListSSHPublicKeysPages.Lock()
	mock.calls.ListSSHPublicKeysPages = append(mock.calls.ListSSHPublicKeysPages, callInfo)
	mock.lockListSSHPublicKeysPages.Unlock()
	return mock.ListSSHPublicKeysPagesFunc(listSSHPublicKeysInput, fn)
}

// ListSSHPublicKeysPagesCalls gets all the calls that were made to ListSSHPublicKeysPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListSSHPublicKeysPagesCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysPagesCalls() []struct {
	ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
	Fn                     func(*iam.ListSSHPublicKeysOutput, bool) bool
} {
	var calls []struct {
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		Fn                     func(*iam.ListSSHPublicKeysOutput, bool) bool
	}
	mock.lockListSSHPublicKeysPages.RLock()
	calls = mock.calls.ListSSHPublicKeysPages
	mock.lockListSSHPublicKeysPages.RUnlock()
	return calls
}

// ListSSHPublicKeysPagesWithContext calls ListSSHPublicKeysPagesWithContextFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysPagesWithContext(contextMoqParam context.Context, listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool, options ...request.Option) error {
	if mock.ListSSHPublicKeysPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysPagesWithContextFunc: method is nil but IAMAPI.ListSSHPublicKeysPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		Fn                     func(*iam.ListSSHPublicKeysOutput, bool) bool
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ListSSHPublicKeysInput: listSSHPublicKeysInput,
		Fn:                     fn,
		Options:                options,
	}
	mock.lockListSSHPublicKeysPagesWithContext.Lock()
	mock.calls.ListSSHPublicKeysPagesWithContext = append(mock.calls.ListSSHPublicKeysPagesWithContext, callInfo)
	mock.lockListSSHPublicKeysPagesWithContext.Unlock()
	return mock.ListSSHPublicKeysPagesWithContextFunc(contextMoqParam, listSSHPublicKeysInput, fn, options...)
}

// ListSSHPublicKeysPagesWithContextCalls gets all the calls that were made to ListSSHPublicKeysPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListSSHPublicKeysPagesWithContextCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysPagesWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
	Fn                     func(*iam.ListSSHPublicKeysOutput, bool) bool
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		Fn                     func(*iam.ListSSHPublicKeysOutput, bool) bool
		Options                []request.Option
	}
	mock.lockListSSHPublicKeysPagesWithContext.RLock()
	calls = mock.calls.ListSSHPublicKeysPagesWithContext
	mock.lockListSSHPublicKeysPagesWithContext.RUnlock()
	return calls
}

// ListSSHPublicKeysRequest calls ListSSHPublicKeysRequestFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysRequest(listSSHPublicKeysInput *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput) {
	if mock.ListSSHPublicKeysRequestFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysRequestFunc: method is nil but IAMAPI.ListSSHPublicKeysRequest was just called")
	}
	callInfo := struct {
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
	}{
		ListSSHPublicKeysInput: listSSHPublicKeysInput,
	}
	mock.lockListSSHPublicKeysRequest.Lock()
	mock.calls.ListSSHPublicKeysRequest = append(mock.calls.ListSSHPublicKeysRequest, callInfo)
	mock.lockListSSHPublicKeysRequest.Unlock()
	return mock.ListSSHPublicKeysRequestFunc(listSSHPublicKeysInput)
}

// ListSSHPublicKeysRequestCalls gets all the calls that were made to ListSSHPublicKeysRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListSSHPublicKeysRequestCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysRequestCalls() []struct {
	ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
} {
	var calls []struct {
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
	}
	mock.lockListSSHPublicKeysRequest.RLock()
	calls = mock.calls.ListSSHPublicKeysRequest
	mock.lockListSSHPublicKeysRequest.RUnlock()
	return calls
}

// ListSSHPublicKeysWithContext calls ListSSHPublicKeysWithContextFunc.
func (mock *IAMAPIMock) ListSSHPublicKeysWithContext(contextMoqParam context.Context, listSSHPublicKeysInput *iam.ListSSHPublicKeysInput, options ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
	if mock.ListSSHPublicKeysWithContextFunc == nil {
		panic("IAMAPIMock.ListSSHPublicKeysWithContextFunc: method is nil but IAMAPI.ListSSHPublicKeysWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ListSSHPublicKeysInput: listSSHPublicKeysInput,
		Options:                options,
	}
	mock.lockListSSHPublicKeysWithContext.Lock()
	mock.calls.ListSSHPublicKeysWithContext = append(mock.calls.ListSSHPublicKeysWithContext, callInfo)
	mock.lockListSSHPublicKeysWithContext.Unlock()
	return mock.ListSSHPublicKeysWithContextFunc(contextMoqParam, listSSHPublicKeysInput, options...)
}

// ListSSHPublicKeysWithContextCalls gets all the calls that were made to ListSSHPublicKeysWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListSSHPublicKeysWithContextCalls())
func (mock *IAMAPIMock) ListSSHPublicKeysWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListSSHPublicKeysInput *iam.ListSSHPublicKeysInput
		Options                []request.Option
	}
	mock.lockListSSHPublicKeysWithContext.RLock()
	calls = mock.calls.ListSSHPublicKeysWithContext
	mock.lockListSSHPublicKeysWithContext.RUnlock()
	return calls
}

// ListServerCertificates calls ListServerCertificatesFunc.
func (mock *IAMAPIMock) ListServerCertificates(listServerCertificatesInput *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	if mock.ListServerCertificatesFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesFunc: method is nil but IAMAPI.ListServerCertificates was just called")
	}
	callInfo := struct {
		ListServerCertificatesInput *iam.ListServerCertificatesInput
	}{
		ListServerCertificatesInput: listServerCertificatesInput,
	}
	mock.lockListServerCertificates.Lock()
	mock.calls.ListServerCertificates = append(mock.calls.ListServerCertificates, callInfo)
	mock.lockListServerCertificates.Unlock()
	return mock.ListServerCertificatesFunc(listServerCertificatesInput)
}

// ListServerCertificatesCalls gets all the calls that were made to ListServerCertificates.
// Check the length with:
//
//	len(mockedIAMAPI.ListServerCertificatesCalls())
func (mock *IAMAPIMock) ListServerCertificatesCalls() []struct {
	ListServerCertificatesInput *iam.ListServerCertificatesInput
} {
	var calls []struct {
		ListServerCertificatesInput *iam.ListServerCertificatesInput
	}
	mock.lockListServerCertificates.RLock()
	calls = mock.calls.ListServerCertificates
	mock.lockListServerCertificates.RUnlock()
	return calls
}

// ListServerCertificatesPages calls ListServerCertificatesPagesFunc.
func (mock *IAMAPIMock) ListServerCertificatesPages(listServerCertificatesInput *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool) error {
	if mock.ListServerCertificatesPagesFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesPagesFunc: method is nil but IAMAPI.ListServerCertificatesPages was just called")
	}
	callInfo := struct {
		ListServerCertificatesInput *iam.ListServerCertificatesInput
		Fn                          func(*iam.ListServerCertificatesOutput, bool) bool
	}{
		ListServerCertificatesInput: listServerCertificatesInput,
		Fn:                          fn,
	}
	mock.lockListServerCertificatesPages.Lock()
	mock.calls.ListServerCertificatesPages = append(mock.calls.ListServerCertificatesPages, callInfo)
	mock.lockListServerCertificatesPages.Unlock()
	return mock.ListServerCertificatesPagesFunc(listServerCertificatesInput, fn)
}

// ListServerCertificatesPagesCalls gets all the calls that were made to ListServerCertificatesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListServerCertificatesPagesCalls())
func (mock *IAMAPIMock) ListServerCertificatesPagesCalls() []struct {
	ListServerCertificatesInput *iam.ListServerCertificatesInput
	Fn                          func(*iam.ListServerCertificatesOutput, bool) bool
} {
	var calls []struct {
		ListServerCertificatesInput *iam.ListServerCertificatesInput
		Fn                          func(*iam.ListServerCertificatesOutput, bool) bool
	}
	mock.lockListServerCertificatesPages.RLock()
	calls = mock.calls.ListServerCertificatesPages
	mock.lockListServerCertificatesPages.RUnlock()
	return calls
}

// ListServerCertificatesPagesWithContext calls ListServerCertificatesPagesWithContextFunc.
func (mock *IAMAPIMock) ListServerCertificatesPagesWithContext(contextMoqParam context.Context, listServerCertificatesInput *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool, options ...request.Option) error {
	if mock.ListServerCertificatesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesPagesWithContextFunc: method is nil but IAMAPI.ListServerCertificatesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		ListServerCertificatesInput *iam.ListServerCertificatesInput
		Fn                          func(*iam.ListServerCertificatesOutput, bool) bool
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		ListServerCertificatesInput: listServerCertificatesInput,
		Fn:                          fn,
		Options:                     options,
	}
	mock.lockListServerCertificatesPagesWithContext.Lock()
	mock.calls.ListServerCertificatesPagesWithContext = append(mock.calls.ListServerCertificatesPagesWithContext, callInfo)
	mock.lockListServerCertificatesPagesWithContext.Unlock()
	return mock.ListServerCertificatesPagesWithContextFunc(contextMoqParam, listServerCertificatesInput, fn, options...)
}

// ListServerCertificatesPagesWithContextCalls gets all the calls that were made to ListServerCertificatesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListServerCertificatesPagesWithContextCalls())
func (mock *IAMAPIMock) ListServerCertificatesPagesWithContextCalls() []struct {
	ContextMoqParam             context.Context
	ListServerCertificatesInput *iam.ListServerCertificatesInput
	Fn                          func(*iam.ListServerCertificatesOutput, bool) bool
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		ListServerCertificatesInput *iam.ListServerCertificatesInput
		Fn                          func(*iam.ListServerCertificatesOutput, bool) bool
		Options                     []request.Option
	}
	mock.lockListServerCertificatesPagesWithContext.RLock()
	calls = mock.calls.ListServerCertificatesPagesWithContext
	mock.lockListServerCertificatesPagesWithContext.RUnlock()
	return calls
}

// ListServerCertificatesRequest calls ListServerCertificatesRequestFunc.
func (mock *IAMAPIMock) ListServerCertificatesRequest(listServerCertificatesInput *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput) {
	if mock.ListServerCertificatesRequestFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesRequestFunc: method is nil but IAMAPI.ListServerCertificatesRequest was just called")
	}
	callInfo := struct {
		ListServerCertificatesInput *iam.ListServerCertificatesInput
	}{
		ListServerCertificatesInput: listServerCertificatesInput,
	}
	mock.lockListServerCertificatesRequest.Lock()
	mock.calls.ListServerCertificatesRequest = append(mock.calls.ListServerCertificatesRequest, callInfo)
	mock.lockListServerCertificatesRequest.Unlock()
	return mock.ListServerCertificatesRequestFunc(listServerCertificatesInput)
}

// ListServerCertificatesRequestCalls gets all the calls that were made to ListServerCertificatesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListServerCertificatesRequestCalls())
func (mock *IAMAPIMock) ListServerCertificatesRequestCalls() []struct {
	ListServerCertificatesInput *iam.ListServerCertificatesInput
} {
	var calls []struct {
		ListServerCertificatesInput *iam.ListServerCertificatesInput
	}
	mock.lockListServerCertificatesRequest.RLock()
	calls = mock.calls.ListServerCertificatesRequest
	mock.lockListServerCertificatesRequest.RUnlock()
	return calls
}

// ListServerCertificatesWithContext calls ListServerCertificatesWithContextFunc.
func (mock *IAMAPIMock) ListServerCertificatesWithContext(contextMoqParam context.Context, listServerCertificatesInput *iam.ListServerCertificatesInput, options ...request.Option) (*iam.ListServerCertificatesOutput, error) {
	if mock.ListServerCertificatesWithContextFunc == nil {
		panic("IAMAPIMock.ListServerCertificatesWithContextFunc: method is nil but IAMAPI.ListServerCertificatesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		ListServerCertificatesInput *iam.ListServerCertificatesInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		ListServerCertificatesInput: listServerCertificatesInput,
		Options:                     options,
	}
	mock.lockListServerCertificatesWithContext.Lock()
	mock.calls.ListServerCertificatesWithContext = append(mock.calls.ListServerCertificatesWithContext, callInfo)
	mock.lockListServerCertificatesWithContext.Unlock()
	return mock.ListServerCertificatesWithContextFunc(contextMoqParam, listServerCertificatesInput, options...)
}

// ListServerCertificatesWithContextCalls gets all the calls that were made to ListServerCertificatesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListServerCertificatesWithContextCalls())
func (mock *IAMAPIMock) ListServerCertificatesWithContextCalls() []struct {
	ContextMoqParam             context.Context
	ListServerCertificatesInput *iam.ListServerCertificatesInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		ListServerCertificatesInput *iam.ListServerCertificatesInput
		Options                     []request.Option
	}
	mock.lockListServerCertificatesWithContext.RLock()
	calls = mock.calls.ListServerCertificatesWithContext
	mock.lockListServerCertificatesWithContext.RUnlock()
	return calls
}

// ListServiceSpecificCredentials calls ListServiceSpecificCredentialsFunc.
func (mock *IAMAPIMock) ListServiceSpecificCredentials(listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	if mock.ListServiceSpecificCredentialsFunc == nil {
		panic("IAMAPIMock.ListServiceSpecificCredentialsFunc: method is nil but IAMAPI.ListServiceSpecificCredentials was just called")
	}
	callInfo := struct {
		ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
	}{
		ListServiceSpecificCredentialsInput: listServiceSpecificCredentialsInput,
	}
	mock.lockListServiceSpecificCredentials.Lock()
	mock.calls.ListServiceSpecificCredentials = append(mock.calls.ListServiceSpecificCredentials, callInfo)
	mock.lockListServiceSpecificCredentials.Unlock()
	return mock.ListServiceSpecificCredentialsFunc(listServiceSpecificCredentialsInput)
}

// ListServiceSpecificCredentialsCalls gets all the calls that were made to ListServiceSpecificCredentials.
// Check the length with:
//
//	len(mockedIAMAPI.ListServiceSpecificCredentialsCalls())
func (mock *IAMAPIMock) ListServiceSpecificCredentialsCalls() []struct {
	ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
} {
	var calls []struct {
		ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
	}
	mock.lockListServiceSpecificCredentials.RLock()
	calls = mock.calls.ListServiceSpecificCredentials
	mock.lockListServiceSpecificCredentials.RUnlock()
	return calls
}

// ListServiceSpecificCredentialsRequest calls ListServiceSpecificCredentialsRequestFunc.
func (mock *IAMAPIMock) ListServiceSpecificCredentialsRequest(listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput) {
	if mock.ListServiceSpecificCredentialsRequestFunc == nil {
		panic("IAMAPIMock.ListServiceSpecificCredentialsRequestFunc: method is nil but IAMAPI.ListServiceSpecificCredentialsRequest was just called")
	}
	callInfo := struct {
		ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
	}{
		ListServiceSpecificCredentialsInput: listServiceSpecificCredentialsInput,
	}
	mock.lockListServiceSpecificCredentialsRequest.Lock()
	mock.calls.ListServiceSpecificCredentialsRequest = append(mock.calls.ListServiceSpecificCredentialsRequest, callInfo)
	mock.lockListServiceSpecificCredentialsRequest.Unlock()
	return mock.ListServiceSpecificCredentialsRequestFunc(listServiceSpecificCredentialsInput)
}

// ListServiceSpecificCredentialsRequestCalls gets all the calls that were made to ListServiceSpecificCredentialsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListServiceSpecificCredentialsRequestCalls())
func (mock *IAMAPIMock) ListServiceSpecificCredentialsRequestCalls() []struct {
	ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
} {
	var calls []struct {
		ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
	}
	mock.lockListServiceSpecificCredentialsRequest.RLock()
	calls = mock.calls.ListServiceSpecificCredentialsRequest
	mock.lockListServiceSpecificCredentialsRequest.RUnlock()
	return calls
}

// ListServiceSpecificCredentialsWithContext calls ListServiceSpecificCredentialsWithContextFunc.
func (mock *IAMAPIMock) ListServiceSpecificCredentialsWithContext(contextMoqParam context.Context, listServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput, options ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
	if mock.ListServiceSpecificCredentialsWithContextFunc == nil {
		panic("IAMAPIMock.ListServiceSpecificCredentialsWithContextFunc: method is nil but IAMAPI.ListServiceSpecificCredentialsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                     context.Context
		ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
		Options                             []request.Option
	}{
		ContextMoqParam:                     contextMoqParam,
		ListServiceSpecificCredentialsInput: listServiceSpecificCredentialsInput,
		Options:                             options,
	}
	mock.lockListServiceSpecificCredentialsWithContext.Lock()
	mock.calls.ListServiceSpecificCredentialsWithContext = append(mock.calls.ListServiceSpecificCredentialsWithContext, callInfo)
	mock.lockListServiceSpecificCredentialsWithContext.Unlock()
	return mock.ListServiceSpecificCredentialsWithContextFunc(contextMoqParam, listServiceSpecificCredentialsInput, options...)
}

// ListServiceSpecificCredentialsWithContextCalls gets all the calls that were made to ListServiceSpecificCredentialsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListServiceSpecificCredentialsWithContextCalls())
func (mock *IAMAPIMock) ListServiceSpecificCredentialsWithContextCalls() []struct {
	ContextMoqParam                     context.Context
	ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
	Options                             []request.Option
} {
	var calls []struct {
		ContextMoqParam                     context.Context
		ListServiceSpecificCredentialsInput *iam.ListServiceSpecificCredentialsInput
		Options                             []request.Option
	}
	mock.lockListServiceSpecificCredentialsWithContext.RLock()
	calls = mock.calls.ListServiceSpecificCredentialsWithContext
	mock.lockListServiceSpecificCredentialsWithContext.RUnlock()
	return calls
}

// ListSigningCertificates calls ListSigningCertificatesFunc.
func (mock *IAMAPIMock) ListSigningCertificates(listSigningCertificatesInput *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	if mock.ListSigningCertificatesFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesFunc: method is nil but IAMAPI.ListSigningCertificates was just called")
	}
	callInfo := struct {
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
	}{
		ListSigningCertificatesInput: listSigningCertificatesInput,
	}
	mock.lockListSigningCertificates.Lock()
	mock.calls.ListSigningCertificates = append(mock.calls.ListSigningCertificates, callInfo)
	mock.lockListSigningCertificates.Unlock()
	return mock.ListSigningCertificatesFunc(listSigningCertificatesInput)
}

// ListSigningCertificatesCalls gets all the calls that were made to ListSigningCertificates.
// Check the length with:
//
//	len(mockedIAMAPI.ListSigningCertificatesCalls())
func (mock *IAMAPIMock) ListSigningCertificatesCalls() []struct {
	ListSigningCertificatesInput *iam.ListSigningCertificatesInput
} {
	var calls []struct {
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
	}
	mock.lockListSigningCertificates.RLock()
	calls = mock.calls.ListSigningCertificates
	mock.lockListSigningCertificates.RUnlock()
	return calls
}

// ListSigningCertificatesPages calls ListSigningCertificatesPagesFunc.
func (mock *IAMAPIMock) ListSigningCertificatesPages(listSigningCertificatesInput *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool) error {
	if mock.ListSigningCertificatesPagesFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesPagesFunc: method is nil but IAMAPI.ListSigningCertificatesPages was just called")
	}
	callInfo := struct {
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		Fn                           func(*iam.ListSigningCertificatesOutput, bool) bool
	}{
		ListSigningCertificatesInput: listSigningCertificatesInput,
		Fn:                           fn,
	}
	mock.lockListSigningCertificatesPages.Lock()
	mock.calls.ListSigningCertificatesPages = append(mock.calls.ListSigningCertificatesPages, callInfo)
	mock.lockListSigningCertificatesPages.Unlock()
	return mock.ListSigningCertificatesPagesFunc(listSigningCertificatesInput, fn)
}

// ListSigningCertificatesPagesCalls gets all the calls that were made to ListSigningCertificatesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListSigningCertificatesPagesCalls())
func (mock *IAMAPIMock) ListSigningCertificatesPagesCalls() []struct {
	ListSigningCertificatesInput *iam.ListSigningCertificatesInput
	Fn                           func(*iam.ListSigningCertificatesOutput, bool) bool
} {
	var calls []struct {
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		Fn                           func(*iam.ListSigningCertificatesOutput, bool) bool
	}
	mock.lockListSigningCertificatesPages.RLock()
	calls = mock.calls.ListSigningCertificatesPages
	mock.lockListSigningCertificatesPages.RUnlock()
	return calls
}

// ListSigningCertificatesPagesWithContext calls ListSigningCertificatesPagesWithContextFunc.
func (mock *IAMAPIMock) ListSigningCertificatesPagesWithContext(contextMoqParam context.Context, listSigningCertificatesInput *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool, options ...request.Option) error {
	if mock.ListSigningCertificatesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesPagesWithContextFunc: method is nil but IAMAPI.ListSigningCertificatesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		Fn                           func(*iam.ListSigningCertificatesOutput, bool) bool
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		ListSigningCertificatesInput: listSigningCertificatesInput,
		Fn:                           fn,
		Options:                      options,
	}
	mock.lockListSigningCertificatesPagesWithContext.Lock()
	mock.calls.ListSigningCertificatesPagesWithContext = append(mock.calls.ListSigningCertificatesPagesWithContext, callInfo)
	mock.lockListSigningCertificatesPagesWithContext.Unlock()
	return mock.ListSigningCertificatesPagesWithContextFunc(contextMoqParam, listSigningCertificatesInput, fn, options...)
}

// ListSigningCertificatesPagesWithContextCalls gets all the calls that were made to ListSigningCertificatesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListSigningCertificatesPagesWithContextCalls())
func (mock *IAMAPIMock) ListSigningCertificatesPagesWithContextCalls() []struct {
	ContextMoqParam              context.Context
	ListSigningCertificatesInput *iam.ListSigningCertificatesInput
	Fn                           func(*iam.ListSigningCertificatesOutput, bool) bool
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		Fn                           func(*iam.ListSigningCertificatesOutput, bool) bool
		Options                      []request.Option
	}
	mock.lockListSigningCertificatesPagesWithContext.RLock()
	calls = mock.calls.ListSigningCertificatesPagesWithContext
	mock.lockListSigningCertificatesPagesWithContext.RUnlock()
	return calls
}

// ListSigningCertificatesRequest calls ListSigningCertificatesRequestFunc.
func (mock *IAMAPIMock) ListSigningCertificatesRequest(listSigningCertificatesInput *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput) {
	if mock.ListSigningCertificatesRequestFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesRequestFunc: method is nil but IAMAPI.ListSigningCertificatesRequest was just called")
	}
	callInfo := struct {
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
	}{
		ListSigningCertificatesInput: listSigningCertificatesInput,
	}
	mock.lockListSigningCertificatesRequest.Lock()
	mock.calls.ListSigningCertificatesRequest = append(mock.calls.ListSigningCertificatesRequest, callInfo)
	mock.lockListSigningCertificatesRequest.Unlock()
	return mock.ListSigningCertificatesRequestFunc(listSigningCertificatesInput)
}

// ListSigningCertificatesRequestCalls gets all the calls that were made to ListSigningCertificatesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListSigningCertificatesRequestCalls())
func (mock *IAMAPIMock) ListSigningCertificatesRequestCalls() []struct {
	ListSigningCertificatesInput *iam.ListSigningCertificatesInput
} {
	var calls []struct {
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
	}
	mock.lockListSigningCertificatesRequest.RLock()
	calls = mock.calls.ListSigningCertificatesRequest
	mock.lockListSigningCertificatesRequest.RUnlock()
	return calls
}

// ListSigningCertificatesWithContext calls ListSigningCertificatesWithContextFunc.
func (mock *IAMAPIMock) ListSigningCertificatesWithContext(contextMoqParam context.Context, listSigningCertificatesInput *iam.ListSigningCertificatesInput, options ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
	if mock.ListSigningCertificatesWithContextFunc == nil {
		panic("IAMAPIMock.ListSigningCertificatesWithContextFunc: method is nil but IAMAPI.ListSigningCertificatesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		ListSigningCertificatesInput: listSigningCertificatesInput,
		Options:                      options,
	}
	mock.lockListSigningCertificatesWithContext.Lock()
	mock.calls.ListSigningCertificatesWithContext = append(mock.calls.ListSigningCertificatesWithContext, callInfo)
	mock.lockListSigningCertificatesWithContext.Unlock()
	return mock.ListSigningCertificatesWithContextFunc(contextMoqParam, listSigningCertificatesInput, options...)
}

// ListSigningCertificatesWithContextCalls gets all the calls that were made to ListSigningCertificatesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListSigningCertificatesWithContextCalls())
func (mock *IAMAPIMock) ListSigningCertificatesWithContextCalls() []struct {
	ContextMoqParam              context.Context
	ListSigningCertificatesInput *iam.ListSigningCertificatesInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		ListSigningCertificatesInput *iam.ListSigningCertificatesInput
		Options                      []request.Option
	}
	mock.lockListSigningCertificatesWithContext.RLock()
	calls = mock.calls.ListSigningCertificatesWithContext
	mock.lockListSigningCertificatesWithContext.RUnlock()
	return calls
}

// ListUserPolicies calls ListUserPoliciesFunc.
func (mock *IAMAPIMock) ListUserPolicies(listUserPoliciesInput *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	if mock.ListUserPoliciesFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesFunc: method is nil but IAMAPI.ListUserPolicies was just called")
	}
	callInfo := struct {
		ListUserPoliciesInput *iam.ListUserPoliciesInput
	}{
		ListUserPoliciesInput: listUserPoliciesInput,
	}
	mock.lockListUserPolicies.Lock()
	mock.calls.ListUserPolicies = append(mock.calls.ListUserPolicies, callInfo)
	mock.lockListUserPolicies.Unlock()
	return mock.ListUserPoliciesFunc(listUserPoliciesInput)
}

// ListUserPoliciesCalls gets all the calls that were made to ListUserPolicies.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserPoliciesCalls())
func (mock *IAMAPIMock) ListUserPoliciesCalls() []struct {
	ListUserPoliciesInput *iam.ListUserPoliciesInput
} {
	var calls []struct {
		ListUserPoliciesInput *iam.ListUserPoliciesInput
	}
	mock.lockListUserPolicies.RLock()
	calls = mock.calls.ListUserPolicies
	mock.lockListUserPolicies.RUnlock()
	return calls
}

// ListUserPoliciesPages calls ListUserPoliciesPagesFunc.
func (mock *IAMAPIMock) ListUserPoliciesPages(listUserPoliciesInput *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool) error {
	if mock.ListUserPoliciesPagesFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesPagesFunc: method is nil but IAMAPI.ListUserPoliciesPages was just called")
	}
	callInfo := struct {
		ListUserPoliciesInput *iam.ListUserPoliciesInput
		Fn                    func(*iam.ListUserPoliciesOutput, bool) bool
	}{
		ListUserPoliciesInput: listUserPoliciesInput,
		Fn:                    fn,
	}
	mock.lockListUserPoliciesPages.Lock()
	mock.calls.ListUserPoliciesPages = append(mock.calls.ListUserPoliciesPages, callInfo)
	mock.lockListUserPoliciesPages.Unlock()
	return mock.ListUserPoliciesPagesFunc(listUserPoliciesInput, fn)
}

// ListUserPoliciesPagesCalls gets all the calls that were made to ListUserPoliciesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserPoliciesPagesCalls())
func (mock *IAMAPIMock) ListUserPoliciesPagesCalls() []struct {
	ListUserPoliciesInput *iam.ListUserPoliciesInput
	Fn                    func(*iam.ListUserPoliciesOutput, bool) bool
} {
	var calls []struct {
		ListUserPoliciesInput *iam.ListUserPoliciesInput
		Fn                    func(*iam.ListUserPoliciesOutput, bool) bool
	}
	mock.lockListUserPoliciesPages.RLock()
	calls = mock.calls.ListUserPoliciesPages
	mock.lockListUserPoliciesPages.RUnlock()
	return calls
}

// ListUserPoliciesPagesWithContext calls ListUserPoliciesPagesWithContextFunc.
func (mock *IAMAPIMock) ListUserPoliciesPagesWithContext(contextMoqParam context.Context, listUserPoliciesInput *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool, options ...request.Option) error {
	if mock.ListUserPoliciesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesPagesWithContextFunc: method is nil but IAMAPI.ListUserPoliciesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		ListUserPoliciesInput *iam.ListUserPoliciesInput
		Fn                    func(*iam.ListUserPoliciesOutput, bool) bool
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		ListUserPoliciesInput: listUserPoliciesInput,
		Fn:                    fn,
		Options:               options,
	}
	mock.lockListUserPoliciesPagesWithContext.Lock()
	mock.calls.ListUserPoliciesPagesWithContext = append(mock.calls.ListUserPoliciesPagesWithContext, callInfo)
	mock.lockListUserPoliciesPagesWithContext.Unlock()
	return mock.ListUserPoliciesPagesWithContextFunc(contextMoqParam, listUserPoliciesInput, fn, options...)
}

// ListUserPoliciesPagesWithContextCalls gets all the calls that were made to ListUserPoliciesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserPoliciesPagesWithContextCalls())
func (mock *IAMAPIMock) ListUserPoliciesPagesWithContextCalls() []struct {
	ContextMoqParam       context.Context
	ListUserPoliciesInput *iam.ListUserPoliciesInput
	Fn                    func(*iam.ListUserPoliciesOutput, bool) bool
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ListUserPoliciesInput *iam.ListUserPoliciesInput
		Fn                    func(*iam.ListUserPoliciesOutput, bool) bool
		Options               []request.Option
	}
	mock.lockListUserPoliciesPagesWithContext.RLock()
	calls = mock.calls.ListUserPoliciesPagesWithContext
	mock.lockListUserPoliciesPagesWithContext.RUnlock()
	return calls
}

// ListUserPoliciesRequest calls ListUserPoliciesRequestFunc.
func (mock *IAMAPIMock) ListUserPoliciesRequest(listUserPoliciesInput *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput) {
	if mock.ListUserPoliciesRequestFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesRequestFunc: method is nil but IAMAPI.ListUserPoliciesRequest was just called")
	}
	callInfo := struct {
		ListUserPoliciesInput *iam.ListUserPoliciesInput
	}{
		ListUserPoliciesInput: listUserPoliciesInput,
	}
	mock.lockListUserPoliciesRequest.Lock()
	mock.calls.ListUserPoliciesRequest = append(mock.calls.ListUserPoliciesRequest, callInfo)
	mock.lockListUserPoliciesRequest.Unlock()
	return mock.ListUserPoliciesRequestFunc(listUserPoliciesInput)
}

// ListUserPoliciesRequestCalls gets all the calls that were made to ListUserPoliciesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserPoliciesRequestCalls())
func (mock *IAMAPIMock) ListUserPoliciesRequestCalls() []struct {
	ListUserPoliciesInput *iam.ListUserPoliciesInput
} {
	var calls []struct {
		ListUserPoliciesInput *iam.ListUserPoliciesInput
	}
	mock.lockListUserPoliciesRequest.RLock()
	calls = mock.calls.ListUserPoliciesRequest
	mock.lockListUserPoliciesRequest.RUnlock()
	return calls
}

// ListUserPoliciesWithContext calls ListUserPoliciesWithContextFunc.
func (mock *IAMAPIMock) ListUserPoliciesWithContext(contextMoqParam context.Context, listUserPoliciesInput *iam.ListUserPoliciesInput, options ...request.Option) (*iam.ListUserPoliciesOutput, error) {
	if mock.ListUserPoliciesWithContextFunc == nil {
		panic("IAMAPIMock.ListUserPoliciesWithContextFunc: method is nil but IAMAPI.ListUserPoliciesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		ListUserPoliciesInput *iam.ListUserPoliciesInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		ListUserPoliciesInput: listUserPoliciesInput,
		Options:               options,
	}
	mock.lockListUserPoliciesWithContext.Lock()
	mock.calls.ListUserPoliciesWithContext = append(mock.calls.ListUserPoliciesWithContext, callInfo)
	mock.lockListUserPoliciesWithContext.Unlock()
	return mock.ListUserPoliciesWithContextFunc(contextMoqParam, listUserPoliciesInput, options...)
}

// ListUserPoliciesWithContextCalls gets all the calls that were made to ListUserPoliciesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserPoliciesWithContextCalls())
func (mock *IAMAPIMock) ListUserPoliciesWithContextCalls() []struct {
	ContextMoqParam       context.Context
	ListUserPoliciesInput *iam.ListUserPoliciesInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ListUserPoliciesInput *iam.ListUserPoliciesInput
		Options               []request.Option
	}
	mock.lockListUserPoliciesWithContext.RLock()
	calls = mock.calls.ListUserPoliciesWithContext
	mock.lockListUserPoliciesWithContext.RUnlock()
	return calls
}

// ListUserTags calls ListUserTagsFunc.
func (mock *IAMAPIMock) ListUserTags(listUserTagsInput *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
	if mock.ListUserTagsFunc == nil {
		panic("IAMAPIMock.ListUserTagsFunc: method is nil but IAMAPI.ListUserTags was just called")
	}
	callInfo := struct {
		ListUserTagsInput *iam.ListUserTagsInput
	}{
		ListUserTagsInput: listUserTagsInput,
	}
	mock.lockListUserTags.Lock()
	mock.calls.ListUserTags = append(mock.calls.ListUserTags, callInfo)
	mock.lockListUserTags.Unlock()
	return mock.ListUserTagsFunc(listUserTagsInput)
}

// ListUserTagsCalls gets all the calls that were made to ListUserTags.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserTagsCalls())
func (mock *IAMAPIMock) ListUserTagsCalls() []struct {
	ListUserTagsInput *iam.ListUserTagsInput
} {
	var calls []struct {
		ListUserTagsInput *iam.ListUserTagsInput
	}
	mock.lockListUserTags.RLock()
	calls = mock.calls.ListUserTags
	mock.lockListUserTags.RUnlock()
	return calls
}

// ListUserTagsRequest calls ListUserTagsRequestFunc.
func (mock *IAMAPIMock) ListUserTagsRequest(listUserTagsInput *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput) {
	if mock.ListUserTagsRequestFunc == nil {
		panic("IAMAPIMock.ListUserTagsRequestFunc: method is nil but IAMAPI.ListUserTagsRequest was just called")
	}
	callInfo := struct {
		ListUserTagsInput *iam.ListUserTagsInput
	}{
		ListUserTagsInput: listUserTagsInput,
	}
	mock.lockListUserTagsRequest.Lock()
	mock.calls.ListUserTagsRequest = append(mock.calls.ListUserTagsRequest, callInfo)
	mock.lockListUserTagsRequest.Unlock()
	return mock.ListUserTagsRequestFunc(listUserTagsInput)
}

// ListUserTagsRequestCalls gets all the calls that were made to ListUserTagsRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserTagsRequestCalls())
func (mock *IAMAPIMock) ListUserTagsRequestCalls() []struct {
	ListUserTagsInput *iam.ListUserTagsInput
} {
	var calls []struct {
		ListUserTagsInput *iam.ListUserTagsInput
	}
	mock.lockListUserTagsRequest.RLock()
	calls = mock.calls.ListUserTagsRequest
	mock.lockListUserTagsRequest.RUnlock()
	return calls
}

// ListUserTagsWithContext calls ListUserTagsWithContextFunc.
func (mock *IAMAPIMock) ListUserTagsWithContext(contextMoqParam context.Context, listUserTagsInput *iam.ListUserTagsInput, options ...request.Option) (*iam.ListUserTagsOutput, error) {
	if mock.ListUserTagsWithContextFunc == nil {
		panic("IAMAPIMock.ListUserTagsWithContextFunc: method is nil but IAMAPI.ListUserTagsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		ListUserTagsInput *iam.ListUserTagsInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		ListUserTagsInput: listUserTagsInput,
		Options:           options,
	}
	mock.lockListUserTagsWithContext.Lock()
	mock.calls.ListUserTagsWithContext = append(mock.calls.ListUserTagsWithContext, callInfo)
	mock.lockListUserTagsWithContext.Unlock()
	return mock.ListUserTagsWithContextFunc(contextMoqParam, listUserTagsInput, options...)
}

// ListUserTagsWithContextCalls gets all the calls that were made to ListUserTagsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListUserTagsWithContextCalls())
func (mock *IAMAPIMock) ListUserTagsWithContextCalls() []struct {
	ContextMoqParam   context.Context
	ListUserTagsInput *iam.ListUserTagsInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		ListUserTagsInput *iam.ListUserTagsInput
		Options           []request.Option
	}
	mock.lockListUserTagsWithContext.RLock()
	calls = mock.calls.ListUserTagsWithContext
	mock.lockListUserTagsWithContext.RUnlock()
	return calls
}

// ListUsers calls ListUsersFunc.
func (mock *IAMAPIMock) ListUsers(listUsersInput *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	if mock.ListUsersFunc == nil {
		panic("IAMAPIMock.ListUsersFunc: method is nil but IAMAPI.ListUsers was just called")
	}
	callInfo := struct {
		ListUsersInput *iam.ListUsersInput
	}{
		ListUsersInput: listUsersInput,
	}
	mock.lockListUsers.Lock()
	mock.calls.ListUsers = append(mock.calls.ListUsers, callInfo)
	mock.lockListUsers.Unlock()
	return mock.ListUsersFunc(listUsersInput)
}

// ListUsersCalls gets all the calls that were made to ListUsers.
// Check the length with:
//
//	len(mockedIAMAPI.ListUsersCalls())
func (mock *IAMAPIMock) ListUsersCalls() []struct {
	ListUsersInput *iam.ListUsersInput
} {
	var calls []struct {
		ListUsersInput *iam.ListUsersInput
	}
	mock.lockListUsers.RLock()
	calls = mock.calls.ListUsers
	mock.lockListUsers.RUnlock()
	return calls
}

// ListUsersPages calls ListUsersPagesFunc.
func (mock *IAMAPIMock) ListUsersPages(listUsersInput *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool) error {
	if mock.ListUsersPagesFunc == nil {
		panic("IAMAPIMock.ListUsersPagesFunc: method is nil but IAMAPI.ListUsersPages was just called")
	}
	callInfo := struct {
		ListUsersInput *iam.ListUsersInput
		Fn             func(*iam.ListUsersOutput, bool) bool
	}{
		ListUsersInput: listUsersInput,
		Fn:             fn,
	}
	mock.lockListUsersPages.Lock()
	mock.calls.ListUsersPages = append(mock.calls.ListUsersPages, callInfo)
	mock.lockListUsersPages.Unlock()
	return mock.ListUsersPagesFunc(listUsersInput, fn)
}

// ListUsersPagesCalls gets all the calls that were made to ListUsersPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListUsersPagesCalls())
func (mock *IAMAPIMock) ListUsersPagesCalls() []struct {
	ListUsersInput *iam.ListUsersInput
	Fn             func(*iam.ListUsersOutput, bool) bool
} {
	var calls []struct {
		ListUsersInput *iam.ListUsersInput
		Fn             func(*iam.ListUsersOutput, bool) bool
	}
	mock.lockListUsersPages.RLock()
	calls = mock.calls.ListUsersPages
	mock.lockListUsersPages.RUnlock()
	return calls
}

// ListUsersPagesWithContext calls ListUsersPagesWithContextFunc.
func (mock *IAMAPIMock) ListUsersPagesWithContext(contextMoqParam context.Context, listUsersInput *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool, options ...request.Option) error {
	if mock.ListUsersPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListUsersPagesWithContextFunc: method is nil but IAMAPI.ListUsersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListUsersInput  *iam.ListUsersInput
		Fn              func(*iam.ListUsersOutput, bool) bool
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListUsersInput:  listUsersInput,
		Fn:              fn,
		Options:         options,
	}
	mock.lockListUsersPagesWithContext.Lock()
	mock.calls.ListUsersPagesWithContext = append(mock.calls.ListUsersPagesWithContext, callInfo)
	mock.lockListUsersPagesWithContext.Unlock()
	return mock.ListUsersPagesWithContextFunc(contextMoqParam, listUsersInput, fn, options...)
}

// ListUsersPagesWithContextCalls gets all the calls that were made to ListUsersPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListUsersPagesWithContextCalls())
func (mock *IAMAPIMock) ListUsersPagesWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListUsersInput  *iam.ListUsersInput
	Fn              func(*iam.ListUsersOutput, bool) bool
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListUsersInput  *iam.ListUsersInput
		Fn              func(*iam.ListUsersOutput, bool) bool
		Options         []request.Option
	}
	mock.lockListUsersPagesWithContext.RLock()
	calls = mock.calls.ListUsersPagesWithContext
	mock.lockListUsersPagesWithContext.RUnlock()
	return calls
}

// ListUsersRequest calls ListUsersRequestFunc.
func (mock *IAMAPIMock) ListUsersRequest(listUsersInput *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput) {
	if mock.ListUsersRequestFunc == nil {
		panic("IAMAPIMock.ListUsersRequestFunc: method is nil but IAMAPI.ListUsersRequest was just called")
	}
	callInfo := struct {
		ListUsersInput *iam.ListUsersInput
	}{
		ListUsersInput: listUsersInput,
	}
	mock.lockListUsersRequest.Lock()
	mock.calls.ListUsersRequest = append(mock.calls.ListUsersRequest, callInfo)
	mock.lockListUsersRequest.Unlock()
	return mock.ListUsersRequestFunc(listUsersInput)
}

// ListUsersRequestCalls gets all the calls that were made to ListUsersRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListUsersRequestCalls())
func (mock *IAMAPIMock) ListUsersRequestCalls() []struct {
	ListUsersInput *iam.ListUsersInput
} {
	var calls []struct {
		ListUsersInput *iam.ListUsersInput
	}
	mock.lockListUsersRequest.RLock()
	calls = mock.calls.ListUsersRequest
	mock.lockListUsersRequest.RUnlock()
	return calls
}

// ListUsersWithContext calls ListUsersWithContextFunc.
func (mock *IAMAPIMock) ListUsersWithContext(contextMoqParam context.Context, listUsersInput *iam.ListUsersInput, options ...request.Option) (*iam.ListUsersOutput, error) {
	if mock.ListUsersWithContextFunc == nil {
		panic("IAMAPIMock.ListUsersWithContextFunc: method is nil but IAMAPI.ListUsersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListUsersInput  *iam.ListUsersInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListUsersInput:  listUsersInput,
		Options:         options,
	}
	mock.lockListUsersWithContext.Lock()
	mock.calls.ListUsersWithContext = append(mock.calls.ListUsersWithContext, callInfo)
	mock.lockListUsersWithContext.Unlock()
	return mock.ListUsersWithContextFunc(contextMoqParam, listUsersInput, options...)
}

// ListUsersWithContextCalls gets all the calls that were made to ListUsersWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListUsersWithContextCalls())
func (mock *IAMAPIMock) ListUsersWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListUsersInput  *iam.ListUsersInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListUsersInput  *iam.ListUsersInput
		Options         []request.Option
	}
	mock.lockListUsersWithContext.RLock()
	calls = mock.calls.ListUsersWithContext
	mock.lockListUsersWithContext.RUnlock()
	return calls
}

// ListVirtualMFADevices calls ListVirtualMFADevicesFunc.
func (mock *IAMAPIMock) ListVirtualMFADevices(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	if mock.ListVirtualMFADevicesFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesFunc: method is nil but IAMAPI.ListVirtualMFADevices was just called")
	}
	callInfo := struct {
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
	}{
		ListVirtualMFADevicesInput: listVirtualMFADevicesInput,
	}
	mock.lockListVirtualMFADevices.Lock()
	mock.calls.ListVirtualMFADevices = append(mock.calls.ListVirtualMFADevices, callInfo)
	mock.lockListVirtualMFADevices.Unlock()
	return mock.ListVirtualMFADevicesFunc(listVirtualMFADevicesInput)
}

// ListVirtualMFADevicesCalls gets all the calls that were made to ListVirtualMFADevices.
// Check the length with:
//
//	len(mockedIAMAPI.ListVirtualMFADevicesCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesCalls() []struct {
	ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
} {
	var calls []struct {
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
	}
	mock.lockListVirtualMFADevices.RLock()
	calls = mock.calls.ListVirtualMFADevices
	mock.lockListVirtualMFADevices.RUnlock()
	return calls
}

// ListVirtualMFADevicesPages calls ListVirtualMFADevicesPagesFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesPages(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
	if mock.ListVirtualMFADevicesPagesFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesPagesFunc: method is nil but IAMAPI.ListVirtualMFADevicesPages was just called")
	}
	callInfo := struct {
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		Fn                         func(*iam.ListVirtualMFADevicesOutput, bool) bool
	}{
		ListVirtualMFADevicesInput: listVirtualMFADevicesInput,
		Fn:                         fn,
	}
	mock.lockListVirtualMFADevicesPages.Lock()
	mock.calls.ListVirtualMFADevicesPages = append(mock.calls.ListVirtualMFADevicesPages, callInfo)
	mock.lockListVirtualMFADevicesPages.Unlock()
	return mock.ListVirtualMFADevicesPagesFunc(listVirtualMFADevicesInput, fn)
}

// ListVirtualMFADevicesPagesCalls gets all the calls that were made to ListVirtualMFADevicesPages.
// Check the length with:
//
//	len(mockedIAMAPI.ListVirtualMFADevicesPagesCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesPagesCalls() []struct {
	ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
	Fn                         func(*iam.ListVirtualMFADevicesOutput, bool) bool
} {
	var calls []struct {
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		Fn                         func(*iam.ListVirtualMFADevicesOutput, bool) bool
	}
	mock.lockListVirtualMFADevicesPages.RLock()
	calls = mock.calls.ListVirtualMFADevicesPages
	mock.lockListVirtualMFADevicesPages.RUnlock()
	return calls
}

// ListVirtualMFADevicesPagesWithContext calls ListVirtualMFADevicesPagesWithContextFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesPagesWithContext(contextMoqParam context.Context, listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool, options ...request.Option) error {
	if mock.ListVirtualMFADevicesPagesWithContextFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesPagesWithContextFunc: method is nil but IAMAPI.ListVirtualMFADevicesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		Fn                         func(*iam.ListVirtualMFADevicesOutput, bool) bool
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		ListVirtualMFADevicesInput: listVirtualMFADevicesInput,
		Fn:                         fn,
		Options:                    options,
	}
	mock.lockListVirtualMFADevicesPagesWithContext.Lock()
	mock.calls.ListVirtualMFADevicesPagesWithContext = append(mock.calls.ListVirtualMFADevicesPagesWithContext, callInfo)
	mock.lockListVirtualMFADevicesPagesWithContext.Unlock()
	return mock.ListVirtualMFADevicesPagesWithContextFunc(contextMoqParam, listVirtualMFADevicesInput, fn, options...)
}

// ListVirtualMFADevicesPagesWithContextCalls gets all the calls that were made to ListVirtualMFADevicesPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListVirtualMFADevicesPagesWithContextCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesPagesWithContextCalls() []struct {
	ContextMoqParam            context.Context
	ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
	Fn                         func(*iam.ListVirtualMFADevicesOutput, bool) bool
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		Fn                         func(*iam.ListVirtualMFADevicesOutput, bool) bool
		Options                    []request.Option
	}
	mock.lockListVirtualMFADevicesPagesWithContext.RLock()
	calls = mock.calls.ListVirtualMFADevicesPagesWithContext
	mock.lockListVirtualMFADevicesPagesWithContext.RUnlock()
	return calls
}

// ListVirtualMFADevicesRequest calls ListVirtualMFADevicesRequestFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesRequest(listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput) {
	if mock.ListVirtualMFADevicesRequestFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesRequestFunc: method is nil but IAMAPI.ListVirtualMFADevicesRequest was just called")
	}
	callInfo := struct {
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
	}{
		ListVirtualMFADevicesInput: listVirtualMFADevicesInput,
	}
	mock.lockListVirtualMFADevicesRequest.Lock()
	mock.calls.ListVirtualMFADevicesRequest = append(mock.calls.ListVirtualMFADevicesRequest, callInfo)
	mock.lockListVirtualMFADevicesRequest.Unlock()
	return mock.ListVirtualMFADevicesRequestFunc(listVirtualMFADevicesInput)
}

// ListVirtualMFADevicesRequestCalls gets all the calls that were made to ListVirtualMFADevicesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ListVirtualMFADevicesRequestCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesRequestCalls() []struct {
	ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
} {
	var calls []struct {
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
	}
	mock.lockListVirtualMFADevicesRequest.RLock()
	calls = mock.calls.ListVirtualMFADevicesRequest
	mock.lockListVirtualMFADevicesRequest.RUnlock()
	return calls
}

// ListVirtualMFADevicesWithContext calls ListVirtualMFADevicesWithContextFunc.
func (mock *IAMAPIMock) ListVirtualMFADevicesWithContext(contextMoqParam context.Context, listVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput, options ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
	if mock.ListVirtualMFADevicesWithContextFunc == nil {
		panic("IAMAPIMock.ListVirtualMFADevicesWithContextFunc: method is nil but IAMAPI.ListVirtualMFADevicesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		ListVirtualMFADevicesInput: listVirtualMFADevicesInput,
		Options:                    options,
	}
	mock.lockListVirtualMFADevicesWithContext.Lock()
	mock.calls.ListVirtualMFADevicesWithContext = append(mock.calls.ListVirtualMFADevicesWithContext, callInfo)
	mock.lockListVirtualMFADevicesWithContext.Unlock()
	return mock.ListVirtualMFADevicesWithContextFunc(contextMoqParam, listVirtualMFADevicesInput, options...)
}

// ListVirtualMFADevicesWithContextCalls gets all the calls that were made to ListVirtualMFADevicesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ListVirtualMFADevicesWithContextCalls())
func (mock *IAMAPIMock) ListVirtualMFADevicesWithContextCalls() []struct {
	ContextMoqParam            context.Context
	ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		ListVirtualMFADevicesInput *iam.ListVirtualMFADevicesInput
		Options                    []request.Option
	}
	mock.lockListVirtualMFADevicesWithContext.RLock()
	calls = mock.calls.ListVirtualMFADevicesWithContext
	mock.lockListVirtualMFADevicesWithContext.RUnlock()
	return calls
}

// PutGroupPolicy calls PutGroupPolicyFunc.
func (mock *IAMAPIMock) PutGroupPolicy(putGroupPolicyInput *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	if mock.PutGroupPolicyFunc == nil {
		panic("IAMAPIMock.PutGroupPolicyFunc: method is nil but IAMAPI.PutGroupPolicy was just called")
	}
	callInfo := struct {
		PutGroupPolicyInput *iam.PutGroupPolicyInput
	}{
		PutGroupPolicyInput: putGroupPolicyInput,
	}
	mock.lockPutGroupPolicy.Lock()
	mock.calls.PutGroupPolicy = append(mock.calls.PutGroupPolicy, callInfo)
	mock.lockPutGroupPolicy.Unlock()
	return mock.PutGroupPolicyFunc(putGroupPolicyInput)
}

// PutGroupPolicyCalls gets all the calls that were made to PutGroupPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.PutGroupPolicyCalls())
func (mock *IAMAPIMock) PutGroupPolicyCalls() []struct {
	PutGroupPolicyInput *iam.PutGroupPolicyInput
} {
	var calls []struct {
		PutGroupPolicyInput *iam.PutGroupPolicyInput
	}
	mock.lockPutGroupPolicy.RLock()
	calls = mock.calls.PutGroupPolicy
	mock.lockPutGroupPolicy.RUnlock()
	return calls
}

// PutGroupPolicyRequest calls PutGroupPolicyRequestFunc.
func (mock *IAMAPIMock) PutGroupPolicyRequest(putGroupPolicyInput *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput) {
	if mock.PutGroupPolicyRequestFunc == nil {
		panic("IAMAPIMock.PutGroupPolicyRequestFunc: method is nil but IAMAPI.PutGroupPolicyRequest was just called")
	}
	callInfo := struct {
		PutGroupPolicyInput *iam.PutGroupPolicyInput
	}{
		PutGroupPolicyInput: putGroupPolicyInput,
	}
	mock.lockPutGroupPolicyRequest.Lock()
	mock.calls.PutGroupPolicyRequest = append(mock.calls.PutGroupPolicyRequest, callInfo)
	mock.lockPutGroupPolicyRequest.Unlock()
	return mock.PutGroupPolicyRequestFunc(putGroupPolicyInput)
}

// PutGroupPolicyRequestCalls gets all the calls that were made to PutGroupPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.PutGroupPolicyRequestCalls())
func (mock *IAMAPIMock) PutGroupPolicyRequestCalls() []struct {
	PutGroupPolicyInput *iam.PutGroupPolicyInput
} {
	var calls []struct {
		PutGroupPolicyInput *iam.PutGroupPolicyInput
	}
	mock.lockPutGroupPolicyRequest.RLock()
	calls = mock.calls.PutGroupPolicyRequest
	mock.lockPutGroupPolicyRequest.RUnlock()
	return calls
}

// PutGroupPolicyWithContext calls PutGroupPolicyWithContextFunc.
func (mock *IAMAPIMock) PutGroupPolicyWithContext(contextMoqParam context.Context, putGroupPolicyInput *iam.PutGroupPolicyInput, options ...request.Option) (*iam.PutGroupPolicyOutput, error) {
	if mock.PutGroupPolicyWithContextFunc == nil {
		panic("IAMAPIMock.PutGroupPolicyWithContextFunc: method is nil but IAMAPI.PutGroupPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		PutGroupPolicyInput *iam.PutGroupPolicyInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		PutGroupPolicyInput: putGroupPolicyInput,
		Options:             options,
	}
	mock.lockPutGroupPolicyWithContext.Lock()
	mock.calls.PutGroupPolicyWithContext = append(mock.calls.PutGroupPolicyWithContext, callInfo)
	mock.lockPutGroupPolicyWithContext.Unlock()
	return mock.PutGroupPolicyWithContextFunc(contextMoqParam, putGroupPolicyInput, options...)
}

// PutGroupPolicyWithContextCalls gets all the calls that were made to PutGroupPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.PutGroupPolicyWithContextCalls())
func (mock *IAMAPIMock) PutGroupPolicyWithContextCalls() []struct {
	ContextMoqParam     context.Context
	PutGroupPolicyInput *iam.PutGroupPolicyInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		PutGroupPolicyInput *iam.PutGroupPolicyInput
		Options             []request.Option
	}
	mock.lockPutGroupPolicyWithContext.RLock()
	calls = mock.calls.PutGroupPolicyWithContext
	mock.lockPutGroupPolicyWithContext.RUnlock()
	return calls
}

// PutRolePermissionsBoundary calls PutRolePermissionsBoundaryFunc.
func (mock *IAMAPIMock) PutRolePermissionsBoundary(putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	if mock.PutRolePermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.PutRolePermissionsBoundaryFunc: method is nil but IAMAPI.PutRolePermissionsBoundary was just called")
	}
	callInfo := struct {
		PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
	}{
		PutRolePermissionsBoundaryInput: putRolePermissionsBoundaryInput,
	}
	mock.lockPutRolePermissionsBoundary.Lock()
	mock.calls.PutRolePermissionsBoundary = append(mock.calls.PutRolePermissionsBoundary, callInfo)
	mock.lockPutRolePermissionsBoundary.Unlock()
	return mock.PutRolePermissionsBoundaryFunc(putRolePermissionsBoundaryInput)
}

// PutRolePermissionsBoundaryCalls gets all the calls that were made to PutRolePermissionsBoundary.
// Check the length with:
//
//	len(mockedIAMAPI.PutRolePermissionsBoundaryCalls())
func (mock *IAMAPIMock) PutRolePermissionsBoundaryCalls() []struct {
	PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
} {
	var calls []struct {
		PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
	}
	mock.lockPutRolePermissionsBoundary.RLock()
	calls = mock.calls.PutRolePermissionsBoundary
	mock.lockPutRolePermissionsBoundary.RUnlock()
	return calls
}

// PutRolePermissionsBoundaryRequest calls PutRolePermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) PutRolePermissionsBoundaryRequest(putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput) {
	if mock.PutRolePermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.PutRolePermissionsBoundaryRequestFunc: method is nil but IAMAPI.PutRolePermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
	}{
		PutRolePermissionsBoundaryInput: putRolePermissionsBoundaryInput,
	}
	mock.lockPutRolePermissionsBoundaryRequest.Lock()
	mock.calls.PutRolePermissionsBoundaryRequest = append(mock.calls.PutRolePermissionsBoundaryRequest, callInfo)
	mock.lockPutRolePermissionsBoundaryRequest.Unlock()
	return mock.PutRolePermissionsBoundaryRequestFunc(putRolePermissionsBoundaryInput)
}

// PutRolePermissionsBoundaryRequestCalls gets all the calls that were made to PutRolePermissionsBoundaryRequest.
// Check the length with:
//
//	len(mockedIAMAPI.PutRolePermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) PutRolePermissionsBoundaryRequestCalls() []struct {
	PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
} {
	var calls []struct {
		PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
	}
	mock.lockPutRolePermissionsBoundaryRequest.RLock()
	calls = mock.calls.PutRolePermissionsBoundaryRequest
	mock.lockPutRolePermissionsBoundaryRequest.RUnlock()
	return calls
}

// PutRolePermissionsBoundaryWithContext calls PutRolePermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) PutRolePermissionsBoundaryWithContext(contextMoqParam context.Context, putRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput, options ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {
	if mock.PutRolePermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.PutRolePermissionsBoundaryWithContextFunc: method is nil but IAMAPI.PutRolePermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		PutRolePermissionsBoundaryInput: putRolePermissionsBoundaryInput,
		Options:                         options,
	}
	mock.lockPutRolePermissionsBoundaryWithContext.Lock()
	mock.calls.PutRolePermissionsBoundaryWithContext = append(mock.calls.PutRolePermissionsBoundaryWithContext, callInfo)
	mock.lockPutRolePermissionsBoundaryWithContext.Unlock()
	return mock.PutRolePermissionsBoundaryWithContextFunc(contextMoqParam, putRolePermissionsBoundaryInput, options...)
}

// PutRolePermissionsBoundaryWithContextCalls gets all the calls that were made to PutRolePermissionsBoundaryWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.PutRolePermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) PutRolePermissionsBoundaryWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		PutRolePermissionsBoundaryInput *iam.PutRolePermissionsBoundaryInput
		Options                         []request.Option
	}
	mock.lockPutRolePermissionsBoundaryWithContext.RLock()
	calls = mock.calls.PutRolePermissionsBoundaryWithContext
	mock.lockPutRolePermissionsBoundaryWithContext.RUnlock()
	return calls
}

// PutRolePolicy calls PutRolePolicyFunc.
func (mock *IAMAPIMock) PutRolePolicy(putRolePolicyInput *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	if mock.PutRolePolicyFunc == nil {
		panic("IAMAPIMock.PutRolePolicyFunc: method is nil but IAMAPI.PutRolePolicy was just called")
	}
	callInfo := struct {
		PutRolePolicyInput *iam.PutRolePolicyInput
	}{
		PutRolePolicyInput: putRolePolicyInput,
	}
	mock.lockPutRolePolicy.Lock()
	mock.calls.PutRolePolicy = append(mock.calls.PutRolePolicy, callInfo)
	mock.lockPutRolePolicy.Unlock()
	return mock.PutRolePolicyFunc(putRolePolicyInput)
}

// PutRolePolicyCalls gets all the calls that were made to PutRolePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.PutRolePolicyCalls())
func (mock *IAMAPIMock) PutRolePolicyCalls() []struct {
	PutRolePolicyInput *iam.PutRolePolicyInput
} {
	var calls []struct {
		PutRolePolicyInput *iam.PutRolePolicyInput
	}
	mock.lockPutRolePolicy.RLock()
	calls = mock.calls.PutRolePolicy
	mock.lockPutRolePolicy.RUnlock()
	return calls
}

// PutRolePolicyRequest calls PutRolePolicyRequestFunc.
func (mock *IAMAPIMock) PutRolePolicyRequest(putRolePolicyInput *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput) {
	if mock.PutRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.PutRolePolicyRequestFunc: method is nil but IAMAPI.PutRolePolicyRequest was just called")
	}
	callInfo := struct {
		PutRolePolicyInput *iam.PutRolePolicyInput
	}{
		PutRolePolicyInput: putRolePolicyInput,
	}
	mock.lockPutRolePolicyRequest.Lock()
	mock.calls.PutRolePolicyRequest = append(mock.calls.PutRolePolicyRequest, callInfo)
	mock.lockPutRolePolicyRequest.Unlock()
	return mock.PutRolePolicyRequestFunc(putRolePolicyInput)
}

// PutRolePolicyRequestCalls gets all the calls that were made to PutRolePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.PutRolePolicyRequestCalls())
func (mock *IAMAPIMock) PutRolePolicyRequestCalls() []struct {
	PutRolePolicyInput *iam.PutRolePolicyInput
} {
	var calls []struct {
		PutRolePolicyInput *iam.PutRolePolicyInput
	}
	mock.lockPutRolePolicyRequest.RLock()
	calls = mock.calls.PutRolePolicyRequest
	mock.lockPutRolePolicyRequest.RUnlock()
	return calls
}

// PutRolePolicyWithContext calls PutRolePolicyWithContextFunc.
func (mock *IAMAPIMock) PutRolePolicyWithContext(contextMoqParam context.Context, putRolePolicyInput *iam.PutRolePolicyInput, options ...request.Option) (*iam.PutRolePolicyOutput, error) {
	if mock.PutRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.PutRolePolicyWithContextFunc: method is nil but IAMAPI.PutRolePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		PutRolePolicyInput *iam.PutRolePolicyInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		PutRolePolicyInput: putRolePolicyInput,
		Options:            options,
	}
	mock.lockPutRolePolicyWithContext.Lock()
	mock.calls.PutRolePolicyWithContext = append(mock.calls.PutRolePolicyWithContext, callInfo)
	mock.lockPutRolePolicyWithContext.Unlock()
	return mock.PutRolePolicyWithContextFunc(contextMoqParam, putRolePolicyInput, options...)
}

// PutRolePolicyWithContextCalls gets all the calls that were made to PutRolePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.PutRolePolicyWithContextCalls())
func (mock *IAMAPIMock) PutRolePolicyWithContextCalls() []struct {
	ContextMoqParam    context.Context
	PutRolePolicyInput *iam.PutRolePolicyInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		PutRolePolicyInput *iam.PutRolePolicyInput
		Options            []request.Option
	}
	mock.lockPutRolePolicyWithContext.RLock()
	calls = mock.calls.PutRolePolicyWithContext
	mock.lockPutRolePolicyWithContext.RUnlock()
	return calls
}

// PutUserPermissionsBoundary calls PutUserPermissionsBoundaryFunc.
func (mock *IAMAPIMock) PutUserPermissionsBoundary(putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
	if mock.PutUserPermissionsBoundaryFunc == nil {
		panic("IAMAPIMock.PutUserPermissionsBoundaryFunc: method is nil but IAMAPI.PutUserPermissionsBoundary was just called")
	}
	callInfo := struct {
		PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
	}{
		PutUserPermissionsBoundaryInput: putUserPermissionsBoundaryInput,
	}
	mock.lockPutUserPermissionsBoundary.Lock()
	mock.calls.PutUserPermissionsBoundary = append(mock.calls.PutUserPermissionsBoundary, callInfo)
	mock.lockPutUserPermissionsBoundary.Unlock()
	return mock.PutUserPermissionsBoundaryFunc(putUserPermissionsBoundaryInput)
}

// PutUserPermissionsBoundaryCalls gets all the calls that were made to PutUserPermissionsBoundary.
// Check the length with:
//
//	len(mockedIAMAPI.PutUserPermissionsBoundaryCalls())
func (mock *IAMAPIMock) PutUserPermissionsBoundaryCalls() []struct {
	PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
} {
	var calls []struct {
		PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
	}
	mock.lockPutUserPermissionsBoundary.RLock()
	calls = mock.calls.PutUserPermissionsBoundary
	mock.lockPutUserPermissionsBoundary.RUnlock()
	return calls
}

// PutUserPermissionsBoundaryRequest calls PutUserPermissionsBoundaryRequestFunc.
func (mock *IAMAPIMock) PutUserPermissionsBoundaryRequest(putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput) {
	if mock.PutUserPermissionsBoundaryRequestFunc == nil {
		panic("IAMAPIMock.PutUserPermissionsBoundaryRequestFunc: method is nil but IAMAPI.PutUserPermissionsBoundaryRequest was just called")
	}
	callInfo := struct {
		PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
	}{
		PutUserPermissionsBoundaryInput: putUserPermissionsBoundaryInput,
	}
	mock.lockPutUserPermissionsBoundaryRequest.Lock()
	mock.calls.PutUserPermissionsBoundaryRequest = append(mock.calls.PutUserPermissionsBoundaryRequest, callInfo)
	mock.lockPutUserPermissionsBoundaryRequest.Unlock()
	return mock.PutUserPermissionsBoundaryRequestFunc(putUserPermissionsBoundaryInput)
}

// PutUserPermissionsBoundaryRequestCalls gets all the calls that were made to PutUserPermissionsBoundaryRequest.
// Check the length with:
//
//	len(mockedIAMAPI.PutUserPermissionsBoundaryRequestCalls())
func (mock *IAMAPIMock) PutUserPermissionsBoundaryRequestCalls() []struct {
	PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
} {
	var calls []struct {
		PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
	}
	mock.lockPutUserPermissionsBoundaryRequest.RLock()
	calls = mock.calls.PutUserPermissionsBoundaryRequest
	mock.lockPutUserPermissionsBoundaryRequest.RUnlock()
	return calls
}

// PutUserPermissionsBoundaryWithContext calls PutUserPermissionsBoundaryWithContextFunc.
func (mock *IAMAPIMock) PutUserPermissionsBoundaryWithContext(contextMoqParam context.Context, putUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput, options ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {
	if mock.PutUserPermissionsBoundaryWithContextFunc == nil {
		panic("IAMAPIMock.PutUserPermissionsBoundaryWithContextFunc: method is nil but IAMAPI.PutUserPermissionsBoundaryWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		PutUserPermissionsBoundaryInput: putUserPermissionsBoundaryInput,
		Options:                         options,
	}
	mock.lockPutUserPermissionsBoundaryWithContext.Lock()
	mock.calls.PutUserPermissionsBoundaryWithContext = append(mock.calls.PutUserPermissionsBoundaryWithContext, callInfo)
	mock.lockPutUserPermissionsBoundaryWithContext.Unlock()
	return mock.PutUserPermissionsBoundaryWithContextFunc(contextMoqParam, putUserPermissionsBoundaryInput, options...)
}

// PutUserPermissionsBoundaryWithContextCalls gets all the calls that were made to PutUserPermissionsBoundaryWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.PutUserPermissionsBoundaryWithContextCalls())
func (mock *IAMAPIMock) PutUserPermissionsBoundaryWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		PutUserPermissionsBoundaryInput *iam.PutUserPermissionsBoundaryInput
		Options                         []request.Option
	}
	mock.lockPutUserPermissionsBoundaryWithContext.RLock()
	calls = mock.calls.PutUserPermissionsBoundaryWithContext
	mock.lockPutUserPermissionsBoundaryWithContext.RUnlock()
	return calls
}

// PutUserPolicy calls PutUserPolicyFunc.
func (mock *IAMAPIMock) PutUserPolicy(putUserPolicyInput *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	if mock.PutUserPolicyFunc == nil {
		panic("IAMAPIMock.PutUserPolicyFunc: method is nil but IAMAPI.PutUserPolicy was just called")
	}
	callInfo := struct {
		PutUserPolicyInput *iam.PutUserPolicyInput
	}{
		PutUserPolicyInput: putUserPolicyInput,
	}
	mock.lockPutUserPolicy.Lock()
	mock.calls.PutUserPolicy = append(mock.calls.PutUserPolicy, callInfo)
	mock.lockPutUserPolicy.Unlock()
	return mock.PutUserPolicyFunc(putUserPolicyInput)
}

// PutUserPolicyCalls gets all the calls that were made to PutUserPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.PutUserPolicyCalls())
func (mock *IAMAPIMock) PutUserPolicyCalls() []struct {
	PutUserPolicyInput *iam.PutUserPolicyInput
} {
	var calls []struct {
		PutUserPolicyInput *iam.PutUserPolicyInput
	}
	mock.lockPutUserPolicy.RLock()
	calls = mock.calls.PutUserPolicy
	mock.lockPutUserPolicy.RUnlock()
	return calls
}

// PutUserPolicyRequest calls PutUserPolicyRequestFunc.
func (mock *IAMAPIMock) PutUserPolicyRequest(putUserPolicyInput *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput) {
	if mock.PutUserPolicyRequestFunc == nil {
		panic("IAMAPIMock.PutUserPolicyRequestFunc: method is nil but IAMAPI.PutUserPolicyRequest was just called")
	}
	callInfo := struct {
		PutUserPolicyInput *iam.PutUserPolicyInput
	}{
		PutUserPolicyInput: putUserPolicyInput,
	}
	mock.lockPutUserPolicyRequest.Lock()
	mock.calls.PutUserPolicyRequest = append(mock.calls.PutUserPolicyRequest, callInfo)
	mock.lockPutUserPolicyRequest.Unlock()
	return mock.PutUserPolicyRequestFunc(putUserPolicyInput)
}

// PutUserPolicyRequestCalls gets all the calls that were made to PutUserPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.PutUserPolicyRequestCalls())
func (mock *IAMAPIMock) PutUserPolicyRequestCalls() []struct {
	PutUserPolicyInput *iam.PutUserPolicyInput
} {
	var calls []struct {
		PutUserPolicyInput *iam.PutUserPolicyInput
	}
	mock.lockPutUserPolicyRequest.RLock()
	calls = mock.calls.PutUserPolicyRequest
	mock.lockPutUserPolicyRequest.RUnlock()
	return calls
}

// PutUserPolicyWithContext calls PutUserPolicyWithContextFunc.
func (mock *IAMAPIMock) PutUserPolicyWithContext(contextMoqParam context.Context, putUserPolicyInput *iam.PutUserPolicyInput, options ...request.Option) (*iam.PutUserPolicyOutput, error) {
	if mock.PutUserPolicyWithContextFunc == nil {
		panic("IAMAPIMock.PutUserPolicyWithContextFunc: method is nil but IAMAPI.PutUserPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		PutUserPolicyInput *iam.PutUserPolicyInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		PutUserPolicyInput: putUserPolicyInput,
		Options:            options,
	}
	mock.lockPutUserPolicyWithContext.Lock()
	mock.calls.PutUserPolicyWithContext = append(mock.calls.PutUserPolicyWithContext, callInfo)
	mock.lockPutUserPolicyWithContext.Unlock()
	return mock.PutUserPolicyWithContextFunc(contextMoqParam, putUserPolicyInput, options...)
}

// PutUserPolicyWithContextCalls gets all the calls that were made to PutUserPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.PutUserPolicyWithContextCalls())
func (mock *IAMAPIMock) PutUserPolicyWithContextCalls() []struct {
	ContextMoqParam    context.Context
	PutUserPolicyInput *iam.PutUserPolicyInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		PutUserPolicyInput *iam.PutUserPolicyInput
		Options            []request.Option
	}
	mock.lockPutUserPolicyWithContext.RLock()
	calls = mock.calls.PutUserPolicyWithContext
	mock.lockPutUserPolicyWithContext.RUnlock()
	return calls
}

// RemoveClientIDFromOpenIDConnectProvider calls RemoveClientIDFromOpenIDConnectProviderFunc.
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProvider(removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	if mock.RemoveClientIDFromOpenIDConnectProviderFunc == nil {
		panic("IAMAPIMock.RemoveClientIDFromOpenIDConnectProviderFunc: method is nil but IAMAPI.RemoveClientIDFromOpenIDConnectProvider was just called")
	}
	callInfo := struct {
		RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}{
		RemoveClientIDFromOpenIDConnectProviderInput: removeClientIDFromOpenIDConnectProviderInput,
	}
	mock.lockRemoveClientIDFromOpenIDConnectProvider.Lock()
	mock.calls.RemoveClientIDFromOpenIDConnectProvider = append(mock.calls.RemoveClientIDFromOpenIDConnectProvider, callInfo)
	mock.lockRemoveClientIDFromOpenIDConnectProvider.Unlock()
	return mock.RemoveClientIDFromOpenIDConnectProviderFunc(removeClientIDFromOpenIDConnectProviderInput)
}

// RemoveClientIDFromOpenIDConnectProviderCalls gets all the calls that were made to RemoveClientIDFromOpenIDConnectProvider.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveClientIDFromOpenIDConnectProviderCalls())
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderCalls() []struct {
	RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
} {
	var calls []struct {
		RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}
	mock.lockRemoveClientIDFromOpenIDConnectProvider.RLock()
	calls = mock.calls.RemoveClientIDFromOpenIDConnectProvider
	mock.lockRemoveClientIDFromOpenIDConnectProvider.RUnlock()
	return calls
}

// RemoveClientIDFromOpenIDConnectProviderRequest calls RemoveClientIDFromOpenIDConnectProviderRequestFunc.
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderRequest(removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	if mock.RemoveClientIDFromOpenIDConnectProviderRequestFunc == nil {
		panic("IAMAPIMock.RemoveClientIDFromOpenIDConnectProviderRequestFunc: method is nil but IAMAPI.RemoveClientIDFromOpenIDConnectProviderRequest was just called")
	}
	callInfo := struct {
		RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}{
		RemoveClientIDFromOpenIDConnectProviderInput: removeClientIDFromOpenIDConnectProviderInput,
	}
	mock.lockRemoveClientIDFromOpenIDConnectProviderRequest.Lock()
	mock.calls.RemoveClientIDFromOpenIDConnectProviderRequest = append(mock.calls.RemoveClientIDFromOpenIDConnectProviderRequest, callInfo)
	mock.lockRemoveClientIDFromOpenIDConnectProviderRequest.Unlock()
	return mock.RemoveClientIDFromOpenIDConnectProviderRequestFunc(removeClientIDFromOpenIDConnectProviderInput)
}

// RemoveClientIDFromOpenIDConnectProviderRequestCalls gets all the calls that were made to RemoveClientIDFromOpenIDConnectProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveClientIDFromOpenIDConnectProviderRequestCalls())
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderRequestCalls() []struct {
	RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
} {
	var calls []struct {
		RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
	}
	mock.lockRemoveClientIDFromOpenIDConnectProviderRequest.RLock()
	calls = mock.calls.RemoveClientIDFromOpenIDConnectProviderRequest
	mock.lockRemoveClientIDFromOpenIDConnectProviderRequest.RUnlock()
	return calls
}

// RemoveClientIDFromOpenIDConnectProviderWithContext calls RemoveClientIDFromOpenIDConnectProviderWithContextFunc.
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderWithContext(contextMoqParam context.Context, removeClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput, options ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	if mock.RemoveClientIDFromOpenIDConnectProviderWithContextFunc == nil {
		panic("IAMAPIMock.RemoveClientIDFromOpenIDConnectProviderWithContextFunc: method is nil but IAMAPI.RemoveClientIDFromOpenIDConnectProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                              context.Context
		RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
		Options                                      []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		RemoveClientIDFromOpenIDConnectProviderInput: removeClientIDFromOpenIDConnectProviderInput,
		Options: options,
	}
	mock.lockRemoveClientIDFromOpenIDConnectProviderWithContext.Lock()
	mock.calls.RemoveClientIDFromOpenIDConnectProviderWithContext = append(mock.calls.RemoveClientIDFromOpenIDConnectProviderWithContext, callInfo)
	mock.lockRemoveClientIDFromOpenIDConnectProviderWithContext.Unlock()
	return mock.RemoveClientIDFromOpenIDConnectProviderWithContextFunc(contextMoqParam, removeClientIDFromOpenIDConnectProviderInput, options...)
}

// RemoveClientIDFromOpenIDConnectProviderWithContextCalls gets all the calls that were made to RemoveClientIDFromOpenIDConnectProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveClientIDFromOpenIDConnectProviderWithContextCalls())
func (mock *IAMAPIMock) RemoveClientIDFromOpenIDConnectProviderWithContextCalls() []struct {
	ContextMoqParam                              context.Context
	RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
	Options                                      []request.Option
} {
	var calls []struct {
		ContextMoqParam                              context.Context
		RemoveClientIDFromOpenIDConnectProviderInput *iam.RemoveClientIDFromOpenIDConnectProviderInput
		Options                                      []request.Option
	}
	mock.lockRemoveClientIDFromOpenIDConnectProviderWithContext.RLock()
	calls = mock.calls.RemoveClientIDFromOpenIDConnectProviderWithContext
	mock.lockRemoveClientIDFromOpenIDConnectProviderWithContext.RUnlock()
	return calls
}

// RemoveRoleFromInstanceProfile calls RemoveRoleFromInstanceProfileFunc.
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfile(removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	if mock.RemoveRoleFromInstanceProfileFunc == nil {
		panic("IAMAPIMock.RemoveRoleFromInstanceProfileFunc: method is nil but IAMAPI.RemoveRoleFromInstanceProfile was just called")
	}
	callInfo := struct {
		RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
	}{
		RemoveRoleFromInstanceProfileInput: removeRoleFromInstanceProfileInput,
	}
	mock.lockRemoveRoleFromInstanceProfile.Lock()
	mock.calls.RemoveRoleFromInstanceProfile = append(mock.calls.RemoveRoleFromInstanceProfile, callInfo)
	mock.lockRemoveRoleFromInstanceProfile.Unlock()
	return mock.RemoveRoleFromInstanceProfileFunc(removeRoleFromInstanceProfileInput)
}

// RemoveRoleFromInstanceProfileCalls gets all the calls that were made to RemoveRoleFromInstanceProfile.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveRoleFromInstanceProfileCalls())
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileCalls() []struct {
	RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
} {
	var calls []struct {
		RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
	}
	mock.lockRemoveRoleFromInstanceProfile.RLock()
	calls = mock.calls.RemoveRoleFromInstanceProfile
	mock.lockRemoveRoleFromInstanceProfile.RUnlock()
	return calls
}

// RemoveRoleFromInstanceProfileRequest calls RemoveRoleFromInstanceProfileRequestFunc.
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileRequest(removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput) {
	if mock.RemoveRoleFromInstanceProfileRequestFunc == nil {
		panic("IAMAPIMock.RemoveRoleFromInstanceProfileRequestFunc: method is nil but IAMAPI.RemoveRoleFromInstanceProfileRequest was just called")
	}
	callInfo := struct {
		RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
	}{
		RemoveRoleFromInstanceProfileInput: removeRoleFromInstanceProfileInput,
	}
	mock.lockRemoveRoleFromInstanceProfileRequest.Lock()
	mock.calls.RemoveRoleFromInstanceProfileRequest = append(mock.calls.RemoveRoleFromInstanceProfileRequest, callInfo)
	mock.lockRemoveRoleFromInstanceProfileRequest.Unlock()
	return mock.RemoveRoleFromInstanceProfileRequestFunc(removeRoleFromInstanceProfileInput)
}

// RemoveRoleFromInstanceProfileRequestCalls gets all the calls that were made to RemoveRoleFromInstanceProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveRoleFromInstanceProfileRequestCalls())
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileRequestCalls() []struct {
	RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
} {
	var calls []struct {
		RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
	}
	mock.lockRemoveRoleFromInstanceProfileRequest.RLock()
	calls = mock.calls.RemoveRoleFromInstanceProfileRequest
	mock.lockRemoveRoleFromInstanceProfileRequest.RUnlock()
	return calls
}

// RemoveRoleFromInstanceProfileWithContext calls RemoveRoleFromInstanceProfileWithContextFunc.
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileWithContext(contextMoqParam context.Context, removeRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput, options ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	if mock.RemoveRoleFromInstanceProfileWithContextFunc == nil {
		panic("IAMAPIMock.RemoveRoleFromInstanceProfileWithContextFunc: method is nil but IAMAPI.RemoveRoleFromInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		RemoveRoleFromInstanceProfileInput: removeRoleFromInstanceProfileInput,
		Options:                            options,
	}
	mock.lockRemoveRoleFromInstanceProfileWithContext.Lock()
	mock.calls.RemoveRoleFromInstanceProfileWithContext = append(mock.calls.RemoveRoleFromInstanceProfileWithContext, callInfo)
	mock.lockRemoveRoleFromInstanceProfileWithContext.Unlock()
	return mock.RemoveRoleFromInstanceProfileWithContextFunc(contextMoqParam, removeRoleFromInstanceProfileInput, options...)
}

// RemoveRoleFromInstanceProfileWithContextCalls gets all the calls that were made to RemoveRoleFromInstanceProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveRoleFromInstanceProfileWithContextCalls())
func (mock *IAMAPIMock) RemoveRoleFromInstanceProfileWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		RemoveRoleFromInstanceProfileInput *iam.RemoveRoleFromInstanceProfileInput
		Options                            []request.Option
	}
	mock.lockRemoveRoleFromInstanceProfileWithContext.RLock()
	calls = mock.calls.RemoveRoleFromInstanceProfileWithContext
	mock.lockRemoveRoleFromInstanceProfileWithContext.RUnlock()
	return calls
}

// RemoveUserFromGroup calls RemoveUserFromGroupFunc.
func (mock *IAMAPIMock) RemoveUserFromGroup(removeUserFromGroupInput *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	if mock.RemoveUserFromGroupFunc == nil {
		panic("IAMAPIMock.RemoveUserFromGroupFunc: method is nil but IAMAPI.RemoveUserFromGroup was just called")
	}
	callInfo := struct {
		RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
	}{
		RemoveUserFromGroupInput: removeUserFromGroupInput,
	}
	mock.lockRemoveUserFromGroup.Lock()
	mock.calls.RemoveUserFromGroup = append(mock.calls.RemoveUserFromGroup, callInfo)
	mock.lockRemoveUserFromGroup.Unlock()
	return mock.RemoveUserFromGroupFunc(removeUserFromGroupInput)
}

// RemoveUserFromGroupCalls gets all the calls that were made to RemoveUserFromGroup.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveUserFromGroupCalls())
func (mock *IAMAPIMock) RemoveUserFromGroupCalls() []struct {
	RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
} {
	var calls []struct {
		RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
	}
	mock.lockRemoveUserFromGroup.RLock()
	calls = mock.calls.RemoveUserFromGroup
	mock.lockRemoveUserFromGroup.RUnlock()
	return calls
}

// RemoveUserFromGroupRequest calls RemoveUserFromGroupRequestFunc.
func (mock *IAMAPIMock) RemoveUserFromGroupRequest(removeUserFromGroupInput *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput) {
	if mock.RemoveUserFromGroupRequestFunc == nil {
		panic("IAMAPIMock.RemoveUserFromGroupRequestFunc: method is nil but IAMAPI.RemoveUserFromGroupRequest was just called")
	}
	callInfo := struct {
		RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
	}{
		RemoveUserFromGroupInput: removeUserFromGroupInput,
	}
	mock.lockRemoveUserFromGroupRequest.Lock()
	mock.calls.RemoveUserFromGroupRequest = append(mock.calls.RemoveUserFromGroupRequest, callInfo)
	mock.lockRemoveUserFromGroupRequest.Unlock()
	return mock.RemoveUserFromGroupRequestFunc(removeUserFromGroupInput)
}

// RemoveUserFromGroupRequestCalls gets all the calls that were made to RemoveUserFromGroupRequest.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveUserFromGroupRequestCalls())
func (mock *IAMAPIMock) RemoveUserFromGroupRequestCalls() []struct {
	RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
} {
	var calls []struct {
		RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
	}
	mock.lockRemoveUserFromGroupRequest.RLock()
	calls = mock.calls.RemoveUserFromGroupRequest
	mock.lockRemoveUserFromGroupRequest.RUnlock()
	return calls
}

// RemoveUserFromGroupWithContext calls RemoveUserFromGroupWithContextFunc.
func (mock *IAMAPIMock) RemoveUserFromGroupWithContext(contextMoqParam context.Context, removeUserFromGroupInput *iam.RemoveUserFromGroupInput, options ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
	if mock.RemoveUserFromGroupWithContextFunc == nil {
		panic("IAMAPIMock.RemoveUserFromGroupWithContextFunc: method is nil but IAMAPI.RemoveUserFromGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		RemoveUserFromGroupInput: removeUserFromGroupInput,
		Options:                  options,
	}
	mock.lockRemoveUserFromGroupWithContext.Lock()
	mock.calls.RemoveUserFromGroupWithContext = append(mock.calls.RemoveUserFromGroupWithContext, callInfo)
	mock.lockRemoveUserFromGroupWithContext.Unlock()
	return mock.RemoveUserFromGroupWithContextFunc(contextMoqParam, removeUserFromGroupInput, options...)
}

// RemoveUserFromGroupWithContextCalls gets all the calls that were made to RemoveUserFromGroupWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.RemoveUserFromGroupWithContextCalls())
func (mock *IAMAPIMock) RemoveUserFromGroupWithContextCalls() []struct {
	ContextMoqParam          context.Context
	RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		RemoveUserFromGroupInput *iam.RemoveUserFromGroupInput
		Options                  []request.Option
	}
	mock.lockRemoveUserFromGroupWithContext.RLock()
	calls = mock.calls.RemoveUserFromGroupWithContext
	mock.lockRemoveUserFromGroupWithContext.RUnlock()
	return calls
}

// ResetServiceSpecificCredential calls ResetServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) ResetServiceSpecificCredential(resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	if mock.ResetServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.ResetServiceSpecificCredentialFunc: method is nil but IAMAPI.ResetServiceSpecificCredential was just called")
	}
	callInfo := struct {
		ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
	}{
		ResetServiceSpecificCredentialInput: resetServiceSpecificCredentialInput,
	}
	mock.lockResetServiceSpecificCredential.Lock()
	mock.calls.ResetServiceSpecificCredential = append(mock.calls.ResetServiceSpecificCredential, callInfo)
	mock.lockResetServiceSpecificCredential.Unlock()
	return mock.ResetServiceSpecificCredentialFunc(resetServiceSpecificCredentialInput)
}

// ResetServiceSpecificCredentialCalls gets all the calls that were made to ResetServiceSpecificCredential.
// Check the length with:
//
//	len(mockedIAMAPI.ResetServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) ResetServiceSpecificCredentialCalls() []struct {
	ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
} {
	var calls []struct {
		ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
	}
	mock.lockResetServiceSpecificCredential.RLock()
	calls = mock.calls.ResetServiceSpecificCredential
	mock.lockResetServiceSpecificCredential.RUnlock()
	return calls
}

// ResetServiceSpecificCredentialRequest calls ResetServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) ResetServiceSpecificCredentialRequest(resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput) {
	if mock.ResetServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.ResetServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.ResetServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
	}{
		ResetServiceSpecificCredentialInput: resetServiceSpecificCredentialInput,
	}
	mock.lockResetServiceSpecificCredentialRequest.Lock()
	mock.calls.ResetServiceSpecificCredentialRequest = append(mock.calls.ResetServiceSpecificCredentialRequest, callInfo)
	mock.lockResetServiceSpecificCredentialRequest.Unlock()
	return mock.ResetServiceSpecificCredentialRequestFunc(resetServiceSpecificCredentialInput)
}

// ResetServiceSpecificCredentialRequestCalls gets all the calls that were made to ResetServiceSpecificCredentialRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ResetServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) ResetServiceSpecificCredentialRequestCalls() []struct {
	ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
} {
	var calls []struct {
		ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
	}
	mock.lockResetServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.ResetServiceSpecificCredentialRequest
	mock.lockResetServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// ResetServiceSpecificCredentialWithContext calls ResetServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) ResetServiceSpecificCredentialWithContext(contextMoqParam context.Context, resetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput, options ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
	if mock.ResetServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.ResetServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.ResetServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                     context.Context
		ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
		Options                             []request.Option
	}{
		ContextMoqParam:                     contextMoqParam,
		ResetServiceSpecificCredentialInput: resetServiceSpecificCredentialInput,
		Options:                             options,
	}
	mock.lockResetServiceSpecificCredentialWithContext.Lock()
	mock.calls.ResetServiceSpecificCredentialWithContext = append(mock.calls.ResetServiceSpecificCredentialWithContext, callInfo)
	mock.lockResetServiceSpecificCredentialWithContext.Unlock()
	return mock.ResetServiceSpecificCredentialWithContextFunc(contextMoqParam, resetServiceSpecificCredentialInput, options...)
}

// ResetServiceSpecificCredentialWithContextCalls gets all the calls that were made to ResetServiceSpecificCredentialWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ResetServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) ResetServiceSpecificCredentialWithContextCalls() []struct {
	ContextMoqParam                     context.Context
	ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
	Options                             []request.Option
} {
	var calls []struct {
		ContextMoqParam                     context.Context
		ResetServiceSpecificCredentialInput *iam.ResetServiceSpecificCredentialInput
		Options                             []request.Option
	}
	mock.lockResetServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.ResetServiceSpecificCredentialWithContext
	mock.lockResetServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// ResyncMFADevice calls ResyncMFADeviceFunc.
func (mock *IAMAPIMock) ResyncMFADevice(resyncMFADeviceInput *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	if mock.ResyncMFADeviceFunc == nil {
		panic("IAMAPIMock.ResyncMFADeviceFunc: method is nil but IAMAPI.ResyncMFADevice was just called")
	}
	callInfo := struct {
		ResyncMFADeviceInput *iam.ResyncMFADeviceInput
	}{
		ResyncMFADeviceInput: resyncMFADeviceInput,
	}
	mock.lockResyncMFADevice.Lock()
	mock.calls.ResyncMFADevice = append(mock.calls.ResyncMFADevice, callInfo)
	mock.lockResyncMFADevice.Unlock()
	return mock.ResyncMFADeviceFunc(resyncMFADeviceInput)
}

// ResyncMFADeviceCalls gets all the calls that were made to ResyncMFADevice.
// Check the length with:
//
//	len(mockedIAMAPI.ResyncMFADeviceCalls())
func (mock *IAMAPIMock) ResyncMFADeviceCalls() []struct {
	ResyncMFADeviceInput *iam.ResyncMFADeviceInput
} {
	var calls []struct {
		ResyncMFADeviceInput *iam.ResyncMFADeviceInput
	}
	mock.lockResyncMFADevice.RLock()
	calls = mock.calls.ResyncMFADevice
	mock.lockResyncMFADevice.RUnlock()
	return calls
}

// ResyncMFADeviceRequest calls ResyncMFADeviceRequestFunc.
func (mock *IAMAPIMock) ResyncMFADeviceRequest(resyncMFADeviceInput *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput) {
	if mock.ResyncMFADeviceRequestFunc == nil {
		panic("IAMAPIMock.ResyncMFADeviceRequestFunc: method is nil but IAMAPI.ResyncMFADeviceRequest was just called")
	}
	callInfo := struct {
		ResyncMFADeviceInput *iam.ResyncMFADeviceInput
	}{
		ResyncMFADeviceInput: resyncMFADeviceInput,
	}
	mock.lockResyncMFADeviceRequest.Lock()
	mock.calls.ResyncMFADeviceRequest = append(mock.calls.ResyncMFADeviceRequest, callInfo)
	mock.lockResyncMFADeviceRequest.Unlock()
	return mock.ResyncMFADeviceRequestFunc(resyncMFADeviceInput)
}

// ResyncMFADeviceRequestCalls gets all the calls that were made to ResyncMFADeviceRequest.
// Check the length with:
//
//	len(mockedIAMAPI.ResyncMFADeviceRequestCalls())
func (mock *IAMAPIMock) ResyncMFADeviceRequestCalls() []struct {
	ResyncMFADeviceInput *iam.ResyncMFADeviceInput
} {
	var calls []struct {
		ResyncMFADeviceInput *iam.ResyncMFADeviceInput
	}
	mock.lockResyncMFADeviceRequest.RLock()
	calls = mock.calls.ResyncMFADeviceRequest
	mock.lockResyncMFADeviceRequest.RUnlock()
	return calls
}

// ResyncMFADeviceWithContext calls ResyncMFADeviceWithContextFunc.
func (mock *IAMAPIMock) ResyncMFADeviceWithContext(contextMoqParam context.Context, resyncMFADeviceInput *iam.ResyncMFADeviceInput, options ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
	if mock.ResyncMFADeviceWithContextFunc == nil {
		panic("IAMAPIMock.ResyncMFADeviceWithContextFunc: method is nil but IAMAPI.ResyncMFADeviceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		ResyncMFADeviceInput *iam.ResyncMFADeviceInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		ResyncMFADeviceInput: resyncMFADeviceInput,
		Options:              options,
	}
	mock.lockResyncMFADeviceWithContext.Lock()
	mock.calls.ResyncMFADeviceWithContext = append(mock.calls.ResyncMFADeviceWithContext, callInfo)
	mock.lockResyncMFADeviceWithContext.Unlock()
	return mock.ResyncMFADeviceWithContextFunc(contextMoqParam, resyncMFADeviceInput, options...)
}

// ResyncMFADeviceWithContextCalls gets all the calls that were made to ResyncMFADeviceWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.ResyncMFADeviceWithContextCalls())
func (mock *IAMAPIMock) ResyncMFADeviceWithContextCalls() []struct {
	ContextMoqParam      context.Context
	ResyncMFADeviceInput *iam.ResyncMFADeviceInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		ResyncMFADeviceInput *iam.ResyncMFADeviceInput
		Options              []request.Option
	}
	mock.lockResyncMFADeviceWithContext.RLock()
	calls = mock.calls.ResyncMFADeviceWithContext
	mock.lockResyncMFADeviceWithContext.RUnlock()
	return calls
}

// SetDefaultPolicyVersion calls SetDefaultPolicyVersionFunc.
func (mock *IAMAPIMock) SetDefaultPolicyVersion(setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	if mock.SetDefaultPolicyVersionFunc == nil {
		panic("IAMAPIMock.SetDefaultPolicyVersionFunc: method is nil but IAMAPI.SetDefaultPolicyVersion was just called")
	}
	callInfo := struct {
		SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
	}{
		SetDefaultPolicyVersionInput: setDefaultPolicyVersionInput,
	}
	mock.lockSetDefaultPolicyVersion.Lock()
	mock.calls.SetDefaultPolicyVersion = append(mock.calls.SetDefaultPolicyVersion, callInfo)
	mock.lockSetDefaultPolicyVersion.Unlock()
	return mock.SetDefaultPolicyVersionFunc(setDefaultPolicyVersionInput)
}

// SetDefaultPolicyVersionCalls gets all the calls that were made to SetDefaultPolicyVersion.
// Check the length with:
//
//	len(mockedIAMAPI.SetDefaultPolicyVersionCalls())
func (mock *IAMAPIMock) SetDefaultPolicyVersionCalls() []struct {
	SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
} {
	var calls []struct {
		SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
	}
	mock.lockSetDefaultPolicyVersion.RLock()
	calls = mock.calls.SetDefaultPolicyVersion
	mock.lockSetDefaultPolicyVersion.RUnlock()
	return calls
}

// SetDefaultPolicyVersionRequest calls SetDefaultPolicyVersionRequestFunc.
func (mock *IAMAPIMock) SetDefaultPolicyVersionRequest(setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput) {
	if mock.SetDefaultPolicyVersionRequestFunc == nil {
		panic("IAMAPIMock.SetDefaultPolicyVersionRequestFunc: method is nil but IAMAPI.SetDefaultPolicyVersionRequest was just called")
	}
	callInfo := struct {
		SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
	}{
		SetDefaultPolicyVersionInput: setDefaultPolicyVersionInput,
	}
	mock.lockSetDefaultPolicyVersionRequest.Lock()
	mock.calls.SetDefaultPolicyVersionRequest = append(mock.calls.SetDefaultPolicyVersionRequest, callInfo)
	mock.lockSetDefaultPolicyVersionRequest.Unlock()
	return mock.SetDefaultPolicyVersionRequestFunc(setDefaultPolicyVersionInput)
}

// SetDefaultPolicyVersionRequestCalls gets all the calls that were made to SetDefaultPolicyVersionRequest.
// Check the length with:
//
//	len(mockedIAMAPI.SetDefaultPolicyVersionRequestCalls())
func (mock *IAMAPIMock) SetDefaultPolicyVersionRequestCalls() []struct {
	SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
} {
	var calls []struct {
		SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
	}
	mock.lockSetDefaultPolicyVersionRequest.RLock()
	calls = mock.calls.SetDefaultPolicyVersionRequest
	mock.lockSetDefaultPolicyVersionRequest.RUnlock()
	return calls
}

// SetDefaultPolicyVersionWithContext calls SetDefaultPolicyVersionWithContextFunc.
func (mock *IAMAPIMock) SetDefaultPolicyVersionWithContext(contextMoqParam context.Context, setDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput, options ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
	if mock.SetDefaultPolicyVersionWithContextFunc == nil {
		panic("IAMAPIMock.SetDefaultPolicyVersionWithContextFunc: method is nil but IAMAPI.SetDefaultPolicyVersionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		SetDefaultPolicyVersionInput: setDefaultPolicyVersionInput,
		Options:                      options,
	}
	mock.lockSetDefaultPolicyVersionWithContext.Lock()
	mock.calls.SetDefaultPolicyVersionWithContext = append(mock.calls.SetDefaultPolicyVersionWithContext, callInfo)
	mock.lockSetDefaultPolicyVersionWithContext.Unlock()
	return mock.SetDefaultPolicyVersionWithContextFunc(contextMoqParam, setDefaultPolicyVersionInput, options...)
}

// SetDefaultPolicyVersionWithContextCalls gets all the calls that were made to SetDefaultPolicyVersionWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.SetDefaultPolicyVersionWithContextCalls())
func (mock *IAMAPIMock) SetDefaultPolicyVersionWithContextCalls() []struct {
	ContextMoqParam              context.Context
	SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		SetDefaultPolicyVersionInput *iam.SetDefaultPolicyVersionInput
		Options                      []request.Option
	}
	mock.lockSetDefaultPolicyVersionWithContext.RLock()
	calls = mock.calls.SetDefaultPolicyVersionWithContext
	mock.lockSetDefaultPolicyVersionWithContext.RUnlock()
	return calls
}

// SetSecurityTokenServicePreferences calls SetSecurityTokenServicePreferencesFunc.
func (mock *IAMAPIMock) SetSecurityTokenServicePreferences(setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	if mock.SetSecurityTokenServicePreferencesFunc == nil {
		panic("IAMAPIMock.SetSecurityTokenServicePreferencesFunc: method is nil but IAMAPI.SetSecurityTokenServicePreferences was just called")
	}
	callInfo := struct {
		SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
	}{
		SetSecurityTokenServicePreferencesInput: setSecurityTokenServicePreferencesInput,
	}
	mock.lockSetSecurityTokenServicePreferences.Lock()
	mock.calls.SetSecurityTokenServicePreferences = append(mock.calls.SetSecurityTokenServicePreferences, callInfo)
	mock.lockSetSecurityTokenServicePreferences.Unlock()
	return mock.SetSecurityTokenServicePreferencesFunc(setSecurityTokenServicePreferencesInput)
}

// SetSecurityTokenServicePreferencesCalls gets all the calls that were made to SetSecurityTokenServicePreferences.
// Check the length with:
//
//	len(mockedIAMAPI.SetSecurityTokenServicePreferencesCalls())
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesCalls() []struct {
	SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
} {
	var calls []struct {
		SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
	}
	mock.lockSetSecurityTokenServicePreferences.RLock()
	calls = mock.calls.SetSecurityTokenServicePreferences
	mock.lockSetSecurityTokenServicePreferences.RUnlock()
	return calls
}

// SetSecurityTokenServicePreferencesRequest calls SetSecurityTokenServicePreferencesRequestFunc.
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesRequest(setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput) {
	if mock.SetSecurityTokenServicePreferencesRequestFunc == nil {
		panic("IAMAPIMock.SetSecurityTokenServicePreferencesRequestFunc: method is nil but IAMAPI.SetSecurityTokenServicePreferencesRequest was just called")
	}
	callInfo := struct {
		SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
	}{
		SetSecurityTokenServicePreferencesInput: setSecurityTokenServicePreferencesInput,
	}
	mock.lockSetSecurityTokenServicePreferencesRequest.Lock()
	mock.calls.SetSecurityTokenServicePreferencesRequest = append(mock.calls.SetSecurityTokenServicePreferencesRequest, callInfo)
	mock.lockSetSecurityTokenServicePreferencesRequest.Unlock()
	return mock.SetSecurityTokenServicePreferencesRequestFunc(setSecurityTokenServicePreferencesInput)
}

// SetSecurityTokenServicePreferencesRequestCalls gets all the calls that were made to SetSecurityTokenServicePreferencesRequest.
// Check the length with:
//
//	len(mockedIAMAPI.SetSecurityTokenServicePreferencesRequestCalls())
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesRequestCalls() []struct {
	SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
} {
	var calls []struct {
		SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
	}
	mock.lockSetSecurityTokenServicePreferencesRequest.RLock()
	calls = mock.calls.SetSecurityTokenServicePreferencesRequest
	mock.lockSetSecurityTokenServicePreferencesRequest.RUnlock()
	return calls
}

// SetSecurityTokenServicePreferencesWithContext calls SetSecurityTokenServicePreferencesWithContextFunc.
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesWithContext(contextMoqParam context.Context, setSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput, options ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	if mock.SetSecurityTokenServicePreferencesWithContextFunc == nil {
		panic("IAMAPIMock.SetSecurityTokenServicePreferencesWithContextFunc: method is nil but IAMAPI.SetSecurityTokenServicePreferencesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		SetSecurityTokenServicePreferencesInput: setSecurityTokenServicePreferencesInput,
		Options:                                 options,
	}
	mock.lockSetSecurityTokenServicePreferencesWithContext.Lock()
	mock.calls.SetSecurityTokenServicePreferencesWithContext = append(mock.calls.SetSecurityTokenServicePreferencesWithContext, callInfo)
	mock.lockSetSecurityTokenServicePreferencesWithContext.Unlock()
	return mock.SetSecurityTokenServicePreferencesWithContextFunc(contextMoqParam, setSecurityTokenServicePreferencesInput, options...)
}

// SetSecurityTokenServicePreferencesWithContextCalls gets all the calls that were made to SetSecurityTokenServicePreferencesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.SetSecurityTokenServicePreferencesWithContextCalls())
func (mock *IAMAPIMock) SetSecurityTokenServicePreferencesWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		SetSecurityTokenServicePreferencesInput *iam.SetSecurityTokenServicePreferencesInput
		Options                                 []request.Option
	}
	mock.lockSetSecurityTokenServicePreferencesWithContext.RLock()
	calls = mock.calls.SetSecurityTokenServicePreferencesWithContext
	mock.lockSetSecurityTokenServicePreferencesWithContext.RUnlock()
	return calls
}

// SimulateCustomPolicy calls SimulateCustomPolicyFunc.
func (mock *IAMAPIMock) SimulateCustomPolicy(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulateCustomPolicyFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyFunc: method is nil but IAMAPI.SimulateCustomPolicy was just called")
	}
	callInfo := struct {
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
	}{
		SimulateCustomPolicyInput: simulateCustomPolicyInput,
	}
	mock.lockSimulateCustomPolicy.Lock()
	mock.calls.SimulateCustomPolicy = append(mock.calls.SimulateCustomPolicy, callInfo)
	mock.lockSimulateCustomPolicy.Unlock()
	return mock.SimulateCustomPolicyFunc(simulateCustomPolicyInput)
}

// SimulateCustomPolicyCalls gets all the calls that were made to SimulateCustomPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.SimulateCustomPolicyCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyCalls() []struct {
	SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
} {
	var calls []struct {
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
	}
	mock.lockSimulateCustomPolicy.RLock()
	calls = mock.calls.SimulateCustomPolicy
	mock.lockSimulateCustomPolicy.RUnlock()
	return calls
}

// SimulateCustomPolicyPages calls SimulateCustomPolicyPagesFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyPages(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error {
	if mock.SimulateCustomPolicyPagesFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyPagesFunc: method is nil but IAMAPI.SimulateCustomPolicyPages was just called")
	}
	callInfo := struct {
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		Fn                        func(*iam.SimulatePolicyResponse, bool) bool
	}{
		SimulateCustomPolicyInput: simulateCustomPolicyInput,
		Fn:                        fn,
	}
	mock.lockSimulateCustomPolicyPages.Lock()
	mock.calls.SimulateCustomPolicyPages = append(mock.calls.SimulateCustomPolicyPages, callInfo)
	mock.lockSimulateCustomPolicyPages.Unlock()
	return mock.SimulateCustomPolicyPagesFunc(simulateCustomPolicyInput, fn)
}

// SimulateCustomPolicyPagesCalls gets all the calls that were made to SimulateCustomPolicyPages.
// Check the length with:
//
//	len(mockedIAMAPI.SimulateCustomPolicyPagesCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyPagesCalls() []struct {
	SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
	Fn                        func(*iam.SimulatePolicyResponse, bool) bool
} {
	var calls []struct {
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		Fn                        func(*iam.SimulatePolicyResponse, bool) bool
	}
	mock.lockSimulateCustomPolicyPages.RLock()
	calls = mock.calls.SimulateCustomPolicyPages
	mock.lockSimulateCustomPolicyPages.RUnlock()
	return calls
}

// SimulateCustomPolicyPagesWithContext calls SimulateCustomPolicyPagesWithContextFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyPagesWithContext(contextMoqParam context.Context, simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, options ...request.Option) error {
	if mock.SimulateCustomPolicyPagesWithContextFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyPagesWithContextFunc: method is nil but IAMAPI.SimulateCustomPolicyPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		Fn                        func(*iam.SimulatePolicyResponse, bool) bool
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		SimulateCustomPolicyInput: simulateCustomPolicyInput,
		Fn:                        fn,
		Options:                   options,
	}
	mock.lockSimulateCustomPolicyPagesWithContext.Lock()
	mock.calls.SimulateCustomPolicyPagesWithContext = append(mock.calls.SimulateCustomPolicyPagesWithContext, callInfo)
	mock.lockSimulateCustomPolicyPagesWithContext.Unlock()
	return mock.SimulateCustomPolicyPagesWithContextFunc(contextMoqParam, simulateCustomPolicyInput, fn, options...)
}

// SimulateCustomPolicyPagesWithContextCalls gets all the calls that were made to SimulateCustomPolicyPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.SimulateCustomPolicyPagesWithContextCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyPagesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
	Fn                        func(*iam.SimulatePolicyResponse, bool) bool
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		Fn                        func(*iam.SimulatePolicyResponse, bool) bool
		Options                   []request.Option
	}
	mock.lockSimulateCustomPolicyPagesWithContext.RLock()
	calls = mock.calls.SimulateCustomPolicyPagesWithContext
	mock.lockSimulateCustomPolicyPagesWithContext.RUnlock()
	return calls
}

// SimulateCustomPolicyRequest calls SimulateCustomPolicyRequestFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyRequest(simulateCustomPolicyInput *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	if mock.SimulateCustomPolicyRequestFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyRequestFunc: method is nil but IAMAPI.SimulateCustomPolicyRequest was just called")
	}
	callInfo := struct {
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
	}{
		SimulateCustomPolicyInput: simulateCustomPolicyInput,
	}
	mock.lockSimulateCustomPolicyRequest.Lock()
	mock.calls.SimulateCustomPolicyRequest = append(mock.calls.SimulateCustomPolicyRequest, callInfo)
	mock.lockSimulateCustomPolicyRequest.Unlock()
	return mock.SimulateCustomPolicyRequestFunc(simulateCustomPolicyInput)
}

// SimulateCustomPolicyRequestCalls gets all the calls that were made to SimulateCustomPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.SimulateCustomPolicyRequestCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyRequestCalls() []struct {
	SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
} {
	var calls []struct {
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
	}
	mock.lockSimulateCustomPolicyRequest.RLock()
	calls = mock.calls.SimulateCustomPolicyRequest
	mock.lockSimulateCustomPolicyRequest.RUnlock()
	return calls
}

// SimulateCustomPolicyWithContext calls SimulateCustomPolicyWithContextFunc.
func (mock *IAMAPIMock) SimulateCustomPolicyWithContext(contextMoqParam context.Context, simulateCustomPolicyInput *iam.SimulateCustomPolicyInput, options ...request.Option) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulateCustomPolicyWithContextFunc == nil {
		panic("IAMAPIMock.SimulateCustomPolicyWithContextFunc: method is nil but IAMAPI.SimulateCustomPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		SimulateCustomPolicyInput: simulateCustomPolicyInput,
		Options:                   options,
	}
	mock.lockSimulateCustomPolicyWithContext.Lock()
	mock.calls.SimulateCustomPolicyWithContext = append(mock.calls.SimulateCustomPolicyWithContext, callInfo)
	mock.lockSimulateCustomPolicyWithContext.Unlock()
	return mock.SimulateCustomPolicyWithContextFunc(contextMoqParam, simulateCustomPolicyInput, options...)
}

// SimulateCustomPolicyWithContextCalls gets all the calls that were made to SimulateCustomPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.SimulateCustomPolicyWithContextCalls())
func (mock *IAMAPIMock) SimulateCustomPolicyWithContextCalls() []struct {
	ContextMoqParam           context.Context
	SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		SimulateCustomPolicyInput *iam.SimulateCustomPolicyInput
		Options                   []request.Option
	}
	mock.lockSimulateCustomPolicyWithContext.RLock()
	calls = mock.calls.SimulateCustomPolicyWithContext
	mock.lockSimulateCustomPolicyWithContext.RUnlock()
	return calls
}

// SimulatePrincipalPolicy calls SimulatePrincipalPolicyFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicy(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulatePrincipalPolicyFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyFunc: method is nil but IAMAPI.SimulatePrincipalPolicy was just called")
	}
	callInfo := struct {
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
	}{
		SimulatePrincipalPolicyInput: simulatePrincipalPolicyInput,
	}
	mock.lockSimulatePrincipalPolicy.Lock()
	mock.calls.SimulatePrincipalPolicy = append(mock.calls.SimulatePrincipalPolicy, callInfo)
	mock.lockSimulatePrincipalPolicy.Unlock()
	return mock.SimulatePrincipalPolicyFunc(simulatePrincipalPolicyInput)
}

// SimulatePrincipalPolicyCalls gets all the calls that were made to SimulatePrincipalPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.SimulatePrincipalPolicyCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyCalls() []struct {
	SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
} {
	var calls []struct {
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
	}
	mock.lockSimulatePrincipalPolicy.RLock()
	calls = mock.calls.SimulatePrincipalPolicy
	mock.lockSimulatePrincipalPolicy.RUnlock()
	return calls
}

// SimulatePrincipalPolicyPages calls SimulatePrincipalPolicyPagesFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyPages(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error {
	if mock.SimulatePrincipalPolicyPagesFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyPagesFunc: method is nil but IAMAPI.SimulatePrincipalPolicyPages was just called")
	}
	callInfo := struct {
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		Fn                           func(*iam.SimulatePolicyResponse, bool) bool
	}{
		SimulatePrincipalPolicyInput: simulatePrincipalPolicyInput,
		Fn:                           fn,
	}
	mock.lockSimulatePrincipalPolicyPages.Lock()
	mock.calls.SimulatePrincipalPolicyPages = append(mock.calls.SimulatePrincipalPolicyPages, callInfo)
	mock.lockSimulatePrincipalPolicyPages.Unlock()
	return mock.SimulatePrincipalPolicyPagesFunc(simulatePrincipalPolicyInput, fn)
}

// SimulatePrincipalPolicyPagesCalls gets all the calls that were made to SimulatePrincipalPolicyPages.
// Check the length with:
//
//	len(mockedIAMAPI.SimulatePrincipalPolicyPagesCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyPagesCalls() []struct {
	SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
	Fn                           func(*iam.SimulatePolicyResponse, bool) bool
} {
	var calls []struct {
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		Fn                           func(*iam.SimulatePolicyResponse, bool) bool
	}
	mock.lockSimulatePrincipalPolicyPages.RLock()
	calls = mock.calls.SimulatePrincipalPolicyPages
	mock.lockSimulatePrincipalPolicyPages.RUnlock()
	return calls
}

// SimulatePrincipalPolicyPagesWithContext calls SimulatePrincipalPolicyPagesWithContextFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyPagesWithContext(contextMoqParam context.Context, simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, options ...request.Option) error {
	if mock.SimulatePrincipalPolicyPagesWithContextFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyPagesWithContextFunc: method is nil but IAMAPI.SimulatePrincipalPolicyPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		Fn                           func(*iam.SimulatePolicyResponse, bool) bool
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		SimulatePrincipalPolicyInput: simulatePrincipalPolicyInput,
		Fn:                           fn,
		Options:                      options,
	}
	mock.lockSimulatePrincipalPolicyPagesWithContext.Lock()
	mock.calls.SimulatePrincipalPolicyPagesWithContext = append(mock.calls.SimulatePrincipalPolicyPagesWithContext, callInfo)
	mock.lockSimulatePrincipalPolicyPagesWithContext.Unlock()
	return mock.SimulatePrincipalPolicyPagesWithContextFunc(contextMoqParam, simulatePrincipalPolicyInput, fn, options...)
}

// SimulatePrincipalPolicyPagesWithContextCalls gets all the calls that were made to SimulatePrincipalPolicyPagesWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.SimulatePrincipalPolicyPagesWithContextCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyPagesWithContextCalls() []struct {
	ContextMoqParam              context.Context
	SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
	Fn                           func(*iam.SimulatePolicyResponse, bool) bool
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		Fn                           func(*iam.SimulatePolicyResponse, bool) bool
		Options                      []request.Option
	}
	mock.lockSimulatePrincipalPolicyPagesWithContext.RLock()
	calls = mock.calls.SimulatePrincipalPolicyPagesWithContext
	mock.lockSimulatePrincipalPolicyPagesWithContext.RUnlock()
	return calls
}

// SimulatePrincipalPolicyRequest calls SimulatePrincipalPolicyRequestFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyRequest(simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	if mock.SimulatePrincipalPolicyRequestFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyRequestFunc: method is nil but IAMAPI.SimulatePrincipalPolicyRequest was just called")
	}
	callInfo := struct {
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
	}{
		SimulatePrincipalPolicyInput: simulatePrincipalPolicyInput,
	}
	mock.lockSimulatePrincipalPolicyRequest.Lock()
	mock.calls.SimulatePrincipalPolicyRequest = append(mock.calls.SimulatePrincipalPolicyRequest, callInfo)
	mock.lockSimulatePrincipalPolicyRequest.Unlock()
	return mock.SimulatePrincipalPolicyRequestFunc(simulatePrincipalPolicyInput)
}

// SimulatePrincipalPolicyRequestCalls gets all the calls that were made to SimulatePrincipalPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.SimulatePrincipalPolicyRequestCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyRequestCalls() []struct {
	SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
} {
	var calls []struct {
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
	}
	mock.lockSimulatePrincipalPolicyRequest.RLock()
	calls = mock.calls.SimulatePrincipalPolicyRequest
	mock.lockSimulatePrincipalPolicyRequest.RUnlock()
	return calls
}

// SimulatePrincipalPolicyWithContext calls SimulatePrincipalPolicyWithContextFunc.
func (mock *IAMAPIMock) SimulatePrincipalPolicyWithContext(contextMoqParam context.Context, simulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput, options ...request.Option) (*iam.SimulatePolicyResponse, error) {
	if mock.SimulatePrincipalPolicyWithContextFunc == nil {
		panic("IAMAPIMock.SimulatePrincipalPolicyWithContextFunc: method is nil but IAMAPI.SimulatePrincipalPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		SimulatePrincipalPolicyInput: simulatePrincipalPolicyInput,
		Options:                      options,
	}
	mock.lockSimulatePrincipalPolicyWithContext.Lock()
	mock.calls.SimulatePrincipalPolicyWithContext = append(mock.calls.SimulatePrincipalPolicyWithContext, callInfo)
	mock.lockSimulatePrincipalPolicyWithContext.Unlock()
	return mock.SimulatePrincipalPolicyWithContextFunc(contextMoqParam, simulatePrincipalPolicyInput, options...)
}

// SimulatePrincipalPolicyWithContextCalls gets all the calls that were made to SimulatePrincipalPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.SimulatePrincipalPolicyWithContextCalls())
func (mock *IAMAPIMock) SimulatePrincipalPolicyWithContextCalls() []struct {
	ContextMoqParam              context.Context
	SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		SimulatePrincipalPolicyInput *iam.SimulatePrincipalPolicyInput
		Options                      []request.Option
	}
	mock.lockSimulatePrincipalPolicyWithContext.RLock()
	calls = mock.calls.SimulatePrincipalPolicyWithContext
	mock.lockSimulatePrincipalPolicyWithContext.RUnlock()
	return calls
}

// TagRole calls TagRoleFunc.
func (mock *IAMAPIMock) TagRole(tagRoleInput *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	if mock.TagRoleFunc == nil {
		panic("IAMAPIMock.TagRoleFunc: method is nil but IAMAPI.TagRole was just called")
	}
	callInfo := struct {
		TagRoleInput *iam.TagRoleInput
	}{
		TagRoleInput: tagRoleInput,
	}
	mock.lockTagRole.Lock()
	mock.calls.TagRole = append(mock.calls.TagRole, callInfo)
	mock.lockTagRole.Unlock()
	return mock.TagRoleFunc(tagRoleInput)
}

// TagRoleCalls gets all the calls that were made to TagRole.
// Check the length with:
//
//	len(mockedIAMAPI.TagRoleCalls())
func (mock *IAMAPIMock) TagRoleCalls() []struct {
	TagRoleInput *iam.TagRoleInput
} {
	var calls []struct {
		TagRoleInput *iam.TagRoleInput
	}
	mock.lockTagRole.RLock()
	calls = mock.calls.TagRole
	mock.lockTagRole.RUnlock()
	return calls
}

// TagRoleRequest calls TagRoleRequestFunc.
func (mock *IAMAPIMock) TagRoleRequest(tagRoleInput *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput) {
	if mock.TagRoleRequestFunc == nil {
		panic("IAMAPIMock.TagRoleRequestFunc: method is nil but IAMAPI.TagRoleRequest was just called")
	}
	callInfo := struct {
		TagRoleInput *iam.TagRoleInput
	}{
		TagRoleInput: tagRoleInput,
	}
	mock.lockTagRoleRequest.Lock()
	mock.calls.TagRoleRequest = append(mock.calls.TagRoleRequest, callInfo)
	mock.lockTagRoleRequest.Unlock()
	return mock.TagRoleRequestFunc(tagRoleInput)
}

// TagRoleRequestCalls gets all the calls that were made to TagRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.TagRoleRequestCalls())
func (mock *IAMAPIMock) TagRoleRequestCalls() []struct {
	TagRoleInput *iam.TagRoleInput
} {
	var calls []struct {
		TagRoleInput *iam.TagRoleInput
	}
	mock.lockTagRoleRequest.RLock()
	calls = mock.calls.TagRoleRequest
	mock.lockTagRoleRequest.RUnlock()
	return calls
}

// TagRoleWithContext calls TagRoleWithContextFunc.
func (mock *IAMAPIMock) TagRoleWithContext(contextMoqParam context.Context, tagRoleInput *iam.TagRoleInput, options ...request.Option) (*iam.TagRoleOutput, error) {
	if mock.TagRoleWithContextFunc == nil {
		panic("IAMAPIMock.TagRoleWithContextFunc: method is nil but IAMAPI.TagRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		TagRoleInput    *iam.TagRoleInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		TagRoleInput:    tagRoleInput,
		Options:         options,
	}
	mock.lockTagRoleWithContext.Lock()
	mock.calls.TagRoleWithContext = append(mock.calls.TagRoleWithContext, callInfo)
	mock.lockTagRoleWithContext.Unlock()
	return mock.TagRoleWithContextFunc(contextMoqParam, tagRoleInput, options...)
}

// TagRoleWithContextCalls gets all the calls that were made to TagRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.TagRoleWithContextCalls())
func (mock *IAMAPIMock) TagRoleWithContextCalls() []struct {
	ContextMoqParam context.Context
	TagRoleInput    *iam.TagRoleInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		TagRoleInput    *iam.TagRoleInput
		Options         []request.Option
	}
	mock.lockTagRoleWithContext.RLock()
	calls = mock.calls.TagRoleWithContext
	mock.lockTagRoleWithContext.RUnlock()
	return calls
}

// TagUser calls TagUserFunc.
func (mock *IAMAPIMock) TagUser(tagUserInput *iam.TagUserInput) (*iam.TagUserOutput, error) {
	if mock.TagUserFunc == nil {
		panic("IAMAPIMock.TagUserFunc: method is nil but IAMAPI.TagUser was just called")
	}
	callInfo := struct {
		TagUserInput *iam.TagUserInput
	}{
		TagUserInput: tagUserInput,
	}
	mock.lockTagUser.Lock()
	mock.calls.TagUser = append(mock.calls.TagUser, callInfo)
	mock.lockTagUser.Unlock()
	return mock.TagUserFunc(tagUserInput)
}

// TagUserCalls gets all the calls that were made to TagUser.
// Check the length with:
//
//	len(mockedIAMAPI.TagUserCalls())
func (mock *IAMAPIMock) TagUserCalls() []struct {
	TagUserInput *iam.TagUserInput
} {
	var calls []struct {
		TagUserInput *iam.TagUserInput
	}
	mock.lockTagUser.RLock()
	calls = mock.calls.TagUser
	mock.lockTagUser.RUnlock()
	return calls
}

// TagUserRequest calls TagUserRequestFunc.
func (mock *IAMAPIMock) TagUserRequest(tagUserInput *iam.TagUserInput) (*request.Request, *iam.TagUserOutput) {
	if mock.TagUserRequestFunc == nil {
		panic("IAMAPIMock.TagUserRequestFunc: method is nil but IAMAPI.TagUserRequest was just called")
	}
	callInfo := struct {
		TagUserInput *iam.TagUserInput
	}{
		TagUserInput: tagUserInput,
	}
	mock.lockTagUserRequest.Lock()
	mock.calls.TagUserRequest = append(mock.calls.TagUserRequest, callInfo)
	mock.lockTagUserRequest.Unlock()
	return mock.TagUserRequestFunc(tagUserInput)
}

// TagUserRequestCalls gets all the calls that were made to TagUserRequest.
// Check the length with:
//
//	len(mockedIAMAPI.TagUserRequestCalls())
func (mock *IAMAPIMock) TagUserRequestCalls() []struct {
	TagUserInput *iam.TagUserInput
} {
	var calls []struct {
		TagUserInput *iam.TagUserInput
	}
	mock.lockTagUserRequest.RLock()
	calls = mock.calls.TagUserRequest
	mock.lockTagUserRequest.RUnlock()
	return calls
}

// TagUserWithContext calls TagUserWithContextFunc.
func (mock *IAMAPIMock) TagUserWithContext(contextMoqParam context.Context, tagUserInput *iam.TagUserInput, options ...request.Option) (*iam.TagUserOutput, error) {
	if mock.TagUserWithContextFunc == nil {
		panic("IAMAPIMock.TagUserWithContextFunc: method is nil but IAMAPI.TagUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		TagUserInput    *iam.TagUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		TagUserInput:    tagUserInput,
		Options:         options,
	}
	mock.lockTagUserWithContext.Lock()
	mock.calls.TagUserWithContext = append(mock.calls.TagUserWithContext, callInfo)
	mock.lockTagUserWithContext.Unlock()
	return mock.TagUserWithContextFunc(contextMoqParam, tagUserInput, options...)
}

// TagUserWithContextCalls gets all the calls that were made to TagUserWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.TagUserWithContextCalls())
func (mock *IAMAPIMock) TagUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	TagUserInput    *iam.TagUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		TagUserInput    *iam.TagUserInput
		Options         []request.Option
	}
	mock.lockTagUserWithContext.RLock()
	calls = mock.calls.TagUserWithContext
	mock.lockTagUserWithContext.RUnlock()
	return calls
}

// UntagRole calls UntagRoleFunc.
func (mock *IAMAPIMock) UntagRole(untagRoleInput *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
	if mock.UntagRoleFunc == nil {
		panic("IAMAPIMock.UntagRoleFunc: method is nil but IAMAPI.UntagRole was just called")
	}
	callInfo := struct {
		UntagRoleInput *iam.UntagRoleInput
	}{
		UntagRoleInput: untagRoleInput,
	}
	mock.lockUntagRole.Lock()
	mock.calls.UntagRole = append(mock.calls.UntagRole, callInfo)
	mock.lockUntagRole.Unlock()
	return mock.UntagRoleFunc(untagRoleInput)
}

// UntagRoleCalls gets all the calls that were made to UntagRole.
// Check the length with:
//
//	len(mockedIAMAPI.UntagRoleCalls())
func (mock *IAMAPIMock) UntagRoleCalls() []struct {
	UntagRoleInput *iam.UntagRoleInput
} {
	var calls []struct {
		UntagRoleInput *iam.UntagRoleInput
	}
	mock.lockUntagRole.RLock()
	calls = mock.calls.UntagRole
	mock.lockUntagRole.RUnlock()
	return calls
}

// UntagRoleRequest calls UntagRoleRequestFunc.
func (mock *IAMAPIMock) UntagRoleRequest(untagRoleInput *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput) {
	if mock.UntagRoleRequestFunc == nil {
		panic("IAMAPIMock.UntagRoleRequestFunc: method is nil but IAMAPI.UntagRoleRequest was just called")
	}
	callInfo := struct {
		UntagRoleInput *iam.UntagRoleInput
	}{
		UntagRoleInput: untagRoleInput,
	}
	mock.lockUntagRoleRequest.Lock()
	mock.calls.UntagRoleRequest = append(mock.calls.UntagRoleRequest, callInfo)
	mock.lockUntagRoleRequest.Unlock()
	return mock.UntagRoleRequestFunc(untagRoleInput)
}

// UntagRoleRequestCalls gets all the calls that were made to UntagRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UntagRoleRequestCalls())
func (mock *IAMAPIMock) UntagRoleRequestCalls() []struct {
	UntagRoleInput *iam.UntagRoleInput
} {
	var calls []struct {
		UntagRoleInput *iam.UntagRoleInput
	}
	mock.lockUntagRoleRequest.RLock()
	calls = mock.calls.UntagRoleRequest
	mock.lockUntagRoleRequest.RUnlock()
	return calls
}

// UntagRoleWithContext calls UntagRoleWithContextFunc.
func (mock *IAMAPIMock) UntagRoleWithContext(contextMoqParam context.Context, untagRoleInput *iam.UntagRoleInput, options ...request.Option) (*iam.UntagRoleOutput, error) {
	if mock.UntagRoleWithContextFunc == nil {
		panic("IAMAPIMock.UntagRoleWithContextFunc: method is nil but IAMAPI.UntagRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UntagRoleInput  *iam.UntagRoleInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		UntagRoleInput:  untagRoleInput,
		Options:         options,
	}
	mock.lockUntagRoleWithContext.Lock()
	mock.calls.UntagRoleWithContext = append(mock.calls.UntagRoleWithContext, callInfo)
	mock.lockUntagRoleWithContext.Unlock()
	return mock.UntagRoleWithContextFunc(contextMoqParam, untagRoleInput, options...)
}

// UntagRoleWithContextCalls gets all the calls that were made to UntagRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UntagRoleWithContextCalls())
func (mock *IAMAPIMock) UntagRoleWithContextCalls() []struct {
	ContextMoqParam context.Context
	UntagRoleInput  *iam.UntagRoleInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		UntagRoleInput  *iam.UntagRoleInput
		Options         []request.Option
	}
	mock.lockUntagRoleWithContext.RLock()
	calls = mock.calls.UntagRoleWithContext
	mock.lockUntagRoleWithContext.RUnlock()
	return calls
}

// UntagUser calls UntagUserFunc.
func (mock *IAMAPIMock) UntagUser(untagUserInput *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
	if mock.UntagUserFunc == nil {
		panic("IAMAPIMock.UntagUserFunc: method is nil but IAMAPI.UntagUser was just called")
	}
	callInfo := struct {
		UntagUserInput *iam.UntagUserInput
	}{
		UntagUserInput: untagUserInput,
	}
	mock.lockUntagUser.Lock()
	mock.calls.UntagUser = append(mock.calls.UntagUser, callInfo)
	mock.lockUntagUser.Unlock()
	return mock.UntagUserFunc(untagUserInput)
}

// UntagUserCalls gets all the calls that were made to UntagUser.
// Check the length with:
//
//	len(mockedIAMAPI.UntagUserCalls())
func (mock *IAMAPIMock) UntagUserCalls() []struct {
	UntagUserInput *iam.UntagUserInput
} {
	var calls []struct {
		UntagUserInput *iam.UntagUserInput
	}
	mock.lockUntagUser.RLock()
	calls = mock.calls.UntagUser
	mock.lockUntagUser.RUnlock()
	return calls
}

// UntagUserRequest calls UntagUserRequestFunc.
func (mock *IAMAPIMock) UntagUserRequest(untagUserInput *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput) {
	if mock.UntagUserRequestFunc == nil {
		panic("IAMAPIMock.UntagUserRequestFunc: method is nil but IAMAPI.UntagUserRequest was just called")
	}
	callInfo := struct {
		UntagUserInput *iam.UntagUserInput
	}{
		UntagUserInput: untagUserInput,
	}
	mock.lockUntagUserRequest.Lock()
	mock.calls.UntagUserRequest = append(mock.calls.UntagUserRequest, callInfo)
	mock.lockUntagUserRequest.Unlock()
	return mock.UntagUserRequestFunc(untagUserInput)
}

// UntagUserRequestCalls gets all the calls that were made to UntagUserRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UntagUserRequestCalls())
func (mock *IAMAPIMock) UntagUserRequestCalls() []struct {
	UntagUserInput *iam.UntagUserInput
} {
	var calls []struct {
		UntagUserInput *iam.UntagUserInput
	}
	mock.lockUntagUserRequest.RLock()
	calls = mock.calls.UntagUserRequest
	mock.lockUntagUserRequest.RUnlock()
	return calls
}

// UntagUserWithContext calls UntagUserWithContextFunc.
func (mock *IAMAPIMock) UntagUserWithContext(contextMoqParam context.Context, untagUserInput *iam.UntagUserInput, options ...request.Option) (*iam.UntagUserOutput, error) {
	if mock.UntagUserWithContextFunc == nil {
		panic("IAMAPIMock.UntagUserWithContextFunc: method is nil but IAMAPI.UntagUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UntagUserInput  *iam.UntagUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		UntagUserInput:  untagUserInput,
		Options:         options,
	}
	mock.lockUntagUserWithContext.Lock()
	mock.calls.UntagUserWithContext = append(mock.calls.UntagUserWithContext, callInfo)
	mock.lockUntagUserWithContext.Unlock()
	return mock.UntagUserWithContextFunc(contextMoqParam, untagUserInput, options...)
}

// UntagUserWithContextCalls gets all the calls that were made to UntagUserWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UntagUserWithContextCalls())
func (mock *IAMAPIMock) UntagUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	UntagUserInput  *iam.UntagUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		UntagUserInput  *iam.UntagUserInput
		Options         []request.Option
	}
	mock.lockUntagUserWithContext.RLock()
	calls = mock.calls.UntagUserWithContext
	mock.lockUntagUserWithContext.RUnlock()
	return calls
}

// UpdateAccessKey calls UpdateAccessKeyFunc.
func (mock *IAMAPIMock) UpdateAccessKey(updateAccessKeyInput *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	if mock.UpdateAccessKeyFunc == nil {
		panic("IAMAPIMock.UpdateAccessKeyFunc: method is nil but IAMAPI.UpdateAccessKey was just called")
	}
	callInfo := struct {
		UpdateAccessKeyInput *iam.UpdateAccessKeyInput
	}{
		UpdateAccessKeyInput: updateAccessKeyInput,
	}
	mock.lockUpdateAccessKey.Lock()
	mock.calls.UpdateAccessKey = append(mock.calls.UpdateAccessKey, callInfo)
	mock.lockUpdateAccessKey.Unlock()
	return mock.UpdateAccessKeyFunc(updateAccessKeyInput)
}

// UpdateAccessKeyCalls gets all the calls that were made to UpdateAccessKey.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAccessKeyCalls())
func (mock *IAMAPIMock) UpdateAccessKeyCalls() []struct {
	UpdateAccessKeyInput *iam.UpdateAccessKeyInput
} {
	var calls []struct {
		UpdateAccessKeyInput *iam.UpdateAccessKeyInput
	}
	mock.lockUpdateAccessKey.RLock()
	calls = mock.calls.UpdateAccessKey
	mock.lockUpdateAccessKey.RUnlock()
	return calls
}

// UpdateAccessKeyRequest calls UpdateAccessKeyRequestFunc.
func (mock *IAMAPIMock) UpdateAccessKeyRequest(updateAccessKeyInput *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput) {
	if mock.UpdateAccessKeyRequestFunc == nil {
		panic("IAMAPIMock.UpdateAccessKeyRequestFunc: method is nil but IAMAPI.UpdateAccessKeyRequest was just called")
	}
	callInfo := struct {
		UpdateAccessKeyInput *iam.UpdateAccessKeyInput
	}{
		UpdateAccessKeyInput: updateAccessKeyInput,
	}
	mock.lockUpdateAccessKeyRequest.Lock()
	mock.calls.UpdateAccessKeyRequest = append(mock.calls.UpdateAccessKeyRequest, callInfo)
	mock.lockUpdateAccessKeyRequest.Unlock()
	return mock.UpdateAccessKeyRequestFunc(updateAccessKeyInput)
}

// UpdateAccessKeyRequestCalls gets all the calls that were made to UpdateAccessKeyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAccessKeyRequestCalls())
func (mock *IAMAPIMock) UpdateAccessKeyRequestCalls() []struct {
	UpdateAccessKeyInput *iam.UpdateAccessKeyInput
} {
	var calls []struct {
		UpdateAccessKeyInput *iam.UpdateAccessKeyInput
	}
	mock.lockUpdateAccessKeyRequest.RLock()
	calls = mock.calls.UpdateAccessKeyRequest
	mock.lockUpdateAccessKeyRequest.RUnlock()
	return calls
}

// UpdateAccessKeyWithContext calls UpdateAccessKeyWithContextFunc.
func (mock *IAMAPIMock) UpdateAccessKeyWithContext(contextMoqParam context.Context, updateAccessKeyInput *iam.UpdateAccessKeyInput, options ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
	if mock.UpdateAccessKeyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateAccessKeyWithContextFunc: method is nil but IAMAPI.UpdateAccessKeyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		UpdateAccessKeyInput *iam.UpdateAccessKeyInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		UpdateAccessKeyInput: updateAccessKeyInput,
		Options:              options,
	}
	mock.lockUpdateAccessKeyWithContext.Lock()
	mock.calls.UpdateAccessKeyWithContext = append(mock.calls.UpdateAccessKeyWithContext, callInfo)
	mock.lockUpdateAccessKeyWithContext.Unlock()
	return mock.UpdateAccessKeyWithContextFunc(contextMoqParam, updateAccessKeyInput, options...)
}

// UpdateAccessKeyWithContextCalls gets all the calls that were made to UpdateAccessKeyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAccessKeyWithContextCalls())
func (mock *IAMAPIMock) UpdateAccessKeyWithContextCalls() []struct {
	ContextMoqParam      context.Context
	UpdateAccessKeyInput *iam.UpdateAccessKeyInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		UpdateAccessKeyInput *iam.UpdateAccessKeyInput
		Options              []request.Option
	}
	mock.lockUpdateAccessKeyWithContext.RLock()
	calls = mock.calls.UpdateAccessKeyWithContext
	mock.lockUpdateAccessKeyWithContext.RUnlock()
	return calls
}

// UpdateAccountPasswordPolicy calls UpdateAccountPasswordPolicyFunc.
func (mock *IAMAPIMock) UpdateAccountPasswordPolicy(updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	if mock.UpdateAccountPasswordPolicyFunc == nil {
		panic("IAMAPIMock.UpdateAccountPasswordPolicyFunc: method is nil but IAMAPI.UpdateAccountPasswordPolicy was just called")
	}
	callInfo := struct {
		UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
	}{
		UpdateAccountPasswordPolicyInput: updateAccountPasswordPolicyInput,
	}
	mock.lockUpdateAccountPasswordPolicy.Lock()
	mock.calls.UpdateAccountPasswordPolicy = append(mock.calls.UpdateAccountPasswordPolicy, callInfo)
	mock.lockUpdateAccountPasswordPolicy.Unlock()
	return mock.UpdateAccountPasswordPolicyFunc(updateAccountPasswordPolicyInput)
}

// UpdateAccountPasswordPolicyCalls gets all the calls that were made to UpdateAccountPasswordPolicy.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAccountPasswordPolicyCalls())
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyCalls() []struct {
	UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
} {
	var calls []struct {
		UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
	}
	mock.lockUpdateAccountPasswordPolicy.RLock()
	calls = mock.calls.UpdateAccountPasswordPolicy
	mock.lockUpdateAccountPasswordPolicy.RUnlock()
	return calls
}

// UpdateAccountPasswordPolicyRequest calls UpdateAccountPasswordPolicyRequestFunc.
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyRequest(updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput) {
	if mock.UpdateAccountPasswordPolicyRequestFunc == nil {
		panic("IAMAPIMock.UpdateAccountPasswordPolicyRequestFunc: method is nil but IAMAPI.UpdateAccountPasswordPolicyRequest was just called")
	}
	callInfo := struct {
		UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
	}{
		UpdateAccountPasswordPolicyInput: updateAccountPasswordPolicyInput,
	}
	mock.lockUpdateAccountPasswordPolicyRequest.Lock()
	mock.calls.UpdateAccountPasswordPolicyRequest = append(mock.calls.UpdateAccountPasswordPolicyRequest, callInfo)
	mock.lockUpdateAccountPasswordPolicyRequest.Unlock()
	return mock.UpdateAccountPasswordPolicyRequestFunc(updateAccountPasswordPolicyInput)
}

// UpdateAccountPasswordPolicyRequestCalls gets all the calls that were made to UpdateAccountPasswordPolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAccountPasswordPolicyRequestCalls())
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyRequestCalls() []struct {
	UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
} {
	var calls []struct {
		UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
	}
	mock.lockUpdateAccountPasswordPolicyRequest.RLock()
	calls = mock.calls.UpdateAccountPasswordPolicyRequest
	mock.lockUpdateAccountPasswordPolicyRequest.RUnlock()
	return calls
}

// UpdateAccountPasswordPolicyWithContext calls UpdateAccountPasswordPolicyWithContextFunc.
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyWithContext(contextMoqParam context.Context, updateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput, options ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	if mock.UpdateAccountPasswordPolicyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateAccountPasswordPolicyWithContextFunc: method is nil but IAMAPI.UpdateAccountPasswordPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		UpdateAccountPasswordPolicyInput: updateAccountPasswordPolicyInput,
		Options:                          options,
	}
	mock.lockUpdateAccountPasswordPolicyWithContext.Lock()
	mock.calls.UpdateAccountPasswordPolicyWithContext = append(mock.calls.UpdateAccountPasswordPolicyWithContext, callInfo)
	mock.lockUpdateAccountPasswordPolicyWithContext.Unlock()
	return mock.UpdateAccountPasswordPolicyWithContextFunc(contextMoqParam, updateAccountPasswordPolicyInput, options...)
}

// UpdateAccountPasswordPolicyWithContextCalls gets all the calls that were made to UpdateAccountPasswordPolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAccountPasswordPolicyWithContextCalls())
func (mock *IAMAPIMock) UpdateAccountPasswordPolicyWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		UpdateAccountPasswordPolicyInput *iam.UpdateAccountPasswordPolicyInput
		Options                          []request.Option
	}
	mock.lockUpdateAccountPasswordPolicyWithContext.RLock()
	calls = mock.calls.UpdateAccountPasswordPolicyWithContext
	mock.lockUpdateAccountPasswordPolicyWithContext.RUnlock()
	return calls
}

// UpdateAssumeRolePolicy calls UpdateAssumeRolePolicyFunc.
func (mock *IAMAPIMock) UpdateAssumeRolePolicy(updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	if mock.UpdateAssumeRolePolicyFunc == nil {
		panic("IAMAPIMock.UpdateAssumeRolePolicyFunc: method is nil but IAMAPI.UpdateAssumeRolePolicy was just called")
	}
	callInfo := struct {
		UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
	}{
		UpdateAssumeRolePolicyInput: updateAssumeRolePolicyInput,
	}
	mock.lockUpdateAssumeRolePolicy.Lock()
	mock.calls.UpdateAssumeRolePolicy = append(mock.calls.UpdateAssumeRolePolicy, callInfo)
	mock.lockUpdateAssumeRolePolicy.Unlock()
	return mock.UpdateAssumeRolePolicyFunc(updateAssumeRolePolicyInput)
}

// UpdateAssumeRolePolicyCalls gets all the calls that were made to UpdateAssumeRolePolicy.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAssumeRolePolicyCalls())
func (mock *IAMAPIMock) UpdateAssumeRolePolicyCalls() []struct {
	UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
} {
	var calls []struct {
		UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
	}
	mock.lockUpdateAssumeRolePolicy.RLock()
	calls = mock.calls.UpdateAssumeRolePolicy
	mock.lockUpdateAssumeRolePolicy.RUnlock()
	return calls
}

// UpdateAssumeRolePolicyRequest calls UpdateAssumeRolePolicyRequestFunc.
func (mock *IAMAPIMock) UpdateAssumeRolePolicyRequest(updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput) {
	if mock.UpdateAssumeRolePolicyRequestFunc == nil {
		panic("IAMAPIMock.UpdateAssumeRolePolicyRequestFunc: method is nil but IAMAPI.UpdateAssumeRolePolicyRequest was just called")
	}
	callInfo := struct {
		UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
	}{
		UpdateAssumeRolePolicyInput: updateAssumeRolePolicyInput,
	}
	mock.lockUpdateAssumeRolePolicyRequest.Lock()
	mock.calls.UpdateAssumeRolePolicyRequest = append(mock.calls.UpdateAssumeRolePolicyRequest, callInfo)
	mock.lockUpdateAssumeRolePolicyRequest.Unlock()
	return mock.UpdateAssumeRolePolicyRequestFunc(updateAssumeRolePolicyInput)
}

// UpdateAssumeRolePolicyRequestCalls gets all the calls that were made to UpdateAssumeRolePolicyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAssumeRolePolicyRequestCalls())
func (mock *IAMAPIMock) UpdateAssumeRolePolicyRequestCalls() []struct {
	UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
} {
	var calls []struct {
		UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
	}
	mock.lockUpdateAssumeRolePolicyRequest.RLock()
	calls = mock.calls.UpdateAssumeRolePolicyRequest
	mock.lockUpdateAssumeRolePolicyRequest.RUnlock()
	return calls
}

// UpdateAssumeRolePolicyWithContext calls UpdateAssumeRolePolicyWithContextFunc.
func (mock *IAMAPIMock) UpdateAssumeRolePolicyWithContext(contextMoqParam context.Context, updateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput, options ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
	if mock.UpdateAssumeRolePolicyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateAssumeRolePolicyWithContextFunc: method is nil but IAMAPI.UpdateAssumeRolePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		UpdateAssumeRolePolicyInput: updateAssumeRolePolicyInput,
		Options:                     options,
	}
	mock.lockUpdateAssumeRolePolicyWithContext.Lock()
	mock.calls.UpdateAssumeRolePolicyWithContext = append(mock.calls.UpdateAssumeRolePolicyWithContext, callInfo)
	mock.lockUpdateAssumeRolePolicyWithContext.Unlock()
	return mock.UpdateAssumeRolePolicyWithContextFunc(contextMoqParam, updateAssumeRolePolicyInput, options...)
}

// UpdateAssumeRolePolicyWithContextCalls gets all the calls that were made to UpdateAssumeRolePolicyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateAssumeRolePolicyWithContextCalls())
func (mock *IAMAPIMock) UpdateAssumeRolePolicyWithContextCalls() []struct {
	ContextMoqParam             context.Context
	UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		UpdateAssumeRolePolicyInput *iam.UpdateAssumeRolePolicyInput
		Options                     []request.Option
	}
	mock.lockUpdateAssumeRolePolicyWithContext.RLock()
	calls = mock.calls.UpdateAssumeRolePolicyWithContext
	mock.lockUpdateAssumeRolePolicyWithContext.RUnlock()
	return calls
}

// UpdateGroup calls UpdateGroupFunc.
func (mock *IAMAPIMock) UpdateGroup(updateGroupInput *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	if mock.UpdateGroupFunc == nil {
		panic("IAMAPIMock.UpdateGroupFunc: method is nil but IAMAPI.UpdateGroup was just called")
	}
	callInfo := struct {
		UpdateGroupInput *iam.UpdateGroupInput
	}{
		UpdateGroupInput: updateGroupInput,
	}
	mock.lockUpdateGroup.Lock()
	mock.calls.UpdateGroup = append(mock.calls.UpdateGroup, callInfo)
	mock.lockUpdateGroup.Unlock()
	return mock.UpdateGroupFunc(updateGroupInput)
}

// UpdateGroupCalls gets all the calls that were made to UpdateGroup.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateGroupCalls())
func (mock *IAMAPIMock) UpdateGroupCalls() []struct {
	UpdateGroupInput *iam.UpdateGroupInput
} {
	var calls []struct {
		UpdateGroupInput *iam.UpdateGroupInput
	}
	mock.lockUpdateGroup.RLock()
	calls = mock.calls.UpdateGroup
	mock.lockUpdateGroup.RUnlock()
	return calls
}

// UpdateGroupRequest calls UpdateGroupRequestFunc.
func (mock *IAMAPIMock) UpdateGroupRequest(updateGroupInput *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput) {
	if mock.UpdateGroupRequestFunc == nil {
		panic("IAMAPIMock.UpdateGroupRequestFunc: method is nil but IAMAPI.UpdateGroupRequest was just called")
	}
	callInfo := struct {
		UpdateGroupInput *iam.UpdateGroupInput
	}{
		UpdateGroupInput: updateGroupInput,
	}
	mock.lockUpdateGroupRequest.Lock()
	mock.calls.UpdateGroupRequest = append(mock.calls.UpdateGroupRequest, callInfo)
	mock.lockUpdateGroupRequest.Unlock()
	return mock.UpdateGroupRequestFunc(updateGroupInput)
}

// UpdateGroupRequestCalls gets all the calls that were made to UpdateGroupRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateGroupRequestCalls())
func (mock *IAMAPIMock) UpdateGroupRequestCalls() []struct {
	UpdateGroupInput *iam.UpdateGroupInput
} {
	var calls []struct {
		UpdateGroupInput *iam.UpdateGroupInput
	}
	mock.lockUpdateGroupRequest.RLock()
	calls = mock.calls.UpdateGroupRequest
	mock.lockUpdateGroupRequest.RUnlock()
	return calls
}

// UpdateGroupWithContext calls UpdateGroupWithContextFunc.
func (mock *IAMAPIMock) UpdateGroupWithContext(contextMoqParam context.Context, updateGroupInput *iam.UpdateGroupInput, options ...request.Option) (*iam.UpdateGroupOutput, error) {
	if mock.UpdateGroupWithContextFunc == nil {
		panic("IAMAPIMock.UpdateGroupWithContextFunc: method is nil but IAMAPI.UpdateGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		UpdateGroupInput *iam.UpdateGroupInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		UpdateGroupInput: updateGroupInput,
		Options:          options,
	}
	mock.lockUpdateGroupWithContext.Lock()
	mock.calls.UpdateGroupWithContext = append(mock.calls.UpdateGroupWithContext, callInfo)
	mock.lockUpdateGroupWithContext.Unlock()
	return mock.UpdateGroupWithContextFunc(contextMoqParam, updateGroupInput, options...)
}

// UpdateGroupWithContextCalls gets all the calls that were made to UpdateGroupWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateGroupWithContextCalls())
func (mock *IAMAPIMock) UpdateGroupWithContextCalls() []struct {
	ContextMoqParam  context.Context
	UpdateGroupInput *iam.UpdateGroupInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		UpdateGroupInput *iam.UpdateGroupInput
		Options          []request.Option
	}
	mock.lockUpdateGroupWithContext.RLock()
	calls = mock.calls.UpdateGroupWithContext
	mock.lockUpdateGroupWithContext.RUnlock()
	return calls
}

// UpdateLoginProfile calls UpdateLoginProfileFunc.
func (mock *IAMAPIMock) UpdateLoginProfile(updateLoginProfileInput *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	if mock.UpdateLoginProfileFunc == nil {
		panic("IAMAPIMock.UpdateLoginProfileFunc: method is nil but IAMAPI.UpdateLoginProfile was just called")
	}
	callInfo := struct {
		UpdateLoginProfileInput *iam.UpdateLoginProfileInput
	}{
		UpdateLoginProfileInput: updateLoginProfileInput,
	}
	mock.lockUpdateLoginProfile.Lock()
	mock.calls.UpdateLoginProfile = append(mock.calls.UpdateLoginProfile, callInfo)
	mock.lockUpdateLoginProfile.Unlock()
	return mock.UpdateLoginProfileFunc(updateLoginProfileInput)
}

// UpdateLoginProfileCalls gets all the calls that were made to UpdateLoginProfile.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateLoginProfileCalls())
func (mock *IAMAPIMock) UpdateLoginProfileCalls() []struct {
	UpdateLoginProfileInput *iam.UpdateLoginProfileInput
} {
	var calls []struct {
		UpdateLoginProfileInput *iam.UpdateLoginProfileInput
	}
	mock.lockUpdateLoginProfile.RLock()
	calls = mock.calls.UpdateLoginProfile
	mock.lockUpdateLoginProfile.RUnlock()
	return calls
}

// UpdateLoginProfileRequest calls UpdateLoginProfileRequestFunc.
func (mock *IAMAPIMock) UpdateLoginProfileRequest(updateLoginProfileInput *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput) {
	if mock.UpdateLoginProfileRequestFunc == nil {
		panic("IAMAPIMock.UpdateLoginProfileRequestFunc: method is nil but IAMAPI.UpdateLoginProfileRequest was just called")
	}
	callInfo := struct {
		UpdateLoginProfileInput *iam.UpdateLoginProfileInput
	}{
		UpdateLoginProfileInput: updateLoginProfileInput,
	}
	mock.lockUpdateLoginProfileRequest.Lock()
	mock.calls.UpdateLoginProfileRequest = append(mock.calls.UpdateLoginProfileRequest, callInfo)
	mock.lockUpdateLoginProfileRequest.Unlock()
	return mock.UpdateLoginProfileRequestFunc(updateLoginProfileInput)
}

// UpdateLoginProfileRequestCalls gets all the calls that were made to UpdateLoginProfileRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateLoginProfileRequestCalls())
func (mock *IAMAPIMock) UpdateLoginProfileRequestCalls() []struct {
	UpdateLoginProfileInput *iam.UpdateLoginProfileInput
} {
	var calls []struct {
		UpdateLoginProfileInput *iam.UpdateLoginProfileInput
	}
	mock.lockUpdateLoginProfileRequest.RLock()
	calls = mock.calls.UpdateLoginProfileRequest
	mock.lockUpdateLoginProfileRequest.RUnlock()
	return calls
}

// UpdateLoginProfileWithContext calls UpdateLoginProfileWithContextFunc.
func (mock *IAMAPIMock) UpdateLoginProfileWithContext(contextMoqParam context.Context, updateLoginProfileInput *iam.UpdateLoginProfileInput, options ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
	if mock.UpdateLoginProfileWithContextFunc == nil {
		panic("IAMAPIMock.UpdateLoginProfileWithContextFunc: method is nil but IAMAPI.UpdateLoginProfileWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		UpdateLoginProfileInput *iam.UpdateLoginProfileInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		UpdateLoginProfileInput: updateLoginProfileInput,
		Options:                 options,
	}
	mock.lockUpdateLoginProfileWithContext.Lock()
	mock.calls.UpdateLoginProfileWithContext = append(mock.calls.UpdateLoginProfileWithContext, callInfo)
	mock.lockUpdateLoginProfileWithContext.Unlock()
	return mock.UpdateLoginProfileWithContextFunc(contextMoqParam, updateLoginProfileInput, options...)
}

// UpdateLoginProfileWithContextCalls gets all the calls that were made to UpdateLoginProfileWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateLoginProfileWithContextCalls())
func (mock *IAMAPIMock) UpdateLoginProfileWithContextCalls() []struct {
	ContextMoqParam         context.Context
	UpdateLoginProfileInput *iam.UpdateLoginProfileInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		UpdateLoginProfileInput *iam.UpdateLoginProfileInput
		Options                 []request.Option
	}
	mock.lockUpdateLoginProfileWithContext.RLock()
	calls = mock.calls.UpdateLoginProfileWithContext
	mock.lockUpdateLoginProfileWithContext.RUnlock()
	return calls
}

// UpdateOpenIDConnectProviderThumbprint calls UpdateOpenIDConnectProviderThumbprintFunc.
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprint(updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	if mock.UpdateOpenIDConnectProviderThumbprintFunc == nil {
		panic("IAMAPIMock.UpdateOpenIDConnectProviderThumbprintFunc: method is nil but IAMAPI.UpdateOpenIDConnectProviderThumbprint was just called")
	}
	callInfo := struct {
		UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
	}{
		UpdateOpenIDConnectProviderThumbprintInput: updateOpenIDConnectProviderThumbprintInput,
	}
	mock.lockUpdateOpenIDConnectProviderThumbprint.Lock()
	mock.calls.UpdateOpenIDConnectProviderThumbprint = append(mock.calls.UpdateOpenIDConnectProviderThumbprint, callInfo)
	mock.lockUpdateOpenIDConnectProviderThumbprint.Unlock()
	return mock.UpdateOpenIDConnectProviderThumbprintFunc(updateOpenIDConnectProviderThumbprintInput)
}

// UpdateOpenIDConnectProviderThumbprintCalls gets all the calls that were made to UpdateOpenIDConnectProviderThumbprint.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateOpenIDConnectProviderThumbprintCalls())
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintCalls() []struct {
	UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
} {
	var calls []struct {
		UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
	}
	mock.lockUpdateOpenIDConnectProviderThumbprint.RLock()
	calls = mock.calls.UpdateOpenIDConnectProviderThumbprint
	mock.lockUpdateOpenIDConnectProviderThumbprint.RUnlock()
	return calls
}

// UpdateOpenIDConnectProviderThumbprintRequest calls UpdateOpenIDConnectProviderThumbprintRequestFunc.
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintRequest(updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	if mock.UpdateOpenIDConnectProviderThumbprintRequestFunc == nil {
		panic("IAMAPIMock.UpdateOpenIDConnectProviderThumbprintRequestFunc: method is nil but IAMAPI.UpdateOpenIDConnectProviderThumbprintRequest was just called")
	}
	callInfo := struct {
		UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
	}{
		UpdateOpenIDConnectProviderThumbprintInput: updateOpenIDConnectProviderThumbprintInput,
	}
	mock.lockUpdateOpenIDConnectProviderThumbprintRequest.Lock()
	mock.calls.UpdateOpenIDConnectProviderThumbprintRequest = append(mock.calls.UpdateOpenIDConnectProviderThumbprintRequest, callInfo)
	mock.lockUpdateOpenIDConnectProviderThumbprintRequest.Unlock()
	return mock.UpdateOpenIDConnectProviderThumbprintRequestFunc(updateOpenIDConnectProviderThumbprintInput)
}

// UpdateOpenIDConnectProviderThumbprintRequestCalls gets all the calls that were made to UpdateOpenIDConnectProviderThumbprintRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateOpenIDConnectProviderThumbprintRequestCalls())
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintRequestCalls() []struct {
	UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
} {
	var calls []struct {
		UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
	}
	mock.lockUpdateOpenIDConnectProviderThumbprintRequest.RLock()
	calls = mock.calls.UpdateOpenIDConnectProviderThumbprintRequest
	mock.lockUpdateOpenIDConnectProviderThumbprintRequest.RUnlock()
	return calls
}

// UpdateOpenIDConnectProviderThumbprintWithContext calls UpdateOpenIDConnectProviderThumbprintWithContextFunc.
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintWithContext(contextMoqParam context.Context, updateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput, options ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	if mock.UpdateOpenIDConnectProviderThumbprintWithContextFunc == nil {
		panic("IAMAPIMock.UpdateOpenIDConnectProviderThumbprintWithContextFunc: method is nil but IAMAPI.UpdateOpenIDConnectProviderThumbprintWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                            context.Context
		UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
		Options                                    []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		UpdateOpenIDConnectProviderThumbprintInput: updateOpenIDConnectProviderThumbprintInput,
		Options: options,
	}
	mock.lockUpdateOpenIDConnectProviderThumbprintWithContext.Lock()
	mock.calls.UpdateOpenIDConnectProviderThumbprintWithContext = append(mock.calls.UpdateOpenIDConnectProviderThumbprintWithContext, callInfo)
	mock.lockUpdateOpenIDConnectProviderThumbprintWithContext.Unlock()
	return mock.UpdateOpenIDConnectProviderThumbprintWithContextFunc(contextMoqParam, updateOpenIDConnectProviderThumbprintInput, options...)
}

// UpdateOpenIDConnectProviderThumbprintWithContextCalls gets all the calls that were made to UpdateOpenIDConnectProviderThumbprintWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateOpenIDConnectProviderThumbprintWithContextCalls())
func (mock *IAMAPIMock) UpdateOpenIDConnectProviderThumbprintWithContextCalls() []struct {
	ContextMoqParam                            context.Context
	UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
	Options                                    []request.Option
} {
	var calls []struct {
		ContextMoqParam                            context.Context
		UpdateOpenIDConnectProviderThumbprintInput *iam.UpdateOpenIDConnectProviderThumbprintInput
		Options                                    []request.Option
	}
	mock.lockUpdateOpenIDConnectProviderThumbprintWithContext.RLock()
	calls = mock.calls.UpdateOpenIDConnectProviderThumbprintWithContext
	mock.lockUpdateOpenIDConnectProviderThumbprintWithContext.RUnlock()
	return calls
}

// UpdateRole calls UpdateRoleFunc.
func (mock *IAMAPIMock) UpdateRole(updateRoleInput *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	if mock.UpdateRoleFunc == nil {
		panic("IAMAPIMock.UpdateRoleFunc: method is nil but IAMAPI.UpdateRole was just called")
	}
	callInfo := struct {
		UpdateRoleInput *iam.UpdateRoleInput
	}{
		UpdateRoleInput: updateRoleInput,
	}
	mock.lockUpdateRole.Lock()
	mock.calls.UpdateRole = append(mock.calls.UpdateRole, callInfo)
	mock.lockUpdateRole.Unlock()
	return mock.UpdateRoleFunc(updateRoleInput)
}

// UpdateRoleCalls gets all the calls that were made to UpdateRole.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateRoleCalls())
func (mock *IAMAPIMock) UpdateRoleCalls() []struct {
	UpdateRoleInput *iam.UpdateRoleInput
} {
	var calls []struct {
		UpdateRoleInput *iam.UpdateRoleInput
	}
	mock.lockUpdateRole.RLock()
	calls = mock.calls.UpdateRole
	mock.lockUpdateRole.RUnlock()
	return calls
}

// UpdateRoleDescription calls UpdateRoleDescriptionFunc.
func (mock *IAMAPIMock) UpdateRoleDescription(updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	if mock.UpdateRoleDescriptionFunc == nil {
		panic("IAMAPIMock.UpdateRoleDescriptionFunc: method is nil but IAMAPI.UpdateRoleDescription was just called")
	}
	callInfo := struct {
		UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
	}{
		UpdateRoleDescriptionInput: updateRoleDescriptionInput,
	}
	mock.lockUpdateRoleDescription.Lock()
	mock.calls.UpdateRoleDescription = append(mock.calls.UpdateRoleDescription, callInfo)
	mock.lockUpdateRoleDescription.Unlock()
	return mock.UpdateRoleDescriptionFunc(updateRoleDescriptionInput)
}

// UpdateRoleDescriptionCalls gets all the calls that were made to UpdateRoleDescription.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateRoleDescriptionCalls())
func (mock *IAMAPIMock) UpdateRoleDescriptionCalls() []struct {
	UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
} {
	var calls []struct {
		UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
	}
	mock.lockUpdateRoleDescription.RLock()
	calls = mock.calls.UpdateRoleDescription
	mock.lockUpdateRoleDescription.RUnlock()
	return calls
}

// UpdateRoleDescriptionRequest calls UpdateRoleDescriptionRequestFunc.
func (mock *IAMAPIMock) UpdateRoleDescriptionRequest(updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput) {
	if mock.UpdateRoleDescriptionRequestFunc == nil {
		panic("IAMAPIMock.UpdateRoleDescriptionRequestFunc: method is nil but IAMAPI.UpdateRoleDescriptionRequest was just called")
	}
	callInfo := struct {
		UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
	}{
		UpdateRoleDescriptionInput: updateRoleDescriptionInput,
	}
	mock.lockUpdateRoleDescriptionRequest.Lock()
	mock.calls.UpdateRoleDescriptionRequest = append(mock.calls.UpdateRoleDescriptionRequest, callInfo)
	mock.lockUpdateRoleDescriptionRequest.Unlock()
	return mock.UpdateRoleDescriptionRequestFunc(updateRoleDescriptionInput)
}

// UpdateRoleDescriptionRequestCalls gets all the calls that were made to UpdateRoleDescriptionRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateRoleDescriptionRequestCalls())
func (mock *IAMAPIMock) UpdateRoleDescriptionRequestCalls() []struct {
	UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
} {
	var calls []struct {
		UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
	}
	mock.lockUpdateRoleDescriptionRequest.RLock()
	calls = mock.calls.UpdateRoleDescriptionRequest
	mock.lockUpdateRoleDescriptionRequest.RUnlock()
	return calls
}

// UpdateRoleDescriptionWithContext calls UpdateRoleDescriptionWithContextFunc.
func (mock *IAMAPIMock) UpdateRoleDescriptionWithContext(contextMoqParam context.Context, updateRoleDescriptionInput *iam.UpdateRoleDescriptionInput, options ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
	if mock.UpdateRoleDescriptionWithContextFunc == nil {
		panic("IAMAPIMock.UpdateRoleDescriptionWithContextFunc: method is nil but IAMAPI.UpdateRoleDescriptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		UpdateRoleDescriptionInput: updateRoleDescriptionInput,
		Options:                    options,
	}
	mock.lockUpdateRoleDescriptionWithContext.Lock()
	mock.calls.UpdateRoleDescriptionWithContext = append(mock.calls.UpdateRoleDescriptionWithContext, callInfo)
	mock.lockUpdateRoleDescriptionWithContext.Unlock()
	return mock.UpdateRoleDescriptionWithContextFunc(contextMoqParam, updateRoleDescriptionInput, options...)
}

// UpdateRoleDescriptionWithContextCalls gets all the calls that were made to UpdateRoleDescriptionWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateRoleDescriptionWithContextCalls())
func (mock *IAMAPIMock) UpdateRoleDescriptionWithContextCalls() []struct {
	ContextMoqParam            context.Context
	UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		UpdateRoleDescriptionInput *iam.UpdateRoleDescriptionInput
		Options                    []request.Option
	}
	mock.lockUpdateRoleDescriptionWithContext.RLock()
	calls = mock.calls.UpdateRoleDescriptionWithContext
	mock.lockUpdateRoleDescriptionWithContext.RUnlock()
	return calls
}

// UpdateRoleRequest calls UpdateRoleRequestFunc.
func (mock *IAMAPIMock) UpdateRoleRequest(updateRoleInput *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput) {
	if mock.UpdateRoleRequestFunc == nil {
		panic("IAMAPIMock.UpdateRoleRequestFunc: method is nil but IAMAPI.UpdateRoleRequest was just called")
	}
	callInfo := struct {
		UpdateRoleInput *iam.UpdateRoleInput
	}{
		UpdateRoleInput: updateRoleInput,
	}
	mock.lockUpdateRoleRequest.Lock()
	mock.calls.UpdateRoleRequest = append(mock.calls.UpdateRoleRequest, callInfo)
	mock.lockUpdateRoleRequest.Unlock()
	return mock.UpdateRoleRequestFunc(updateRoleInput)
}

// UpdateRoleRequestCalls gets all the calls that were made to UpdateRoleRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateRoleRequestCalls())
func (mock *IAMAPIMock) UpdateRoleRequestCalls() []struct {
	UpdateRoleInput *iam.UpdateRoleInput
} {
	var calls []struct {
		UpdateRoleInput *iam.UpdateRoleInput
	}
	mock.lockUpdateRoleRequest.RLock()
	calls = mock.calls.UpdateRoleRequest
	mock.lockUpdateRoleRequest.RUnlock()
	return calls
}

// UpdateRoleWithContext calls UpdateRoleWithContextFunc.
func (mock *IAMAPIMock) UpdateRoleWithContext(contextMoqParam context.Context, updateRoleInput *iam.UpdateRoleInput, options ...request.Option) (*iam.UpdateRoleOutput, error) {
	if mock.UpdateRoleWithContextFunc == nil {
		panic("IAMAPIMock.UpdateRoleWithContextFunc: method is nil but IAMAPI.UpdateRoleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UpdateRoleInput *iam.UpdateRoleInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		UpdateRoleInput: updateRoleInput,
		Options:         options,
	}
	mock.lockUpdateRoleWithContext.Lock()
	mock.calls.UpdateRoleWithContext = append(mock.calls.UpdateRoleWithContext, callInfo)
	mock.lockUpdateRoleWithContext.Unlock()
	return mock.UpdateRoleWithContextFunc(contextMoqParam, updateRoleInput, options...)
}

// UpdateRoleWithContextCalls gets all the calls that were made to UpdateRoleWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateRoleWithContextCalls())
func (mock *IAMAPIMock) UpdateRoleWithContextCalls() []struct {
	ContextMoqParam context.Context
	UpdateRoleInput *iam.UpdateRoleInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		UpdateRoleInput *iam.UpdateRoleInput
		Options         []request.Option
	}
	mock.lockUpdateRoleWithContext.RLock()
	calls = mock.calls.UpdateRoleWithContext
	mock.lockUpdateRoleWithContext.RUnlock()
	return calls
}

// UpdateSAMLProvider calls UpdateSAMLProviderFunc.
func (mock *IAMAPIMock) UpdateSAMLProvider(updateSAMLProviderInput *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	if mock.UpdateSAMLProviderFunc == nil {
		panic("IAMAPIMock.UpdateSAMLProviderFunc: method is nil but IAMAPI.UpdateSAMLProvider was just called")
	}
	callInfo := struct {
		UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
	}{
		UpdateSAMLProviderInput: updateSAMLProviderInput,
	}
	mock.lockUpdateSAMLProvider.Lock()
	mock.calls.UpdateSAMLProvider = append(mock.calls.UpdateSAMLProvider, callInfo)
	mock.lockUpdateSAMLProvider.Unlock()
	return mock.UpdateSAMLProviderFunc(updateSAMLProviderInput)
}

// UpdateSAMLProviderCalls gets all the calls that were made to UpdateSAMLProvider.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSAMLProviderCalls())
func (mock *IAMAPIMock) UpdateSAMLProviderCalls() []struct {
	UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
} {
	var calls []struct {
		UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
	}
	mock.lockUpdateSAMLProvider.RLock()
	calls = mock.calls.UpdateSAMLProvider
	mock.lockUpdateSAMLProvider.RUnlock()
	return calls
}

// UpdateSAMLProviderRequest calls UpdateSAMLProviderRequestFunc.
func (mock *IAMAPIMock) UpdateSAMLProviderRequest(updateSAMLProviderInput *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput) {
	if mock.UpdateSAMLProviderRequestFunc == nil {
		panic("IAMAPIMock.UpdateSAMLProviderRequestFunc: method is nil but IAMAPI.UpdateSAMLProviderRequest was just called")
	}
	callInfo := struct {
		UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
	}{
		UpdateSAMLProviderInput: updateSAMLProviderInput,
	}
	mock.lockUpdateSAMLProviderRequest.Lock()
	mock.calls.UpdateSAMLProviderRequest = append(mock.calls.UpdateSAMLProviderRequest, callInfo)
	mock.lockUpdateSAMLProviderRequest.Unlock()
	return mock.UpdateSAMLProviderRequestFunc(updateSAMLProviderInput)
}

// UpdateSAMLProviderRequestCalls gets all the calls that were made to UpdateSAMLProviderRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSAMLProviderRequestCalls())
func (mock *IAMAPIMock) UpdateSAMLProviderRequestCalls() []struct {
	UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
} {
	var calls []struct {
		UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
	}
	mock.lockUpdateSAMLProviderRequest.RLock()
	calls = mock.calls.UpdateSAMLProviderRequest
	mock.lockUpdateSAMLProviderRequest.RUnlock()
	return calls
}

// UpdateSAMLProviderWithContext calls UpdateSAMLProviderWithContextFunc.
func (mock *IAMAPIMock) UpdateSAMLProviderWithContext(contextMoqParam context.Context, updateSAMLProviderInput *iam.UpdateSAMLProviderInput, options ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
	if mock.UpdateSAMLProviderWithContextFunc == nil {
		panic("IAMAPIMock.UpdateSAMLProviderWithContextFunc: method is nil but IAMAPI.UpdateSAMLProviderWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		UpdateSAMLProviderInput: updateSAMLProviderInput,
		Options:                 options,
	}
	mock.lockUpdateSAMLProviderWithContext.Lock()
	mock.calls.UpdateSAMLProviderWithContext = append(mock.calls.UpdateSAMLProviderWithContext, callInfo)
	mock.lockUpdateSAMLProviderWithContext.Unlock()
	return mock.UpdateSAMLProviderWithContextFunc(contextMoqParam, updateSAMLProviderInput, options...)
}

// UpdateSAMLProviderWithContextCalls gets all the calls that were made to UpdateSAMLProviderWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSAMLProviderWithContextCalls())
func (mock *IAMAPIMock) UpdateSAMLProviderWithContextCalls() []struct {
	ContextMoqParam         context.Context
	UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		UpdateSAMLProviderInput *iam.UpdateSAMLProviderInput
		Options                 []request.Option
	}
	mock.lockUpdateSAMLProviderWithContext.RLock()
	calls = mock.calls.UpdateSAMLProviderWithContext
	mock.lockUpdateSAMLProviderWithContext.RUnlock()
	return calls
}

// UpdateSSHPublicKey calls UpdateSSHPublicKeyFunc.
func (mock *IAMAPIMock) UpdateSSHPublicKey(updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	if mock.UpdateSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.UpdateSSHPublicKeyFunc: method is nil but IAMAPI.UpdateSSHPublicKey was just called")
	}
	callInfo := struct {
		UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
	}{
		UpdateSSHPublicKeyInput: updateSSHPublicKeyInput,
	}
	mock.lockUpdateSSHPublicKey.Lock()
	mock.calls.UpdateSSHPublicKey = append(mock.calls.UpdateSSHPublicKey, callInfo)
	mock.lockUpdateSSHPublicKey.Unlock()
	return mock.UpdateSSHPublicKeyFunc(updateSSHPublicKeyInput)
}

// UpdateSSHPublicKeyCalls gets all the calls that were made to UpdateSSHPublicKey.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSSHPublicKeyCalls())
func (mock *IAMAPIMock) UpdateSSHPublicKeyCalls() []struct {
	UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
} {
	var calls []struct {
		UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
	}
	mock.lockUpdateSSHPublicKey.RLock()
	calls = mock.calls.UpdateSSHPublicKey
	mock.lockUpdateSSHPublicKey.RUnlock()
	return calls
}

// UpdateSSHPublicKeyRequest calls UpdateSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) UpdateSSHPublicKeyRequest(updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput) {
	if mock.UpdateSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.UpdateSSHPublicKeyRequestFunc: method is nil but IAMAPI.UpdateSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
	}{
		UpdateSSHPublicKeyInput: updateSSHPublicKeyInput,
	}
	mock.lockUpdateSSHPublicKeyRequest.Lock()
	mock.calls.UpdateSSHPublicKeyRequest = append(mock.calls.UpdateSSHPublicKeyRequest, callInfo)
	mock.lockUpdateSSHPublicKeyRequest.Unlock()
	return mock.UpdateSSHPublicKeyRequestFunc(updateSSHPublicKeyInput)
}

// UpdateSSHPublicKeyRequestCalls gets all the calls that were made to UpdateSSHPublicKeyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) UpdateSSHPublicKeyRequestCalls() []struct {
	UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
} {
	var calls []struct {
		UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
	}
	mock.lockUpdateSSHPublicKeyRequest.RLock()
	calls = mock.calls.UpdateSSHPublicKeyRequest
	mock.lockUpdateSSHPublicKeyRequest.RUnlock()
	return calls
}

// UpdateSSHPublicKeyWithContext calls UpdateSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) UpdateSSHPublicKeyWithContext(contextMoqParam context.Context, updateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput, options ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
	if mock.UpdateSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.UpdateSSHPublicKeyWithContextFunc: method is nil but IAMAPI.UpdateSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		UpdateSSHPublicKeyInput: updateSSHPublicKeyInput,
		Options:                 options,
	}
	mock.lockUpdateSSHPublicKeyWithContext.Lock()
	mock.calls.UpdateSSHPublicKeyWithContext = append(mock.calls.UpdateSSHPublicKeyWithContext, callInfo)
	mock.lockUpdateSSHPublicKeyWithContext.Unlock()
	return mock.UpdateSSHPublicKeyWithContextFunc(contextMoqParam, updateSSHPublicKeyInput, options...)
}

// UpdateSSHPublicKeyWithContextCalls gets all the calls that were made to UpdateSSHPublicKeyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) UpdateSSHPublicKeyWithContextCalls() []struct {
	ContextMoqParam         context.Context
	UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		UpdateSSHPublicKeyInput *iam.UpdateSSHPublicKeyInput
		Options                 []request.Option
	}
	mock.lockUpdateSSHPublicKeyWithContext.RLock()
	calls = mock.calls.UpdateSSHPublicKeyWithContext
	mock.lockUpdateSSHPublicKeyWithContext.RUnlock()
	return calls
}

// UpdateServerCertificate calls UpdateServerCertificateFunc.
func (mock *IAMAPIMock) UpdateServerCertificate(updateServerCertificateInput *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	if mock.UpdateServerCertificateFunc == nil {
		panic("IAMAPIMock.UpdateServerCertificateFunc: method is nil but IAMAPI.UpdateServerCertificate was just called")
	}
	callInfo := struct {
		UpdateServerCertificateInput *iam.UpdateServerCertificateInput
	}{
		UpdateServerCertificateInput: updateServerCertificateInput,
	}
	mock.lockUpdateServerCertificate.Lock()
	mock.calls.UpdateServerCertificate = append(mock.calls.UpdateServerCertificate, callInfo)
	mock.lockUpdateServerCertificate.Unlock()
	return mock.UpdateServerCertificateFunc(updateServerCertificateInput)
}

// UpdateServerCertificateCalls gets all the calls that were made to UpdateServerCertificate.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateServerCertificateCalls())
func (mock *IAMAPIMock) UpdateServerCertificateCalls() []struct {
	UpdateServerCertificateInput *iam.UpdateServerCertificateInput
} {
	var calls []struct {
		UpdateServerCertificateInput *iam.UpdateServerCertificateInput
	}
	mock.lockUpdateServerCertificate.RLock()
	calls = mock.calls.UpdateServerCertificate
	mock.lockUpdateServerCertificate.RUnlock()
	return calls
}

// UpdateServerCertificateRequest calls UpdateServerCertificateRequestFunc.
func (mock *IAMAPIMock) UpdateServerCertificateRequest(updateServerCertificateInput *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput) {
	if mock.UpdateServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.UpdateServerCertificateRequestFunc: method is nil but IAMAPI.UpdateServerCertificateRequest was just called")
	}
	callInfo := struct {
		UpdateServerCertificateInput *iam.UpdateServerCertificateInput
	}{
		UpdateServerCertificateInput: updateServerCertificateInput,
	}
	mock.lockUpdateServerCertificateRequest.Lock()
	mock.calls.UpdateServerCertificateRequest = append(mock.calls.UpdateServerCertificateRequest, callInfo)
	mock.lockUpdateServerCertificateRequest.Unlock()
	return mock.UpdateServerCertificateRequestFunc(updateServerCertificateInput)
}

// UpdateServerCertificateRequestCalls gets all the calls that were made to UpdateServerCertificateRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateServerCertificateRequestCalls())
func (mock *IAMAPIMock) UpdateServerCertificateRequestCalls() []struct {
	UpdateServerCertificateInput *iam.UpdateServerCertificateInput
} {
	var calls []struct {
		UpdateServerCertificateInput *iam.UpdateServerCertificateInput
	}
	mock.lockUpdateServerCertificateRequest.RLock()
	calls = mock.calls.UpdateServerCertificateRequest
	mock.lockUpdateServerCertificateRequest.RUnlock()
	return calls
}

// UpdateServerCertificateWithContext calls UpdateServerCertificateWithContextFunc.
func (mock *IAMAPIMock) UpdateServerCertificateWithContext(contextMoqParam context.Context, updateServerCertificateInput *iam.UpdateServerCertificateInput, options ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
	if mock.UpdateServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UpdateServerCertificateWithContextFunc: method is nil but IAMAPI.UpdateServerCertificateWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		UpdateServerCertificateInput *iam.UpdateServerCertificateInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		UpdateServerCertificateInput: updateServerCertificateInput,
		Options:                      options,
	}
	mock.lockUpdateServerCertificateWithContext.Lock()
	mock.calls.UpdateServerCertificateWithContext = append(mock.calls.UpdateServerCertificateWithContext, callInfo)
	mock.lockUpdateServerCertificateWithContext.Unlock()
	return mock.UpdateServerCertificateWithContextFunc(contextMoqParam, updateServerCertificateInput, options...)
}

// UpdateServerCertificateWithContextCalls gets all the calls that were made to UpdateServerCertificateWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateServerCertificateWithContextCalls())
func (mock *IAMAPIMock) UpdateServerCertificateWithContextCalls() []struct {
	ContextMoqParam              context.Context
	UpdateServerCertificateInput *iam.UpdateServerCertificateInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		UpdateServerCertificateInput *iam.UpdateServerCertificateInput
		Options                      []request.Option
	}
	mock.lockUpdateServerCertificateWithContext.RLock()
	calls = mock.calls.UpdateServerCertificateWithContext
	mock.lockUpdateServerCertificateWithContext.RUnlock()
	return calls
}

// UpdateServiceSpecificCredential calls UpdateServiceSpecificCredentialFunc.
func (mock *IAMAPIMock) UpdateServiceSpecificCredential(updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	if mock.UpdateServiceSpecificCredentialFunc == nil {
		panic("IAMAPIMock.UpdateServiceSpecificCredentialFunc: method is nil but IAMAPI.UpdateServiceSpecificCredential was just called")
	}
	callInfo := struct {
		UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
	}{
		UpdateServiceSpecificCredentialInput: updateServiceSpecificCredentialInput,
	}
	mock.lockUpdateServiceSpecificCredential.Lock()
	mock.calls.UpdateServiceSpecificCredential = append(mock.calls.UpdateServiceSpecificCredential, callInfo)
	mock.lockUpdateServiceSpecificCredential.Unlock()
	return mock.UpdateServiceSpecificCredentialFunc(updateServiceSpecificCredentialInput)
}

// UpdateServiceSpecificCredentialCalls gets all the calls that were made to UpdateServiceSpecificCredential.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateServiceSpecificCredentialCalls())
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialCalls() []struct {
	UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
} {
	var calls []struct {
		UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
	}
	mock.lockUpdateServiceSpecificCredential.RLock()
	calls = mock.calls.UpdateServiceSpecificCredential
	mock.lockUpdateServiceSpecificCredential.RUnlock()
	return calls
}

// UpdateServiceSpecificCredentialRequest calls UpdateServiceSpecificCredentialRequestFunc.
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialRequest(updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput) {
	if mock.UpdateServiceSpecificCredentialRequestFunc == nil {
		panic("IAMAPIMock.UpdateServiceSpecificCredentialRequestFunc: method is nil but IAMAPI.UpdateServiceSpecificCredentialRequest was just called")
	}
	callInfo := struct {
		UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
	}{
		UpdateServiceSpecificCredentialInput: updateServiceSpecificCredentialInput,
	}
	mock.lockUpdateServiceSpecificCredentialRequest.Lock()
	mock.calls.UpdateServiceSpecificCredentialRequest = append(mock.calls.UpdateServiceSpecificCredentialRequest, callInfo)
	mock.lockUpdateServiceSpecificCredentialRequest.Unlock()
	return mock.UpdateServiceSpecificCredentialRequestFunc(updateServiceSpecificCredentialInput)
}

// UpdateServiceSpecificCredentialRequestCalls gets all the calls that were made to UpdateServiceSpecificCredentialRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateServiceSpecificCredentialRequestCalls())
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialRequestCalls() []struct {
	UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
} {
	var calls []struct {
		UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
	}
	mock.lockUpdateServiceSpecificCredentialRequest.RLock()
	calls = mock.calls.UpdateServiceSpecificCredentialRequest
	mock.lockUpdateServiceSpecificCredentialRequest.RUnlock()
	return calls
}

// UpdateServiceSpecificCredentialWithContext calls UpdateServiceSpecificCredentialWithContextFunc.
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialWithContext(contextMoqParam context.Context, updateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput, options ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	if mock.UpdateServiceSpecificCredentialWithContextFunc == nil {
		panic("IAMAPIMock.UpdateServiceSpecificCredentialWithContextFunc: method is nil but IAMAPI.UpdateServiceSpecificCredentialWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		UpdateServiceSpecificCredentialInput: updateServiceSpecificCredentialInput,
		Options:                              options,
	}
	mock.lockUpdateServiceSpecificCredentialWithContext.Lock()
	mock.calls.UpdateServiceSpecificCredentialWithContext = append(mock.calls.UpdateServiceSpecificCredentialWithContext, callInfo)
	mock.lockUpdateServiceSpecificCredentialWithContext.Unlock()
	return mock.UpdateServiceSpecificCredentialWithContextFunc(contextMoqParam, updateServiceSpecificCredentialInput, options...)
}

// UpdateServiceSpecificCredentialWithContextCalls gets all the calls that were made to UpdateServiceSpecificCredentialWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateServiceSpecificCredentialWithContextCalls())
func (mock *IAMAPIMock) UpdateServiceSpecificCredentialWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		UpdateServiceSpecificCredentialInput *iam.UpdateServiceSpecificCredentialInput
		Options                              []request.Option
	}
	mock.lockUpdateServiceSpecificCredentialWithContext.RLock()
	calls = mock.calls.UpdateServiceSpecificCredentialWithContext
	mock.lockUpdateServiceSpecificCredentialWithContext.RUnlock()
	return calls
}

// UpdateSigningCertificate calls UpdateSigningCertificateFunc.
func (mock *IAMAPIMock) UpdateSigningCertificate(updateSigningCertificateInput *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	if mock.UpdateSigningCertificateFunc == nil {
		panic("IAMAPIMock.UpdateSigningCertificateFunc: method is nil but IAMAPI.UpdateSigningCertificate was just called")
	}
	callInfo := struct {
		UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
	}{
		UpdateSigningCertificateInput: updateSigningCertificateInput,
	}
	mock.lockUpdateSigningCertificate.Lock()
	mock.calls.UpdateSigningCertificate = append(mock.calls.UpdateSigningCertificate, callInfo)
	mock.lockUpdateSigningCertificate.Unlock()
	return mock.UpdateSigningCertificateFunc(updateSigningCertificateInput)
}

// UpdateSigningCertificateCalls gets all the calls that were made to UpdateSigningCertificate.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSigningCertificateCalls())
func (mock *IAMAPIMock) UpdateSigningCertificateCalls() []struct {
	UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
} {
	var calls []struct {
		UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
	}
	mock.lockUpdateSigningCertificate.RLock()
	calls = mock.calls.UpdateSigningCertificate
	mock.lockUpdateSigningCertificate.RUnlock()
	return calls
}

// UpdateSigningCertificateRequest calls UpdateSigningCertificateRequestFunc.
func (mock *IAMAPIMock) UpdateSigningCertificateRequest(updateSigningCertificateInput *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput) {
	if mock.UpdateSigningCertificateRequestFunc == nil {
		panic("IAMAPIMock.UpdateSigningCertificateRequestFunc: method is nil but IAMAPI.UpdateSigningCertificateRequest was just called")
	}
	callInfo := struct {
		UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
	}{
		UpdateSigningCertificateInput: updateSigningCertificateInput,
	}
	mock.lockUpdateSigningCertificateRequest.Lock()
	mock.calls.UpdateSigningCertificateRequest = append(mock.calls.UpdateSigningCertificateRequest, callInfo)
	mock.lockUpdateSigningCertificateRequest.Unlock()
	return mock.UpdateSigningCertificateRequestFunc(updateSigningCertificateInput)
}

// UpdateSigningCertificateRequestCalls gets all the calls that were made to UpdateSigningCertificateRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSigningCertificateRequestCalls())
func (mock *IAMAPIMock) UpdateSigningCertificateRequestCalls() []struct {
	UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
} {
	var calls []struct {
		UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
	}
	mock.lockUpdateSigningCertificateRequest.RLock()
	calls = mock.calls.UpdateSigningCertificateRequest
	mock.lockUpdateSigningCertificateRequest.RUnlock()
	return calls
}

// UpdateSigningCertificateWithContext calls UpdateSigningCertificateWithContextFunc.
func (mock *IAMAPIMock) UpdateSigningCertificateWithContext(contextMoqParam context.Context, updateSigningCertificateInput *iam.UpdateSigningCertificateInput, options ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
	if mock.UpdateSigningCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UpdateSigningCertificateWithContextFunc: method is nil but IAMAPI.UpdateSigningCertificateWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		UpdateSigningCertificateInput: updateSigningCertificateInput,
		Options:                       options,
	}
	mock.lockUpdateSigningCertificateWithContext.Lock()
	mock.calls.UpdateSigningCertificateWithContext = append(mock.calls.UpdateSigningCertificateWithContext, callInfo)
	mock.lockUpdateSigningCertificateWithContext.Unlock()
	return mock.UpdateSigningCertificateWithContextFunc(contextMoqParam, updateSigningCertificateInput, options...)
}

// UpdateSigningCertificateWithContextCalls gets all the calls that were made to UpdateSigningCertificateWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateSigningCertificateWithContextCalls())
func (mock *IAMAPIMock) UpdateSigningCertificateWithContextCalls() []struct {
	ContextMoqParam               context.Context
	UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		UpdateSigningCertificateInput *iam.UpdateSigningCertificateInput
		Options                       []request.Option
	}
	mock.lockUpdateSigningCertificateWithContext.RLock()
	calls = mock.calls.UpdateSigningCertificateWithContext
	mock.lockUpdateSigningCertificateWithContext.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *IAMAPIMock) UpdateUser(updateUserInput *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	if mock.UpdateUserFunc == nil {
		panic("IAMAPIMock.UpdateUserFunc: method is nil but IAMAPI.UpdateUser was just called")
	}
	callInfo := struct {
		UpdateUserInput *iam.UpdateUserInput
	}{
		UpdateUserInput: updateUserInput,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(updateUserInput)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateUserCalls())
func (mock *IAMAPIMock) UpdateUserCalls() []struct {
	UpdateUserInput *iam.UpdateUserInput
} {
	var calls []struct {
		UpdateUserInput *iam.UpdateUserInput
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}

// UpdateUserRequest calls UpdateUserRequestFunc.
func (mock *IAMAPIMock) UpdateUserRequest(updateUserInput *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput) {
	if mock.UpdateUserRequestFunc == nil {
		panic("IAMAPIMock.UpdateUserRequestFunc: method is nil but IAMAPI.UpdateUserRequest was just called")
	}
	callInfo := struct {
		UpdateUserInput *iam.UpdateUserInput
	}{
		UpdateUserInput: updateUserInput,
	}
	mock.lockUpdateUserRequest.Lock()
	mock.calls.UpdateUserRequest = append(mock.calls.UpdateUserRequest, callInfo)
	mock.lockUpdateUserRequest.Unlock()
	return mock.UpdateUserRequestFunc(updateUserInput)
}

// UpdateUserRequestCalls gets all the calls that were made to UpdateUserRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateUserRequestCalls())
func (mock *IAMAPIMock) UpdateUserRequestCalls() []struct {
	UpdateUserInput *iam.UpdateUserInput
} {
	var calls []struct {
		UpdateUserInput *iam.UpdateUserInput
	}
	mock.lockUpdateUserRequest.RLock()
	calls = mock.calls.UpdateUserRequest
	mock.lockUpdateUserRequest.RUnlock()
	return calls
}

// UpdateUserWithContext calls UpdateUserWithContextFunc.
func (mock *IAMAPIMock) UpdateUserWithContext(contextMoqParam context.Context, updateUserInput *iam.UpdateUserInput, options ...request.Option) (*iam.UpdateUserOutput, error) {
	if mock.UpdateUserWithContextFunc == nil {
		panic("IAMAPIMock.UpdateUserWithContextFunc: method is nil but IAMAPI.UpdateUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UpdateUserInput *iam.UpdateUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		UpdateUserInput: updateUserInput,
		Options:         options,
	}
	mock.lockUpdateUserWithContext.Lock()
	mock.calls.UpdateUserWithContext = append(mock.calls.UpdateUserWithContext, callInfo)
	mock.lockUpdateUserWithContext.Unlock()
	return mock.UpdateUserWithContextFunc(contextMoqParam, updateUserInput, options...)
}

// UpdateUserWithContextCalls gets all the calls that were made to UpdateUserWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UpdateUserWithContextCalls())
func (mock *IAMAPIMock) UpdateUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	UpdateUserInput *iam.UpdateUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		UpdateUserInput *iam.UpdateUserInput
		Options         []request.Option
	}
	mock.lockUpdateUserWithContext.RLock()
	calls = mock.calls.UpdateUserWithContext
	mock.lockUpdateUserWithContext.RUnlock()
	return calls
}

// UploadSSHPublicKey calls UploadSSHPublicKeyFunc.
func (mock *IAMAPIMock) UploadSSHPublicKey(uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	if mock.UploadSSHPublicKeyFunc == nil {
		panic("IAMAPIMock.UploadSSHPublicKeyFunc: method is nil but IAMAPI.UploadSSHPublicKey was just called")
	}
	callInfo := struct {
		UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
	}{
		UploadSSHPublicKeyInput: uploadSSHPublicKeyInput,
	}
	mock.lockUploadSSHPublicKey.Lock()
	mock.calls.UploadSSHPublicKey = append(mock.calls.UploadSSHPublicKey, callInfo)
	mock.lockUploadSSHPublicKey.Unlock()
	return mock.UploadSSHPublicKeyFunc(uploadSSHPublicKeyInput)
}

// UploadSSHPublicKeyCalls gets all the calls that were made to UploadSSHPublicKey.
// Check the length with:
//
//	len(mockedIAMAPI.UploadSSHPublicKeyCalls())
func (mock *IAMAPIMock) UploadSSHPublicKeyCalls() []struct {
	UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
} {
	var calls []struct {
		UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
	}
	mock.lockUploadSSHPublicKey.RLock()
	calls = mock.calls.UploadSSHPublicKey
	mock.lockUploadSSHPublicKey.RUnlock()
	return calls
}

// UploadSSHPublicKeyRequest calls UploadSSHPublicKeyRequestFunc.
func (mock *IAMAPIMock) UploadSSHPublicKeyRequest(uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput) {
	if mock.UploadSSHPublicKeyRequestFunc == nil {
		panic("IAMAPIMock.UploadSSHPublicKeyRequestFunc: method is nil but IAMAPI.UploadSSHPublicKeyRequest was just called")
	}
	callInfo := struct {
		UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
	}{
		UploadSSHPublicKeyInput: uploadSSHPublicKeyInput,
	}
	mock.lockUploadSSHPublicKeyRequest.Lock()
	mock.calls.UploadSSHPublicKeyRequest = append(mock.calls.UploadSSHPublicKeyRequest, callInfo)
	mock.lockUploadSSHPublicKeyRequest.Unlock()
	return mock.UploadSSHPublicKeyRequestFunc(uploadSSHPublicKeyInput)
}

// UploadSSHPublicKeyRequestCalls gets all the calls that were made to UploadSSHPublicKeyRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UploadSSHPublicKeyRequestCalls())
func (mock *IAMAPIMock) UploadSSHPublicKeyRequestCalls() []struct {
	UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
} {
	var calls []struct {
		UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
	}
	mock.lockUploadSSHPublicKeyRequest.RLock()
	calls = mock.calls.UploadSSHPublicKeyRequest
	mock.lockUploadSSHPublicKeyRequest.RUnlock()
	return calls
}

// UploadSSHPublicKeyWithContext calls UploadSSHPublicKeyWithContextFunc.
func (mock *IAMAPIMock) UploadSSHPublicKeyWithContext(contextMoqParam context.Context, uploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput, options ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
	if mock.UploadSSHPublicKeyWithContextFunc == nil {
		panic("IAMAPIMock.UploadSSHPublicKeyWithContextFunc: method is nil but IAMAPI.UploadSSHPublicKeyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		UploadSSHPublicKeyInput: uploadSSHPublicKeyInput,
		Options:                 options,
	}
	mock.lockUploadSSHPublicKeyWithContext.Lock()
	mock.calls.UploadSSHPublicKeyWithContext = append(mock.calls.UploadSSHPublicKeyWithContext, callInfo)
	mock.lockUploadSSHPublicKeyWithContext.Unlock()
	return mock.UploadSSHPublicKeyWithContextFunc(contextMoqParam, uploadSSHPublicKeyInput, options...)
}

// UploadSSHPublicKeyWithContextCalls gets all the calls that were made to UploadSSHPublicKeyWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UploadSSHPublicKeyWithContextCalls())
func (mock *IAMAPIMock) UploadSSHPublicKeyWithContextCalls() []struct {
	ContextMoqParam         context.Context
	UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		UploadSSHPublicKeyInput *iam.UploadSSHPublicKeyInput
		Options                 []request.Option
	}
	mock.lockUploadSSHPublicKeyWithContext.RLock()
	calls = mock.calls.UploadSSHPublicKeyWithContext
	mock.lockUploadSSHPublicKeyWithContext.RUnlock()
	return calls
}

// UploadServerCertificate calls UploadServerCertificateFunc.
func (mock *IAMAPIMock) UploadServerCertificate(uploadServerCertificateInput *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	if mock.UploadServerCertificateFunc == nil {
		panic("IAMAPIMock.UploadServerCertificateFunc: method is nil but IAMAPI.UploadServerCertificate was just called")
	}
	callInfo := struct {
		UploadServerCertificateInput *iam.UploadServerCertificateInput
	}{
		UploadServerCertificateInput: uploadServerCertificateInput,
	}
	mock.lockUploadServerCertificate.Lock()
	mock.calls.UploadServerCertificate = append(mock.calls.UploadServerCertificate, callInfo)
	mock.lockUploadServerCertificate.Unlock()
	return mock.UploadServerCertificateFunc(uploadServerCertificateInput)
}

// UploadServerCertificateCalls gets all the calls that were made to UploadServerCertificate.
// Check the length with:
//
//	len(mockedIAMAPI.UploadServerCertificateCalls())
func (mock *IAMAPIMock) UploadServerCertificateCalls() []struct {
	UploadServerCertificateInput *iam.UploadServerCertificateInput
} {
	var calls []struct {
		UploadServerCertificateInput *iam.UploadServerCertificateInput
	}
	mock.lockUploadServerCertificate.RLock()
	calls = mock.calls.UploadServerCertificate
	mock.lockUploadServerCertificate.RUnlock()
	return calls
}

// UploadServerCertificateRequest calls UploadServerCertificateRequestFunc.
func (mock *IAMAPIMock) UploadServerCertificateRequest(uploadServerCertificateInput *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput) {
	if mock.UploadServerCertificateRequestFunc == nil {
		panic("IAMAPIMock.UploadServerCertificateRequestFunc: method is nil but IAMAPI.UploadServerCertificateRequest was just called")
	}
	callInfo := struct {
		UploadServerCertificateInput *iam.UploadServerCertificateInput
	}{
		UploadServerCertificateInput: uploadServerCertificateInput,
	}
	mock.lockUploadServerCertificateRequest.Lock()
	mock.calls.UploadServerCertificateRequest = append(mock.calls.UploadServerCertificateRequest, callInfo)
	mock.lockUploadServerCertificateRequest.Unlock()
	return mock.UploadServerCertificateRequestFunc(uploadServerCertificateInput)
}

// UploadServerCertificateRequestCalls gets all the calls that were made to UploadServerCertificateRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UploadServerCertificateRequestCalls())
func (mock *IAMAPIMock) UploadServerCertificateRequestCalls() []struct {
	UploadServerCertificateInput *iam.UploadServerCertificateInput
} {
	var calls []struct {
		UploadServerCertificateInput *iam.UploadServerCertificateInput
	}
	mock.lockUploadServerCertificateRequest.RLock()
	calls = mock.calls.UploadServerCertificateRequest
	mock.lockUploadServerCertificateRequest.RUnlock()
	return calls
}

// UploadServerCertificateWithContext calls UploadServerCertificateWithContextFunc.
func (mock *IAMAPIMock) UploadServerCertificateWithContext(contextMoqParam context.Context, uploadServerCertificateInput *iam.UploadServerCertificateInput, options ...request.Option) (*iam.UploadServerCertificateOutput, error) {
	if mock.UploadServerCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UploadServerCertificateWithContextFunc: method is nil but IAMAPI.UploadServerCertificateWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		UploadServerCertificateInput *iam.UploadServerCertificateInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		UploadServerCertificateInput: uploadServerCertificateInput,
		Options:                      options,
	}
	mock.lockUploadServerCertificateWithContext.Lock()
	mock.calls.UploadServerCertificateWithContext = append(mock.calls.UploadServerCertificateWithContext, callInfo)
	mock.lockUploadServerCertificateWithContext.Unlock()
	return mock.UploadServerCertificateWithContextFunc(contextMoqParam, uploadServerCertificateInput, options...)
}

// UploadServerCertificateWithContextCalls gets all the calls that were made to UploadServerCertificateWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UploadServerCertificateWithContextCalls())
func (mock *IAMAPIMock) UploadServerCertificateWithContextCalls() []struct {
	ContextMoqParam              context.Context
	UploadServerCertificateInput *iam.UploadServerCertificateInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		UploadServerCertificateInput *iam.UploadServerCertificateInput
		Options                      []request.Option
	}
	mock.lockUploadServerCertificateWithContext.RLock()
	calls = mock.calls.UploadServerCertificateWithContext
	mock.lockUploadServerCertificateWithContext.RUnlock()
	return calls
}

// UploadSigningCertificate calls UploadSigningCertificateFunc.
func (mock *IAMAPIMock) UploadSigningCertificate(uploadSigningCertificateInput *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	if mock.UploadSigningCertificateFunc == nil {
		panic("IAMAPIMock.UploadSigningCertificateFunc: method is nil but IAMAPI.UploadSigningCertificate was just called")
	}
	callInfo := struct {
		UploadSigningCertificateInput *iam.UploadSigningCertificateInput
	}{
		UploadSigningCertificateInput: uploadSigningCertificateInput,
	}
	mock.lockUploadSigningCertificate.Lock()
	mock.calls.UploadSigningCertificate = append(mock.calls.UploadSigningCertificate, callInfo)
	mock.lockUploadSigningCertificate.Unlock()
	return mock.UploadSigningCertificateFunc(uploadSigningCertificateInput)
}

// UploadSigningCertificateCalls gets all the calls that were made to UploadSigningCertificate.
// Check the length with:
//
//	len(mockedIAMAPI.UploadSigningCertificateCalls())
func (mock *IAMAPIMock) UploadSigningCertificateCalls() []struct {
	UploadSigningCertificateInput *iam.UploadSigningCertificateInput
} {
	var calls []struct {
		UploadSigningCertificateInput *iam.UploadSigningCertificateInput
	}
	mock.lockUploadSigningCertificate.RLock()
	calls = mock.calls.UploadSigningCertificate
	mock.lockUploadSigningCertificate.RUnlock()
	return calls
}

// UploadSigningCertificateRequest calls UploadSigningCertificateRequestFunc.
func (mock *IAMAPIMock) UploadSigningCertificateRequest(uploadSigningCertificateInput *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput) {
	if mock.UploadSigningCertificateRequestFunc == nil {
		panic("IAMAPIMock.UploadSigningCertificateRequestFunc: method is nil but IAMAPI.UploadSigningCertificateRequest was just called")
	}
	callInfo := struct {
		UploadSigningCertificateInput *iam.UploadSigningCertificateInput
	}{
		UploadSigningCertificateInput: uploadSigningCertificateInput,
	}
	mock.lockUploadSigningCertificateRequest.Lock()
	mock.calls.UploadSigningCertificateRequest = append(mock.calls.UploadSigningCertificateRequest, callInfo)
	mock.lockUploadSigningCertificateRequest.Unlock()
	return mock.UploadSigningCertificateRequestFunc(uploadSigningCertificateInput)
}

// UploadSigningCertificateRequestCalls gets all the calls that were made to UploadSigningCertificateRequest.
// Check the length with:
//
//	len(mockedIAMAPI.UploadSigningCertificateRequestCalls())
func (mock *IAMAPIMock) UploadSigningCertificateRequestCalls() []struct {
	UploadSigningCertificateInput *iam.UploadSigningCertificateInput
} {
	var calls []struct {
		UploadSigningCertificateInput *iam.UploadSigningCertificateInput
	}
	mock.lockUploadSigningCertificateRequest.RLock()
	calls = mock.calls.UploadSigningCertificateRequest
	mock.lockUploadSigningCertificateRequest.RUnlock()
	return calls
}

// UploadSigningCertificateWithContext calls UploadSigningCertificateWithContextFunc.
func (mock *IAMAPIMock) UploadSigningCertificateWithContext(contextMoqParam context.Context, uploadSigningCertificateInput *iam.UploadSigningCertificateInput, options ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
	if mock.UploadSigningCertificateWithContextFunc == nil {
		panic("IAMAPIMock.UploadSigningCertificateWithContextFunc: method is nil but IAMAPI.UploadSigningCertificateWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		UploadSigningCertificateInput *iam.UploadSigningCertificateInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		UploadSigningCertificateInput: uploadSigningCertificateInput,
		Options:                       options,
	}
	mock.lockUploadSigningCertificateWithContext.Lock()
	mock.calls.UploadSigningCertificateWithContext = append(mock.calls.UploadSigningCertificateWithContext, callInfo)
	mock.lockUploadSigningCertificateWithContext.Unlock()
	return mock.UploadSigningCertificateWithContextFunc(contextMoqParam, uploadSigningCertificateInput, options...)
}

// UploadSigningCertificateWithContextCalls gets all the calls that were made to UploadSigningCertificateWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.UploadSigningCertificateWithContextCalls())
func (mock *IAMAPIMock) UploadSigningCertificateWithContextCalls() []struct {
	ContextMoqParam               context.Context
	UploadSigningCertificateInput *iam.UploadSigningCertificateInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		UploadSigningCertificateInput *iam.UploadSigningCertificateInput
		Options                       []request.Option
	}
	mock.lockUploadSigningCertificateWithContext.RLock()
	calls = mock.calls.UploadSigningCertificateWithContext
	mock.lockUploadSigningCertificateWithContext.RUnlock()
	return calls
}

// WaitUntilInstanceProfileExists calls WaitUntilInstanceProfileExistsFunc.
func (mock *IAMAPIMock) WaitUntilInstanceProfileExists(getInstanceProfileInput *iam.GetInstanceProfileInput) error {
	if mock.WaitUntilInstanceProfileExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilInstanceProfileExistsFunc: method is nil but IAMAPI.WaitUntilInstanceProfileExists was just called")
	}
	callInfo := struct {
		GetInstanceProfileInput *iam.GetInstanceProfileInput
	}{
		GetInstanceProfileInput: getInstanceProfileInput,
	}
	mock.lockWaitUntilInstanceProfileExists.Lock()
	mock.calls.WaitUntilInstanceProfileExists = append(mock.calls.WaitUntilInstanceProfileExists, callInfo)
	mock.lockWaitUntilInstanceProfileExists.Unlock()
	return mock.WaitUntilInstanceProfileExistsFunc(getInstanceProfileInput)
}

// WaitUntilInstanceProfileExistsCalls gets all the calls that were made to WaitUntilInstanceProfileExists.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilInstanceProfileExistsCalls())
func (mock *IAMAPIMock) WaitUntilInstanceProfileExistsCalls() []struct {
	GetInstanceProfileInput *iam.GetInstanceProfileInput
} {
	var calls []struct {
		GetInstanceProfileInput *iam.GetInstanceProfileInput
	}
	mock.lockWaitUntilInstanceProfileExists.RLock()
	calls = mock.calls.WaitUntilInstanceProfileExists
	mock.lockWaitUntilInstanceProfileExists.RUnlock()
	return calls
}

// WaitUntilInstanceProfileExistsWithContext calls WaitUntilInstanceProfileExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilInstanceProfileExistsWithContext(contextMoqParam context.Context, getInstanceProfileInput *iam.GetInstanceProfileInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilInstanceProfileExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilInstanceProfileExistsWithContextFunc: method is nil but IAMAPI.WaitUntilInstanceProfileExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		GetInstanceProfileInput *iam.GetInstanceProfileInput
		WaiterOptions           []request.WaiterOption
	}{
		ContextMoqParam:         contextMoqParam,
		GetInstanceProfileInput: getInstanceProfileInput,
		WaiterOptions:           waiterOptions,
	}
	mock.lockWaitUntilInstanceProfileExistsWithContext.Lock()
	mock.calls.WaitUntilInstanceProfileExistsWithContext = append(mock.calls.WaitUntilInstanceProfileExistsWithContext, callInfo)
	mock.lockWaitUntilInstanceProfileExistsWithContext.Unlock()
	return mock.WaitUntilInstanceProfileExistsWithContextFunc(contextMoqParam, getInstanceProfileInput, waiterOptions...)
}

// WaitUntilInstanceProfileExistsWithContextCalls gets all the calls that were made to WaitUntilInstanceProfileExistsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilInstanceProfileExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilInstanceProfileExistsWithContextCalls() []struct {
	ContextMoqParam         context.Context
	GetInstanceProfileInput *iam.GetInstanceProfileInput
	WaiterOptions           []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam         context.Context
		GetInstanceProfileInput *iam.GetInstanceProfileInput
		WaiterOptions           []request.WaiterOption
	}
	mock.lockWaitUntilInstanceProfileExistsWithContext.RLock()
	calls = mock.calls.WaitUntilInstanceProfileExistsWithContext
	mock.lockWaitUntilInstanceProfileExistsWithContext.RUnlock()
	return calls
}

// WaitUntilPolicyExists calls WaitUntilPolicyExistsFunc.
func (mock *IAMAPIMock) WaitUntilPolicyExists(getPolicyInput *iam.GetPolicyInput) error {
	if mock.WaitUntilPolicyExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilPolicyExistsFunc: method is nil but IAMAPI.WaitUntilPolicyExists was just called")
	}
	callInfo := struct {
		GetPolicyInput *iam.GetPolicyInput
	}{
		GetPolicyInput: getPolicyInput,
	}
	mock.lockWaitUntilPolicyExists.Lock()
	mock.calls.WaitUntilPolicyExists = append(mock.calls.WaitUntilPolicyExists, callInfo)
	mock.lockWaitUntilPolicyExists.Unlock()
	return mock.WaitUntilPolicyExistsFunc(getPolicyInput)
}

// WaitUntilPolicyExistsCalls gets all the calls that were made to WaitUntilPolicyExists.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilPolicyExistsCalls())
func (mock *IAMAPIMock) WaitUntilPolicyExistsCalls() []struct {
	GetPolicyInput *iam.GetPolicyInput
} {
	var calls []struct {
		GetPolicyInput *iam.GetPolicyInput
	}
	mock.lockWaitUntilPolicyExists.RLock()
	calls = mock.calls.WaitUntilPolicyExists
	mock.lockWaitUntilPolicyExists.RUnlock()
	return calls
}

// WaitUntilPolicyExistsWithContext calls WaitUntilPolicyExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilPolicyExistsWithContext(contextMoqParam context.Context, getPolicyInput *iam.GetPolicyInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilPolicyExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilPolicyExistsWithContextFunc: method is nil but IAMAPI.WaitUntilPolicyExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetPolicyInput  *iam.GetPolicyInput
		WaiterOptions   []request.WaiterOption
	}{
		ContextMoqParam: contextMoqParam,
		GetPolicyInput:  getPolicyInput,
		WaiterOptions:   waiterOptions,
	}
	mock.lockWaitUntilPolicyExistsWithContext.Lock()
	mock.calls.WaitUntilPolicyExistsWithContext = append(mock.calls.WaitUntilPolicyExistsWithContext, callInfo)
	mock.lockWaitUntilPolicyExistsWithContext.Unlock()
	return mock.WaitUntilPolicyExistsWithContextFunc(contextMoqParam, getPolicyInput, waiterOptions...)
}

// WaitUntilPolicyExistsWithContextCalls gets all the calls that were made to WaitUntilPolicyExistsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilPolicyExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilPolicyExistsWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetPolicyInput  *iam.GetPolicyInput
	WaiterOptions   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetPolicyInput  *iam.GetPolicyInput
		WaiterOptions   []request.WaiterOption
	}
	mock.lockWaitUntilPolicyExistsWithContext.RLock()
	calls = mock.calls.WaitUntilPolicyExistsWithContext
	mock.lockWaitUntilPolicyExistsWithContext.RUnlock()
	return calls
}

// WaitUntilRoleExists calls WaitUntilRoleExistsFunc.
func (mock *IAMAPIMock) WaitUntilRoleExists(getRoleInput *iam.GetRoleInput) error {
	if mock.WaitUntilRoleExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilRoleExistsFunc: method is nil but IAMAPI.WaitUntilRoleExists was just called")
	}
	callInfo := struct {
		GetRoleInput *iam.GetRoleInput
	}{
		GetRoleInput: getRoleInput,
	}
	mock.lockWaitUntilRoleExists.Lock()
	mock.calls.WaitUntilRoleExists = append(mock.calls.WaitUntilRoleExists, callInfo)
	mock.lockWaitUntilRoleExists.Unlock()
	return mock.WaitUntilRoleExistsFunc(getRoleInput)
}

// WaitUntilRoleExistsCalls gets all the calls that were made to WaitUntilRoleExists.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilRoleExistsCalls())
func (mock *IAMAPIMock) WaitUntilRoleExistsCalls() []struct {
	GetRoleInput *iam.GetRoleInput
} {
	var calls []struct {
		GetRoleInput *iam.GetRoleInput
	}
	mock.lockWaitUntilRoleExists.RLock()
	calls = mock.calls.WaitUntilRoleExists
	mock.lockWaitUntilRoleExists.RUnlock()
	return calls
}

// WaitUntilRoleExistsWithContext calls WaitUntilRoleExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilRoleExistsWithContext(contextMoqParam context.Context, getRoleInput *iam.GetRoleInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilRoleExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilRoleExistsWithContextFunc: method is nil but IAMAPI.WaitUntilRoleExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetRoleInput    *iam.GetRoleInput
		WaiterOptions   []request.WaiterOption
	}{
		ContextMoqParam: contextMoqParam,
		GetRoleInput:    getRoleInput,
		WaiterOptions:   waiterOptions,
	}
	mock.lockWaitUntilRoleExistsWithContext.Lock()
	mock.calls.WaitUntilRoleExistsWithContext = append(mock.calls.WaitUntilRoleExistsWithContext, callInfo)
	mock.lockWaitUntilRoleExistsWithContext.Unlock()
	return mock.WaitUntilRoleExistsWithContextFunc(contextMoqParam, getRoleInput, waiterOptions...)
}

// WaitUntilRoleExistsWithContextCalls gets all the calls that were made to WaitUntilRoleExistsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilRoleExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilRoleExistsWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetRoleInput    *iam.GetRoleInput
	WaiterOptions   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetRoleInput    *iam.GetRoleInput
		WaiterOptions   []request.WaiterOption
	}
	mock.lockWaitUntilRoleExistsWithContext.RLock()
	calls = mock.calls.WaitUntilRoleExistsWithContext
	mock.lockWaitUntilRoleExistsWithContext.RUnlock()
	return calls
}

// WaitUntilUserExists calls WaitUntilUserExistsFunc.
func (mock *IAMAPIMock) WaitUntilUserExists(getUserInput *iam.GetUserInput) error {
	if mock.WaitUntilUserExistsFunc == nil {
		panic("IAMAPIMock.WaitUntilUserExistsFunc: method is nil but IAMAPI.WaitUntilUserExists was just called")
	}
	callInfo := struct {
		GetUserInput *iam.GetUserInput
	}{
		GetUserInput: getUserInput,
	}
	mock.lockWaitUntilUserExists.Lock()
	mock.calls.WaitUntilUserExists = append(mock.calls.WaitUntilUserExists, callInfo)
	mock.lockWaitUntilUserExists.Unlock()
	return mock.WaitUntilUserExistsFunc(getUserInput)
}

// WaitUntilUserExistsCalls gets all the calls that were made to WaitUntilUserExists.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilUserExistsCalls())
func (mock *IAMAPIMock) WaitUntilUserExistsCalls() []struct {
	GetUserInput *iam.GetUserInput
} {
	var calls []struct {
		GetUserInput *iam.GetUserInput
	}
	mock.lockWaitUntilUserExists.RLock()
	calls = mock.calls.WaitUntilUserExists
	mock.lockWaitUntilUserExists.RUnlock()
	return calls
}

// WaitUntilUserExistsWithContext calls WaitUntilUserExistsWithContextFunc.
func (mock *IAMAPIMock) WaitUntilUserExistsWithContext(contextMoqParam context.Context, getUserInput *iam.GetUserInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilUserExistsWithContextFunc == nil {
		panic("IAMAPIMock.WaitUntilUserExistsWithContextFunc: method is nil but IAMAPI.WaitUntilUserExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetUserInput    *iam.GetUserInput
		WaiterOptions   []request.WaiterOption
	}{
		ContextMoqParam: contextMoqParam,
		GetUserInput:    getUserInput,
		WaiterOptions:   waiterOptions,
	}
	mock.lockWaitUntilUserExistsWithContext.Lock()
	mock.calls.WaitUntilUserExistsWithContext = append(mock.calls.WaitUntilUserExistsWithContext, callInfo)
	mock.lockWaitUntilUserExistsWithContext.Unlock()
	return mock.WaitUntilUserExistsWithContextFunc(contextMoqParam, getUserInput, waiterOptions...)
}

// WaitUntilUserExistsWithContextCalls gets all the calls that were made to WaitUntilUserExistsWithContext.
// Check the length with:
//
//	len(mockedIAMAPI.WaitUntilUserExistsWithContextCalls())
func (mock *IAMAPIMock) WaitUntilUserExistsWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetUserInput    *iam.GetUserInput
	WaiterOptions   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetUserInput    *iam.GetUserInput
		WaiterOptions   []request.WaiterOption
	}
	mock.lockWaitUntilUserExistsWithContext.RLock()
	calls = mock.calls.WaitUntilUserExistsWithContext
	mock.lockWaitUntilUserExistsWithContext.RUnlock()
	return calls
}
